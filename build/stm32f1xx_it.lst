ARM GAS  /tmp/cczl0ziS.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f1xx_it.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.NMI_Handler,"ax",%progbits
  19              		.align	2
  20              		.global	NMI_Handler
  21              		.thumb
  22              		.thumb_func
  24              	NMI_Handler:
  25              	.LFB65:
  26              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f1xx_it.c **** /**
   3:Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Src/stm32f1xx_it.c ****   * @attention
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/stm32f1xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f1xx_it.c ****   *
  12:Src/stm32f1xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/stm32f1xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Src/stm32f1xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Src/stm32f1xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/stm32f1xx_it.c ****   *
  17:Src/stm32f1xx_it.c ****   ******************************************************************************
  18:Src/stm32f1xx_it.c ****   */
  19:Src/stm32f1xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f1xx_it.c **** 
  21:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f1xx_it.c **** #include "main.h"
  23:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  24:Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  27:Src/stm32f1xx_it.c **** 
  28:Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  30:Src/stm32f1xx_it.c **** 
  31:Src/stm32f1xx_it.c **** /* USER CODE END TD */
  32:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/cczl0ziS.s 			page 2


  33:Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  35:Src/stm32f1xx_it.c ****  
  36:Src/stm32f1xx_it.c **** /* USER CODE END PD */
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** /* USER CODE END PM */
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** /* USER CODE END PV */
  47:Src/stm32f1xx_it.c **** 
  48:Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  50:Src/stm32f1xx_it.c **** 
  51:Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  52:Src/stm32f1xx_it.c **** 
  53:Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  55:Src/stm32f1xx_it.c **** 
  56:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim3;
  60:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart1;
  61:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart2;
  62:Src/stm32f1xx_it.c **** 
  63:Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  64:Src/stm32f1xx_it.c **** 
  65:Src/stm32f1xx_it.c **** /* USER CODE END EV */
  66:Src/stm32f1xx_it.c **** 
  67:Src/stm32f1xx_it.c **** /******************************************************************************/
  68:Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */ 
  69:Src/stm32f1xx_it.c **** /******************************************************************************/
  70:Src/stm32f1xx_it.c **** /**
  71:Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  72:Src/stm32f1xx_it.c ****   */
  73:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  74:Src/stm32f1xx_it.c **** {
  27              		.loc 1 74 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE65:
  36 0002 00BF     		.section	.text.HardFault_Handler,"ax",%progbits
  37              		.align	2
  38              		.global	HardFault_Handler
  39              		.thumb
  40              		.thumb_func
  42              	HardFault_Handler:
  43              	.LFB66:
ARM GAS  /tmp/cczl0ziS.s 			page 3


  75:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  76:Src/stm32f1xx_it.c **** 
  77:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  78:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  79:Src/stm32f1xx_it.c **** 
  80:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  81:Src/stm32f1xx_it.c **** }
  82:Src/stm32f1xx_it.c **** 
  83:Src/stm32f1xx_it.c **** /**
  84:Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  85:Src/stm32f1xx_it.c ****   */
  86:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  87:Src/stm32f1xx_it.c **** {
  44              		.loc 1 87 0
  45              		.cfi_startproc
  46              		@ Volatile: function does not return.
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50              	.L3:
  88:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  89:Src/stm32f1xx_it.c **** 
  90:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  91:Src/stm32f1xx_it.c ****   while (1)
  92:Src/stm32f1xx_it.c ****   {
  93:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  94:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  95:Src/stm32f1xx_it.c ****   }
  51              		.loc 1 95 0 discriminator 1
  52 0000 FEE7     		b	.L3
  53              		.cfi_endproc
  54              	.LFE66:
  56 0002 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
  57              		.align	2
  58              		.global	MemManage_Handler
  59              		.thumb
  60              		.thumb_func
  62              	MemManage_Handler:
  63              	.LFB67:
  96:Src/stm32f1xx_it.c **** }
  97:Src/stm32f1xx_it.c **** 
  98:Src/stm32f1xx_it.c **** /**
  99:Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
 100:Src/stm32f1xx_it.c ****   */
 101:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 102:Src/stm32f1xx_it.c **** {
  64              		.loc 1 102 0
  65              		.cfi_startproc
  66              		@ Volatile: function does not return.
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70              	.L5:
 103:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 104:Src/stm32f1xx_it.c **** 
 105:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 106:Src/stm32f1xx_it.c ****   while (1)
ARM GAS  /tmp/cczl0ziS.s 			page 4


 107:Src/stm32f1xx_it.c ****   {
 108:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 109:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 110:Src/stm32f1xx_it.c ****   }
  71              		.loc 1 110 0 discriminator 1
  72 0000 FEE7     		b	.L5
  73              		.cfi_endproc
  74              	.LFE67:
  76 0002 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
  77              		.align	2
  78              		.global	BusFault_Handler
  79              		.thumb
  80              		.thumb_func
  82              	BusFault_Handler:
  83              	.LFB68:
 111:Src/stm32f1xx_it.c **** }
 112:Src/stm32f1xx_it.c **** 
 113:Src/stm32f1xx_it.c **** /**
 114:Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 115:Src/stm32f1xx_it.c ****   */
 116:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 117:Src/stm32f1xx_it.c **** {
  84              		.loc 1 117 0
  85              		.cfi_startproc
  86              		@ Volatile: function does not return.
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.L7:
 118:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 119:Src/stm32f1xx_it.c **** 
 120:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 121:Src/stm32f1xx_it.c ****   while (1)
 122:Src/stm32f1xx_it.c ****   {
 123:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 124:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 125:Src/stm32f1xx_it.c ****   }
  91              		.loc 1 125 0 discriminator 1
  92 0000 FEE7     		b	.L7
  93              		.cfi_endproc
  94              	.LFE68:
  96 0002 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
  97              		.align	2
  98              		.global	UsageFault_Handler
  99              		.thumb
 100              		.thumb_func
 102              	UsageFault_Handler:
 103              	.LFB69:
 126:Src/stm32f1xx_it.c **** }
 127:Src/stm32f1xx_it.c **** 
 128:Src/stm32f1xx_it.c **** /**
 129:Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 130:Src/stm32f1xx_it.c ****   */
 131:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 132:Src/stm32f1xx_it.c **** {
 104              		.loc 1 132 0
 105              		.cfi_startproc
ARM GAS  /tmp/cczl0ziS.s 			page 5


 106              		@ Volatile: function does not return.
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110              	.L9:
 133:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 134:Src/stm32f1xx_it.c **** 
 135:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 136:Src/stm32f1xx_it.c ****   while (1)
 137:Src/stm32f1xx_it.c ****   {
 138:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 139:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 140:Src/stm32f1xx_it.c ****   }
 111              		.loc 1 140 0 discriminator 1
 112 0000 FEE7     		b	.L9
 113              		.cfi_endproc
 114              	.LFE69:
 116 0002 00BF     		.section	.text.SVC_Handler,"ax",%progbits
 117              		.align	2
 118              		.global	SVC_Handler
 119              		.thumb
 120              		.thumb_func
 122              	SVC_Handler:
 123              	.LFB70:
 141:Src/stm32f1xx_it.c **** }
 142:Src/stm32f1xx_it.c **** 
 143:Src/stm32f1xx_it.c **** /**
 144:Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 145:Src/stm32f1xx_it.c ****   */
 146:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 147:Src/stm32f1xx_it.c **** {
 124              		.loc 1 147 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129 0000 7047     		bx	lr
 130              		.cfi_endproc
 131              	.LFE70:
 133 0002 00BF     		.section	.text.DebugMon_Handler,"ax",%progbits
 134              		.align	2
 135              		.global	DebugMon_Handler
 136              		.thumb
 137              		.thumb_func
 139              	DebugMon_Handler:
 140              	.LFB71:
 148:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 149:Src/stm32f1xx_it.c **** 
 150:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 151:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 152:Src/stm32f1xx_it.c **** 
 153:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 154:Src/stm32f1xx_it.c **** }
 155:Src/stm32f1xx_it.c **** 
 156:Src/stm32f1xx_it.c **** /**
 157:Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 158:Src/stm32f1xx_it.c ****   */
ARM GAS  /tmp/cczl0ziS.s 			page 6


 159:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 160:Src/stm32f1xx_it.c **** {
 141              		.loc 1 160 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146 0000 7047     		bx	lr
 147              		.cfi_endproc
 148              	.LFE71:
 150 0002 00BF     		.section	.text.PendSV_Handler,"ax",%progbits
 151              		.align	2
 152              		.global	PendSV_Handler
 153              		.thumb
 154              		.thumb_func
 156              	PendSV_Handler:
 157              	.LFB72:
 161:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 162:Src/stm32f1xx_it.c **** 
 163:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 164:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 165:Src/stm32f1xx_it.c **** 
 166:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 167:Src/stm32f1xx_it.c **** }
 168:Src/stm32f1xx_it.c **** 
 169:Src/stm32f1xx_it.c **** /**
 170:Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 171:Src/stm32f1xx_it.c ****   */
 172:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 173:Src/stm32f1xx_it.c **** {
 158              		.loc 1 173 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163 0000 7047     		bx	lr
 164              		.cfi_endproc
 165              	.LFE72:
 167 0002 00BF     		.section	.text.SysTick_Handler,"ax",%progbits
 168              		.align	2
 169              		.global	SysTick_Handler
 170              		.thumb
 171              		.thumb_func
 173              	SysTick_Handler:
 174              	.LFB73:
 174:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 175:Src/stm32f1xx_it.c **** 
 176:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 177:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 178:Src/stm32f1xx_it.c **** 
 179:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 180:Src/stm32f1xx_it.c **** }
 181:Src/stm32f1xx_it.c **** 
 182:Src/stm32f1xx_it.c **** /**
 183:Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 184:Src/stm32f1xx_it.c ****   */
 185:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
ARM GAS  /tmp/cczl0ziS.s 			page 7


 186:Src/stm32f1xx_it.c **** {
 175              		.loc 1 186 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		.loc 1 186 0
 180 0000 08B5     		push	{r3, lr}
 181              	.LCFI0:
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 3, -8
 184              		.cfi_offset 14, -4
 187:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 188:Src/stm32f1xx_it.c **** 
 189:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 190:Src/stm32f1xx_it.c ****   HAL_IncTick();
 185              		.loc 1 190 0
 186 0002 FFF7FEFF 		bl	HAL_IncTick
 187              	.LVL0:
 188 0006 08BD     		pop	{r3, pc}
 189              		.cfi_endproc
 190              	.LFE73:
 192              		.section	.text.EXTI2_IRQHandler,"ax",%progbits
 193              		.align	2
 194              		.global	EXTI2_IRQHandler
 195              		.thumb
 196              		.thumb_func
 198              	EXTI2_IRQHandler:
 199              	.LFB74:
 191:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 192:Src/stm32f1xx_it.c **** 
 193:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 194:Src/stm32f1xx_it.c **** }
 195:Src/stm32f1xx_it.c **** 
 196:Src/stm32f1xx_it.c **** /******************************************************************************/
 197:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 198:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 199:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 200:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 201:Src/stm32f1xx_it.c **** /******************************************************************************/
 202:Src/stm32f1xx_it.c **** 
 203:Src/stm32f1xx_it.c **** /**
 204:Src/stm32f1xx_it.c ****   * @brief This function handles EXTI line2 interrupt.
 205:Src/stm32f1xx_it.c ****   */
 206:Src/stm32f1xx_it.c **** void EXTI2_IRQHandler(void)
 207:Src/stm32f1xx_it.c **** {
 200              		.loc 1 207 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204 0000 08B5     		push	{r3, lr}
 205              	.LCFI1:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 3, -8
 208              		.cfi_offset 14, -4
 208:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN EXTI2_IRQn 0 */
 209:Src/stm32f1xx_it.c **** 
 210:Src/stm32f1xx_it.c ****   /* USER CODE END EXTI2_IRQn 0 */
ARM GAS  /tmp/cczl0ziS.s 			page 8


 211:Src/stm32f1xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 209              		.loc 1 211 0
 210 0002 0420     		movs	r0, #4
 211 0004 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 212              	.LVL1:
 213 0008 08BD     		pop	{r3, pc}
 214              		.cfi_endproc
 215              	.LFE74:
 217 000a 00BF     		.section	.text.TIM3_IRQHandler,"ax",%progbits
 218              		.align	2
 219              		.global	TIM3_IRQHandler
 220              		.thumb
 221              		.thumb_func
 223              	TIM3_IRQHandler:
 224              	.LFB75:
 212:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN EXTI2_IRQn 1 */
 213:Src/stm32f1xx_it.c **** 
 214:Src/stm32f1xx_it.c ****   /* USER CODE END EXTI2_IRQn 1 */
 215:Src/stm32f1xx_it.c **** }
 216:Src/stm32f1xx_it.c **** 
 217:Src/stm32f1xx_it.c **** /**
 218:Src/stm32f1xx_it.c ****   * @brief This function handles TIM3 global interrupt.
 219:Src/stm32f1xx_it.c ****   */
 220:Src/stm32f1xx_it.c **** void TIM3_IRQHandler(void)
 221:Src/stm32f1xx_it.c **** {
 225              		.loc 1 221 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229 0000 08B5     		push	{r3, lr}
 230              	.LCFI2:
 231              		.cfi_def_cfa_offset 8
 232              		.cfi_offset 3, -8
 233              		.cfi_offset 14, -4
 222:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 0 */
 223:Src/stm32f1xx_it.c **** 
 224:Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 0 */
 225:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim3);
 234              		.loc 1 225 0
 235 0002 0248     		ldr	r0, .L19
 236 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 237              	.LVL2:
 238 0008 08BD     		pop	{r3, pc}
 239              	.L20:
 240 000a 00BF     		.align	2
 241              	.L19:
 242 000c 00000000 		.word	htim3
 243              		.cfi_endproc
 244              	.LFE75:
 246              		.section	.text.USART1_IRQHandler,"ax",%progbits
 247              		.align	2
 248              		.global	USART1_IRQHandler
 249              		.thumb
 250              		.thumb_func
 252              	USART1_IRQHandler:
 253              	.LFB76:
 226:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 1 */
ARM GAS  /tmp/cczl0ziS.s 			page 9


 227:Src/stm32f1xx_it.c **** 
 228:Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 1 */
 229:Src/stm32f1xx_it.c **** }
 230:Src/stm32f1xx_it.c **** 
 231:Src/stm32f1xx_it.c **** /**
 232:Src/stm32f1xx_it.c ****   * @brief This function handles USART1 global interrupt.
 233:Src/stm32f1xx_it.c ****   */
 234:Src/stm32f1xx_it.c **** void USART1_IRQHandler(void)
 235:Src/stm32f1xx_it.c **** {
 254              		.loc 1 235 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 0
 257              		@ frame_needed = 0, uses_anonymous_args = 0
 258 0000 08B5     		push	{r3, lr}
 259              	.LCFI3:
 260              		.cfi_def_cfa_offset 8
 261              		.cfi_offset 3, -8
 262              		.cfi_offset 14, -4
 236:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 237:Src/stm32f1xx_it.c **** 
 238:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 239:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 263              		.loc 1 239 0
 264 0002 0248     		ldr	r0, .L23
 265 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 266              	.LVL3:
 267 0008 08BD     		pop	{r3, pc}
 268              	.L24:
 269 000a 00BF     		.align	2
 270              	.L23:
 271 000c 00000000 		.word	huart1
 272              		.cfi_endproc
 273              	.LFE76:
 275              		.section	.text.USART2_IRQHandler,"ax",%progbits
 276              		.align	2
 277              		.global	USART2_IRQHandler
 278              		.thumb
 279              		.thumb_func
 281              	USART2_IRQHandler:
 282              	.LFB77:
 240:Src/stm32f1xx_it.c **** //  if(USART1->SR&(1<<5))
 241:Src/stm32f1xx_it.c **** //	  {
 242:Src/stm32f1xx_it.c **** 
 243:Src/stm32f1xx_it.c **** //         RS_buf [RS_in++] = USART1->DR;//USART_ReceiveData(USART1);	
 244:Src/stm32f1xx_it.c ****  // 	}
 245:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 246:Src/stm32f1xx_it.c **** 
 247:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 248:Src/stm32f1xx_it.c **** }
 249:Src/stm32f1xx_it.c **** 
 250:Src/stm32f1xx_it.c **** /**
 251:Src/stm32f1xx_it.c ****   * @brief This function handles USART1 global interrupt.
 252:Src/stm32f1xx_it.c ****   */
 253:Src/stm32f1xx_it.c **** void USART2_IRQHandler(void)
 254:Src/stm32f1xx_it.c **** {
 283              		.loc 1 254 0
 284              		.cfi_startproc
ARM GAS  /tmp/cczl0ziS.s 			page 10


 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287 0000 08B5     		push	{r3, lr}
 288              	.LCFI4:
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 3, -8
 291              		.cfi_offset 14, -4
 255:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 256:Src/stm32f1xx_it.c **** 
 257:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 258:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 292              		.loc 1 258 0
 293 0002 0248     		ldr	r0, .L27
 294 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 295              	.LVL4:
 296 0008 08BD     		pop	{r3, pc}
 297              	.L28:
 298 000a 00BF     		.align	2
 299              	.L27:
 300 000c 00000000 		.word	huart2
 301              		.cfi_endproc
 302              	.LFE77:
 304              		.text
 305              	.Letext0:
 306              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 307              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 308              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 309              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 310              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 311              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 312              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 313              		.file 9 "Drivers/CMSIS/Include/core_cm3.h"
 314              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 315              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/cczl0ziS.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/cczl0ziS.s:19     .text.NMI_Handler:0000000000000000 $t
     /tmp/cczl0ziS.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/cczl0ziS.s:37     .text.HardFault_Handler:0000000000000000 $t
     /tmp/cczl0ziS.s:42     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/cczl0ziS.s:57     .text.MemManage_Handler:0000000000000000 $t
     /tmp/cczl0ziS.s:62     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/cczl0ziS.s:77     .text.BusFault_Handler:0000000000000000 $t
     /tmp/cczl0ziS.s:82     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/cczl0ziS.s:97     .text.UsageFault_Handler:0000000000000000 $t
     /tmp/cczl0ziS.s:102    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/cczl0ziS.s:117    .text.SVC_Handler:0000000000000000 $t
     /tmp/cczl0ziS.s:122    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/cczl0ziS.s:134    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/cczl0ziS.s:139    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/cczl0ziS.s:151    .text.PendSV_Handler:0000000000000000 $t
     /tmp/cczl0ziS.s:156    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/cczl0ziS.s:168    .text.SysTick_Handler:0000000000000000 $t
     /tmp/cczl0ziS.s:173    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/cczl0ziS.s:193    .text.EXTI2_IRQHandler:0000000000000000 $t
     /tmp/cczl0ziS.s:198    .text.EXTI2_IRQHandler:0000000000000000 EXTI2_IRQHandler
     /tmp/cczl0ziS.s:218    .text.TIM3_IRQHandler:0000000000000000 $t
     /tmp/cczl0ziS.s:223    .text.TIM3_IRQHandler:0000000000000000 TIM3_IRQHandler
     /tmp/cczl0ziS.s:242    .text.TIM3_IRQHandler:000000000000000c $d
     /tmp/cczl0ziS.s:247    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/cczl0ziS.s:252    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/cczl0ziS.s:271    .text.USART1_IRQHandler:000000000000000c $d
     /tmp/cczl0ziS.s:276    .text.USART2_IRQHandler:0000000000000000 $t
     /tmp/cczl0ziS.s:281    .text.USART2_IRQHandler:0000000000000000 USART2_IRQHandler
     /tmp/cczl0ziS.s:300    .text.USART2_IRQHandler:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_GPIO_EXTI_IRQHandler
HAL_TIM_IRQHandler
htim3
HAL_UART_IRQHandler
huart1
huart2
