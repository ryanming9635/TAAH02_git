ARM GAS  /tmp/ccQAPZbk.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB68:
  25              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f1xx_it.c **** /**
   3:Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Src/stm32f1xx_it.c ****   * @attention
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/stm32f1xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f1xx_it.c ****   *
  12:Src/stm32f1xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/stm32f1xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Src/stm32f1xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Src/stm32f1xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/stm32f1xx_it.c ****   *
  17:Src/stm32f1xx_it.c ****   ******************************************************************************
  18:Src/stm32f1xx_it.c ****   */
  19:Src/stm32f1xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f1xx_it.c **** 
  21:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f1xx_it.c **** #include "main.h"
  23:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  24:Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  27:Src/stm32f1xx_it.c **** 
  28:Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  30:Src/stm32f1xx_it.c **** 
  31:Src/stm32f1xx_it.c **** /* USER CODE END TD */
  32:Src/stm32f1xx_it.c **** 
  33:Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccQAPZbk.s 			page 2


  34:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  35:Src/stm32f1xx_it.c ****  
  36:Src/stm32f1xx_it.c **** /* USER CODE END PD */
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** /* USER CODE END PM */
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** /* USER CODE END PV */
  47:Src/stm32f1xx_it.c **** 
  48:Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  50:Src/stm32f1xx_it.c **** 
  51:Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  52:Src/stm32f1xx_it.c **** 
  53:Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  55:Src/stm32f1xx_it.c **** 
  56:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim3;
  60:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart1;
  61:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart2;
  62:Src/stm32f1xx_it.c **** 
  63:Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  64:Src/stm32f1xx_it.c **** 
  65:Src/stm32f1xx_it.c **** /* USER CODE END EV */
  66:Src/stm32f1xx_it.c **** 
  67:Src/stm32f1xx_it.c **** /******************************************************************************/
  68:Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */ 
  69:Src/stm32f1xx_it.c **** /******************************************************************************/
  70:Src/stm32f1xx_it.c **** /**
  71:Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  72:Src/stm32f1xx_it.c ****   */
  73:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  74:Src/stm32f1xx_it.c **** {
  26              		.loc 1 74 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  75:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  76:Src/stm32f1xx_it.c **** 
  77:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  78:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  79:Src/stm32f1xx_it.c **** 
  80:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  81:Src/stm32f1xx_it.c **** }
  31              		.loc 1 81 0
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE68:
ARM GAS  /tmp/ccQAPZbk.s 			page 3


  36              		.section	.text.HardFault_Handler,"ax",%progbits
  37              		.align	1
  38              		.global	HardFault_Handler
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	HardFault_Handler:
  45              	.LFB69:
  82:Src/stm32f1xx_it.c **** 
  83:Src/stm32f1xx_it.c **** /**
  84:Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  85:Src/stm32f1xx_it.c ****   */
  86:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  87:Src/stm32f1xx_it.c **** {
  46              		.loc 1 87 0
  47              		.cfi_startproc
  48              		@ Volatile: function does not return.
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.L3:
  53 0000 FEE7     		b	.L3
  54              		.cfi_endproc
  55              	.LFE69:
  57              		.section	.text.MemManage_Handler,"ax",%progbits
  58              		.align	1
  59              		.global	MemManage_Handler
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu softvfp
  65              	MemManage_Handler:
  66              	.LFB70:
  88:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  89:Src/stm32f1xx_it.c **** 
  90:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  91:Src/stm32f1xx_it.c ****   while (1)
  92:Src/stm32f1xx_it.c ****   {
  93:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  94:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  95:Src/stm32f1xx_it.c ****   }
  96:Src/stm32f1xx_it.c **** }
  97:Src/stm32f1xx_it.c **** 
  98:Src/stm32f1xx_it.c **** /**
  99:Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
 100:Src/stm32f1xx_it.c ****   */
 101:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 102:Src/stm32f1xx_it.c **** {
  67              		.loc 1 102 0
  68              		.cfi_startproc
  69              		@ Volatile: function does not return.
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73              	.L5:
  74 0000 FEE7     		b	.L5
ARM GAS  /tmp/ccQAPZbk.s 			page 4


  75              		.cfi_endproc
  76              	.LFE70:
  78              		.section	.text.BusFault_Handler,"ax",%progbits
  79              		.align	1
  80              		.global	BusFault_Handler
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu softvfp
  86              	BusFault_Handler:
  87              	.LFB71:
 103:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 104:Src/stm32f1xx_it.c **** 
 105:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 106:Src/stm32f1xx_it.c ****   while (1)
 107:Src/stm32f1xx_it.c ****   {
 108:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 109:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 110:Src/stm32f1xx_it.c ****   }
 111:Src/stm32f1xx_it.c **** }
 112:Src/stm32f1xx_it.c **** 
 113:Src/stm32f1xx_it.c **** /**
 114:Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 115:Src/stm32f1xx_it.c ****   */
 116:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 117:Src/stm32f1xx_it.c **** {
  88              		.loc 1 117 0
  89              		.cfi_startproc
  90              		@ Volatile: function does not return.
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
  94              	.L7:
  95 0000 FEE7     		b	.L7
  96              		.cfi_endproc
  97              	.LFE71:
  99              		.section	.text.UsageFault_Handler,"ax",%progbits
 100              		.align	1
 101              		.global	UsageFault_Handler
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu softvfp
 107              	UsageFault_Handler:
 108              	.LFB72:
 118:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 119:Src/stm32f1xx_it.c **** 
 120:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 121:Src/stm32f1xx_it.c ****   while (1)
 122:Src/stm32f1xx_it.c ****   {
 123:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 124:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 125:Src/stm32f1xx_it.c ****   }
 126:Src/stm32f1xx_it.c **** }
 127:Src/stm32f1xx_it.c **** 
 128:Src/stm32f1xx_it.c **** /**
 129:Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
ARM GAS  /tmp/ccQAPZbk.s 			page 5


 130:Src/stm32f1xx_it.c ****   */
 131:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 132:Src/stm32f1xx_it.c **** {
 109              		.loc 1 132 0
 110              		.cfi_startproc
 111              		@ Volatile: function does not return.
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115              	.L9:
 116 0000 FEE7     		b	.L9
 117              		.cfi_endproc
 118              	.LFE72:
 120              		.section	.text.SVC_Handler,"ax",%progbits
 121              		.align	1
 122              		.global	SVC_Handler
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu softvfp
 128              	SVC_Handler:
 129              	.LFB73:
 133:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 134:Src/stm32f1xx_it.c **** 
 135:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 136:Src/stm32f1xx_it.c ****   while (1)
 137:Src/stm32f1xx_it.c ****   {
 138:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 139:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 140:Src/stm32f1xx_it.c ****   }
 141:Src/stm32f1xx_it.c **** }
 142:Src/stm32f1xx_it.c **** 
 143:Src/stm32f1xx_it.c **** /**
 144:Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 145:Src/stm32f1xx_it.c ****   */
 146:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 147:Src/stm32f1xx_it.c **** {
 130              		.loc 1 147 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 148:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 149:Src/stm32f1xx_it.c **** 
 150:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 151:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 152:Src/stm32f1xx_it.c **** 
 153:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 154:Src/stm32f1xx_it.c **** }
 135              		.loc 1 154 0
 136 0000 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE73:
 140              		.section	.text.DebugMon_Handler,"ax",%progbits
 141              		.align	1
 142              		.global	DebugMon_Handler
 143              		.syntax unified
ARM GAS  /tmp/ccQAPZbk.s 			page 6


 144              		.thumb
 145              		.thumb_func
 146              		.fpu softvfp
 148              	DebugMon_Handler:
 149              	.LFB74:
 155:Src/stm32f1xx_it.c **** 
 156:Src/stm32f1xx_it.c **** /**
 157:Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 158:Src/stm32f1xx_it.c ****   */
 159:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 160:Src/stm32f1xx_it.c **** {
 150              		.loc 1 160 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 161:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 162:Src/stm32f1xx_it.c **** 
 163:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 164:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 165:Src/stm32f1xx_it.c **** 
 166:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 167:Src/stm32f1xx_it.c **** }
 155              		.loc 1 167 0
 156 0000 7047     		bx	lr
 157              		.cfi_endproc
 158              	.LFE74:
 160              		.section	.text.PendSV_Handler,"ax",%progbits
 161              		.align	1
 162              		.global	PendSV_Handler
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu softvfp
 168              	PendSV_Handler:
 169              	.LFB75:
 168:Src/stm32f1xx_it.c **** 
 169:Src/stm32f1xx_it.c **** /**
 170:Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 171:Src/stm32f1xx_it.c ****   */
 172:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 173:Src/stm32f1xx_it.c **** {
 170              		.loc 1 173 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 174:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 175:Src/stm32f1xx_it.c **** 
 176:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 177:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 178:Src/stm32f1xx_it.c **** 
 179:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 180:Src/stm32f1xx_it.c **** }
 175              		.loc 1 180 0
 176 0000 7047     		bx	lr
 177              		.cfi_endproc
ARM GAS  /tmp/ccQAPZbk.s 			page 7


 178              	.LFE75:
 180              		.section	.text.SysTick_Handler,"ax",%progbits
 181              		.align	1
 182              		.global	SysTick_Handler
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu softvfp
 188              	SysTick_Handler:
 189              	.LFB76:
 181:Src/stm32f1xx_it.c **** 
 182:Src/stm32f1xx_it.c **** /**
 183:Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 184:Src/stm32f1xx_it.c ****   */
 185:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 186:Src/stm32f1xx_it.c **** {
 190              		.loc 1 186 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194 0000 08B5     		push	{r3, lr}
 195              	.LCFI0:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 3, -8
 198              		.cfi_offset 14, -4
 187:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 188:Src/stm32f1xx_it.c **** 
 189:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 190:Src/stm32f1xx_it.c ****   HAL_IncTick();
 199              		.loc 1 190 0
 200 0002 FFF7FEFF 		bl	HAL_IncTick
 201              	.LVL0:
 191:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 192:Src/stm32f1xx_it.c **** 
 193:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 194:Src/stm32f1xx_it.c **** }
 202              		.loc 1 194 0
 203 0006 08BD     		pop	{r3, pc}
 204              		.cfi_endproc
 205              	.LFE76:
 207              		.section	.text.EXTI2_IRQHandler,"ax",%progbits
 208              		.align	1
 209              		.global	EXTI2_IRQHandler
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
 213              		.fpu softvfp
 215              	EXTI2_IRQHandler:
 216              	.LFB77:
 195:Src/stm32f1xx_it.c **** 
 196:Src/stm32f1xx_it.c **** /******************************************************************************/
 197:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 198:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 199:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 200:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 201:Src/stm32f1xx_it.c **** /******************************************************************************/
 202:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccQAPZbk.s 			page 8


 203:Src/stm32f1xx_it.c **** /**
 204:Src/stm32f1xx_it.c ****   * @brief This function handles EXTI line2 interrupt.
 205:Src/stm32f1xx_it.c ****   */
 206:Src/stm32f1xx_it.c **** void EXTI2_IRQHandler(void)
 207:Src/stm32f1xx_it.c **** {
 217              		.loc 1 207 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221 0000 08B5     		push	{r3, lr}
 222              	.LCFI1:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 3, -8
 225              		.cfi_offset 14, -4
 208:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN EXTI2_IRQn 0 */
 209:Src/stm32f1xx_it.c **** 
 210:Src/stm32f1xx_it.c ****   /* USER CODE END EXTI2_IRQn 0 */
 211:Src/stm32f1xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 226              		.loc 1 211 0
 227 0002 0420     		movs	r0, #4
 228 0004 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 229              	.LVL1:
 212:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN EXTI2_IRQn 1 */
 213:Src/stm32f1xx_it.c **** 
 214:Src/stm32f1xx_it.c ****   /* USER CODE END EXTI2_IRQn 1 */
 215:Src/stm32f1xx_it.c **** }
 230              		.loc 1 215 0
 231 0008 08BD     		pop	{r3, pc}
 232              		.cfi_endproc
 233              	.LFE77:
 235              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 236              		.align	1
 237              		.global	TIM3_IRQHandler
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 241              		.fpu softvfp
 243              	TIM3_IRQHandler:
 244              	.LFB78:
 216:Src/stm32f1xx_it.c **** 
 217:Src/stm32f1xx_it.c **** /**
 218:Src/stm32f1xx_it.c ****   * @brief This function handles TIM3 global interrupt.
 219:Src/stm32f1xx_it.c ****   */
 220:Src/stm32f1xx_it.c **** void TIM3_IRQHandler(void)
 221:Src/stm32f1xx_it.c **** {
 245              		.loc 1 221 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249 0000 08B5     		push	{r3, lr}
 250              	.LCFI2:
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 3, -8
 253              		.cfi_offset 14, -4
 222:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 0 */
 223:Src/stm32f1xx_it.c **** 
 224:Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 0 */
ARM GAS  /tmp/ccQAPZbk.s 			page 9


 225:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim3);
 254              		.loc 1 225 0
 255 0002 0248     		ldr	r0, .L19
 256 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 257              	.LVL2:
 226:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 1 */
 227:Src/stm32f1xx_it.c **** 
 228:Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 1 */
 229:Src/stm32f1xx_it.c **** }
 258              		.loc 1 229 0
 259 0008 08BD     		pop	{r3, pc}
 260              	.L20:
 261 000a 00BF     		.align	2
 262              	.L19:
 263 000c 00000000 		.word	htim3
 264              		.cfi_endproc
 265              	.LFE78:
 267              		.section	.text.USART1_IRQHandler,"ax",%progbits
 268              		.align	1
 269              		.global	USART1_IRQHandler
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu softvfp
 275              	USART1_IRQHandler:
 276              	.LFB79:
 230:Src/stm32f1xx_it.c **** 
 231:Src/stm32f1xx_it.c **** /**
 232:Src/stm32f1xx_it.c ****   * @brief This function handles USART1 global interrupt.
 233:Src/stm32f1xx_it.c ****   */
 234:Src/stm32f1xx_it.c **** void USART1_IRQHandler(void)
 235:Src/stm32f1xx_it.c **** {
 277              		.loc 1 235 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281 0000 08B5     		push	{r3, lr}
 282              	.LCFI3:
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 3, -8
 285              		.cfi_offset 14, -4
 236:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 237:Src/stm32f1xx_it.c **** 
 238:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 239:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 286              		.loc 1 239 0
 287 0002 0248     		ldr	r0, .L23
 288 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 289              	.LVL3:
 240:Src/stm32f1xx_it.c **** //  if(USART1->SR&(1<<5))
 241:Src/stm32f1xx_it.c **** //	  {
 242:Src/stm32f1xx_it.c **** 
 243:Src/stm32f1xx_it.c **** //         RS_buf [RS_in++] = USART1->DR;//USART_ReceiveData(USART1);	
 244:Src/stm32f1xx_it.c ****  // 	}
 245:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 246:Src/stm32f1xx_it.c **** 
 247:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
ARM GAS  /tmp/ccQAPZbk.s 			page 10


 248:Src/stm32f1xx_it.c **** }
 290              		.loc 1 248 0
 291 0008 08BD     		pop	{r3, pc}
 292              	.L24:
 293 000a 00BF     		.align	2
 294              	.L23:
 295 000c 00000000 		.word	huart1
 296              		.cfi_endproc
 297              	.LFE79:
 299              		.section	.text.USART2_IRQHandler,"ax",%progbits
 300              		.align	1
 301              		.global	USART2_IRQHandler
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu softvfp
 307              	USART2_IRQHandler:
 308              	.LFB80:
 249:Src/stm32f1xx_it.c **** 
 250:Src/stm32f1xx_it.c **** /**
 251:Src/stm32f1xx_it.c ****   * @brief This function handles USART1 global interrupt.
 252:Src/stm32f1xx_it.c ****   */
 253:Src/stm32f1xx_it.c **** void USART2_IRQHandler(void)
 254:Src/stm32f1xx_it.c **** {
 309              		.loc 1 254 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313 0000 08B5     		push	{r3, lr}
 314              	.LCFI4:
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 3, -8
 317              		.cfi_offset 14, -4
 255:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 256:Src/stm32f1xx_it.c **** 
 257:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 258:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 318              		.loc 1 258 0
 319 0002 0248     		ldr	r0, .L27
 320 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 321              	.LVL4:
 259:Src/stm32f1xx_it.c **** //  if(USART1->SR&(1<<5))
 260:Src/stm32f1xx_it.c **** //	  {
 261:Src/stm32f1xx_it.c **** 
 262:Src/stm32f1xx_it.c **** //         RS_buf [RS_in++] = USART1->DR;//USART_ReceiveData(USART1);	
 263:Src/stm32f1xx_it.c ****  // 	}
 264:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 265:Src/stm32f1xx_it.c **** 
 266:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 267:Src/stm32f1xx_it.c **** }
 322              		.loc 1 267 0
 323 0008 08BD     		pop	{r3, pc}
 324              	.L28:
 325 000a 00BF     		.align	2
 326              	.L27:
 327 000c 00000000 		.word	huart2
 328              		.cfi_endproc
ARM GAS  /tmp/ccQAPZbk.s 			page 11


 329              	.LFE80:
 331              		.text
 332              	.Letext0:
 333              		.file 2 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_
 334              		.file 3 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 335              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 336              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 337              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 338              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 339              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 340              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 341              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 342              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 343              		.file 12 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 344              		.file 13 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 345              		.file 14 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/st
 346              		.file 15 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 347              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
ARM GAS  /tmp/ccQAPZbk.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccQAPZbk.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccQAPZbk.s:23     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccQAPZbk.s:37     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccQAPZbk.s:44     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccQAPZbk.s:58     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccQAPZbk.s:65     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccQAPZbk.s:79     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccQAPZbk.s:86     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccQAPZbk.s:100    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccQAPZbk.s:107    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccQAPZbk.s:121    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccQAPZbk.s:128    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccQAPZbk.s:141    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccQAPZbk.s:148    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccQAPZbk.s:161    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccQAPZbk.s:168    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccQAPZbk.s:181    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccQAPZbk.s:188    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccQAPZbk.s:208    .text.EXTI2_IRQHandler:0000000000000000 $t
     /tmp/ccQAPZbk.s:215    .text.EXTI2_IRQHandler:0000000000000000 EXTI2_IRQHandler
     /tmp/ccQAPZbk.s:236    .text.TIM3_IRQHandler:0000000000000000 $t
     /tmp/ccQAPZbk.s:243    .text.TIM3_IRQHandler:0000000000000000 TIM3_IRQHandler
     /tmp/ccQAPZbk.s:263    .text.TIM3_IRQHandler:000000000000000c $d
     /tmp/ccQAPZbk.s:268    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccQAPZbk.s:275    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccQAPZbk.s:295    .text.USART1_IRQHandler:000000000000000c $d
     /tmp/ccQAPZbk.s:300    .text.USART2_IRQHandler:0000000000000000 $t
     /tmp/ccQAPZbk.s:307    .text.USART2_IRQHandler:0000000000000000 USART2_IRQHandler
     /tmp/ccQAPZbk.s:327    .text.USART2_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_GPIO_EXTI_IRQHandler
HAL_TIM_IRQHandler
htim3
HAL_UART_IRQHandler
huart1
huart2
