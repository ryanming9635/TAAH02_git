ARM GAS  /tmp/cclqPDF2.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB98:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include <stdio.h>
  27:Src/main.c    **** #include <stdlib.h>
  28:Src/main.c    **** #include <ctype.h>
  29:Src/main.c    **** #include <errno.h>
  30:Src/main.c    **** #ifdef __GNUC__
  31:Src/main.c    ****     #include <sys/unistd.h>
  32:Src/main.c    **** #endif
  33:Src/main.c    **** 
  34:Src/main.c    **** #include "VXIS_Extern_Define.h"
ARM GAS  /tmp/cclqPDF2.s 			page 2


  35:Src/main.c    **** #include "sw_i2c0.h"  //TP2824
  36:Src/main.c    **** #include "sw_i2c1.h"  //VS4210
  37:Src/main.c    **** #include "sw_i2c2.h"  //IT66121
  38:Src/main.c    **** #include "VX_swi2c.h"
  39:Src/main.c    **** #include "ite66121.h"
  40:Src/main.c    **** #include "HDMI_RX_lib.h"
  41:Src/main.c    **** #include "VS4210.h"
  42:Src/main.c    **** #include "IRdef.h"
  43:Src/main.c    **** #include "TP2802.h"
  44:Src/main.c    **** #include "VX_OSD_Simple.h"
  45:Src/main.c    **** #include "monitor.h"
  46:Src/main.c    **** #include "Printf.h"
  47:Src/main.c    **** #include "Etc_eep.h"
  48:Src/main.c    **** #include 	"audio.h"
  49:Src/main.c    **** #include "keyremo.h"
  50:Src/main.c    **** #include "VX8812.h"
  51:Src/main.c    **** #include "HDMI_RX_lib.h"
  52:Src/main.c    **** 
  53:Src/main.c    **** #include "TOA_Protocol.h"
  54:Src/main.c    **** 
  55:Src/main.c    **** //#include "VS4210_param_Mode88.h"
  56:Src/main.c    **** //#include "VS4210_param_Modex26.h"
  57:Src/main.c    **** 
  58:Src/main.c    **** #include "GT911.h"
  59:Src/main.c    **** //#include "exOSDfont.h"
  60:Src/main.c    **** 
  61:Src/main.c    **** //#include "it660x.h"
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE END Includes */
  64:Src/main.c    **** 
  65:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  66:Src/main.c    **** /* USER CODE BEGIN PTD */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE END PTD */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  71:Src/main.c    **** /* USER CODE BEGIN PD */
  72:Src/main.c    **** #define RXBUFMAX 50
  73:Src/main.c    **** #define IR_Vendor_Code_ 0xFF00
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE END PD */
  76:Src/main.c    **** 
  77:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  78:Src/main.c    **** /* USER CODE BEGIN PM */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* USER CODE END PM */
  81:Src/main.c    **** 
  82:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  83:Src/main.c    **** TIM_HandleTypeDef htim3;
  84:Src/main.c    **** 
  85:Src/main.c    **** UART_HandleTypeDef huart1;
  86:Src/main.c    **** UART_HandleTypeDef huart2;
  87:Src/main.c    **** 
  88:Src/main.c    **** ADC_HandleTypeDef hadc1;
  89:Src/main.c    **** TIM_HandleTypeDef htim2;
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE BEGIN PV */
ARM GAS  /tmp/cclqPDF2.s 			page 3


  92:Src/main.c    **** volatile tByte VS4210_ADDR = 0x40 ;
  93:Src/main.c    **** volatile tByte VS8812_ADDR = 0x12 ;
  94:Src/main.c    **** #define OSD_OFF_SEC 10
  95:Src/main.c    **** 
  96:Src/main.c    **** //RX
  97:Src/main.c    **** tByte	ManVidRes;
  98:Src/main.c    **** tByte	half_scaler = 0;
  99:Src/main.c    **** tByte	DebugLevel;
 100:Src/main.c    **** tByte	DayNightLevel=0;
 101:Src/main.c    **** tWord LightSensor_ADC=0;
 102:Src/main.c    **** BYTE AutoDayNightDelay=0;
 103:Src/main.c    **** DATA BYTE PWMLevel=0x80;
 104:Src/main.c    **** BYTE TimeStep;
 105:Src/main.c    **** BYTE	PowerFlag=1;
 106:Src/main.c    **** DATA BYTE keytic=0,tptic=0;
 107:Src/main.c    **** BYTE	SelectModeType;
 108:Src/main.c    **** BYTE	Priority;
 109:Src/main.c    **** BYTE CAMA_M;	
 110:Src/main.c    **** BYTE CAMB_M;	
 111:Src/main.c    **** BYTE CAMC_M;	
 112:Src/main.c    **** BYTE CAMR_M;
 113:Src/main.c    **** BYTE OSD_MIRROR[4]={0,0,0,0};
 114:Src/main.c    **** BYTE OSD_SPEAKER[4]={0,0,0,0};
 115:Src/main.c    **** BYTE BOOT_ISSUE=1;
 116:Src/main.c    **** BYTE CURRENT_CH=0;
 117:Src/main.c    **** tByte ExOsdContent[256] ;
 118:Src/main.c    **** tByte PrebVXIS_InputMode[4]= {250,250,250,250} ;
 119:Src/main.c    **** 
 120:Src/main.c    **** int OSDPreSecCount =-1 ;
 121:Src/main.c    **** BYTE SelectInputMode=0;///0=HDMI , 1=AHD
 122:Src/main.c    **** BYTE CheckSelectInputMode=0;///0=HDMI , 1=AHD
 123:Src/main.c    **** 
 124:Src/main.c    **** //audio
 125:Src/main.c    **** tByte gPreAudioSampleFreq ;
 126:Src/main.c    **** tByte gPrebAUDO_INDEX  ;
 127:Src/main.c    **** tByte gbAUDO_INDEX = 0  ;
 128:Src/main.c    **** static tByte gAudioSampleFreq[4] ;
 129:Src/main.c    **** 
 130:Src/main.c    **** tWord gMode0LoopCount = 0 ;
 131:Src/main.c    **** tByte gMode0LoopFlg = 0 ;
 132:Src/main.c    **** tByte gMode0LoopSecCount = 0 ;
 133:Src/main.c    **** tByte gMode0LoopSecCmpVal = 10 ;
 134:Src/main.c    **** 
 135:Src/main.c    **** //Rx
 136:Src/main.c    **** static tByte bOldSignal[4] ;
 137:Src/main.c    **** tByte bSignal[4]= {0,0,0,0} ;
 138:Src/main.c    **** extern tByte PreVState[4] ;
 139:Src/main.c    **** extern tByte VState[4] ;
 140:Src/main.c    **** extern tByte AState[4] ;
 141:Src/main.c    **** 
 142:Src/main.c    **** //Tx
 143:Src/main.c    **** tByte TxCount = 0 ;
 144:Src/main.c    **** 
 145:Src/main.c    **** T_VS4210_MutiWindows pVS4210_MutiWindows1 ;
 146:Src/main.c    **** unsigned int volatile Tim1_count=0;
 147:Src/main.c    **** bit OSD_Show_Flg = 0 ;
 148:Src/main.c    **** 
ARM GAS  /tmp/cclqPDF2.s 			page 4


 149:Src/main.c    **** static int TimeOutCount ;
 150:Src/main.c    **** 
 151:Src/main.c    **** extern DATA BYTE keytic;
 152:Src/main.c    **** extern 	DATA BYTE Key;
 153:Src/main.c    **** extern 	bit KeyReady, RepeatKey;
 154:Src/main.c    **** 
 155:Src/main.c    **** extern BYTE  updn_reg[4];
 156:Src/main.c    **** extern BYTE Time5ms;
 157:Src/main.c    **** extern bit ChangeKey;
 158:Src/main.c    **** extern tByte RS_buf[BUF_MAX];
 159:Src/main.c    **** extern  tByte RS2_buf[TOA_BUF_MAX];
 160:Src/main.c    **** extern  tByte	 RS_in, RS2_in;
 161:Src/main.c    **** extern BYTE tic02;
 162:Src/main.c    **** extern WORD tic03,tic04,tic05;
 163:Src/main.c    **** extern volatile WORD  g_usTimerCounter;
 164:Src/main.c    **** extern volatile bit g_bNotifyTimer0Int;
 165:Src/main.c    **** extern BYTE	AudioVol;
 166:Src/main.c    **** extern BYTE NowModeState;
 167:Src/main.c    **** extern BYTE Disp_Input;
 168:Src/main.c    **** extern BYTE OSD_LOCKF;
 169:Src/main.c    **** extern BYTE TriggerFlag;
 170:Src/main.c    **** 
 171:Src/main.c    **** extern BYTE	MainSetSelectMode[13];
 172:Src/main.c    **** /*extern*/ tByte gabVXIS_Input_mirrorH[4];
 173:Src/main.c    **** extern tByte gWindowNum ;
 174:Src/main.c    **** 
 175:Src/main.c    **** extern BYTE TP_ACTION;
 176:Src/main.c    **** extern BYTE TP_PRES_DOWN;
 177:Src/main.c    **** extern BYTE TouchP;
 178:Src/main.c    **** extern USHORT ucTickCount;
 179:Src/main.c    **** extern bit   AccessEnable;
 180:Src/main.c    **** extern tByte TP_InputMode;
 181:Src/main.c    **** extern tByte mode[0];
 182:Src/main.c    **** 
 183:Src/main.c    **** extern tcByte VS4210_TP_bt1120_1080P_1080P_mode0_w0_88param[VS4210_INIT_NUMBER] ;
 184:Src/main.c    **** extern tcByte VS4210_TP_bt1120_720P_1080P_mode0_w0_88param[VS4210_INIT_NUMBER] ;
 185:Src/main.c    **** extern tcByte VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param[VS4210_INIT_NUMBER] ;
 186:Src/main.c    **** extern tcByte VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param[VS4210_INIT_NUMBER] ;
 187:Src/main.c    **** 
 188:Src/main.c    **** //Extern OSD 20200110-01
 189:Src/main.c    **** extern const unsigned char UserDefineFont1[40*(4+23+1)] ; //extern OSD
 190:Src/main.c    **** 
 191:Src/main.c    **** extern tcByte VS4210_hdmi1080P_1080P_mode0_w0_88param[VS4210_INIT_NUMBER];
 192:Src/main.c    **** extern tcByte VS4210_Addr_88param[VS4210_INIT_NUMBER];
 193:Src/main.c    **** 
 194:Src/main.c    **** tByte volatile gRxLoopFlg = 1 ;
 195:Src/main.c    **** T_VS4210_MutiWindows pVS4210_JointKind1 ;
 196:Src/main.c    **** 
 197:Src/main.c    **** static volatile tByte  u8PowerFlg  = 0 ;
 198:Src/main.c    **** /*static volatile */tByte  OSDSecCount = 0 ;
 199:Src/main.c    **** //static volatile 
 200:Src/main.c    **** 	tByte  OSDStateFlg = 1 ;
 201:Src/main.c    **** static volatile tByte  IR_ShiftCount = 0 ;
 202:Src/main.c    **** static volatile tDWord IR_4BYTE = 0 ;
 203:Src/main.c    **** static volatile tWord  u16Vendor ;
 204:Src/main.c    **** static volatile tByte  u8IRcode ;
 205:Src/main.c    **** static volatile tByte  u8IRCheckcode ;
ARM GAS  /tmp/cclqPDF2.s 			page 5


 206:Src/main.c    **** static volatile tByte  PreIR_Code = 0 ;
 207:Src/main.c    **** static volatile tByte  IR_Code = 0 ;
 208:Src/main.c    **** static volatile tByte  IR_StartFlg = 0 ;
 209:Src/main.c    **** static volatile tByte  IR_END_Flg = 0 ;
 210:Src/main.c    **** static volatile tByte  IR_IRQFlg = 0 ;
 211:Src/main.c    **** static volatile tByte  PreIR_IRQ_Index = 0 ;
 212:Src/main.c    **** static volatile tByte  IR_IRQ_Index = 0 ;
 213:Src/main.c    **** static volatile tWord  IR_PlusTimeVal = 0 ;
 214:Src/main.c    **** static volatile tDWord tim3count = 0 ; //10us
 215:Src/main.c    **** 
 216:Src/main.c    **** static volatile tDWord TxiCount = 0 ;
 217:Src/main.c    **** static volatile tDWord RxiCount = 0 ;
 218:Src/main.c    **** 
 219:Src/main.c    **** static char Rx_data[2],Rx2_data[2]/*, Rx_Buffer[RXBUFMAX]*/, Transfer_cplt;
 220:Src/main.c    **** static volatile int Rx_indx = 0 ;
 221:Src/main.c    **** static volatile int RxBufIndex= 0 ;
 222:Src/main.c    **** static char gRxbuf[RXBUFMAX] ;
 223:Src/main.c    **** 
 224:Src/main.c    **** static volatile int DebugFlg = 0 ;
 225:Src/main.c    **** 
 226:Src/main.c    **** //static int OutMapLoopModeIndex = VS4210_LOOP_MODE_NUMBER ;
 227:Src/main.c    **** //static tByte OutMapLoopOutSizeIndex ;
 228:Src/main.c    **** 
 229:Src/main.c    **** /* USER CODE END PV */
 230:Src/main.c    **** 
 231:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 232:Src/main.c    **** void SystemClock_Config(void);
 233:Src/main.c    **** //static void MX_ADC1_Init(void);
 234:Src/main.c    **** //static void MX_TIM2_Init(void);
 235:Src/main.c    **** static void MX_GPIO_Init(void);
 236:Src/main.c    **** static void MX_TIM3_Init(void);
 237:Src/main.c    **** static void MX_USART1_UART_Init(void);
 238:Src/main.c    **** static void MX_USART2_UART_Init(void);
 239:Src/main.c    **** 
 240:Src/main.c    **** extern void MCUTimerInitialTimerEvent(void);
 241:Src/main.c    **** extern void MCUTimerActiveTimerEvent(WORD usTime, BYTE ucEventID);
 242:Src/main.c    **** extern BYTE RS_ready(void);
 243:Src/main.c    **** extern BYTE RS2_ready(void);
 244:Src/main.c    **** 
 245:Src/main.c    **** extern void SysTimerHandler(void);
 246:Src/main.c    **** 
 247:Src/main.c    **** 
 248:Src/main.c    **** /* USER CODE BEGIN PFP */
 249:Src/main.c    **** #ifdef __GNUC__
 250:Src/main.c    **** 
 251:Src/main.c    **** // With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
 252:Src/main.c    **** 
 253:Src/main.c    **** //   set to 'Yes') calls __io_putchar()
 254:Src/main.c    **** 
 255:Src/main.c    **** int _write(int file, char *data, int len)
 256:Src/main.c    **** {
 257:Src/main.c    ****     if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 258:Src/main.c    ****     {
 259:Src/main.c    ****         errno = EBADF;
 260:Src/main.c    ****         return -1;
 261:Src/main.c    ****     }
 262:Src/main.c    ****     // arbitrary timeout 1000
ARM GAS  /tmp/cclqPDF2.s 			page 6


 263:Src/main.c    ****     HAL_StatusTypeDef status =
 264:Src/main.c    ****         HAL_UART_Transmit(&huart1, (uint8_t*)data, (uint16_t)len, 1000);
 265:Src/main.c    ****     // return # of bytes written - as best we can tell
 266:Src/main.c    ****     return (status == HAL_OK ? len : 0);
 267:Src/main.c    **** }
 268:Src/main.c    **** #else
 269:Src/main.c    **** int fputc(int ch, FILE *f)
 270:Src/main.c    **** {
 271:Src/main.c    ****     /* Place your implementation of fputc here */
 272:Src/main.c    ****     /* e.g. write a character to the USART */
 273:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 274:Src/main.c    ****     return ch;
 275:Src/main.c    **** }
 276:Src/main.c    **** #endif
 277:Src/main.c    **** 
 278:Src/main.c    **** void Audio_Sel(unsigned char mode )
 279:Src/main.c    **** {
 280:Src/main.c    ****     gbAUDO_INDEX = mode ;
 281:Src/main.c    ****     switch(mode)
 282:Src/main.c    ****     {
 283:Src/main.c    ****     case HDMI_AUDIO_NONE:
 284:Src/main.c    **** //        A_AUDIO = 1 ;
 285:Src/main.c    **** //        B_AUDIO = 1 ;
 286:Src/main.c    **** //        H1_AUDIO= 1 ;
 287:Src/main.c    **** //        H2_AUDIO= 1 ;
 288:Src/main.c    **** //        H3_AUDIO= 1 ;
 289:Src/main.c    **** //        H4_AUDIO= 1 ;
 290:Src/main.c    ****   //mask by ryan@20210126             HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_SE
 291:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_SET);
 292:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 293:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 294:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 295:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 296:Src/main.c    ****         break ;
 297:Src/main.c    **** 
 298:Src/main.c    ****     case HDMI_AUDIO_1:
 299:Src/main.c    **** //        A_AUDIO = 0 ;
 300:Src/main.c    **** //        B_AUDIO = 1 ;
 301:Src/main.c    **** //        H1_AUDIO= 0 ;
 302:Src/main.c    **** //        H2_AUDIO= 1 ;
 303:Src/main.c    **** //        H3_AUDIO= 1 ;
 304:Src/main.c    **** //        H4_AUDIO= 1 ;
 305:Src/main.c    **** 
 306:Src/main.c    ****   //mask by ryan@20210126      HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_RESET);
 307:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_SET);
 308:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_RESET);
 309:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 310:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 311:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 312:Src/main.c    **** 
 313:Src/main.c    ****         HDMI_Tx_SetAudioFs(gAudioSampleFreq[0])  ;
 314:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[0] ;
 315:Src/main.c    ****         break ;
 316:Src/main.c    **** 
 317:Src/main.c    ****     case HDMI_AUDIO_2:
 318:Src/main.c    **** //        A_AUDIO = 0 ;
 319:Src/main.c    **** //        B_AUDIO = 1 ;
ARM GAS  /tmp/cclqPDF2.s 			page 7


 320:Src/main.c    **** //        H1_AUDIO= 1 ;
 321:Src/main.c    **** //        H2_AUDIO= 0 ;
 322:Src/main.c    **** //        H3_AUDIO= 1 ;
 323:Src/main.c    **** //        H4_AUDIO= 1 ;
 324:Src/main.c    **** 
 325:Src/main.c    ****   //mask by ryan@20210126             HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_RE
 326:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_SET);
 327:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 328:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_RESET);
 329:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 330:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 331:Src/main.c    **** 
 332:Src/main.c    ****         HDMI_Tx_SetAudioFs(gAudioSampleFreq[1])  ;
 333:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[1] ;
 334:Src/main.c    ****         break ;
 335:Src/main.c    **** 
 336:Src/main.c    ****     case HDMI_AUDIO_3:
 337:Src/main.c    **** //        A_AUDIO = 1 ;
 338:Src/main.c    **** //        B_AUDIO = 0 ;
 339:Src/main.c    **** //        H1_AUDIO= 1 ;
 340:Src/main.c    **** //        H2_AUDIO= 1 ;
 341:Src/main.c    **** //        H3_AUDIO= 0 ;
 342:Src/main.c    **** //        H4_AUDIO= 1 ;
 343:Src/main.c    ****    //mask by ryan@20210126            HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_SE
 344:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_RESET);
 345:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 346:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 347:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_RESET);
 348:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 349:Src/main.c    **** 
 350:Src/main.c    ****         HDMI_Tx_SetAudioFs(gAudioSampleFreq[2])  ;
 351:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[2] ;
 352:Src/main.c    ****         break ;
 353:Src/main.c    **** 
 354:Src/main.c    ****     case HDMI_AUDIO_4:
 355:Src/main.c    **** //        A_AUDIO = 1 ;
 356:Src/main.c    **** //        B_AUDIO = 0 ;
 357:Src/main.c    **** //        H1_AUDIO= 1 ;
 358:Src/main.c    **** //        H2_AUDIO= 1 ;
 359:Src/main.c    **** //        H3_AUDIO= 1 ;
 360:Src/main.c    **** //        H4_AUDIO= 0 ;
 361:Src/main.c    ****   //mask by ryan@20210126             HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_SE
 362:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_RESET);
 363:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 364:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 365:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 366:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_RESET);
 367:Src/main.c    **** 
 368:Src/main.c    ****         HDMI_Tx_SetAudioFs(gAudioSampleFreq[3])  ;
 369:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[3] ;
 370:Src/main.c    ****         break ;
 371:Src/main.c    ****     }
 372:Src/main.c    **** }
 373:Src/main.c    **** 
 374:Src/main.c    **** void SET_Audio_Mute(unsigned char mode )
 375:Src/main.c    **** {
 376:Src/main.c    **** 
ARM GAS  /tmp/cclqPDF2.s 			page 8


 377:Src/main.c    **** if(mode==ON)
 378:Src/main.c    **** 	HAL_GPIO_WritePin(AUD_I2C_MUTE_Port,AUD_I2C_MUTE_Pin, GPIO_PIN_RESET);
 379:Src/main.c    **** else
 380:Src/main.c    **** 	HAL_GPIO_WritePin(AUD_I2C_MUTE_Port,AUD_I2C_MUTE_Pin, GPIO_PIN_SET);
 381:Src/main.c    **** 
 382:Src/main.c    **** Printf("(*SET_Audio_Mute=%d)",(WORD)mode);
 383:Src/main.c    **** 
 384:Src/main.c    **** }
 385:Src/main.c    **** 
 386:Src/main.c    **** //Sleep
 387:Src/main.c    **** /*
 388:Src/main.c    **** void msleep(unsigned int i )
 389:Src/main.c    **** {
 390:Src/main.c    ****     HAL_Delay(i);
 391:Src/main.c    **** }
 392:Src/main.c    **** */
 393:Src/main.c    **** 
 394:Src/main.c    **** /* USER CODE END PFP */
 395:Src/main.c    **** 
 396:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 397:Src/main.c    **** /* USER CODE BEGIN 0 */
 398:Src/main.c    **** 
 399:Src/main.c    **** void InitialTimerEvent(void)
 400:Src/main.c    **** {
 401:Src/main.c    **** 	MCUTimerInitialTimerEvent();  //clear all of timer event	
 402:Src/main.c    **** 
 403:Src/main.c    **** 		#if (_DEBUG_MESSAGE_SysTimerEvent==ON)
 404:Src/main.c    ****   		MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER);//for timer
 405:Src/main.c    ****   		   //	MCUTimerActiveTimerEvent(SEC(6), _SYSTEM_TIMER_EVENT_BOOT_VIDEO_DETECT);//for timer
 406:Src/main.c    ****   		//MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);//for timer
 407:Src/main.c    **** 
 408:Src/main.c    **** //	MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_UART2_CHECK);//for test
 409:Src/main.c    **** 		
 410:Src/main.c    ****      		#endif
 411:Src/main.c    **** //MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_VIDEO_RESET);			
 412:Src/main.c    **** 	/*		
 413:Src/main.c    ****      	MCUTimerActiveTimerEvent(SEC(5-2), _SYSTEM_TIMER_EVENT_BOOT_VIDEO_DETECT);//for timer
 414:Src/main.c    **** 	MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_LIGHT_SENSOR_CHECK);//for timer
 415:Src/main.c    **** 	MCUTimerActiveTimerEvent(100, _SYSTEM_TIMER_EVENT_GRN_ON);
 416:Src/main.c    **** 	MCUTimerActiveTimerEvent(SEC(1),  _SYSTEM_TIMER_EVENT_ADC_CHECK);
 417:Src/main.c    **** 	*/
 418:Src/main.c    **** }
 419:Src/main.c    **** 
 420:Src/main.c    **** void GetRS232_CMD(void)
 421:Src/main.c    **** {
 422:Src/main.c    ****     char achstr[3] ;
 423:Src/main.c    ****     char *endptr ;
 424:Src/main.c    ****     long IrNum  ;
 425:Src/main.c    ****     if (Transfer_cplt == 1)
 426:Src/main.c    ****     {
 427:Src/main.c    ****         Transfer_cplt = 0 ;
 428:Src/main.c    ****         printf("RxBufIndex=%d,str=%s\r\n",RxBufIndex, gRxbuf);
 429:Src/main.c    ****         if ( RxBufIndex >= 4 )
 430:Src/main.c    ****         {
 431:Src/main.c    ****             if ((gRxbuf[0] =='G') && (gRxbuf[3]=='g'))
 432:Src/main.c    ****             {
 433:Src/main.c    ****                 achstr[2] = '\0' ;
ARM GAS  /tmp/cclqPDF2.s 			page 9


 434:Src/main.c    ****                 memcpy(&achstr[0], &gRxbuf[1], 2 ) ;
 435:Src/main.c    ****                 IrNum = strtol(achstr, &endptr, 16) ;
 436:Src/main.c    ****                 printf("IrNum=0x%02x\r\n",(int)IrNum);
 437:Src/main.c    ****             }
 438:Src/main.c    ****             else if ((gRxbuf[0] =='S') && (gRxbuf[5]=='s'))
 439:Src/main.c    ****             {                
 440:Src/main.c    ****             }
 441:Src/main.c    ****         }
 442:Src/main.c    ****     }
 443:Src/main.c    **** }
 444:Src/main.c    **** 
 445:Src/main.c    **** //static
 446:Src/main.c    **** 	void setloopoutmode(int index)
 447:Src/main.c    **** {
 448:Src/main.c    **** /*
 449:Src/main.c    **** 	pVS4210_JointKind1.AudioChannel = HDMI_AUDIO_NONE ;
 450:Src/main.c    **** 	  pVS4210_JointKind1.DrawBoxFlg =1 ;
 451:Src/main.c    **** 	  pVS4210_JointKind1.DrawOSDFlg =0x03 ; //bits 0 ,1
 452:Src/main.c    **** //	pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE1 ;
 453:Src/main.c    **** 	  pVS4210_JointKind1.OutputSize = _OUTPUT_800x480;//_OUTPUT_1080P60 ;
 454:Src/main.c    **** */
 455:Src/main.c    ****     switch(index)
 456:Src/main.c    ****     {
 457:Src/main.c    ****     case VS4210_LOOP_MODE0_w0:
 458:Src/main.c    ****     {
 459:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w0 ;
 460:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 461:Src/main.c    **** 	 OSD_MIRROR[0]=CAMA_M;
 462:Src/main.c    **** 	 gabVXIS_Input_mirrorH[0]=CAMA_M;
 463:Src/main.c    ****         printf("VS4210_MODE0_w0\r\n") ;
 464:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 465:Src/main.c    ****         break ;
 466:Src/main.c    ****     }
 467:Src/main.c    ****     case VS4210_LOOP_MODE0_w1:
 468:Src/main.c    ****     {
 469:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w1 ;
 470:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 471:Src/main.c    ****    	 OSD_MIRROR[0]=CAMB_M;
 472:Src/main.c    **** 	 gabVXIS_Input_mirrorH[1]=CAMB_M; 
 473:Src/main.c    **** 	 OSD_SPEAKER[0]=ON;
 474:Src/main.c    ****         printf("VS4210_MODE0_w1\r\n") ;
 475:Src/main.c    ****         break ;
 476:Src/main.c    ****     }
 477:Src/main.c    ****     case VS4210_LOOP_MODE0_w2:
 478:Src/main.c    ****     {
 479:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w2 ;
 480:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 481:Src/main.c    **** 	 OSD_MIRROR[0]=CAMC_M;	
 482:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 	 
 483:Src/main.c    **** 	 OSD_SPEAKER[0]=ON;
 484:Src/main.c    ****         printf("VS4210_MODE0_w2\r\n") ;
 485:Src/main.c    ****         break ;
 486:Src/main.c    ****     }
 487:Src/main.c    ****     case VS4210_LOOP_MODE0_w3:
 488:Src/main.c    ****     {
 489:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w3 ;
 490:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
ARM GAS  /tmp/cclqPDF2.s 			page 10


 491:Src/main.c    ****    	OSD_MIRROR[0]=CAMR_M;	
 492:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 		
 493:Src/main.c    ****   	OSD_SPEAKER[0]=ON;
 494:Src/main.c    ****         printf("VS4210_MODE0_w3\r\n") ;
 495:Src/main.c    ****         break ;
 496:Src/main.c    ****     }
 497:Src/main.c    ****     case VS4210_LOOP_MODE1:
 498:Src/main.c    ****     {
 499:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE1 ;
 500:Src/main.c    **** 	
 501:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 502:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 503:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 504:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 505:Src/main.c    ****    	  OSD_MIRROR[0]=CAMA_M;	
 506:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 507:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
 508:Src/main.c    ****    	  OSD_MIRROR[3]=CAMR_M;	
 509:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 510:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 511:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		  
 512:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 		  
 513:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 514:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 515:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 516:Src/main.c    **** 	  OSD_SPEAKER[3]=ON;
 517:Src/main.c    **** 
 518:Src/main.c    ****         printf("VS4210_MODE1\r\n") ;
 519:Src/main.c    ****         break ;
 520:Src/main.c    ****     }
 521:Src/main.c    **** 	
 522:Src/main.c    ****     case VS4210_LOOP_MODE2:
 523:Src/main.c    ****     {
 524:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE2 ;
 525:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 526:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 527:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 528:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 529:Src/main.c    ****         printf("VS4210_MODE2\r\n") ;
 530:Src/main.c    ****         break ;
 531:Src/main.c    ****     }
 532:Src/main.c    **** 	#if 0
 533:Src/main.c    ****     case VS4210_LOOP_MODE8:
 534:Src/main.c    ****     {
 535:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 536:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 537:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 538:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 539:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 540:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 541:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 542:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
 543:Src/main.c    ****    	  OSD_MIRROR[3]=CAMR_M;	
 544:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 545:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 546:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		  
 547:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M;	  
ARM GAS  /tmp/cclqPDF2.s 			page 11


 548:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 549:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 550:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 551:Src/main.c    ****         printf("VS4210_MODE8 ch1 ch2 ch3\r\n") ;
 552:Src/main.c    ****         break ;
 553:Src/main.c    ****     }
 554:Src/main.c    **** 	    case VS4210_LOOP_MODE8_412:
 555:Src/main.c    ****     {
 556:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 557:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 558:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 559:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =2 ;
 560:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =0 ;
 561:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 562:Src/main.c    ****    	  OSD_MIRROR[1]=CAMA_M;	
 563:Src/main.c    ****    	  OSD_MIRROR[2]=CAMB_M;	
 564:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 565:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 566:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMB_M; 		  
 567:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 568:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 569:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 570:Src/main.c    **** 	  
 571:Src/main.c    ****       //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 572:Src/main.c    ****         printf("VS4210_MODE8 ch4 ch1 ch2\r\n") ;
 573:Src/main.c    ****         break ;
 574:Src/main.c    ****     }
 575:Src/main.c    ****      case VS4210_LOOP_MODE8_123:
 576:Src/main.c    **** 	 {
 577:Src/main.c    **** 			 pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 578:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 579:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 580:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 581:Src/main.c    **** 		   OSD_MIRROR[0]=CAMA_M; 
 582:Src/main.c    **** 		   OSD_MIRROR[1]=CAMB_M; 
 583:Src/main.c    **** 		   OSD_MIRROR[2]=CAMC_M; 
 584:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 585:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 586:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		   
 587:Src/main.c    **** 		   OSD_SPEAKER[0]=ON;
 588:Src/main.c    **** 		   OSD_SPEAKER[1]=OFF;
 589:Src/main.c    **** 		   OSD_SPEAKER[2]=OFF;
 590:Src/main.c    **** 		   
 591:Src/main.c    **** 		   //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 592:Src/main.c    **** 			 printf("VS4210_MODE8 ch1 ch2 ch3\r\n") ;
 593:Src/main.c    **** 			 break ;
 594:Src/main.c    **** 		 }
 595:Src/main.c    ****   case VS4210_LOOP_MODE8_124:
 596:Src/main.c    **** 	 {
 597:Src/main.c    **** 			 pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 598:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 599:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 600:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 601:Src/main.c    **** 		   OSD_MIRROR[0]=CAMA_M; 
 602:Src/main.c    **** 		   OSD_MIRROR[1]=CAMB_M; 
 603:Src/main.c    **** 		   OSD_MIRROR[2]=CAMR_M; 
 604:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
ARM GAS  /tmp/cclqPDF2.s 			page 12


 605:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 606:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 		   
 607:Src/main.c    **** 		   OSD_SPEAKER[0]=OFF;
 608:Src/main.c    **** 		   OSD_SPEAKER[1]=OFF;
 609:Src/main.c    **** 		   OSD_SPEAKER[2]=ON;
 610:Src/main.c    **** 		   
 611:Src/main.c    **** 		   //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 612:Src/main.c    **** 			 printf("VS4210_MODE8 ch1 ch2 ch4\r\n") ;
 613:Src/main.c    **** 			 break ;
 614:Src/main.c    **** 		 }	 
 615:Src/main.c    ****   case VS4210_LOOP_MODE8_134:
 616:Src/main.c    **** 	 {
 617:Src/main.c    **** 			 pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 618:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 619:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 620:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 621:Src/main.c    **** 		   OSD_MIRROR[0]=CAMA_M; 
 622:Src/main.c    **** 		   OSD_MIRROR[1]=CAMC_M; 
 623:Src/main.c    **** 		   OSD_MIRROR[2]=CAMR_M; 
 624:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 625:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 		  
 626:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 		   
 627:Src/main.c    **** 		   OSD_SPEAKER[0]=OFF;
 628:Src/main.c    **** 		   OSD_SPEAKER[1]=OFF;
 629:Src/main.c    **** 		   OSD_SPEAKER[2]=ON;
 630:Src/main.c    **** 		   //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 631:Src/main.c    **** 			 printf("VS4210_MODE8 ch1 ch3 ch4\r\n") ;
 632:Src/main.c    **** 			 break ;
 633:Src/main.c    **** 		 }	 
 634:Src/main.c    **** //=============
 635:Src/main.c    **** case VS4210_LOOP_MODE8_213:
 636:Src/main.c    ****    {
 637:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 638:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 639:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 640:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 641:Src/main.c    **** 		 OSD_MIRROR[0]=CAMB_M; 
 642:Src/main.c    **** 		 OSD_MIRROR[1]=CAMA_M; 
 643:Src/main.c    **** 		 OSD_MIRROR[2]=CAMC_M; 
 644:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMB_M; 		  
 645:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 646:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 			 
 647:Src/main.c    **** 		 OSD_SPEAKER[0]=ON;
 648:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 649:Src/main.c    **** 		 OSD_SPEAKER[2]=OFF;
 650:Src/main.c    **** 		 
 651:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 652:Src/main.c    **** 		   printf("VS4210_MODE8 ch2 ch1 ch3\r\n") ;
 653:Src/main.c    **** 		   break ;
 654:Src/main.c    **** 	   }   
 655:Src/main.c    **** case VS4210_LOOP_MODE8_214:
 656:Src/main.c    ****    {
 657:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 658:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 659:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 660:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 661:Src/main.c    **** 		 OSD_MIRROR[0]=CAMB_M; 
ARM GAS  /tmp/cclqPDF2.s 			page 13


 662:Src/main.c    **** 		 OSD_MIRROR[1]=CAMA_M; 
 663:Src/main.c    **** 		 OSD_MIRROR[2]=CAMR_M; 
 664:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMB_M; 		  
 665:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 666:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 			 
 667:Src/main.c    **** 		 OSD_SPEAKER[0]=OFF;
 668:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 669:Src/main.c    **** 		 OSD_SPEAKER[2]=ON;
 670:Src/main.c    **** 		 
 671:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 672:Src/main.c    **** 		   printf("VS4210_MODE8 ch2 ch1 ch4\r\n") ;
 673:Src/main.c    **** 		   break ;
 674:Src/main.c    **** 	   }   
 675:Src/main.c    **** case VS4210_LOOP_MODE8_234:
 676:Src/main.c    ****    {
 677:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 678:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 679:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 680:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 681:Src/main.c    **** 		 OSD_MIRROR[0]=CAMA_M; 
 682:Src/main.c    **** 		 OSD_MIRROR[1]=CAMC_M; 
 683:Src/main.c    **** 		 OSD_MIRROR[2]=CAMR_M; 
 684:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 685:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 		  
 686:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 			 
 687:Src/main.c    **** 		 OSD_SPEAKER[0]=OFF;
 688:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 689:Src/main.c    **** 		 OSD_SPEAKER[2]=ON;
 690:Src/main.c    **** 		 
 691:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 692:Src/main.c    **** 		   printf("VS4210_MODE8 ch2 ch3 ch4\r\n") ;
 693:Src/main.c    **** 		   break ;
 694:Src/main.c    **** 	   }   
 695:Src/main.c    **** 
 696:Src/main.c    **** //=============
 697:Src/main.c    **** case VS4210_LOOP_MODE8_312:
 698:Src/main.c    ****    {
 699:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 700:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 701:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 702:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =2 ;
 703:Src/main.c    **** 		 OSD_MIRROR[0]=CAMC_M; 
 704:Src/main.c    **** 		 OSD_MIRROR[1]=CAMA_M; 
 705:Src/main.c    **** 		 OSD_MIRROR[2]=CAMB_M; 
 706:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMC_M; 		  
 707:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 708:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMB_M; 		 
 709:Src/main.c    **** 		 OSD_SPEAKER[0]=ON;
 710:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 711:Src/main.c    **** 		 OSD_SPEAKER[2]=OFF;	 
 712:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 713:Src/main.c    **** 		   printf("VS4210_MODE8 ch3 ch1 ch2\r\n") ;
 714:Src/main.c    **** 		   break ;
 715:Src/main.c    **** 	   }   
 716:Src/main.c    **** case VS4210_LOOP_MODE8_314:
 717:Src/main.c    ****    {
 718:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
ARM GAS  /tmp/cclqPDF2.s 			page 14


 719:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 720:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 721:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 722:Src/main.c    **** 		 OSD_MIRROR[0]=CAMC_M; 
 723:Src/main.c    **** 		 OSD_MIRROR[1]=CAMA_M; 
 724:Src/main.c    **** 		 OSD_MIRROR[2]=CAMR_M; 
 725:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMC_M; 		  
 726:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 727:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 		 
 728:Src/main.c    **** 		 OSD_SPEAKER[0]=OFF;
 729:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 730:Src/main.c    **** 		 OSD_SPEAKER[2]=ON;	 
 731:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 732:Src/main.c    **** 		   printf("VS4210_MODE8 ch3 ch1 ch4\r\n") ;
 733:Src/main.c    **** 		   break ;
 734:Src/main.c    **** 	   }   
 735:Src/main.c    **** case VS4210_LOOP_MODE8_324:
 736:Src/main.c    ****    {
 737:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 738:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 739:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 740:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 741:Src/main.c    **** 		 OSD_MIRROR[0]=CAMC_M; 
 742:Src/main.c    **** 		 OSD_MIRROR[1]=CAMB_M; 
 743:Src/main.c    **** 		 OSD_MIRROR[2]=CAMR_M; 
 744:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMC_M; 		  
 745:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 746:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 			 
 747:Src/main.c    **** 		 OSD_SPEAKER[0]=OFF;
 748:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 749:Src/main.c    **** 		 OSD_SPEAKER[2]=ON;	 
 750:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 751:Src/main.c    **** 		   printf("VS4210_MODE8 ch3 ch2 ch4\r\n") ;
 752:Src/main.c    **** 		   break ;
 753:Src/main.c    **** 	   }   
 754:Src/main.c    **** //=============
 755:Src/main.c    **** 
 756:Src/main.c    **** 		case VS4210_LOOP_MODE8_413:
 757:Src/main.c    **** 		   {
 758:Src/main.c    **** 				   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 759:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 760:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 761:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 762:Src/main.c    **** 				 OSD_MIRROR[0]=CAMR_M; 
 763:Src/main.c    **** 				 OSD_MIRROR[1]=CAMA_M; 
 764:Src/main.c    **** 				 OSD_MIRROR[2]=CAMC_M; 
 765:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 766:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 767:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 				 
 768:Src/main.c    **** 				 OSD_SPEAKER[0]=ON;
 769:Src/main.c    **** 				 OSD_SPEAKER[1]=OFF;
 770:Src/main.c    **** 				 OSD_SPEAKER[2]=OFF;  
 771:Src/main.c    **** 				 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 772:Src/main.c    **** 				   printf("VS4210_MODE8 ch4 ch1 ch3\r\n") ;
 773:Src/main.c    **** 				   break ;
 774:Src/main.c    **** 			   }   
 775:Src/main.c    **** 		case VS4210_LOOP_MODE8_423:
ARM GAS  /tmp/cclqPDF2.s 			page 15


 776:Src/main.c    **** 		   {
 777:Src/main.c    **** 				   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 778:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 779:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 780:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 781:Src/main.c    **** 				 OSD_MIRROR[0]=CAMR_M; 
 782:Src/main.c    **** 				 OSD_MIRROR[1]=CAMB_M; 
 783:Src/main.c    **** 				 OSD_MIRROR[2]=CAMC_M; 
 784:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 785:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 786:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 					 
 787:Src/main.c    **** 				 OSD_SPEAKER[0]=ON;
 788:Src/main.c    **** 				 OSD_SPEAKER[1]=OFF;
 789:Src/main.c    **** 				 OSD_SPEAKER[2]=OFF;  
 790:Src/main.c    **** 				 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 791:Src/main.c    **** 				   printf("VS4210_MODE8 ch4 ch2 ch3\r\n") ;
 792:Src/main.c    **** 				   break ;
 793:Src/main.c    **** 			   }   
 794:Src/main.c    **** 
 795:Src/main.c    **** 		//=============
 796:Src/main.c    **** 	    case VS4210_LOOP_MODE10_123:
 797:Src/main.c    ****     {
 798:Src/main.c    ****   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE10 ;
 799:Src/main.c    **** 
 800:Src/main.c    **** pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 801:Src/main.c    **** pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 802:Src/main.c    **** pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 803:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 804:Src/main.c    **** 
 805:Src/main.c    **** 	OSD_MIRROR[0]=CAMR_M; 
 806:Src/main.c    **** 	OSD_MIRROR[1]=CAMA_M; 
 807:Src/main.c    **** 	OSD_MIRROR[2]=CAMB_M; 
 808:Src/main.c    **** 	OSD_MIRROR[3]=CAMC_M; 
 809:Src/main.c    **** 
 810:Src/main.c    **** gabVXIS_Input_mirrorH[0]=CAMR_M;		  
 811:Src/main.c    **** gabVXIS_Input_mirrorH[1]=CAMA_M;		  
 812:Src/main.c    **** gabVXIS_Input_mirrorH[2]=CAMB_M;		
 813:Src/main.c    **** gabVXIS_Input_mirrorH[3]=CAMC_M;		  
 814:Src/main.c    **** 
 815:Src/main.c    **** 	OSD_SPEAKER[0]=ON;
 816:Src/main.c    **** 	OSD_SPEAKER[1]=OFF;
 817:Src/main.c    **** 	OSD_SPEAKER[2]=OFF;
 818:Src/main.c    **** 	OSD_SPEAKER[3]=OFF;
 819:Src/main.c    **** 
 820:Src/main.c    **** 
 821:Src/main.c    ****      //   pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 822:Src/main.c    ****         printf("VS4210_MODE10 ch1 ch2 ch3\r\n") ;
 823:Src/main.c    ****         break ;
 824:Src/main.c    ****     }
 825:Src/main.c    **** case VS4210_LOOP_MODE10_412:
 826:Src/main.c    **** 	{
 827:Src/main.c    **** 	   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE10 ;
 828:Src/main.c    **** 	   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 829:Src/main.c    **** 	   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 830:Src/main.c    **** 	   pVS4210_JointKind1.WindowMap.WMap2 =2 ;
 831:Src/main.c    **** 	    pVS4210_JointKind1.WindowMap.WMap3 =0 ;
 832:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
ARM GAS  /tmp/cclqPDF2.s 			page 16


 833:Src/main.c    ****    	  OSD_MIRROR[1]=CAMA_M;	
 834:Src/main.c    ****    	  OSD_MIRROR[2]=CAMB_M;	
 835:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 836:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 837:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMB_M; 	  
 838:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 839:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 840:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 841:Src/main.c    **** 	//	 pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 842:Src/main.c    **** 	   printf("VS4210_MODE10 ch4 ch1 ch2\r\n") ;
 843:Src/main.c    **** 		break;
 844:Src/main.c    ****     	}
 845:Src/main.c    **** 	case VS4210_LOOP_MODE10_413:
 846:Src/main.c    **** 		{
 847:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE10 ;
 848:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 849:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 850:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 851:Src/main.c    **** 		  OSD_MIRROR[0]=CAMR_M; 
 852:Src/main.c    **** 		  OSD_MIRROR[1]=CAMA_M; 
 853:Src/main.c    **** 		  OSD_MIRROR[2]=CAMC_M; 
 854:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 855:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 856:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 			  
 857:Src/main.c    **** 		  OSD_SPEAKER[0]=ON;
 858:Src/main.c    **** 		  OSD_SPEAKER[1]=OFF;
 859:Src/main.c    **** 		  OSD_SPEAKER[2]=OFF;
 860:Src/main.c    **** 		//	 pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 861:Src/main.c    **** 		   printf("VS4210_MODE10 ch4 ch1 ch3\r\n") ;
 862:Src/main.c    **** 			break;
 863:Src/main.c    **** 			}
 864:Src/main.c    **** 	case VS4210_LOOP_MODE10_423:
 865:Src/main.c    **** 		{
 866:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE10 ;
 867:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 868:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 869:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 870:Src/main.c    **** 		  OSD_MIRROR[0]=CAMR_M; 
 871:Src/main.c    **** 		  OSD_MIRROR[1]=CAMB_M; 
 872:Src/main.c    **** 		  OSD_MIRROR[2]=CAMC_M; 
 873:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 874:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 875:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 			  
 876:Src/main.c    **** 		  OSD_SPEAKER[0]=ON;
 877:Src/main.c    **** 		  OSD_SPEAKER[1]=OFF;
 878:Src/main.c    **** 		  OSD_SPEAKER[2]=OFF;
 879:Src/main.c    **** 		//	 pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 880:Src/main.c    **** 		   printf("VS4210_MODE10 ch4 ch2 ch3\r\n") ;
 881:Src/main.c    **** 			break;
 882:Src/main.c    **** 			}
 883:Src/main.c    **** 
 884:Src/main.c    ****     case VS4210_LOOP_MODE9:
 885:Src/main.c    ****     {
 886:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE9 ;
 887:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 888:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 889:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
ARM GAS  /tmp/cclqPDF2.s 			page 17


 890:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 891:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 892:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 893:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
 894:Src/main.c    ****    	  OSD_MIRROR[3]=CAMR_M;	
 895:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 896:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 897:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		  
 898:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 	  
 899:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 900:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 901:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 902:Src/main.c    **** 	  OSD_SPEAKER[3]=ON;	  
 903:Src/main.c    ****         printf("VS4210_MODE9\r\n") ;
 904:Src/main.c    ****         break ;
 905:Src/main.c    ****     }
 906:Src/main.c    **** 	#endif
 907:Src/main.c    ****     case VS4210_LOOP_MODE12_12:
 908:Src/main.c    ****     {
 909:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 910:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 911:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 912:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 913:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 914:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 915:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
 916:Src/main.c    ****   	OSD_SPEAKER[0]=ON;
 917:Src/main.c    ****   	OSD_SPEAKER[1]=OFF;
 918:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch2\r\n") ;
 919:Src/main.c    ****         break ;
 920:Src/main.c    ****     }
 921:Src/main.c    **** 	case VS4210_LOOP_MODE12_14:
 922:Src/main.c    ****       {
 923:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 924:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 925:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
 926:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 927:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;
 928:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 929:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 930:Src/main.c    ****   	OSD_SPEAKER[0]=OFF;
 931:Src/main.c    ****   	OSD_SPEAKER[1]=ON;	  
 932:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch4\r\n") ;	
 933:Src/main.c    **** 	break;
 934:Src/main.c    ****     	}
 935:Src/main.c    **** 	case VS4210_LOOP_MODE12_42:
 936:Src/main.c    ****       {
 937:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 938:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 939:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 940:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 941:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 942:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMR_M;			  
 943:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
 944:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 945:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 946:Src/main.c    ****         printf("VS4210_MODE12 ch4 ch2\r\n") ;	
ARM GAS  /tmp/cclqPDF2.s 			page 18


 947:Src/main.c    **** 	break;
 948:Src/main.c    ****     	}
 949:Src/main.c    **** 	case VS4210_LOOP_MODE12_43:
 950:Src/main.c    ****       {
 951:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 952:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 953:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 954:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 955:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 956:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMR_M;			  
 957:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 958:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 959:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 960:Src/main.c    ****         printf("VS4210_MODE12 ch4 ch3\r\n") ;	
 961:Src/main.c    **** 	break;
 962:Src/main.c    ****     	}
 963:Src/main.c    **** 	//==============
 964:Src/main.c    **** 	case VS4210_LOOP_MODE12_21:
 965:Src/main.c    ****       {
 966:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 967:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 968:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 969:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 970:Src/main.c    ****    	  OSD_MIRROR[1]=CAMA_M;	
 971:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 972:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 973:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 974:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 975:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch1\r\n") ;	
 976:Src/main.c    **** 	break;
 977:Src/main.c    ****     	}
 978:Src/main.c    **** 	case VS4210_LOOP_MODE12_23:
 979:Src/main.c    ****       {
 980:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 981:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 982:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 983:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 984:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 985:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 986:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 987:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 988:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 989:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch3\r\n") ;	
 990:Src/main.c    **** 	break;
 991:Src/main.c    ****     	}
 992:Src/main.c    **** 	case VS4210_LOOP_MODE12_24:
 993:Src/main.c    ****       {
 994:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 995:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2;
 996:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
 997:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 998:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;	
 999:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
1000:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
1001:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
1002:Src/main.c    **** 	  OSD_SPEAKER[1]=ON;		  
1003:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch4\r\n") ;	
ARM GAS  /tmp/cclqPDF2.s 			page 19


1004:Src/main.c    **** 	break;
1005:Src/main.c    ****     	}
1006:Src/main.c    **** 
1007:Src/main.c    **** 	//==============
1008:Src/main.c    **** 	case VS4210_LOOP_MODE12_13:
1009:Src/main.c    ****       {
1010:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
1011:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
1012:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
1013:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
1014:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
1015:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
1016:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
1017:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
1018:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
1019:Src/main.c    **** 	  
1020:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch3\r\n") ;	
1021:Src/main.c    **** 	break;
1022:Src/main.c    ****     	}
1023:Src/main.c    **** 	case VS4210_LOOP_MODE12_32:
1024:Src/main.c    ****       {
1025:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
1026:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
1027:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
1028:Src/main.c    **** 	  OSD_MIRROR[0]=CAMC_M;	
1029:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
1030:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
1031:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
1032:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
1033:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
1034:Src/main.c    **** 	  
1035:Src/main.c    ****         printf("VS4210_MODE12 ch3 ch2\r\n") ;	
1036:Src/main.c    **** 	break;
1037:Src/main.c    ****     	}
1038:Src/main.c    **** 
1039:Src/main.c    ****     case VS4210_LOOP_MODE12_34:
1040:Src/main.c    ****     {
1041:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
1042:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
1043:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
1044:Src/main.c    **** 	  OSD_MIRROR[0]=CAMC_M;	
1045:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;	
1046:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
1047:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
1048:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
1049:Src/main.c    **** 	  OSD_SPEAKER[1]=ON;	
1050:Src/main.c    **** 	  
1051:Src/main.c    ****         printf("VS4210_MODE12 ch3 ch4\r\n") ;
1052:Src/main.c    ****         break ;
1053:Src/main.c    ****     }
1054:Src/main.c    **** //========================
1055:Src/main.c    **** 
1056:Src/main.c    **** case VS4210_LOOP_MODE12_31:
1057:Src/main.c    ****   {
1058:Src/main.c    ****    pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
1059:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap0 =3 ;
1060:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap1 =1 ;
ARM GAS  /tmp/cclqPDF2.s 			page 20


1061:Src/main.c    ****   OSD_MIRROR[0]=CAMC_M; 
1062:Src/main.c    ****   OSD_MIRROR[1]=CAMA_M; 
1063:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
1064:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M;   
1065:Src/main.c    ****   OSD_SPEAKER[0]=ON;
1066:Src/main.c    ****   OSD_SPEAKER[1]=OFF;	
1067:Src/main.c    ****   
1068:Src/main.c    **** 	printf("VS4210_MODE12 ch3 ch1\r\n") ;	
1069:Src/main.c    **** break;
1070:Src/main.c    **** 	}
1071:Src/main.c    **** 
1072:Src/main.c    **** //=======================
1073:Src/main.c    **** #if 0
1074:Src/main.c    ****     case VS4210_LOOP_MODE14:
1075:Src/main.c    ****     {
1076:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE14 ;
1077:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
1078:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
1079:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
1080:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
1081:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
1082:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
1083:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
1084:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
1085:Src/main.c    **** 	  gabVXIS_Input_mirrorH[2]=CAMC_M;		
1086:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
1087:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
1088:Src/main.c    **** 	  OSD_SPEAKER[3]=OFF;	
1089:Src/main.c    **** 	  
1090:Src/main.c    ****         printf("VS4210_MODE14 ch1 ch2\r\n") ;
1091:Src/main.c    ****         break ;
1092:Src/main.c    ****     }
1093:Src/main.c    **** #endif
1094:Src/main.c    ****     }
1095:Src/main.c    **** 
1096:Src/main.c    **** 	
1097:Src/main.c    **** VS4210_SetMutiWindows(&pVS4210_JointKind1) ;
1098:Src/main.c    **** 
1099:Src/main.c    **** //AUDIO_SELECT(index);
1100:Src/main.c    **** AudioMute(ON);
1101:Src/main.c    **** 
1102:Src/main.c    **** MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_AUDIO_CHANNEL_SELECT);
1103:Src/main.c    **** MCUTimerActiveTimerEvent(SEC(1),  _SYSTEM_TIMER_EVENT_AUDIO_CHANNEL_SELECT);
1104:Src/main.c    **** AUDIO_SELECT(index);
1105:Src/main.c    **** 
1106:Src/main.c    **** CURRENT_CH=index;
1107:Src/main.c    **** 
1108:Src/main.c    **** //ChangeVol(0);
1109:Src/main.c    **** 
1110:Src/main.c    **** }
1111:Src/main.c    **** 
1112:Src/main.c    **** /*
1113:Src/main.c    **** static int GetKet_State(void)
1114:Src/main.c    **** {
1115:Src/main.c    ****     int re = 0  ;
1116:Src/main.c    **** 
1117:Src/main.c    **** 	#if 0
ARM GAS  /tmp/cclqPDF2.s 			page 21


1118:Src/main.c    ****     if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin ) == 0)
1119:Src/main.c    ****     {
1120:Src/main.c    ****         re =1 ;
1121:Src/main.c    **** 		  re =0 ;
1122:Src/main.c    ****      //   printf("SW1 Key\r\n") ;
1123:Src/main.c    ****     }
1124:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin ) == 0)
1125:Src/main.c    ****     {
1126:Src/main.c    ****         re =2 ;
1127:Src/main.c    **** 		 re =0 ;
1128:Src/main.c    ****     //    printf("SW2 Key\r\n") ;
1129:Src/main.c    ****     }
1130:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin ) == 0)
1131:Src/main.c    ****     {
1132:Src/main.c    ****         re =3 ;
1133:Src/main.c    ****         printf("SW3 Key\r\n") ;
1134:Src/main.c    ****     }
1135:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin ) == 0)
1136:Src/main.c    ****     {
1137:Src/main.c    ****         re =4 ;
1138:Src/main.c    ****         printf("SW4 Key\r\n") ;
1139:Src/main.c    ****     }
1140:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin ) == 0)
1141:Src/main.c    ****     {
1142:Src/main.c    ****        // re =5 ;
1143:Src/main.c    ****       //  printf("SW5 Key\r\n") ;
1144:Src/main.c    ****       Monitor(); 
1145:Src/main.c    ****     }
1146:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW6_GPIO_Port, SW6_Pin ) == 0)
1147:Src/main.c    ****     {
1148:Src/main.c    ****         re =6 ;
1149:Src/main.c    ****         printf("SW6 Key\r\n") ;
1150:Src/main.c    ****     }
1151:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW7_GPIO_Port, SW7_Pin ) == 0)
1152:Src/main.c    ****     {
1153:Src/main.c    ****         re =7 ;
1154:Src/main.c    ****         printf("SW7 Key\r\n") ;
1155:Src/main.c    ****     }
1156:Src/main.c    **** #endif
1157:Src/main.c    **** 
1158:Src/main.c    ****     return re ;
1159:Src/main.c    **** }
1160:Src/main.c    **** */
1161:Src/main.c    **** 	static void HDMI_VideoModeDetect(void)
1162:Src/main.c    **** 	{
1163:Src/main.c    **** 		tByte i  ;
1164:Src/main.c    **** 	
1165:Src/main.c    **** 		for(i = 0 ; i< 2/*4*/ ; i++ )
1166:Src/main.c    **** 		{
1167:Src/main.c    **** 			gHDMI_Index = i ;
1168:Src/main.c    **** 			//--- Start --- 20201214-01
1169:Src/main.c    **** 			if( i == 1 )
1170:Src/main.c    **** 			{
1171:Src/main.c    **** 				if( newInRes[0] == _OSD_No_Signal )
1172:Src/main.c    **** 					bSignal[gHDMI_Index] = 0;
1173:Src/main.c    **** 				else
1174:Src/main.c    **** 					bSignal[gHDMI_Index] = 1;
ARM GAS  /tmp/cclqPDF2.s 			page 22


1175:Src/main.c    **** 			}
1176:Src/main.c    **** 			else
1177:Src/main.c    **** 			//--- End ---
1178:Src/main.c    **** 			bSignal[gHDMI_Index] = CheckHDMIRX();
1179:Src/main.c    **** 
1180:Src/main.c    **** 			//if( (i == 1 )&&(bSignal[1]==1))
1181:Src/main.c    **** 			//{
1182:Src/main.c    **** 			//dbg_Printf("ch%d, InputMode=%d \r\n", (int)(i+1),(int) gbVXIS_InputMode[i] ) ;
1183:Src/main.c    **** 			//}
1184:Src/main.c    **** 			
1185:Src/main.c    **** 			if (PreVState[gHDMI_Index] != VState[gHDMI_Index]  )
1186:Src/main.c    **** 			{
1187:Src/main.c    **** 				PreVState[gHDMI_Index]	= VState[gHDMI_Index] ;
1188:Src/main.c    **** 			}
1189:Src/main.c    **** 	
1190:Src/main.c    **** 			if(bSignal[gHDMI_Index] != bOldSignal[gHDMI_Index] )
1191:Src/main.c    **** 			{
1192:Src/main.c    **** 				bOldSignal[gHDMI_Index] = bSignal[gHDMI_Index] ;
1193:Src/main.c    **** 	
1194:Src/main.c    **** 				if(bSignal[gHDMI_Index] == 0 )
1195:Src/main.c    **** 				{
1196:Src/main.c    **** 					VS4210_Rx_NoSignal(i) ;
1197:Src/main.c    **** 					dbg_Printf("##ch%d, VS4210_Rx_NoSignal\r\n", (int)(i+1) ) ;
1198:Src/main.c    **** 					if (pVS4210_MutiWindows1.DrawOSDFlg != 0)
1199:Src/main.c    **** 					{
1200:Src/main.c    **** 						OSD_Show_Flg = 1 ;
1201:Src/main.c    **** 						Tim1_count = 0 ;
1202:Src/main.c    **** 						OSDStateFlg = 1 ;
1203:Src/main.c    **** 						OSDSecCount = 0 ;
1204:Src/main.c    **** 					}
1205:Src/main.c    **** 					gbVXIS_InputMode[gHDMI_Index] =_OSD_No_Signal ;
1206:Src/main.c    **** 					PrebVXIS_InputMode[gHDMI_Index] = _OSD_No_Signal ;
1207:Src/main.c    **** 
1208:Src/main.c    **** 					if((SelectInputMode==_HDMI_Input)&&(gHDMI_Index==0))
1209:Src/main.c    **** 						Set_Video_Loss_OSD(0,ON);
1210:Src/main.c    **** 					//MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);	
1211:Src/main.c    **** 					//VXISI2CWrite(0x9C,0x0A);
1212:Src/main.c    **** 						SET_Audio_Mute(ON);
1213:Src/main.c    **** 				}
1214:Src/main.c    **** 			}
1215:Src/main.c    **** 	
1216:Src/main.c    **** 			if( bSignal[gHDMI_Index] == 1  )
1217:Src/main.c    **** 			{
1218:Src/main.c    **** 				//--- Start --- 20201214-01
1219:Src/main.c    **** 				if( i == 1 )
1220:Src/main.c    **** 					gbVXIS_InputMode[gHDMI_Index] = newInRes[0];
1221:Src/main.c    **** 				else
1222:Src/main.c    **** 				//--- End ---
1223:Src/main.c    **** 				gbVXIS_InputMode[gHDMI_Index] = GetHDMI_InputMode(gHDMI_Index ) ;
1224:Src/main.c    **** 
1225:Src/main.c    **** 			}
1226:Src/main.c    **** 	
1227:Src/main.c    **** 			if (gbVXIS_InputMode[gHDMI_Index] != PrebVXIS_InputMode[gHDMI_Index] )
1228:Src/main.c    **** 			{
1229:Src/main.c    **** 				PrebVXIS_InputMode[gHDMI_Index] = gbVXIS_InputMode[gHDMI_Index] ;
1230:Src/main.c    **** 	
1231:Src/main.c    **** 				if (gbVXIS_InputMode[gHDMI_Index] != _OSD_No_Signal)
ARM GAS  /tmp/cclqPDF2.s 			page 23


1232:Src/main.c    **** 				{
1233:Src/main.c    **** 					VS4210_SetInModeOutMode(i , gbVXIS_InputMode[i] , pVS4210_MutiWindows1.OutputMode );
1234:Src/main.c    **** 
1235:Src/main.c    **** 					if((SelectInputMode==_AHD_Input)&&(gHDMI_Index==1))			
1236:Src/main.c    **** 					VXISI2CWrite( 0x19, 0x01 );
1237:Src/main.c    **** 							
1238:Src/main.c    **** 							
1239:Src/main.c    **** 					VS4210_SetInputSizeHV(i ,gHActive[i], gVActive[i], gHTotal[i] ,gVTotal[i] ) ;
1240:Src/main.c    **** 
1241:Src/main.c    **** 
1242:Src/main.c    **** 					dbg_Printf("ch%d, InputMode=%d \r\n", (int)(i+1),(int) gbVXIS_InputMode[i] ) ;
1243:Src/main.c    **** 
1244:Src/main.c    **** 						#if 0
1245:Src/main.c    **** 						if(gbVXIS_InputMode[i]==6)
1246:Src/main.c    **** 						{
1247:Src/main.c    **** 						printf("(set reg.)");
1248:Src/main.c    **** 						 VXISI2CWrite(0x08,0x21);
1249:Src/main.c    **** 						 VXISI2CWrite(0x0A,0x21);
1250:Src/main.c    **** 						 VXISI2CWrite(0x74,0x02);
1251:Src/main.c    **** 						 VXISI2CWrite(0x82,0x40);
1252:Src/main.c    **** 						}
1253:Src/main.c    **** 						#endif
1254:Src/main.c    **** 					if (pVS4210_MutiWindows1.DrawOSDFlg != 0)
1255:Src/main.c    **** 					{
1256:Src/main.c    **** 						OSD_Show_Flg = 1 ;
1257:Src/main.c    **** 						Tim1_count = 0 ;
1258:Src/main.c    **** 						OSDStateFlg = 1 ;
1259:Src/main.c    **** 						OSDSecCount = 0 ;
1260:Src/main.c    **** 					}
1261:Src/main.c    **** 
1262:Src/main.c    **** 						if((SelectInputMode==_HDMI_Input)&&(gHDMI_Index==0))
1263:Src/main.c    **** 						Set_Video_Loss_OSD(0,OFF);	
1264:Src/main.c    **** 
1265:Src/main.c    **** 						if((SelectInputMode==_AHD_Input)&&(gHDMI_Index==1))
1266:Src/main.c    **** 							{
1267:Src/main.c    **** 							MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_VIDEO_RESET);
1268:Src/main.c    **** 							}
1269:Src/main.c    **** 						
1270:Src/main.c    **** 						if(gHDMI_Index==0)
1271:Src/main.c    **** 						SET_Audio_Mute(OFF);	
1272:Src/main.c    **** 						//MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);
1273:Src/main.c    **** 				}
1274:Src/main.c    **** 			}
1275:Src/main.c    **** 		}
1276:Src/main.c    **** 	}
1277:Src/main.c    **** 
1278:Src/main.c    **** static void HDMI_AudioModeDetect(void)
1279:Src/main.c    **** {
1280:Src/main.c    ****     tByte pbAudioSampleFreq, pbValidCh ;
1281:Src/main.c    ****     pbAudioSampleFreq = 0 ;
1282:Src/main.c    **** 
1283:Src/main.c    ****     getHDMIRXAudioInfo(&pbAudioSampleFreq , &pbValidCh ) ;
1284:Src/main.c    **** 
1285:Src/main.c    ****     if (gbAUDO_INDEX != HDMI_AUDIO_NONE )
1286:Src/main.c    ****     {
1287:Src/main.c    ****         if (gbAUDO_INDEX  == gHDMI_Index )
1288:Src/main.c    ****         {
ARM GAS  /tmp/cclqPDF2.s 			page 24


1289:Src/main.c    ****             if (gPreAudioSampleFreq != pbAudioSampleFreq)
1290:Src/main.c    ****             {
1291:Src/main.c    ****                 gPreAudioSampleFreq = pbAudioSampleFreq ;
1292:Src/main.c    ****                 HDMI_Tx_SetAudioFs(gPreAudioSampleFreq )  ;
1293:Src/main.c    ****             }
1294:Src/main.c    ****         }
1295:Src/main.c    ****     }
1296:Src/main.c    ****     gAudioSampleFreq[gHDMI_Index] = pbAudioSampleFreq ;
1297:Src/main.c    **** }
1298:Src/main.c    **** 
1299:Src/main.c    **** //=============================================================================
1300:Src/main.c    **** //    Main Initialize Routine
1301:Src/main.c    **** //=============================================================================
1302:Src/main.c    **** void main_init (void)
1303:Src/main.c    **** {
1304:Src/main.c    **** 
1305:Src/main.c    **** 	WORD	rev;
1306:Src/main.c    **** 
1307:Src/main.c    **** 		rev = GetFWRevEE();
1308:Src/main.c    **** 		Printf("\r\nPrev.FW:%04x\r\n", rev);
1309:Src/main.c    **** 		
1310:Src/main.c    **** 		if( GetFWRevEE()!=FWVER )	// exist EEPROM
1311:Src/main.c    **** 		{					
1312:Src/main.c    **** 			Printf("\r\nCurr.FW:%04x", (WORD)FWVER);
1313:Src/main.c    **** 			SaveFWRevEE(FWVER);
1314:Src/main.c    **** 			Printf("\r\nCurr.FW:%04x", (WORD)GetFWRevEE());
1315:Src/main.c    **** 		}
1316:Src/main.c    **** 
1317:Src/main.c    **** 		if( GetFWRevEE()==FWVER )
1318:Src/main.c    **** 		{					// exist EEPROM
1319:Src/main.c    **** 			if( rev != FWVER ) 
1320:Src/main.c    **** 				{
1321:Src/main.c    **** 				ClearBasicEE();
1322:Src/main.c    **** 			
1323:Src/main.c    **** 			Printf("\r\n[MSG]main_init()=> rev != FWVER & call ClearBasicEE()\r\n");  //pinchi test
1324:Src/main.c    **** 				}
1325:Src/main.c    **** 			else
1326:Src/main.c    **** 				{
1327:Src/main.c    **** 				;//DebugLevel = GetDebugLevelEE();
1328:Src/main.c    **** 
1329:Src/main.c    **** 				}
1330:Src/main.c    **** 		}
1331:Src/main.c    **** 		else 
1332:Src/main.c    **** 		{
1333:Src/main.c    **** 			Printf("\r\nCannot access EEPROM!!!!");
1334:Src/main.c    **** 			Printf("\r\nNo initialize");
1335:Src/main.c    **** 			DebugLevel = 0xff;
1336:Src/main.c    **** 			return;
1337:Src/main.c    **** 		}
1338:Src/main.c    **** 
1339:Src/main.c    **** 
1340:Src/main.c    **** 	delay(100);
1341:Src/main.c    **** 	
1342:Src/main.c    **** 
1343:Src/main.c    **** //	SET_POWER_STATUS(_POWER_STATUS_OFF);
1344:Src/main.c    **** //	SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1345:Src/main.c    **** 
ARM GAS  /tmp/cclqPDF2.s 			page 25


1346:Src/main.c    **** }
1347:Src/main.c    **** 
1348:Src/main.c    **** 
1349:Src/main.c    **** void AdjustAutoDayNight(BYTE val)
1350:Src/main.c    **** {
1351:Src/main.c    **** //	BYTE page;
1352:Src/main.c    **** 	BYTE PWMLevelTemp=0;
1353:Src/main.c    **** 	val=0xff-val;
1354:Src/main.c    **** 
1355:Src/main.c    **** 	#if 1//ryan@20170928
1356:Src/main.c    **** 	if(val>=0&&val<100)
1357:Src/main.c    **** 		PWMLevelTemp=0+70;
1358:Src/main.c    **** 	else if(val>=100&&val<140)
1359:Src/main.c    **** 		PWMLevelTemp=20+70;//20;
1360:Src/main.c    **** 	else if(val>=140&&val<180)
1361:Src/main.c    **** 		PWMLevelTemp=40+70;//50;
1362:Src/main.c    **** 	else if(val>=180&&val<220)
1363:Src/main.c    **** 		PWMLevelTemp=60+70;//65;
1364:Src/main.c    **** 	else if(val>=220&&val<=255)//andy 20110414
1365:Src/main.c    **** 	{
1366:Src/main.c    **** 		//#ifdef AWT
1367:Src/main.c    **** 		PWMLevelTemp=75+70;//80;
1368:Src/main.c    **** 		//#else
1369:Src/main.c    **** 		//PWMLevelTemp=115;
1370:Src/main.c    **** 		//#endif
1371:Src/main.c    **** 		//	PWMLevelTemp=128;
1372:Src/main.c    **** 	}
1373:Src/main.c    **** 
1374:Src/main.c    **** 	#else
1375:Src/main.c    **** 	if(val>=0&&val<100)
1376:Src/main.c    **** 		PWMLevelTemp=0;
1377:Src/main.c    **** 	else if(val>=100&&val<140)
1378:Src/main.c    **** 		PWMLevelTemp=30;//20;
1379:Src/main.c    **** 	else if(val>=140&&val<180)
1380:Src/main.c    **** 		PWMLevelTemp=60;//50;
1381:Src/main.c    **** 	else if(val>=180&&val<220)
1382:Src/main.c    **** 		PWMLevelTemp=80;//65;
1383:Src/main.c    **** 	else if(val>=220&&val<=255)//andy 20110414
1384:Src/main.c    **** 	{
1385:Src/main.c    **** 		//#ifdef AWT
1386:Src/main.c    **** 		PWMLevelTemp=110;//80;
1387:Src/main.c    **** 		//#else
1388:Src/main.c    **** 		//PWMLevelTemp=115;
1389:Src/main.c    **** 		//#endif
1390:Src/main.c    **** 	}
1391:Src/main.c    **** 	#endif
1392:Src/main.c    **** 	//else
1393:Src/main.c    **** 	//	PWMLevelTemp=0;
1394:Src/main.c    **** 
1395:Src/main.c    **** 
1396:Src/main.c    **** 	if(DayNightLevel==1)
1397:Src/main.c    **** 	{
1398:Src/main.c    **** 		//if(AutoDayNightDelay<(5+5+5))
1399:Src/main.c    **** 	//		AutoDayNightDelay++;
1400:Src/main.c    **** 		//else
1401:Src/main.c    **** 		{
1402:Src/main.c    **** 			if(PWMLevel > PWMLevelTemp)
ARM GAS  /tmp/cclqPDF2.s 			page 26


1403:Src/main.c    **** 				PWMLevel-=1;
1404:Src/main.c    **** 			else if(PWMLevel < PWMLevelTemp)
1405:Src/main.c    **** 				PWMLevel+=1;
1406:Src/main.c    **** 
1407:Src/main.c    **** 			AutoDayNightDelay=0;
1408:Src/main.c    **** 		}
1409:Src/main.c    **** 
1410:Src/main.c    **** 	//	PWMLevel=PWMLevelTemp;
1411:Src/main.c    **** 
1412:Src/main.c    **** 		
1413:Src/main.c    **** 	//	Printf("(PWMLevel1=%02x %02x)",(WORD)PWMLevel,(WORD)PWMLevelTemp);
1414:Src/main.c    **** 
1415:Src/main.c    **** 	user_pwm_setvalue(PWMLevel*15);
1416:Src/main.c    **** 
1417:Src/main.c    **** 	}
1418:Src/main.c    **** 	else
1419:Src/main.c    **** 	{
1420:Src/main.c    **** 	//	PWMLevel=PWMLevelTemp;
1421:Src/main.c    **** 		PWMLevel=255/*0x80*/;
1422:Src/main.c    **** 	//		Printf("(PWMLevel2=%02x)",(WORD)PWMLevel);
1423:Src/main.c    **** 	user_pwm_setvalue(_PWMLevelMax);
1424:Src/main.c    **** 	}
1425:Src/main.c    **** 	
1426:Src/main.c    **** #if 0
1427:Src/main.c    **** 
1428:Src/main.c    **** 	//Printf("\r\nLADC0=%02x",(WORD)val);
1429:Src/main.c    **** 	page = ReadTW88( 0xff );
1430:Src/main.c    **** 	WriteTW88( 0xff, 0x00 );		// set page 0
1431:Src/main.c    **** 	WriteTW88( 0xbe, ((ReadTW88(0xbe) & 0xcf) | 0x10) );	// set active Low control, if want active hig
1432:Src/main.c    **** 	//WriteTW88( 0xc4, ((ReadTW88(0xc4) & 0x80)|(val>>2)) );	// set pwm number
1433:Src/main.c    **** 	WriteTW88( 0xc4, ((ReadTW88(0xc4) & 0x80)|(PWMLevel)) );	// set pwm number
1434:Src/main.c    **** 	WriteTW88( 0xff, page );
1435:Src/main.c    **** 	
1436:Src/main.c    **** 	#endif
1437:Src/main.c    **** 	/*
1438:Src/main.c    **** 	if(DayNightLevel==0)
1439:Src/main.c    **** 	user_pwm_setvalue(4000);
1440:Src/main.c    **** 	else
1441:Src/main.c    **** 	user_pwm_setvalue(PWMLevel*15);
1442:Src/main.c    **** */		
1443:Src/main.c    **** }
1444:Src/main.c    **** void LCDPowerON(void)
1445:Src/main.c    **** {
1446:Src/main.c    **** /*
1447:Src/main.c    **** 	Printf("(LCDPowerON)");
1448:Src/main.c    **** 
1449:Src/main.c    **** 	TTLI1_RES(OFF);
1450:Src/main.c    **** 	PANEL_EN(ON);
1451:Src/main.c    **** 	msleep(50) ;
1452:Src/main.c    **** 	msleep(100) ;///for new 7in panel  	LCM : TH070800480NYR40S1-L
1453:Src/main.c    **** //	MCUTimerDelayXms(50);
1454:Src/main.c    **** 	LCD_PWR(ON);
1455:Src/main.c    **** 
1456:Src/main.c    **** 	msleep(50) ;
1457:Src/main.c    **** 
1458:Src/main.c    **** //	MCUTimerDelayXms(50);
1459:Src/main.c    **** 	BL_ENABLE(ON);
ARM GAS  /tmp/cclqPDF2.s 			page 27


1460:Src/main.c    **** HAL_GPIO_WritePin(PA7_GPIO_Port, PA7_Pin, 0);
1461:Src/main.c    **** 
1462:Src/main.c    **** //	BL_PWM(ON);
1463:Src/main.c    **** 
1464:Src/main.c    **** AudioMute(OFF);
1465:Src/main.c    **** */
1466:Src/main.c    **** 
1467:Src/main.c    **** }
1468:Src/main.c    **** 
1469:Src/main.c    **** void LCDPowerOFF(void)
1470:Src/main.c    **** {
1471:Src/main.c    **** /*
1472:Src/main.c    **** 	Printf("(LCDPowerOFF)");
1473:Src/main.c    **** 
1474:Src/main.c    **** #if 0
1475:Src/main.c    **** 
1476:Src/main.c    **** 	TTLI1_RES(OFF);
1477:Src/main.c    **** 	PANEL_EN(ON);
1478:Src/main.c    **** 	msleep(50) ;
1479:Src/main.c    **** //	MCUTimerDelayXms(50);
1480:Src/main.c    **** 	LCD_PWR(ON);
1481:Src/main.c    **** 
1482:Src/main.c    **** 	msleep(50) ;
1483:Src/main.c    **** 
1484:Src/main.c    **** //	MCUTimerDelayXms(50);
1485:Src/main.c    **** 	BL_ENABLE(ON);
1486:Src/main.c    **** //	BL_PWM(ON);
1487:Src/main.c    **** 
1488:Src/main.c    **** #else
1489:Src/main.c    **** 	BL_ENABLE(OFF);
1490:Src/main.c    **** HAL_GPIO_WritePin(PA7_GPIO_Port, PA7_Pin, 1); 
1491:Src/main.c    **** 
1492:Src/main.c    **** //	BL_PWM(OFF);
1493:Src/main.c    **** //	msleep(50) ;
1494:Src/main.c    **** //	MCUTimerDelayXms(50);
1495:Src/main.c    **** 	TTLI1_RES(ON);
1496:Src/main.c    **** 	PANEL_EN(OFF);
1497:Src/main.c    **** //	MCUTimerDelayXms(50);
1498:Src/main.c    **** //	msleep(50) ;
1499:Src/main.c    **** 
1500:Src/main.c    **** 	LCD_PWR(OFF);
1501:Src/main.c    **** #endif
1502:Src/main.c    **** 
1503:Src/main.c    **** AudioMute(ON);
1504:Src/main.c    **** */
1505:Src/main.c    **** }
1506:Src/main.c    **** 
1507:Src/main.c    **** 
1508:Src/main.c    **** /* USER CODE END 0 */
1509:Src/main.c    **** 
1510:Src/main.c    **** /**
1511:Src/main.c    ****   * @brief  The application entry point.
1512:Src/main.c    ****   * @retval int
1513:Src/main.c    ****   */
1514:Src/main.c    **** 
1515:Src/main.c    **** void uComOnChipInitial(void)
1516:Src/main.c    **** {
ARM GAS  /tmp/cclqPDF2.s 			page 28


1517:Src/main.c    **** 
1518:Src/main.c    **** //power reset
1519:Src/main.c    **** 
1520:Src/main.c    **** //power
1521:Src/main.c    **** PCON3V3_TP(ON);      
1522:Src/main.c    **** PCON1V2_TP(ON);      
1523:Src/main.c    **** 
1524:Src/main.c    **** VS4210_RST(OFF);   
1525:Src/main.c    **** 
1526:Src/main.c    **** #if 0
1527:Src/main.c    **** 
1528:Src/main.c    **** 	Set_USART1();
1529:Src/main.c    **** 
1530:Src/main.c    **** 
1531:Src/main.c    **** 	//Set_USART2();
1532:Src/main.c    **** 	//Set_USB();
1533:Src/main.c    **** 	//USB_Interrupts_Config();
1534:Src/main.c    **** 	Set_GPIO_Port();
1535:Src/main.c    **** 
1536:Src/main.c    **** 	//AUDIO_OUT_Flag=ReadEEP(0xae);
1537:Src/main.c    **** 	MUTE_OUT(1);
1538:Src/main.c    **** 
1539:Src/main.c    **** 
1540:Src/main.c    **** 
1541:Src/main.c    **** 	Set_Timer();
1542:Src/main.c    **** 	Set_Init_GPIO();
1543:Src/main.c    **** 
1544:Src/main.c    **** 	TIM4_PWM(0);
1545:Src/main.c    **** 	Set_Battery_ADC();
1546:Src/main.c    **** 
1547:Src/main.c    **** 	EXTI_Configuration();
1548:Src/main.c    **** 
1549:Src/main.c    **** 	//Set_I2C_Port();
1550:Src/main.c    **** 	//Set_IR_Port();
1551:Src/main.c    **** 	//Set_ADC_Port();
1552:Src/main.c    **** 	
1553:Src/main.c    **** GPIO_SetBits(GPIOA, GPIO_Pin_1);//TW8816 reset
1554:Src/main.c    **** GPIO_ResetBits(GPIOA, GPIO_Pin_0);//TW8816 reset
1555:Src/main.c    **** 
1556:Src/main.c    **** GPIO_SetBits(GPIOA, GPIO_Pin_12);//ryan@20150525
1557:Src/main.c    **** GPIO_SetBits(GPIOA, GPIO_Pin_13);//ryan@20150525
1558:Src/main.c    **** GPIO_SetBits(GPIOA, GPIO_Pin_14);//ryan@20150525
1559:Src/main.c    **** 
1560:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_9);//ryan@20150525
1561:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_13);//ryan@20150525
1562:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_14);//ryan@20150525
1563:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_15);//ryan@20150525
1564:Src/main.c    **** 
1565:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_7);//ryan@20150525
1566:Src/main.c    **** 
1567:Src/main.c    **** //GPIO_ResetBits(GPIOC, GPIO_Pin_8);//ryan@20150525
1568:Src/main.c    **** PC_SW(1);//MP board
1569:Src/main.c    **** DC_OUT(0);//MP board
1570:Src/main.c    **** 	
1571:Src/main.c    **** 
1572:Src/main.c    **** #if __USE_SPI_FLASH__ == 1
1573:Src/main.c    **** 	Reset_SPI();
ARM GAS  /tmp/cclqPDF2.s 			page 29


1574:Src/main.c    **** 	Set_SPI();
1575:Src/main.c    **** #endif
1576:Src/main.c    **** 
1577:Src/main.c    **** 	//Set_USBClock();
1578:Src/main.c    **** 	//USB_Interrupts_Config();
1579:Src/main.c    **** 	//USB_Init();
1580:Src/main.c    **** 
1581:Src/main.c    **** #endif
1582:Src/main.c    **** 
1583:Src/main.c    **** }
1584:Src/main.c    **** 
1585:Src/main.c    **** void user_pwm_setvalue(uint16_t value)
1586:Src/main.c    **** {
1587:Src/main.c    ****     TIM_OC_InitTypeDef sConfigOC;
1588:Src/main.c    ****   
1589:Src/main.c    ****     sConfigOC.OCMode = TIM_OCMODE_PWM1;
1590:Src/main.c    ****     sConfigOC.Pulse = value;
1591:Src/main.c    ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1592:Src/main.c    ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
1593:Src/main.c    ****     HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
1594:Src/main.c    ****     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  
1595:Src/main.c    **** }
1596:Src/main.c    **** 
1597:Src/main.c    **** void LoadEEPROM (void)
1598:Src/main.c    **** {
1599:Src/main.c    **** #if 0
1600:Src/main.c    **** 	 PowerFlag = ReadEEP(EEP_Powerflag);
1601:Src/main.c    **** 	 SelectModeType = ReadEEP(EEP_SelectMode);
1602:Src/main.c    **** 
1603:Src/main.c    **** 	OSD_LOCKF= ReadEEP(EEP_ONOFFChoice);
1604:Src/main.c    **** 	Disp_Input = ReadEEP(EEP_COSDMode); 
1605:Src/main.c    **** 		
1606:Src/main.c    **** 	 TimeStep = ReadEEP(EEP_TimeStep);
1607:Src/main.c    **** 	 Priority=ReadEEP(EEP_PRIORITY);
1608:Src/main.c    **** 	 DayNightLevel= ReadEEP(EEP_AutoMode);
1609:Src/main.c    **** 	 NowModeState = ReadEEP(EEP_NowModeState);
1610:Src/main.c    **** 	
1611:Src/main.c    **** 	AudioVol = GetAudioVolEE();
1612:Src/main.c    **** 	CAMA_M= ReadEEP(EEP_CAMAMode);
1613:Src/main.c    **** 	CAMB_M= ReadEEP(EEP_CAMBMode);
1614:Src/main.c    **** 	CAMC_M= ReadEEP(EEP_CAMCMode);
1615:Src/main.c    **** 	CAMR_M= ReadEEP(EEP_CAMRMode);
1616:Src/main.c    **** 
1617:Src/main.c    **** 	AudioVol = GetAudioVolEE();
1618:Src/main.c    **** 
1619:Src/main.c    **** #endif
1620:Src/main.c    **** }
1621:Src/main.c    **** 
1622:Src/main.c    **** void WaitPowerOn(void)
1623:Src/main.c    **** {
1624:Src/main.c    **** BYTE val;
1625:Src/main.c    **** 	PowerLED(_SYSTEM_TIMER_EVENT_RED_ON);
1626:Src/main.c    **** 
1627:Src/main.c    **** 	LCDPowerOFF();
1628:Src/main.c    **** 	
1629:Src/main.c    **** 	MCUTimerCancelTimerEvent( _USER_TIMER_EVENT_PANEL_BACKLIGHT_ON);
1630:Src/main.c    **** 
ARM GAS  /tmp/cclqPDF2.s 			page 30


1631:Src/main.c    **** 	Printf("\r\n(Power off..)");
1632:Src/main.c    **** 		
1633:Src/main.c    **** 	while(1) 
1634:Src/main.c    **** 	{	
1635:Src/main.c    **** 
1636:Src/main.c    **** 			CheckKeyIn();
1637:Src/main.c    **** 			if(PowerFlag==ON)
1638:Src/main.c    **** 			{
1639:Src/main.c    **** 				//PowerFlag=ON;
1640:Src/main.c    **** 				WriteEEP(EEP_Powerflag,PowerFlag);//2007.3.28 Justin
1641:Src/main.c    **** 				break;		//poweron
1642:Src/main.c    **** 			}
1643:Src/main.c    **** 			
1644:Src/main.c    **** 		  val=CheckTrigger();
1645:Src/main.c    **** 		 
1646:Src/main.c    **** //		  TriggerHandler(val);
1647:Src/main.c    **** 
1648:Src/main.c    **** 		if(val!=0)
1649:Src/main.c    **** 		{	
1650:Src/main.c    **** 			  PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON);
1651:Src/main.c    **** 			TriggerHandler(val);
1652:Src/main.c    **** 			//	AudioMute(OFF);
1653:Src/main.c    **** 			//DisplayInput();		//william v0.2 20120223
1654:Src/main.c    **** 			/*
1655:Src/main.c    **** 			if(!(TriggerMode==0x08))
1656:Src/main.c    **** 			{
1657:Src/main.c    **** 				//Printf("\r\n(**PowerFlag=%02x)",(WORD)PowerFlag);
1658:Src/main.c    **** 				LCDPowerON(1);//修正power on時顯示太慢問題
1659:Src/main.c    **** 				AudioMute(1);
1660:Src/main.c    **** 			}
1661:Src/main.c    **** 			*/
1662:Src/main.c    **** 			
1663:Src/main.c    **** 		}
1664:Src/main.c    **** 		else
1665:Src/main.c    **** 		{
1666:Src/main.c    **** 			//Printf("\r\n(*NO-TRIG)");
1667:Src/main.c    **** 			TriggerHandler(val);  //Pinchi 20140922 add for AWT ML072Q
1668:Src/main.c    **** 
1669:Src/main.c    **** 
1670:Src/main.c    **** 				if(TriggerFlag==0)
1671:Src/main.c    **** 				{
1672:Src/main.c    **** 				//PowerOff();
1673:Src/main.c    **** 			//	AudioMute(ON);
1674:Src/main.c    **** 				
1675:Src/main.c    **** 				//PowerLED(_SYSTEM_TIMER_EVENT_RED_ON);
1676:Src/main.c    **** 				/*
1677:Src/main.c    **** 				if(live_out_state==1)	////live out issue 
1678:Src/main.c    **** 				{
1679:Src/main.c    **** 				live_out_state=0;
1680:Src/main.c    **** 				SetNowMode();
1681:Src/main.c    **** 				Panel_power=0;
1682:Src/main.c    **** 				}
1683:Src/main.c    **** 				*/
1684:Src/main.c    **** 				}
1685:Src/main.c    **** 			
1686:Src/main.c    **** 		//	TriggerHandler(val);  //Pinchi 20140922 move to above for AWT ML072Q	
1687:Src/main.c    **** 		}		  
ARM GAS  /tmp/cclqPDF2.s 			page 31


1688:Src/main.c    **** 
1689:Src/main.c    **** 		   SysTimerHandler();
1690:Src/main.c    **** 		   	  EQ_Detect();	 
1691:Src/main.c    **** 			  
1692:Src/main.c    **** //			  	if((GT9147_Scan(1)>=_TOUCH_COUNT_1)&&(TP_ACTION==ON))
1693:Src/main.c    **** 					if(GT9147_Scan(1)>=_TOUCH_COUNT_1)
1694:Src/main.c    **** 
1695:Src/main.c    **** 					PowerFlag=ON;
1696:Src/main.c    **** 					
1697:Src/main.c    ****    	}
1698:Src/main.c    **** 
1699:Src/main.c    **** 	PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON);
1700:Src/main.c    **** //	SHOWOSDINFO();	
1701:Src/main.c    **** 	
1702:Src/main.c    **** //		if((NowModeState==JumpMode)&&(TriggerFlag==0))
1703:Src/main.c    **** //			 ShowJUMPOSD();
1704:Src/main.c    **** 		
1705:Src/main.c    **** 	MCUTimerCancelTimerEvent(_USER_TIMER_EVENT_DISPLAY_DISABLE);
1706:Src/main.c    **** 	MCUTimerActiveTimerEvent(SEC(2),_USER_TIMER_EVENT_DISPLAY_DISABLE);
1707:Src/main.c    **** 
1708:Src/main.c    **** 	
1709:Src/main.c    **** 
1710:Src/main.c    **** MCUTimerActiveTimerEvent(SEC(1),  _USER_TIMER_EVENT_PANEL_BACKLIGHT_ON);
1711:Src/main.c    **** //LCDPowerON();
1712:Src/main.c    **** Printf("\r\n(Power ON..)");		
1713:Src/main.c    **** 
1714:Src/main.c    **** 
1715:Src/main.c    **** }
1716:Src/main.c    **** 
1717:Src/main.c    **** 
1718:Src/main.c    **** int main(void)
1719:Src/main.c    **** {
1720:Src/main.c    ****   /* USER CODE BEGIN 1 */
1721:Src/main.c    ****   TimeOutCount = 0 ;
1722:Src/main.c    **** 
1723:Src/main.c    ****     tByte i ;
1724:Src/main.c    ****     tByte j ;
1725:Src/main.c    ****     tByte exosdLen ;
1726:Src/main.c    ****     tByte exosdStart ;
1727:Src/main.c    **** #ifdef VICTOR_DEBUG
1728:Src/main.c    ****     tByte val ;
1729:Src/main.c    **** #endif
1730:Src/main.c    ****   //  int keystate ;
1731:Src/main.c    **** 
1732:Src/main.c    ****   /* USER CODE END 1 */
1733:Src/main.c    **** 
1734:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
1735:Src/main.c    **** 
1736:Src/main.c    ****   /* Reset of all peripherals, Initializes the F
1737:Src/main.c    ****    sh interface and the Systick. */
1738:Src/main.c    ****   HAL_Init();
1739:Src/main.c    ****   
1740:Src/main.c    ****   /* USER CODE BEGIN Init */
1741:Src/main.c    **** 
1742:Src/main.c    ****   /* USER CODE END Init */
1743:Src/main.c    **** 
1744:Src/main.c    ****   /* Configure the system clock */
ARM GAS  /tmp/cclqPDF2.s 			page 32


1745:Src/main.c    ****   SystemClock_Config();
1746:Src/main.c    **** 
1747:Src/main.c    ****   
1748:Src/main.c    ****   /* USER CODE BEGIN SysInit */
1749:Src/main.c    ****   InitialTimerEvent();
1750:Src/main.c    **** 
1751:Src/main.c    ****   /* USER CODE END SysInit */
1752:Src/main.c    **** 
1753:Src/main.c    ****   /* Initialize all configured peripherals */
1754:Src/main.c    ****   MX_GPIO_Init();
1755:Src/main.c    ****  // LCDPowerOFF();
1756:Src/main.c    **** // AudioMute(ON);
1757:Src/main.c    **** 
1758:Src/main.c    **** //SET_PCA9554PW(_Shutter_SW,OFF);
1759:Src/main.c    ****  // SET_PCA9554PW(_CCD12_SW,ON);
1760:Src/main.c    **** //SET_PCA9554PW(_PCON5V_AUDIO,ON);
1761:Src/main.c    ****  //SET_PCA9554PW(_COL_PW_5V,OFF);
1762:Src/main.c    **** 
1763:Src/main.c    **** //  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin , GPIO_PIN_SET);
1764:Src/main.c    **** //  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin , GPIO_PIN_SET); 
1765:Src/main.c    **** 
1766:Src/main.c    ****  // PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON);
1767:Src/main.c    **** 
1768:Src/main.c    **** //  MX_TIM2_Init();
1769:Src/main.c    ****   MX_TIM3_Init();
1770:Src/main.c    ****   MX_USART1_UART_Init();
1771:Src/main.c    ****   MX_USART2_UART_Init();
1772:Src/main.c    **** //  MX_ADC1_Init();
1773:Src/main.c    ****   
1774:Src/main.c    ****   /* USER CODE BEGIN 2 */
1775:Src/main.c    **** 
1776:Src/main.c    **** //HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);	
1777:Src/main.c    ****   
1778:Src/main.c    ****  SW_I2C0_Init() ;
1779:Src/main.c    ****  SW_I2C1_Init() ;
1780:Src/main.c    ****  SW_I2C2_Init() ;
1781:Src/main.c    ****  SW_I2C3_Init() ;
1782:Src/main.c    **** 
1783:Src/main.c    **** //user_pwm_setvalue(2000);
1784:Src/main.c    **** 
1785:Src/main.c    ****   //uComOnChipInitial();
1786:Src/main.c    ****   
1787:Src/main.c    **** // if((SelectInputMode==_HDMI_Input)&&(gHDMI_Index==0))
1788:Src/main.c    **** Set_Video_Loss_OSD(0,ON);
1789:Src/main.c    **** SET_Audio_Mute(ON);
1790:Src/main.c    **** 
1791:Src/main.c    **** 
1792:Src/main.c    ****  // GT9147_Init();
1793:Src/main.c    **** #if 1
1794:Src/main.c    ****   msleep(50) ;
1795:Src/main.c    ****   HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data, 1);	//activate UART receive interrupt every time
1796:Src/main.c    ****   HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	//activate UART receive interrupt every time
1797:Src/main.c    **** 
1798:Src/main.c    ****  // HAL_GPIO_WritePin(TP2824_RST_GPIO_Port, VS_RST_Pin, 0); //RX RST
1799:Src/main.c    ****  //HAL_GPIO_WritePin(TX_RST_GPIO_Port, VS_RST_Pin, 0); //TX RST
1800:Src/main.c    ****   HAL_GPIO_WritePin(VS_RST_GPIO_Port, VS_RST_Pin, 0); //VS4210 RST
1801:Src/main.c    ****  TP2824_SET_REST(0);
ARM GAS  /tmp/cclqPDF2.s 			page 33


1802:Src/main.c    **** 
1803:Src/main.c    ****   msleep(100) ;
1804:Src/main.c    ****   //HAL_GPIO_WritePin(TP2824_RST_GPIO_Port, VS_RST_Pin, 1); //VS4210 RST
1805:Src/main.c    **** // HAL_GPIO_WritePin(TX_RST_GPIO_Port, VS_RST_Pin, 1); //TX RST
1806:Src/main.c    ****   HAL_GPIO_WritePin(VS_RST_GPIO_Port, VS_RST_Pin, 1); //VS4210 RST
1807:Src/main.c    ****  TP2824_SET_REST(1);
1808:Src/main.c    **** 
1809:Src/main.c    **** #endif
1810:Src/main.c    **** //LCDPowerON();
1811:Src/main.c    **** // SET_PCA9554PW(_COL_PW_5V,ON); 
1812:Src/main.c    **** 
1813:Src/main.c    ****   //I2CWrite(VS9988_ADDR, 0x01, 0x5A);  //reset
1814:Src/main.c    **** //  printf("\r\nVS4210 sdk2.0 Compiled %s %s !\r\n",__DATE__ , __TIME__);
1815:Src/main.c    **** // val = VXISI2CRead(0x00) ;
1816:Src/main.c    **** //  printf("VS4210 ID = 0x%02X !\r\n", (int)val );
1817:Src/main.c    **** 
1818:Src/main.c    ****   //Init_TP280x_RegSet();
1819:Src/main.c    **** 
1820:Src/main.c    ****   // RX Init
1821:Src/main.c    ****   for (i = 0 ; i < HDMI_IN_NUMBER ; i++ )
1822:Src/main.c    ****   {
1823:Src/main.c    ****       gHDMI_Index = i ;
1824:Src/main.c    ****       dbg_Printf("Init HDMI RX,Chip(%d)....\r\n",(int)i ) ;
1825:Src/main.c    ****       InitHDMIRX(0);
1826:Src/main.c    ****       HDMIRX_WriteI2C_Byte(0x89 ,0x80);
1827:Src/main.c    **** 
1828:Src/main.c    **** #ifdef VICTOR_DEBUG
1829:Src/main.c    ****       val = HDMIRX_ReadI2C_Byte(0x02) ;
1830:Src/main.c    ****       dbg_Printf("IT66021 chip num=%d , 02reg=0x%02x\r\n", (int )i , (int)val ) ;
1831:Src/main.c    **** #endif
1832:Src/main.c    ****   }
1833:Src/main.c    ****   
1834:Src/main.c    **** //  dbg_Printf("Init HDMI Tx....\r\n") ;
1835:Src/main.c    ****  //  HDMI_Tx_Init();
1836:Src/main.c    **** 
1837:Src/main.c    ****    if (HDMI_IN_NUMBER == 4 )
1838:Src/main.c    ****     pVS4210_MutiWindows1.OutputMode = VS4210_1080P_MODE1 ;  // 4windows
1839:Src/main.c    ****   else
1840:Src/main.c    **** 	  #ifdef VS4210_SELECT_WIN1	//20201211-02
1841:Src/main.c    **** 	  pVS4210_MutiWindows1.OutputMode =VS4210_1080P_MODE0_w1;
1842:Src/main.c    **** 	  #else
1843:Src/main.c    ****       pVS4210_MutiWindows1.OutputMode =VS4210_1080P_MODE0_w0;/// VS4210_1080P_MODE12 ;  
1844:Src/main.c    **** 	  #endif
1845:Src/main.c    **** 
1846:Src/main.c    ****   pVS4210_MutiWindows1.AudioChannel = HDMI_AUDIO_1 ;
1847:Src/main.c    ****   pVS4210_MutiWindows1.OutputSize = _OUTPUT_1080P60 ;
1848:Src/main.c    **** 	#ifdef VS4210_SELECT_WIN1	//20201211-02
1849:Src/main.c    **** 	pVS4210_MutiWindows1.WindowMap.WMap0 = 2 ;
1850:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap1 = 1 ; //set ch2 = video2
1851:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap2 = 3 ; //set ch3 = video3
1852:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap3 = 4 ; //set ch4 = video4
1853:Src/main.c    **** 	#else
1854:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap0 = 1 ; //set ch1 = video1
1855:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap1 = 2 ; //set ch2 = video2
1856:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap2 = 3 ; //set ch3 = video3
1857:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap3 = 4 ; //set ch4 = video4
1858:Src/main.c    **** 	#endif
ARM GAS  /tmp/cclqPDF2.s 			page 34


1859:Src/main.c    **** #if 1
1860:Src/main.c    **** //Extern OSD 20200110-01
1861:Src/main.c    **** VXOSD_UseFont_init(EXTERNOSDNUMBER ,&UserDefineFont1[0] ) ;
1862:Src/main.c    **** 
1863:Src/main.c    **** main_init();
1864:Src/main.c    **** #endif
1865:Src/main.c    **** 
1866:Src/main.c    **** #ifdef  _SUPPORT_EDID_RAM_
1867:Src/main.c    **** //interval EDID ryan@20200917
1868:Src/main.c    **** //SETIT66021EDID();
1869:Src/main.c    **** #endif
1870:Src/main.c    **** 
1871:Src/main.c    ****    Init_TP280x_RegSet();
1872:Src/main.c    **** 
1873:Src/main.c    ****    //test@start
1874:Src/main.c    **** #ifdef VICTOR_DEBUG
1875:Src/main.c    ****    val = VXISI2CRead(0x00) ;
1876:Src/main.c    ****    dbg_Printf("VS4210 chip ID = 0x%02x\r\n",(int)val) ;
1877:Src/main.c    ****    dbg_Printf("VS4210 Init. (Startting...)\r\n") ;
1878:Src/main.c    **** #endif
1879:Src/main.c    **** 
1880:Src/main.c    ****  pVS4210_MutiWindows1.DrawOSDFlg = 0x03 ;  //Enable OSD, bit1=Title, bit0 = bar
1881:Src/main.c    ****   //pVS4210_MutiWindows1.DrawOSDFlg = 0x00 ;  //Enable OSD, bit1=Title, bit0 = bar
1882:Src/main.c    ****   //pVS4210_MutiWindows1.OutputMode = VS4210_1080P_MODE1 ;  // 4windows
1883:Src/main.c    ****   //pVS4210_MutiWindows1.OutputMode = VS4210_1080P_MODE6 ;  // 1_3 windows
1884:Src/main.c    ****   //pVS4210_MutiWindows1.OutputMode = VS4210_1080P_MODE12 ;  // 4windows
1885:Src/main.c    **** //  pVS4210_MutiWindows1.WindowMap.WMap0 = 1 ; //set ch1 = video1
1886:Src/main.c    **** //  pVS4210_MutiWindows1.WindowMap.WMap1 = 2 ; //set ch2 = video2
1887:Src/main.c    **** //  pVS4210_MutiWindows1.WindowMap.WMap2 = 3 ; //set ch3 = video3
1888:Src/main.c    **** //  pVS4210_MutiWindows1.WindowMap.WMap3 = 4 ; //set ch4 = video4
1889:Src/main.c    ****   //pVS4210_MutiWindows1.AudioChannel = HDMI_AUDIO_1 ;
1890:Src/main.c    ****   pVS4210_MutiWindows1.OutputSize = _OUTPUT_1080P60 ;
1891:Src/main.c    ****   //pVS4210_MutiWindows1.OutputSize = _OUTPUT_720P60 ;
1892:Src/main.c    ****   //pVS4210_MutiWindows1.DrawBoxFlg =1 ;
1893:Src/main.c    ****   pVS4210_MutiWindows1.DrawBoxFlg =0 ;
1894:Src/main.c    ****   pVS4210_MutiWindows1.DrawBoxColor= _EN_DRAWBOX_COLOR_White ;
1895:Src/main.c    ****   VXIS_fSetOsdx2(0) ;
1896:Src/main.c    **** 
1897:Src/main.c    ****   VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;
1898:Src/main.c    **** 
1899:Src/main.c    ****   if (pVS4210_MutiWindows1.DrawOSDFlg != 0)
1900:Src/main.c    ****   {
1901:Src/main.c    ****         OSD_Show_Flg = 1 ;
1902:Src/main.c    ****         Tim1_count = 0 ;
1903:Src/main.c    ****         OSDStateFlg = 1 ;
1904:Src/main.c    ****         OSDSecCount = 0 ;
1905:Src/main.c    ****   }  
1906:Src/main.c    **** 
1907:Src/main.c    **** ExOsdContent[0] = 3*  ((EXTERNOSDNUMBER *2) +1) ;
1908:Src/main.c    **** memset(&ExOsdContent[1] ,_spc , (EXTERNOSDNUMBER+1) *2 ) ;
1909:Src/main.c    **** exosdLen = 4*EXTERNOSDNUMBER + 4  ;
1910:Src/main.c    **** exosdStart = (EXTERNOSDNUMBER +1) *2 +1 ;
1911:Src/main.c    **** j = 1 ;
1912:Src/main.c    **** for (i = exosdStart ; i <= exosdLen ;i = i+2 )
1913:Src/main.c    **** {
1914:Src/main.c    **** 	ExOsdContent[i] = 0x7F + j ;
1915:Src/main.c    **** 	ExOsdContent[i+1] = _spc ;
ARM GAS  /tmp/cclqPDF2.s 			page 35


1916:Src/main.c    **** 	j++ ;
1917:Src/main.c    **** }
1918:Src/main.c    **** memset(&ExOsdContent[4*EXTERNOSDNUMBER +3] ,_spc ,EXTERNOSDNUMBER *2 +1   ) ;
1919:Src/main.c    ****   exosdLen = EXTERNOSDNUMBER *2  ;
1920:Src/main.c    **** 
1921:Src/main.c    **** Audio_Sel(HDMI_AUDIO_1) ;
1922:Src/main.c    **** //test@end
1923:Src/main.c    **** 
1924:Src/main.c    **** /*
1925:Src/main.c    **** //xxxxx 2013-0801
1926:Src/main.c    **** IT6602HPDCtrl(1,0);	// HDMI port , set HPD = 0
1927:Src/main.c    **** //xxxxx
1928:Src/main.c    **** 
1929:Src/main.c    ****     delay1ms(1000);	//for power sequence
1930:Src/main.c    **** 
1931:Src/main.c    **** IT6602_fsm_init();
1932:Src/main.c    **** */
1933:Src/main.c    **** 
1934:Src/main.c    **** 
1935:Src/main.c    **** #if 0
1936:Src/main.c    **** //PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON);
1937:Src/main.c    **** 
1938:Src/main.c    **** //load eeprom data
1939:Src/main.c    **** //LoadEEPROM();
1940:Src/main.c    **** 
1941:Src/main.c    **** //RX
1942:Src/main.c    ****   ManVidRes = RES1920X1080 ; //0x01
1943:Src/main.c    **** //Init_TP280x_RegSet();
1944:Src/main.c    **** 
1945:Src/main.c    **** //TX
1946:Src/main.c    ****   //VS9988_Set_Format(gbVXIS_InputMode, gbVXIS_OuputModeflg, gbVXIS_OuputChannel  )	;
1947:Src/main.c    ****   //gbVXIS_InputMode = _OSD_NO_SINGLE ;
1948:Src/main.c    ****   //VS9988_BlueScreen() ;
1949:Src/main.c    ****   //VXOSD_SetOnOff(0) ;
1950:Src/main.c    **** 
1951:Src/main.c    ****   //HDMI_Tx_Init() ;
1952:Src/main.c    **** 
1953:Src/main.c    ****   //VS4210 SW Reset@start
1954:Src/main.c    ****     VXISI2CWrite( 0x01 , 0x5A); //Reset
1955:Src/main.c    **** 
1956:Src/main.c    **** 
1957:Src/main.c    ****   //VS4210 SW Reset@end
1958:Src/main.c    ****   //VS4210_SwitchChip(0x40, 0 ) ;c8 cc8
1959:Src/main.c    ****   pVS4210_JointKind1.AudioChannel = HDMI_AUDIO_NONE ;
1960:Src/main.c    ****   pVS4210_JointKind1.DrawBoxFlg =1 ;
1961:Src/main.c    ****   pVS4210_JointKind1.DrawOSDFlg =0x03 ; //bits 0 ,1
1962:Src/main.c    ****   //pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w0 ;
1963:Src/main.c    ****  // pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE1 ;
1964:Src/main.c    **** pVS4210_JointKind1.OutputMode =VS4210_1080P_MODE0_w0;/* VS4210_1080P_MODE1 ;*/
1965:Src/main.c    ****   pVS4210_JointKind1.OutputSize = _OUTPUT_1080P60 ;///*_OUTPUT_800x480;*/
1966:Src/main.c    **** 
1967:Src/main.c    **** //LCDPowerON();
1968:Src/main.c    **** 
1969:Src/main.c    **** //VS4210_Rx_NoSignal(3) ;
1970:Src/main.c    **** 
1971:Src/main.c    ****  setloopoutmode(0) ;
1972:Src/main.c    **** // SetNowMode();	
ARM GAS  /tmp/cclqPDF2.s 			page 36


1973:Src/main.c    **** 
1974:Src/main.c    ****     VS4210_Rx_NoSignal(0) ;
1975:Src/main.c    ****   VS4210_Rx_NoSignal(1) ;
1976:Src/main.c    ****   VS4210_Rx_NoSignal(2) ;
1977:Src/main.c    ****   VS4210_Rx_NoSignal(3) ;
1978:Src/main.c    ****   
1979:Src/main.c    ****   #endif
1980:Src/main.c    **** // LCDPowerON();
1981:Src/main.c    **** // SetNowMode();  
1982:Src/main.c    ****   //void VS4210_Rx_NoSignal(tByte ch )
1983:Src/main.c    **** 
1984:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim3) ;
1985:Src/main.c    ****   /* USER CODE END 2 */
1986:Src/main.c    ****  
1987:Src/main.c    ****   /* Infinite loop */
1988:Src/main.c    ****   /* USER CODE BEGIN WHILE */
1989:Src/main.c    **** 
1990:Src/main.c    **** //SetNowMode();  
1991:Src/main.c    **** 
1992:Src/main.c    ****  // 	LoadVideoData();
1993:Src/main.c    **** 
1994:Src/main.c    **** //	  AudioMute(OFF);
1995:Src/main.c    **** 	//  LCDPowerON();
1996:Src/main.c    **** 
1997:Src/main.c    **** //	SET_VX8812_SD_Video_Out(_NTSC);
1998:Src/main.c    **** //	SET_VX8812_SD_Video_Out(_PAL);
1999:Src/main.c    **** 
2000:Src/main.c    **** //  Printf("\r\nMain Loop...");
2001:Src/main.c    ****   printf("\r\nMain Loop...");
2002:Src/main.c    **** 
2003:Src/main.c    ****   //VXISI2CWrite(0x08,0x21);
2004:Src/main.c    ****   //VXISI2CWrite(0x0A,0x21);
2005:Src/main.c    ****   //VXISI2CWrite(0x74,0x02);
2006:Src/main.c    ****   //VXISI2CWrite(0x82,0x40);
2007:Src/main.c    **** //  VS4210_FULL88init2(VS4210_hdmi1080P_1080P_mode0_w0_88param);
2008:Src/main.c    **** 
2009:Src/main.c    ****   while (1)
2010:Src/main.c    ****   {
2011:Src/main.c    ****     /* USER CODE END WHILE */
2012:Src/main.c    **** 
2013:Src/main.c    **** //	if(PowerFlag==ON)///power offf
2014:Src/main.c    **** 	 main_loop();
2015:Src/main.c    **** 	
2016:Src/main.c    **** //	WaitPowerOn();
2017:Src/main.c    **** 
2018:Src/main.c    **** 	//user_pwm_setvalue(500);
2019:Src/main.c    **** 
2020:Src/main.c    ****     /* USER CODE BEGIN 3 */
2021:Src/main.c    **** 
2022:Src/main.c    **** 
2023:Src/main.c    **** 
2024:Src/main.c    **** 
2025:Src/main.c    ****   }
2026:Src/main.c    ****   /* USER CODE END 3 */
2027:Src/main.c    **** }
2028:Src/main.c    **** 
2029:Src/main.c    **** void main_loop(void)
ARM GAS  /tmp/cclqPDF2.s 			page 37


2030:Src/main.c    **** {
2031:Src/main.c    **** 
2032:Src/main.c    **** //BYTE val;
2033:Src/main.c    **** //USHORT loopinterval;
2034:Src/main.c    **** 
2035:Src/main.c    **** //VXISI2CWrite(0xf0,0xb5);
2036:Src/main.c    **** 
2037:Src/main.c    **** while(1)
2038:Src/main.c    **** {
2039:Src/main.c    **** 
2040:Src/main.c    **** #if (_DEBUG_MESSAGE_Monitor==ON)
2041:Src/main.c    **** 	if(AccessEnable==1)
2042:Src/main.c    **** 	#endif
2043:Src/main.c    **** {
2044:Src/main.c    **** 	HDMI_VideoModeDetect() ;
2045:Src/main.c    **** 	HDMI_AudioModeDetect() ;
2046:Src/main.c    **** 
2047:Src/main.c    **** 	TxCount++ ;
2048:Src/main.c    **** 	if (TxCount > 10 )
2049:Src/main.c    **** 	{
2050:Src/main.c    **** 		TxCount = 0 ;
2051:Src/main.c    **** 		HDMITX_DevLoopProc() ;
2052:Src/main.c    **** 	}
2053:Src/main.c    **** 	
2054:Src/main.c    **** //	GetRS232_CMD();
2055:Src/main.c    **** 	//getmcukeystate() ;
2056:Src/main.c    **** 	/*
2057:Src/main.c    **** 	if (IR_END_Flg ==1 )
2058:Src/main.c    **** 	{
2059:Src/main.c    **** 		IR_END_Flg = 0 ;
2060:Src/main.c    **** 		if (u8IRcode == u8IRCheckcode )
2061:Src/main.c    **** 		{
2062:Src/main.c    **** 			dbg_Printf("Vendor=0x%04x,IR=0x%02x\r\n",(int) u16Vendor,(int) u8IRcode) ;
2063:Src/main.c    **** 			if (u16Vendor == IR_Vendor_Code_)
2064:Src/main.c    **** 			{
2065:Src/main.c    **** 				ir_process(u8IRcode) ;
2066:Src/main.c    **** 				u16Vendor =0 ;
2067:Src/main.c    **** 			}
2068:Src/main.c    **** 		}
2069:Src/main.c    **** 	}
2070:Src/main.c    **** 	*/
2071:Src/main.c    **** 
2072:Src/main.c    **** 	msleep(10) ;
2073:Src/main.c    **** 
2074:Src/main.c    **** 	   gMode0LoopCount++ ;
2075:Src/main.c    **** 	   if (gMode0LoopCount > 100 )
2076:Src/main.c    **** 	   {
2077:Src/main.c    **** 		   gMode0LoopCount = 0 ;
2078:Src/main.c    **** 		   OSDSecCount = OSDSecCount +1 ;
2079:Src/main.c    **** 	   }
2080:Src/main.c    **** 	
2081:Src/main.c    **** 	   if (OSDPreSecCount != OSDSecCount)
2082:Src/main.c    **** 	   {
2083:Src/main.c    **** 		   OSDPreSecCount = OSDSecCount ;
2084:Src/main.c    **** 		   if (gMode0LoopFlg == 1)
2085:Src/main.c    **** 		   {
2086:Src/main.c    **** 			   gMode0LoopSecCount ++ ;
ARM GAS  /tmp/cclqPDF2.s 			page 38


2087:Src/main.c    **** 			   if (gMode0LoopSecCount > gMode0LoopSecCmpVal)
2088:Src/main.c    **** 			   {
2089:Src/main.c    **** 				   gMode0LoopSecCount = 0 ;
2090:Src/main.c    **** 				   pVS4210_MutiWindows1.OutputMode = VS4210_FULL_MODE0 ;
2091:Src/main.c    **** 				   if (pVS4210_MutiWindows1.WindowMap.WMap0 < 4)
2092:Src/main.c    **** 				   {
2093:Src/main.c    **** 					   pVS4210_MutiWindows1.WindowMap.WMap0 = pVS4210_MutiWindows1.WindowMap.WMap0 +1 ;
2094:Src/main.c    **** 				   }
2095:Src/main.c    **** 				   else {
2096:Src/main.c    **** 					   pVS4210_MutiWindows1.WindowMap.WMap0 = 1 ;
2097:Src/main.c    **** 				   }
2098:Src/main.c    **** 				   dbg_Printf("LOOP CH=%d,SMP Sec=%d\r\n",pVS4210_MutiWindows1.WindowMap.WMap0, gMode0LoopSecCm
2099:Src/main.c    **** 				   VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;
2100:Src/main.c    **** 				   OSDSecCount = 0 ;
2101:Src/main.c    **** 			   }
2102:Src/main.c    **** 		   }
2103:Src/main.c    **** 	
2104:Src/main.c    **** 		   if (gMode0LoopFlg == 1)
2105:Src/main.c    **** 		   {
2106:Src/main.c    **** 		    dbg_Printf("Loop CH=%d,SecCount=%d\r\n",pVS4210_MutiWindows1.WindowMap.WMap0, OSDSecCount)  ;
2107:Src/main.c    **** 		   }
2108:Src/main.c    **** 		   else
2109:Src/main.c    **** 		   {
2110:Src/main.c    **** 		  //dbg_Printf("OSDSecCount=%d\r\n", OSDSecCount)  ;
2111:Src/main.c    **** 		   }
2112:Src/main.c    **** 	
2113:Src/main.c    **** 		   if (OSDStateFlg == 1 )
2114:Src/main.c    **** 		   {
2115:Src/main.c    **** 			   if (OSDSecCount >= OSD_OFF_SEC )
2116:Src/main.c    **** 			   {
2117:Src/main.c    **** 				   OSDSecCount = 0 ;
2118:Src/main.c    **** 				   OSDStateFlg = 0 ;
2119:Src/main.c    **** 				   OSD_Clear_All();
2120:Src/main.c    **** 				   ////VXIS_fSetContentOsdOnOff(0) ;
2121:Src/main.c    **** 			   }
2122:Src/main.c    **** 		   }
2123:Src/main.c    **** 
2124:Src/main.c    **** 		if(VXISI2CRead(0x32)==0 )///CONTRAST
2125:Src/main.c    **** 			VXISI2CWrite(0x32,0x80);
2126:Src/main.c    **** 		   
2127:Src/main.c    **** 	   }
2128:Src/main.c    **** 
2129:Src/main.c    **** 
2130:Src/main.c    **** 	EQ_Detect();
2131:Src/main.c    **** 	
2132:Src/main.c    **** #if (_Source_Switch==ON)
2133:Src/main.c    **** 
2134:Src/main.c    **** 	#if (_Only_AHD_Mode==ON)
2135:Src/main.c    **** 		if((SelectInputMode!=1))
2136:Src/main.c    **** 		{
2137:Src/main.c    **** 			msleep(50) ;
2138:Src/main.c    **** 
2139:Src/main.c    **** 			if((SelectInputMode!=1))
2140:Src/main.c    **** 				{
2141:Src/main.c    **** 				SelectInputMode=1;
2142:Src/main.c    **** 
2143:Src/main.c    **** 					HS_Select_Win(1);
ARM GAS  /tmp/cclqPDF2.s 			page 39


2144:Src/main.c    **** 				}
2145:Src/main.c    **** 		}	
2146:Src/main.c    **** 
2147:Src/main.c    **** 	#else
2148:Src/main.c    **** 	CheckSelectInputMode=HDMI_SELECT_GET();
2149:Src/main.c    **** 		if((CheckSelectInputMode!=SelectInputMode)/*&&(BOOT_ISSUE==0)*/)
2150:Src/main.c    **** 		{
2151:Src/main.c    **** 			msleep(50) ;
2152:Src/main.c    **** 			CheckSelectInputMode=HDMI_SELECT_GET();
2153:Src/main.c    **** 
2154:Src/main.c    **** 			if((CheckSelectInputMode!=SelectInputMode)/*&&(BOOT_ISSUE==0)*/)
2155:Src/main.c    **** 				{
2156:Src/main.c    **** 				SelectInputMode=CheckSelectInputMode;
2157:Src/main.c    **** 
2158:Src/main.c    **** 			//	HS_Select_Win(HDMI_SELECT_GET());
2159:Src/main.c    **** 
2160:Src/main.c    **** 				if(SelectInputMode==1)
2161:Src/main.c    **** 					HS_Select_Win(1);
2162:Src/main.c    **** 				else
2163:Src/main.c    **** 				HS_Select_Win(0);
2164:Src/main.c    **** 				}
2165:Src/main.c    **** 		}	
2166:Src/main.c    **** 
2167:Src/main.c    **** 		
2168:Src/main.c    **** 	#endif
2169:Src/main.c    **** 
2170:Src/main.c    **** #endif
2171:Src/main.c    **** }
2172:Src/main.c    **** 
2173:Src/main.c    **** 	#if (_DEBUG_MESSAGE_Monitor==ON)
2174:Src/main.c    **** 	do {	//20201211-04
2175:Src/main.c    **** 	while( RS_ready())	Monitor();	
2176:Src/main.c    **** 	}while(AccessEnable == 0);
2177:Src/main.c    **** 	#endif
2178:Src/main.c    **** 
2179:Src/main.c    **** 	     TOAReceivePaser();
2180:Src/main.c    **** 		
2181:Src/main.c    **** 	      SysTimerHandler();
2182:Src/main.c    **** 
2183:Src/main.c    **** 		Get_2824cIrq();//check tp2824 COC
2184:Src/main.c    **** 
2185:Src/main.c    **** 
2186:Src/main.c    **** 
2187:Src/main.c    **** #if 0
2188:Src/main.c    **** 		  loopinterval += getloopTicCount();
2189:Src/main.c    **** 		  
2190:Src/main.c    **** 					  ///////////////////////////
2191:Src/main.c    **** 					  // sys main flow
2192:Src/main.c    **** 					  ///////////////////////////
2193:Src/main.c    **** 					  if( loopinterval >=MS_LOOP) //execute once each 50m second
2194:Src/main.c    **** 					  {
2195:Src/main.c    **** 				    //printf("loopinterval\n");
2196:Src/main.c    **** 		  
2197:Src/main.c    **** 					   loopinterval =0;
2198:Src/main.c    **** 				//	 IT6602_fsm();
2199:Src/main.c    **** 					 }
2200:Src/main.c    **** #endif	
ARM GAS  /tmp/cclqPDF2.s 			page 40


2201:Src/main.c    **** 	/*
2202:Src/main.c    **** 		CheckKeyIn();
2203:Src/main.c    **** 
2204:Src/main.c    **** 	CheckTouchP();
2205:Src/main.c    **** 	
2206:Src/main.c    **** 	  EQ_Detect();	 
2207:Src/main.c    **** 
2208:Src/main.c    **** 	if( GT9147_Scan(1)==_TOUCH_COUNT_4 ) break;		
2209:Src/main.c    **** 	
2210:Src/main.c    **** 		  val=CheckTrigger();
2211:Src/main.c    **** 		  TriggerHandler(val);
2212:Src/main.c    **** 
2213:Src/main.c    **** 	if( !CheckKeyIn() ) break;			// POWEROFF
2214:Src/main.c    **** 	*/
2215:Src/main.c    **** 	
2216:Src/main.c    **** 	}
2217:Src/main.c    **** 
2218:Src/main.c    **** }
2219:Src/main.c    **** 
2220:Src/main.c    **** /* static*/ void VS4210_FULL88init2( tcByte *Valn )
2221:Src/main.c    ****  {
2222:Src/main.c    **** 	 tByte i ;
2223:Src/main.c    **** 	 tByte addr ;
2224:Src/main.c    **** 	 tByte i2cVal ;
2225:Src/main.c    **** 	 tcByte *Addrn ; 
2226:Src/main.c    **** 	 Addrn = &VS4210_Addr_88param[0] ; 
2227:Src/main.c    ****  
2228:Src/main.c    **** 	 for (i=0 ; i< VS4210_INIT_NUMBER ; i++)
2229:Src/main.c    **** 	 {
2230:Src/main.c    **** 		 addr	= Addrn[i] ;
2231:Src/main.c    **** 		 i2cVal = Valn[i];
2232:Src/main.c    **** 		 VXISI2CWrite( addr,i2cVal);
2233:Src/main.c    **** 	 }
2234:Src/main.c    ****  }
2235:Src/main.c    **** 
2236:Src/main.c    **** void TP_bt1120_1080P_1080P_mode0_w0(void)
2237:Src/main.c    **** {
2238:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table 1080P... ");
2239:Src/main.c    **** #if 1
2240:Src/main.c    **** 
2241:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_1080P_1080P_mode0_w0_88param);
2242:Src/main.c    **** #else
2243:Src/main.c    **** 
2244:Src/main.c    **** VXISI2CWrite(0x00,0x42); 
2245:Src/main.c    **** VXISI2CWrite(0x01,0x00); 
2246:Src/main.c    **** VXISI2CWrite(0x02,0x00); 
2247:Src/main.c    **** VXISI2CWrite(0x03,0x75); 
2248:Src/main.c    **** VXISI2CWrite(0x04,0x18); 
2249:Src/main.c    **** VXISI2CWrite(0x05,0x80); 
2250:Src/main.c    **** VXISI2CWrite(0x06,0x20); 
2251:Src/main.c    **** VXISI2CWrite(0x07,0x0C); 
2252:Src/main.c    **** VXISI2CWrite(0x08,0x40); 
2253:Src/main.c    **** VXISI2CWrite(0x09,0x0A); 
2254:Src/main.c    **** VXISI2CWrite(0x0A,0x40); 
2255:Src/main.c    **** VXISI2CWrite(0x0B,0x0A); 
2256:Src/main.c    **** VXISI2CWrite(0x0C,0x00); 
2257:Src/main.c    **** VXISI2CWrite(0x0D,0x20); 
ARM GAS  /tmp/cclqPDF2.s 			page 41


2258:Src/main.c    **** VXISI2CWrite(0x0E,0x10); 
2259:Src/main.c    **** VXISI2CWrite(0x0F,0x00); 
2260:Src/main.c    **** VXISI2CWrite(0x10,0x81); 
2261:Src/main.c    **** VXISI2CWrite(0x11,0x82); 
2262:Src/main.c    **** VXISI2CWrite(0x12,0x74); 
2263:Src/main.c    **** VXISI2CWrite(0x13,0x80); 
2264:Src/main.c    **** VXISI2CWrite(0x14,0x38); 
2265:Src/main.c    **** VXISI2CWrite(0x15,0x78); 
2266:Src/main.c    **** VXISI2CWrite(0x16,0xFE); 
2267:Src/main.c    **** VXISI2CWrite(0x17,0x00); 
2268:Src/main.c    **** VXISI2CWrite(0x18,0xC0); 
2269:Src/main.c    **** VXISI2CWrite(0x19,0x01); 
2270:Src/main.c    **** VXISI2CWrite(0x1A,0x20); 
2271:Src/main.c    **** VXISI2CWrite(0x1B,0x30); 
2272:Src/main.c    **** VXISI2CWrite(0x1C,0x00); 
2273:Src/main.c    **** VXISI2CWrite(0x1D,0x00); 
2274:Src/main.c    **** VXISI2CWrite(0x1E,0x20); 
2275:Src/main.c    **** VXISI2CWrite(0x1F,0xA4); 
2276:Src/main.c    **** VXISI2CWrite(0x20,0x50); 
2277:Src/main.c    **** VXISI2CWrite(0x21,0xE2); 
2278:Src/main.c    **** VXISI2CWrite(0x22,0x87); 
2279:Src/main.c    **** VXISI2CWrite(0x23,0x98); 
2280:Src/main.c    **** VXISI2CWrite(0x24,0x80); 
2281:Src/main.c    **** VXISI2CWrite(0x25,0x44); 
2282:Src/main.c    **** VXISI2CWrite(0x26,0x65); 
2283:Src/main.c    **** VXISI2CWrite(0x27,0x38); 
2284:Src/main.c    **** VXISI2CWrite(0x28,0xF0); 
2285:Src/main.c    **** VXISI2CWrite(0x29,0x00); 
2286:Src/main.c    **** VXISI2CWrite(0x2A,0x00); 
2287:Src/main.c    **** VXISI2CWrite(0x2B,0x11); 
2288:Src/main.c    **** VXISI2CWrite(0x2C,0x00); 
2289:Src/main.c    **** VXISI2CWrite(0x2D,0x00); 
2290:Src/main.c    **** VXISI2CWrite(0x2E,0x47); 
2291:Src/main.c    **** VXISI2CWrite(0x2F,0x80); 
2292:Src/main.c    **** VXISI2CWrite(0x30,0x38); 
2293:Src/main.c    **** VXISI2CWrite(0x31,0x80); 
2294:Src/main.c    **** VXISI2CWrite(0x32,0x80); 
2295:Src/main.c    **** VXISI2CWrite(0x33,0x80); 
2296:Src/main.c    **** VXISI2CWrite(0x34,0xA0); 
2297:Src/main.c    **** VXISI2CWrite(0x35,0x18); 
2298:Src/main.c    **** VXISI2CWrite(0x36,0x46); 
2299:Src/main.c    **** VXISI2CWrite(0x37,0x64); 
2300:Src/main.c    **** VXISI2CWrite(0x38,0x00); 
2301:Src/main.c    **** VXISI2CWrite(0x39,0xFF); 
2302:Src/main.c    **** VXISI2CWrite(0x3A,0x00); 
2303:Src/main.c    **** VXISI2CWrite(0x3B,0x80); 
2304:Src/main.c    **** VXISI2CWrite(0x3C,0x80); 
2305:Src/main.c    **** VXISI2CWrite(0x3D,0x80); 
2306:Src/main.c    **** VXISI2CWrite(0x3E,0x80); 
2307:Src/main.c    **** VXISI2CWrite(0x3F,0x80); 
2308:Src/main.c    **** //VXISI2CWrite(0xVXISI2C)
2309:Src/main.c    **** VXISI2CWrite(0x41,0x60); 
2310:Src/main.c    **** VXISI2CWrite(0x42,0x5F); 
2311:Src/main.c    **** VXISI2CWrite(0x43,0x37); 
2312:Src/main.c    **** VXISI2CWrite(0x44,0x14); 
2313:Src/main.c    **** VXISI2CWrite(0x45,0x00); 
2314:Src/main.c    **** VXISI2CWrite(0x46,0x00); 
ARM GAS  /tmp/cclqPDF2.s 			page 42


2315:Src/main.c    **** VXISI2CWrite(0x47,0x00); 
2316:Src/main.c    **** VXISI2CWrite(0x48,0x00); 
2317:Src/main.c    **** VXISI2CWrite(0x49,0x00); 
2318:Src/main.c    **** VXISI2CWrite(0x4A,0x00); 
2319:Src/main.c    **** VXISI2CWrite(0x4B,0x20); 
2320:Src/main.c    **** VXISI2CWrite(0x4C,0x00); 
2321:Src/main.c    **** VXISI2CWrite(0x4D,0x00); 
2322:Src/main.c    **** VXISI2CWrite(0x4E,0x00); 
2323:Src/main.c    **** VXISI2CWrite(0x4F,0x7F); 
2324:Src/main.c    **** VXISI2CWrite(0x50,0x20); 
2325:Src/main.c    **** VXISI2CWrite(0x51,0x05); 
2326:Src/main.c    **** VXISI2CWrite(0x52,0x00); 
2327:Src/main.c    **** VXISI2CWrite(0x53,0x06); 
2328:Src/main.c    **** VXISI2CWrite(0x54,0x00); 
2329:Src/main.c    **** VXISI2CWrite(0x55,0xB4); 
2330:Src/main.c    **** VXISI2CWrite(0x56,0x3D); 
2331:Src/main.c    **** VXISI2CWrite(0x57,0x04); 
2332:Src/main.c    **** VXISI2CWrite(0x58,0x00); 
2333:Src/main.c    **** VXISI2CWrite(0x59,0x08); 
2334:Src/main.c    **** VXISI2CWrite(0x5A,0x10); 
2335:Src/main.c    **** VXISI2CWrite(0x5B,0x00); 
2336:Src/main.c    **** VXISI2CWrite(0x5C,0x68); 
2337:Src/main.c    **** VXISI2CWrite(0x5D,0x40); 
2338:Src/main.c    **** VXISI2CWrite(0x5E,0x0A); 
2339:Src/main.c    **** VXISI2CWrite(0x5F,0x00); 
2340:Src/main.c    **** VXISI2CWrite(0x60,0xB4); 
2341:Src/main.c    **** VXISI2CWrite(0x61,0x51); 
2342:Src/main.c    **** VXISI2CWrite(0x62,0x33); 
2343:Src/main.c    **** VXISI2CWrite(0x63,0x01); 
2344:Src/main.c    **** VXISI2CWrite(0x64,0xFF); 
2345:Src/main.c    **** VXISI2CWrite(0x65,0x01); 
2346:Src/main.c    **** VXISI2CWrite(0x66,0xFF); 
2347:Src/main.c    **** VXISI2CWrite(0x67,0x89); 
2348:Src/main.c    **** VXISI2CWrite(0x68,0xAB); 
2349:Src/main.c    **** VXISI2CWrite(0x69,0x88); 
2350:Src/main.c    **** VXISI2CWrite(0x6A,0x6E); 
2351:Src/main.c    **** VXISI2CWrite(0x6B,0x6E); 
2352:Src/main.c    **** VXISI2CWrite(0x6C,0x6E); 
2353:Src/main.c    **** VXISI2CWrite(0x6D,0x00); 
2354:Src/main.c    **** VXISI2CWrite(0x6E,0x00); 
2355:Src/main.c    **** VXISI2CWrite(0x6F,0x00); 
2356:Src/main.c    **** VXISI2CWrite(0x70,0x00); 
2357:Src/main.c    **** VXISI2CWrite(0x71,0x00); 
2358:Src/main.c    **** VXISI2CWrite(0x72,0x00); 
2359:Src/main.c    **** VXISI2CWrite(0x73,0x00); 
2360:Src/main.c    **** VXISI2CWrite(0x74,0x06); 
2361:Src/main.c    **** VXISI2CWrite(0x75,0xFF); 
2362:Src/main.c    **** VXISI2CWrite(0x76,0xFF); 
2363:Src/main.c    **** VXISI2CWrite(0x77,0xFF); 
2364:Src/main.c    **** VXISI2CWrite(0x78,0xFF); 
2365:Src/main.c    **** VXISI2CWrite(0x79,0xFF); 
2366:Src/main.c    **** VXISI2CWrite(0x7A,0xFF); 
2367:Src/main.c    **** VXISI2CWrite(0x7B,0xFF); 
2368:Src/main.c    **** VXISI2CWrite(0x7C,0xFF); 
2369:Src/main.c    **** VXISI2CWrite(0x7D,0xF0); 
2370:Src/main.c    **** VXISI2CWrite(0x7E,0x80); 
2371:Src/main.c    **** VXISI2CWrite(0x7F,0x00); 
ARM GAS  /tmp/cclqPDF2.s 			page 43


2372:Src/main.c    **** VXISI2CWrite(0x80,0x01); 
2373:Src/main.c    **** VXISI2CWrite(0x81,0x15); 
2374:Src/main.c    **** VXISI2CWrite(0x82,0x40); 
2375:Src/main.c    **** VXISI2CWrite(0x83,0x2D); 
2376:Src/main.c    **** VXISI2CWrite(0x84,0x57); 
2377:Src/main.c    **** VXISI2CWrite(0x85,0xFD); 
2378:Src/main.c    **** VXISI2CWrite(0x86,0x00); 
2379:Src/main.c    **** VXISI2CWrite(0x87,0x00); 
2380:Src/main.c    **** VXISI2CWrite(0x88,0x00); 
2381:Src/main.c    **** VXISI2CWrite(0x89,0x00); 
2382:Src/main.c    **** VXISI2CWrite(0x8A,0x00); 
2383:Src/main.c    **** VXISI2CWrite(0x8B,0x7E); 
2384:Src/main.c    **** VXISI2CWrite(0x8C,0x03); 
2385:Src/main.c    **** VXISI2CWrite(0x8D,0x17); 
2386:Src/main.c    **** VXISI2CWrite(0x8E,0x8C); 
2387:Src/main.c    **** VXISI2CWrite(0x8F,0x00); 
2388:Src/main.c    **** VXISI2CWrite(0x90,0xCC); 
2389:Src/main.c    **** VXISI2CWrite(0x91,0x41); 
2390:Src/main.c    **** VXISI2CWrite(0x92,0xC4); 
2391:Src/main.c    **** VXISI2CWrite(0x93,0x84); 
2392:Src/main.c    **** VXISI2CWrite(0x94,0x98); 
2393:Src/main.c    **** VXISI2CWrite(0x95,0x80); 
2394:Src/main.c    **** VXISI2CWrite(0x96,0x65); 
2395:Src/main.c    **** VXISI2CWrite(0x97,0x70); 
2396:Src/main.c    **** VXISI2CWrite(0x98,0x29); 
2397:Src/main.c    **** VXISI2CWrite(0x99,0x90); 
2398:Src/main.c    **** VXISI2CWrite(0x9A,0x80); 
2399:Src/main.c    **** VXISI2CWrite(0x9B,0x04); 
2400:Src/main.c    **** VXISI2CWrite(0x9C,0x00); 
2401:Src/main.c    **** VXISI2CWrite(0x9D,0x00); 
2402:Src/main.c    **** VXISI2CWrite(0x9E,0x04); 
2403:Src/main.c    **** VXISI2CWrite(0x9F,0x65); 
2404:Src/main.c    **** VXISI2CWrite(0xA0,0x80); 
2405:Src/main.c    **** VXISI2CWrite(0xA1,0xD8); 
2406:Src/main.c    **** VXISI2CWrite(0xA2,0x98); 
2407:Src/main.c    **** VXISI2CWrite(0xA3,0x87); 
2408:Src/main.c    **** VXISI2CWrite(0xA4,0x00); 
2409:Src/main.c    **** VXISI2CWrite(0xA5,0x80); 
2410:Src/main.c    **** VXISI2CWrite(0xA6,0x00); 
2411:Src/main.c    **** VXISI2CWrite(0xA7,0x70); 
2412:Src/main.c    **** VXISI2CWrite(0xA8,0x40); 
2413:Src/main.c    **** VXISI2CWrite(0xA9,0x1E); 
2414:Src/main.c    **** VXISI2CWrite(0xAA,0x2C); 
2415:Src/main.c    **** VXISI2CWrite(0xAB,0x00); 
2416:Src/main.c    **** VXISI2CWrite(0xAC,0x90); 
2417:Src/main.c    **** VXISI2CWrite(0xAD,0x65); 
2418:Src/main.c    **** VXISI2CWrite(0xAE,0x65); 
2419:Src/main.c    **** VXISI2CWrite(0xAF,0x99); 
2420:Src/main.c    **** VXISI2CWrite(0xB0,0x00); 
2421:Src/main.c    **** VXISI2CWrite(0xB1,0x00); 
2422:Src/main.c    **** VXISI2CWrite(0xB2,0x00); 
2423:Src/main.c    **** VXISI2CWrite(0xB3,0x00); 
2424:Src/main.c    **** VXISI2CWrite(0xB4,0x00); 
2425:Src/main.c    **** VXISI2CWrite(0xB5,0x00); 
2426:Src/main.c    **** VXISI2CWrite(0xB6,0x00); 
2427:Src/main.c    **** VXISI2CWrite(0xB7,0x00); 
2428:Src/main.c    **** VXISI2CWrite(0xB8,0x80); 
ARM GAS  /tmp/cclqPDF2.s 			page 44


2429:Src/main.c    **** VXISI2CWrite(0xB9,0x00); 
2430:Src/main.c    **** VXISI2CWrite(0xBA,0x01); 
2431:Src/main.c    **** VXISI2CWrite(0xBB,0x00); 
2432:Src/main.c    **** VXISI2CWrite(0xBC,0x90); 
2433:Src/main.c    **** VXISI2CWrite(0xBD,0x01); 
2434:Src/main.c    **** VXISI2CWrite(0xBE,0x2C); 
2435:Src/main.c    **** VXISI2CWrite(0xBF,0x00); 
2436:Src/main.c    **** VXISI2CWrite(0xC0,0x00); 
2437:Src/main.c    **** VXISI2CWrite(0xC1,0x20); 
2438:Src/main.c    **** VXISI2CWrite(0xC2,0x20); 
2439:Src/main.c    **** VXISI2CWrite(0xC3,0x20); 
2440:Src/main.c    **** VXISI2CWrite(0xC4,0x20); 
2441:Src/main.c    **** VXISI2CWrite(0xC5,0x20); 
2442:Src/main.c    **** VXISI2CWrite(0xC6,0x00); 
2443:Src/main.c    **** VXISI2CWrite(0xC7,0x00); 
2444:Src/main.c    **** VXISI2CWrite(0xC8,0x00); 
2445:Src/main.c    **** VXISI2CWrite(0xC9,0x00); 
2446:Src/main.c    **** VXISI2CWrite(0xCA,0x00); 
2447:Src/main.c    **** VXISI2CWrite(0xCB,0x00); 
2448:Src/main.c    **** VXISI2CWrite(0xCC,0x00); 
2449:Src/main.c    **** VXISI2CWrite(0xCD,0x00); 
2450:Src/main.c    **** VXISI2CWrite(0xCE,0x00); 
2451:Src/main.c    **** VXISI2CWrite(0xCF,0x00); 
2452:Src/main.c    **** VXISI2CWrite(0xD0,0xFF); 
2453:Src/main.c    **** VXISI2CWrite(0xD1,0x3F); 
2454:Src/main.c    **** VXISI2CWrite(0xD2,0xC2); 
2455:Src/main.c    **** VXISI2CWrite(0xD3,0x3F); 
2456:Src/main.c    **** VXISI2CWrite(0xD4,0x00); 
2457:Src/main.c    **** VXISI2CWrite(0xD5,0x00); 
2458:Src/main.c    **** VXISI2CWrite(0xD6,0x00); 
2459:Src/main.c    **** VXISI2CWrite(0xD7,0x0F); 
2460:Src/main.c    **** VXISI2CWrite(0xD8,0x00); 
2461:Src/main.c    **** VXISI2CWrite(0xD9,0x00); 
2462:Src/main.c    **** VXISI2CWrite(0xDA,0x00); 
2463:Src/main.c    **** VXISI2CWrite(0xDB,0x00); 
2464:Src/main.c    **** VXISI2CWrite(0xDC,0x77); 
2465:Src/main.c    **** VXISI2CWrite(0xDD,0x01); 
2466:Src/main.c    **** VXISI2CWrite(0xDE,0x5F); 
2467:Src/main.c    **** VXISI2CWrite(0xDF,0x96); 
2468:Src/main.c    **** VXISI2CWrite(0xE0,0x00); 
2469:Src/main.c    **** VXISI2CWrite(0xE1,0x00); 
2470:Src/main.c    **** VXISI2CWrite(0xE2,0x00); 
2471:Src/main.c    **** VXISI2CWrite(0xE3,0x47); 
2472:Src/main.c    **** VXISI2CWrite(0xE4,0x3C); 
2473:Src/main.c    **** VXISI2CWrite(0xE5,0x80); 
2474:Src/main.c    **** VXISI2CWrite(0xE6,0x00); 
2475:Src/main.c    **** VXISI2CWrite(0xE7,0x00); 
2476:Src/main.c    **** VXISI2CWrite(0xE8,0x00); 
2477:Src/main.c    **** VXISI2CWrite(0xE9,0x00); 
2478:Src/main.c    **** VXISI2CWrite(0xEA,0x00); 
2479:Src/main.c    **** VXISI2CWrite(0xEB,0x00); 
2480:Src/main.c    **** VXISI2CWrite(0xEC,0x88); 
2481:Src/main.c    **** VXISI2CWrite(0xED,0x00); 
2482:Src/main.c    **** VXISI2CWrite(0xEE,0x00); 
2483:Src/main.c    **** VXISI2CWrite(0xEF,0x00); 
2484:Src/main.c    **** VXISI2CWrite(0xF0,0x30); 
2485:Src/main.c    **** VXISI2CWrite(0xF1,0x43); 
ARM GAS  /tmp/cclqPDF2.s 			page 45


2486:Src/main.c    **** VXISI2CWrite(0xF2,0x1F); 
2487:Src/main.c    **** VXISI2CWrite(0xF3,0x1F); 
2488:Src/main.c    **** VXISI2CWrite(0xF4,0x22); 
2489:Src/main.c    **** VXISI2CWrite(0xF5,0x73); 
2490:Src/main.c    **** VXISI2CWrite(0xF6,0x53); 
2491:Src/main.c    **** VXISI2CWrite(0xF7,0x80); 
2492:Src/main.c    **** VXISI2CWrite(0xF8,0x01); 
2493:Src/main.c    **** VXISI2CWrite(0xF9,0x01); 
2494:Src/main.c    **** VXISI2CWrite(0xFA,0x00); 
2495:Src/main.c    **** VXISI2CWrite(0xFB,0x00); 
2496:Src/main.c    **** VXISI2CWrite(0xFC,0x00); 
2497:Src/main.c    **** VXISI2CWrite(0xFD,0x70); 
2498:Src/main.c    **** VXISI2CWrite(0xFE,0x18); 
2499:Src/main.c    **** VXISI2CWrite(0xFF,0x07); 
2500:Src/main.c    **** 
2501:Src/main.c    **** 
2502:Src/main.c    **** /*
2503:Src/main.c    **** VXISI2CWrite(0x01,0x00);
2504:Src/main.c    **** VXISI2CWrite(0x02,0x00);
2505:Src/main.c    **** VXISI2CWrite(0x03,0x75);
2506:Src/main.c    **** VXISI2CWrite(0x04,0x18);
2507:Src/main.c    **** VXISI2CWrite(0x05,0x80);
2508:Src/main.c    **** VXISI2CWrite(0x06,0x20);
2509:Src/main.c    **** VXISI2CWrite(0x07,0x0C);
2510:Src/main.c    **** VXISI2CWrite(0x08,0x21);
2511:Src/main.c    **** VXISI2CWrite(0x09,0x0A);
2512:Src/main.c    **** VXISI2CWrite(0x0A,0x21);
2513:Src/main.c    **** VXISI2CWrite(0x0B,0x0A);
2514:Src/main.c    **** VXISI2CWrite(0x0C,0x00);
2515:Src/main.c    **** VXISI2CWrite(0x0D,0x20);
2516:Src/main.c    **** VXISI2CWrite(0x0E,0x10);
2517:Src/main.c    **** VXISI2CWrite(0x0F,0x00);
2518:Src/main.c    **** VXISI2CWrite(0x10,0x81);
2519:Src/main.c    **** VXISI2CWrite(0x11,0x82);
2520:Src/main.c    **** VXISI2CWrite(0x12,0x00);
2521:Src/main.c    **** VXISI2CWrite(0x13,0x00);
2522:Src/main.c    **** VXISI2CWrite(0x14,0x00);
2523:Src/main.c    **** VXISI2CWrite(0x15,0x78);
2524:Src/main.c    **** VXISI2CWrite(0x16,0xFE);
2525:Src/main.c    **** VXISI2CWrite(0x17,0x00);
2526:Src/main.c    **** VXISI2CWrite(0x18,0xC0);
2527:Src/main.c    **** VXISI2CWrite(0x19,0x01);
2528:Src/main.c    **** VXISI2CWrite(0x1A,0x36);
2529:Src/main.c    **** VXISI2CWrite(0x1B,0x30);
2530:Src/main.c    **** VXISI2CWrite(0x1C,0x00);
2531:Src/main.c    **** VXISI2CWrite(0x1D,0x00);
2532:Src/main.c    **** VXISI2CWrite(0x1E,0x20);
2533:Src/main.c    **** VXISI2CWrite(0x1F,0x00);
2534:Src/main.c    **** VXISI2CWrite(0x20,0x00);
2535:Src/main.c    **** VXISI2CWrite(0x21,0x00);
2536:Src/main.c    **** VXISI2CWrite(0x22,0xA7);
2537:Src/main.c    **** VXISI2CWrite(0x23,0x50);
2538:Src/main.c    **** VXISI2CWrite(0x24,0x80);
2539:Src/main.c    **** VXISI2CWrite(0x25,0x44);
2540:Src/main.c    **** VXISI2CWrite(0x26,0x65);
2541:Src/main.c    **** VXISI2CWrite(0x27,0x38);
2542:Src/main.c    **** VXISI2CWrite(0x28,0xF0);
ARM GAS  /tmp/cclqPDF2.s 			page 46


2543:Src/main.c    **** VXISI2CWrite(0x29,0x00);
2544:Src/main.c    **** VXISI2CWrite(0x2A,0x00);
2545:Src/main.c    **** VXISI2CWrite(0x2B,0x11);
2546:Src/main.c    **** VXISI2CWrite(0x2C,0x00);
2547:Src/main.c    **** VXISI2CWrite(0x2D,0x00);
2548:Src/main.c    **** VXISI2CWrite(0x2E,0x47);
2549:Src/main.c    **** VXISI2CWrite(0x2F,0x80);
2550:Src/main.c    **** VXISI2CWrite(0x30,0x38);
2551:Src/main.c    **** VXISI2CWrite(0x31,0x80);
2552:Src/main.c    **** //VXISI2CWrite(0x32,0x80);
2553:Src/main.c    **** VXISI2CWrite(0x33,0x80);
2554:Src/main.c    **** VXISI2CWrite(0x34,0xA0);
2555:Src/main.c    **** VXISI2CWrite(0x35,0x18);
2556:Src/main.c    **** VXISI2CWrite(0x36,0x46);
2557:Src/main.c    **** VXISI2CWrite(0x37,0x64);
2558:Src/main.c    **** VXISI2CWrite(0x38,0x00);
2559:Src/main.c    **** VXISI2CWrite(0x39,0xFF);
2560:Src/main.c    **** VXISI2CWrite(0x3A,0x1B);
2561:Src/main.c    **** VXISI2CWrite(0x3B,0x80);
2562:Src/main.c    **** VXISI2CWrite(0x3C,0x80);
2563:Src/main.c    **** VXISI2CWrite(0x3D,0x80);
2564:Src/main.c    **** VXISI2CWrite(0x3E,0x80);
2565:Src/main.c    **** VXISI2CWrite(0x3F,0x80);
2566:Src/main.c    **** VXISI2CWrite(0x40,0x80);
2567:Src/main.c    **** VXISI2CWrite(0x41,0x60);
2568:Src/main.c    **** VXISI2CWrite(0x42,0x5F);
2569:Src/main.c    **** VXISI2CWrite(0x43,0x37);
2570:Src/main.c    **** VXISI2CWrite(0x44,0x14);
2571:Src/main.c    **** VXISI2CWrite(0x45,0x06);
2572:Src/main.c    **** VXISI2CWrite(0x46,0x00);
2573:Src/main.c    **** VXISI2CWrite(0x47,0x00);
2574:Src/main.c    **** VXISI2CWrite(0x48,0x00);
2575:Src/main.c    **** VXISI2CWrite(0x49,0x00);
2576:Src/main.c    **** VXISI2CWrite(0x4B,0x20);
2577:Src/main.c    **** VXISI2CWrite(0x4C,0x00);
2578:Src/main.c    **** VXISI2CWrite(0x4D,0x00);
2579:Src/main.c    **** VXISI2CWrite(0x4E,0x00);
2580:Src/main.c    **** VXISI2CWrite(0x4F,0x7F);
2581:Src/main.c    **** VXISI2CWrite(0x50,0x20);
2582:Src/main.c    **** VXISI2CWrite(0x51,0x20);
2583:Src/main.c    **** VXISI2CWrite(0x52,0x00);
2584:Src/main.c    **** VXISI2CWrite(0x53,0x04);
2585:Src/main.c    **** VXISI2CWrite(0x54,0x00);
2586:Src/main.c    **** VXISI2CWrite(0x55,0xA0);
2587:Src/main.c    **** VXISI2CWrite(0x56,0x40);
2588:Src/main.c    **** VXISI2CWrite(0x57,0x04);
2589:Src/main.c    **** VXISI2CWrite(0x58,0x10);
2590:Src/main.c    **** VXISI2CWrite(0x59,0x08);
2591:Src/main.c    **** VXISI2CWrite(0x5A,0x10);
2592:Src/main.c    **** VXISI2CWrite(0x5B,0x00);
2593:Src/main.c    **** VXISI2CWrite(0x5C,0x68);
2594:Src/main.c    **** VXISI2CWrite(0x5D,0x84);
2595:Src/main.c    **** VXISI2CWrite(0x5E,0x08);
2596:Src/main.c    **** VXISI2CWrite(0x5F,0x21);
2597:Src/main.c    **** VXISI2CWrite(0x60,0x20);
2598:Src/main.c    **** VXISI2CWrite(0x61,0xB0);
2599:Src/main.c    **** VXISI2CWrite(0x62,0x33);
ARM GAS  /tmp/cclqPDF2.s 			page 47


2600:Src/main.c    **** VXISI2CWrite(0x63,0x01);
2601:Src/main.c    **** VXISI2CWrite(0x64,0xFF);
2602:Src/main.c    **** VXISI2CWrite(0x65,0x01);
2603:Src/main.c    **** VXISI2CWrite(0x66,0xFF);
2604:Src/main.c    **** VXISI2CWrite(0x67,0x89);
2605:Src/main.c    **** VXISI2CWrite(0x68,0xAB);
2606:Src/main.c    **** VXISI2CWrite(0x69,0x28);
2607:Src/main.c    **** VXISI2CWrite(0x6A,0x6E);
2608:Src/main.c    **** VXISI2CWrite(0x6B,0x6E);
2609:Src/main.c    **** VXISI2CWrite(0x6C,0x6E);
2610:Src/main.c    **** VXISI2CWrite(0x6D,0x00);
2611:Src/main.c    **** VXISI2CWrite(0x6E,0x00);
2612:Src/main.c    **** VXISI2CWrite(0x6F,0x00);
2613:Src/main.c    **** VXISI2CWrite(0x70,0x00);
2614:Src/main.c    **** VXISI2CWrite(0x71,0x00);
2615:Src/main.c    **** VXISI2CWrite(0x72,0x00);
2616:Src/main.c    **** VXISI2CWrite(0x73,0x00);
2617:Src/main.c    **** VXISI2CWrite(0x74,0x00);
2618:Src/main.c    **** VXISI2CWrite(0x75,0xFF);
2619:Src/main.c    **** VXISI2CWrite(0x76,0xFF);
2620:Src/main.c    **** VXISI2CWrite(0x77,0xFF);
2621:Src/main.c    **** VXISI2CWrite(0x78,0xFF);
2622:Src/main.c    **** VXISI2CWrite(0x79,0xFF);
2623:Src/main.c    **** VXISI2CWrite(0x7A,0xFF);
2624:Src/main.c    **** VXISI2CWrite(0x7B,0xFF);
2625:Src/main.c    **** VXISI2CWrite(0x7C,0xFF);
2626:Src/main.c    **** VXISI2CWrite(0x7D,0xF0);
2627:Src/main.c    **** VXISI2CWrite(0x7E,0x80);
2628:Src/main.c    **** VXISI2CWrite(0x7F,0x00);
2629:Src/main.c    **** VXISI2CWrite(0x80,0x00);
2630:Src/main.c    **** VXISI2CWrite(0x81,0x34);
2631:Src/main.c    **** VXISI2CWrite(0x82,0x40);
2632:Src/main.c    **** VXISI2CWrite(0x83,0x05);
2633:Src/main.c    **** VXISI2CWrite(0x84,0x57);
2634:Src/main.c    **** VXISI2CWrite(0x85,0xFD);
2635:Src/main.c    **** VXISI2CWrite(0x86,0x04);
2636:Src/main.c    **** VXISI2CWrite(0x87,0x24);
2637:Src/main.c    **** VXISI2CWrite(0x88,0x94);
2638:Src/main.c    **** VXISI2CWrite(0x89,0x58);
2639:Src/main.c    **** VXISI2CWrite(0x8A,0x00);
2640:Src/main.c    **** VXISI2CWrite(0x8B,0x7E);
2641:Src/main.c    **** VXISI2CWrite(0x8C,0x03);
2642:Src/main.c    **** VXISI2CWrite(0x8D,0x2C);
2643:Src/main.c    **** VXISI2CWrite(0x8E,0x8C);
2644:Src/main.c    **** VXISI2CWrite(0x8F,0x00);
2645:Src/main.c    **** VXISI2CWrite(0x90,0xCC);
2646:Src/main.c    **** VXISI2CWrite(0x91,0x41);
2647:Src/main.c    **** VXISI2CWrite(0x92,0xC4);
2648:Src/main.c    **** VXISI2CWrite(0x93,0x84);
2649:Src/main.c    **** VXISI2CWrite(0x94,0x98);
2650:Src/main.c    **** VXISI2CWrite(0x95,0x80);
2651:Src/main.c    **** VXISI2CWrite(0x96,0x65);
2652:Src/main.c    **** VXISI2CWrite(0x97,0x70);
2653:Src/main.c    **** VXISI2CWrite(0x98,0x29);
2654:Src/main.c    **** VXISI2CWrite(0x99,0x90);
2655:Src/main.c    **** VXISI2CWrite(0x9A,0x00);
2656:Src/main.c    **** VXISI2CWrite(0x9B,0x04);
ARM GAS  /tmp/cclqPDF2.s 			page 48


2657:Src/main.c    **** //VXISI2CWrite(0x9C,0x0A);
2658:Src/main.c    **** VXISI2CWrite(0x9D,0x00);
2659:Src/main.c    **** VXISI2CWrite(0x9E,0x04);
2660:Src/main.c    **** VXISI2CWrite(0x9F,0x65);
2661:Src/main.c    **** VXISI2CWrite(0xA0,0x80);
2662:Src/main.c    **** VXISI2CWrite(0xA1,0xD8);
2663:Src/main.c    **** VXISI2CWrite(0xA2,0x98);
2664:Src/main.c    **** VXISI2CWrite(0xA3,0x87);
2665:Src/main.c    **** VXISI2CWrite(0xA4,0x00);
2666:Src/main.c    **** VXISI2CWrite(0xA5,0x80);
2667:Src/main.c    **** VXISI2CWrite(0xA6,0x00);
2668:Src/main.c    **** VXISI2CWrite(0xA7,0x70);
2669:Src/main.c    **** VXISI2CWrite(0xA8,0x40);
2670:Src/main.c    **** VXISI2CWrite(0xA9,0x1E);
2671:Src/main.c    **** VXISI2CWrite(0xAA,0x2C);
2672:Src/main.c    **** VXISI2CWrite(0xAB,0x00);
2673:Src/main.c    **** VXISI2CWrite(0xAC,0x90);
2674:Src/main.c    **** VXISI2CWrite(0xAD,0x65);
2675:Src/main.c    **** VXISI2CWrite(0xAE,0x65);
2676:Src/main.c    **** VXISI2CWrite(0xAF,0x99);
2677:Src/main.c    **** VXISI2CWrite(0xB0,0x00);
2678:Src/main.c    **** VXISI2CWrite(0xB1,0x00);
2679:Src/main.c    **** VXISI2CWrite(0xB2,0x00);
2680:Src/main.c    **** VXISI2CWrite(0xB3,0x00);
2681:Src/main.c    **** VXISI2CWrite(0xB4,0x00);
2682:Src/main.c    **** VXISI2CWrite(0xB5,0x00);
2683:Src/main.c    **** VXISI2CWrite(0xB6,0x00);
2684:Src/main.c    **** VXISI2CWrite(0xB8,0x00);
2685:Src/main.c    **** VXISI2CWrite(0xB9,0x00);
2686:Src/main.c    **** VXISI2CWrite(0xBA,0x00);
2687:Src/main.c    **** VXISI2CWrite(0xBB,0x00);
2688:Src/main.c    **** VXISI2CWrite(0xBC,0x90);
2689:Src/main.c    **** VXISI2CWrite(0xBD,0x01);
2690:Src/main.c    **** VXISI2CWrite(0xBE,0xA5);
2691:Src/main.c    **** VXISI2CWrite(0xC0,0x00);
2692:Src/main.c    **** VXISI2CWrite(0xC1,0x20);
2693:Src/main.c    **** VXISI2CWrite(0xC2,0x20);
2694:Src/main.c    **** VXISI2CWrite(0xC3,0x20);
2695:Src/main.c    **** VXISI2CWrite(0xC4,0x20);
2696:Src/main.c    **** VXISI2CWrite(0xC5,0x20);
2697:Src/main.c    **** VXISI2CWrite(0xD0,0xFF);
2698:Src/main.c    **** VXISI2CWrite(0xD1,0x3F);
2699:Src/main.c    **** VXISI2CWrite(0xD2,0xC2);
2700:Src/main.c    **** VXISI2CWrite(0xD3,0x3F);
2701:Src/main.c    **** VXISI2CWrite(0xD4,0x00);
2702:Src/main.c    **** VXISI2CWrite(0xD5,0x00);
2703:Src/main.c    **** VXISI2CWrite(0xD6,0x00);
2704:Src/main.c    **** VXISI2CWrite(0xD7,0x00);
2705:Src/main.c    **** VXISI2CWrite(0xD8,0x00);
2706:Src/main.c    **** VXISI2CWrite(0xDC,0x77);
2707:Src/main.c    **** VXISI2CWrite(0xDD,0x01);
2708:Src/main.c    **** VXISI2CWrite(0xDE,0xA5);
2709:Src/main.c    **** VXISI2CWrite(0xDF,0xE5);
2710:Src/main.c    **** VXISI2CWrite(0xE0,0x00);
2711:Src/main.c    **** VXISI2CWrite(0xE1,0x00);
2712:Src/main.c    **** VXISI2CWrite(0xE2,0x00);
2713:Src/main.c    **** VXISI2CWrite(0xE3,0x47);
ARM GAS  /tmp/cclqPDF2.s 			page 49


2714:Src/main.c    **** VXISI2CWrite(0xE4,0x3C);
2715:Src/main.c    **** VXISI2CWrite(0xE5,0x80);
2716:Src/main.c    **** VXISI2CWrite(0xE6,0x00);
2717:Src/main.c    **** VXISI2CWrite(0xE7,0x00);
2718:Src/main.c    **** VXISI2CWrite(0xE8,0x00);
2719:Src/main.c    **** VXISI2CWrite(0xE9,0x00);
2720:Src/main.c    **** VXISI2CWrite(0xEA,0x00);
2721:Src/main.c    **** VXISI2CWrite(0xEB,0x00);
2722:Src/main.c    **** VXISI2CWrite(0xEC,0x88);
2723:Src/main.c    **** VXISI2CWrite(0xED,0x00);
2724:Src/main.c    **** VXISI2CWrite(0xEE,0x00);
2725:Src/main.c    **** VXISI2CWrite(0xEF,0x00);
2726:Src/main.c    **** VXISI2CWrite(0xF0,0x35);
2727:Src/main.c    **** VXISI2CWrite(0xF1,0x43);
2728:Src/main.c    **** VXISI2CWrite(0xF2,0x1F);
2729:Src/main.c    **** VXISI2CWrite(0xF3,0x1F);
2730:Src/main.c    **** VXISI2CWrite(0xF4,0x22);
2731:Src/main.c    **** VXISI2CWrite(0xF5,0x73);
2732:Src/main.c    **** VXISI2CWrite(0xF6,0x53);
2733:Src/main.c    **** VXISI2CWrite(0xF7,0x80);
2734:Src/main.c    **** VXISI2CWrite(0xF8,0x01);
2735:Src/main.c    **** VXISI2CWrite(0xF9,0x01);
2736:Src/main.c    **** VXISI2CWrite(0xFA,0x00);
2737:Src/main.c    **** VXISI2CWrite(0xFB,0x00);
2738:Src/main.c    **** VXISI2CWrite(0xFC,0x00);
2739:Src/main.c    **** VXISI2CWrite(0xFD,0x00);
2740:Src/main.c    **** VXISI2CWrite(0xFE,0x00);
2741:Src/main.c    **** VXISI2CWrite(0xFF,0x00);
2742:Src/main.c    **** */
2743:Src/main.c    **** #endif
2744:Src/main.c    **** 
2745:Src/main.c    **** }
2746:Src/main.c    **** 
2747:Src/main.c    **** void TP_bt1120_720P_1080P_mode0_w0(void)
2748:Src/main.c    **** {
2749:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table 720P... ");
2750:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_720P_1080P_mode0_w0_88param);
2751:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
2752:Src/main.c    **** 
2753:Src/main.c    **** }
2754:Src/main.c    **** 
2755:Src/main.c    **** void TP_bt1120_NTSC_1080P_mode0_w0(void)
2756:Src/main.c    **** {
2757:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table NTSC... ");
2758:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param);
2759:Src/main.c    **** }
2760:Src/main.c    **** 
2761:Src/main.c    **** void TP_bt1120_PAL_1080P_mode0_w0(void)
2762:Src/main.c    **** {
2763:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table PAL... ");
2764:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param);
2765:Src/main.c    **** 	#if 0
2766:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);	
2767:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);	
2768:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);	
2769:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);	
2770:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);	
ARM GAS  /tmp/cclqPDF2.s 			page 50


2771:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);	
2772:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);	
2773:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);	
2774:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);	
2775:Src/main.c    **** 	VXISI2CWrite(0x0A,0x40);	
2776:Src/main.c    **** 	VXISI2CWrite(0x0B,0x09);	
2777:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);	
2778:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);	
2779:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);	
2780:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);	
2781:Src/main.c    **** 	VXISI2CWrite(0x10,0xA1);	
2782:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);	
2783:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);	
2784:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);	
2785:Src/main.c    **** 	VXISI2CWrite(0x14,0x20);	
2786:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);	
2787:Src/main.c    **** 	VXISI2CWrite(0x16,0xFF);	
2788:Src/main.c    **** 	VXISI2CWrite(0x17,0x01);	
2789:Src/main.c    **** 	VXISI2CWrite(0x18,0xC0);	
2790:Src/main.c    **** 	VXISI2CWrite(0x19,0x01);	
2791:Src/main.c    **** 	VXISI2CWrite(0x1A,0x26);	
2792:Src/main.c    **** 	VXISI2CWrite(0x1B,0x14);	
2793:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);	
2794:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);	
2795:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);	
2796:Src/main.c    **** 	VXISI2CWrite(0x1F,0x31);	
2797:Src/main.c    **** 	VXISI2CWrite(0x20,0x60);	
2798:Src/main.c    **** 	VXISI2CWrite(0x21,0x39);	
2799:Src/main.c    **** 	VXISI2CWrite(0x22,0x97);	
2800:Src/main.c    **** 	VXISI2CWrite(0x23,0x48);	
2801:Src/main.c    **** 	VXISI2CWrite(0x24,0xBC);	
2802:Src/main.c    **** 	VXISI2CWrite(0x25,0x11);	
2803:Src/main.c    **** 	VXISI2CWrite(0x26,0x38);	
2804:Src/main.c    **** 	VXISI2CWrite(0x27,0x20);	
2805:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);	
2806:Src/main.c    **** 	VXISI2CWrite(0x29,0x40);	
2807:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);	
2808:Src/main.c    **** 	VXISI2CWrite(0x2B,0x00);	
2809:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);	
2810:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);	
2811:Src/main.c    **** 	VXISI2CWrite(0x2E,0x17);	
2812:Src/main.c    **** 	VXISI2CWrite(0x2F,0xBC);	
2813:Src/main.c    **** 	VXISI2CWrite(0x30,0x20);	
2814:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);	
2815:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);	
2816:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);	
2817:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);	
2818:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);	
2819:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);	
2820:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);	
2821:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);	
2822:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);	
2823:Src/main.c    **** 	VXISI2CWrite(0x3A,0x15);	
2824:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);	
2825:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);	
2826:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);	
2827:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);	
ARM GAS  /tmp/cclqPDF2.s 			page 51


2828:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);	
2829:Src/main.c    **** 	//VXISI2CWrite(0xVXI);SI2CWr
2830:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);	
2831:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);	
2832:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);	
2833:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);	
2834:Src/main.c    **** 	VXISI2CWrite(0x45,0x05);	
2835:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);	
2836:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);	
2837:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);	
2838:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);	
2839:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);	
2840:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);	
2841:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);	
2842:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);	
2843:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);	
2844:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);	
2845:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);	
2846:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);	
2847:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);	
2848:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);	
2849:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);	
2850:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);	
2851:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);	
2852:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);	
2853:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);	
2854:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);	
2855:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);	
2856:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);	
2857:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);	
2858:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);	
2859:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);	
2860:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);	
2861:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);	
2862:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);	
2863:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);	
2864:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);	
2865:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);	
2866:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);	
2867:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);	
2868:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);	
2869:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);	
2870:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);	
2871:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);	
2872:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);	
2873:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);	
2874:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);	
2875:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);	
2876:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);	
2877:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);	
2878:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);	
2879:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);	
2880:Src/main.c    **** 	VXISI2CWrite(0x74,0x06);	
2881:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);	
2882:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);	
2883:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);	
2884:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);	
ARM GAS  /tmp/cclqPDF2.s 			page 52


2885:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);	
2886:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);	
2887:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);	
2888:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);	
2889:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);	
2890:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);	
2891:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);	
2892:Src/main.c    **** 	VXISI2CWrite(0x80,0x01);	
2893:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);	
2894:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);	
2895:Src/main.c    **** 	VXISI2CWrite(0x83,0x2D);	
2896:Src/main.c    **** 	VXISI2CWrite(0x84,0x6F);	
2897:Src/main.c    **** 	VXISI2CWrite(0x85,0x00);	
2898:Src/main.c    **** 	VXISI2CWrite(0x86,0x00);	
2899:Src/main.c    **** 	VXISI2CWrite(0x87,0x00);	
2900:Src/main.c    **** 	VXISI2CWrite(0x88,0x13);	
2901:Src/main.c    **** 	VXISI2CWrite(0x89,0x1B);	
2902:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);	
2903:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);	
2904:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);	
2905:Src/main.c    **** 	VXISI2CWrite(0x8D,0x17);	
2906:Src/main.c    **** 	VXISI2CWrite(0x8E,0xB0);	
2907:Src/main.c    **** 	VXISI2CWrite(0x8F,0x14);	
2908:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);	
2909:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);	
2910:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);	
2911:Src/main.c    **** 	VXISI2CWrite(0x93,0x81);	
2912:Src/main.c    **** 	VXISI2CWrite(0x94,0xC9);	
2913:Src/main.c    **** 	VXISI2CWrite(0x95,0xBC);	
2914:Src/main.c    **** 	VXISI2CWrite(0x96,0xF5);	
2915:Src/main.c    **** 	VXISI2CWrite(0x97,0x70);	
2916:Src/main.c    **** 	VXISI2CWrite(0x98,0x15);	
2917:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);	
2918:Src/main.c    **** 	VXISI2CWrite(0x9A,0x80);	
2919:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);	
2920:Src/main.c    **** 	VXISI2CWrite(0x9C,0x00);	
2921:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);	
2922:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);	
2923:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);	
2924:Src/main.c    **** 	VXISI2CWrite(0xA0,0x3B);	
2925:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD0);	
2926:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);	
2927:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);	
2928:Src/main.c    **** 	VXISI2CWrite(0xA4,0x20);	
2929:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);	
2930:Src/main.c    **** 	VXISI2CWrite(0xA6,0xFD);	
2931:Src/main.c    **** 	VXISI2CWrite(0xA7,0x50);	
2932:Src/main.c    **** 	VXISI2CWrite(0xA8,0x40);	
2933:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);	
2934:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);	
2935:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);	
2936:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);	
2937:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF5);	
2938:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);	
2939:Src/main.c    **** 	VXISI2CWrite(0xAF,0x9B);	
2940:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);	
2941:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);	
ARM GAS  /tmp/cclqPDF2.s 			page 53


2942:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);	
2943:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);	
2944:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);	
2945:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);	
2946:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);	
2947:Src/main.c    **** 	VXISI2CWrite(0xB8,0x01);	
2948:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);	
2949:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);	
2950:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);	
2951:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);	
2952:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);	
2953:Src/main.c    **** 	VXISI2CWrite(0xBE,0x1D);	
2954:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);	
2955:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);	
2956:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);	
2957:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);	
2958:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);	
2959:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);	
2960:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);	
2961:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);	
2962:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);	
2963:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);	
2964:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);	
2965:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);	
2966:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);	
2967:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);	
2968:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);	
2969:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);	
2970:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);	
2971:Src/main.c    **** 	VXISI2CWrite(0xDE,0xD3);	
2972:Src/main.c    **** 	VXISI2CWrite(0xDF,0x49);	
2973:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);	
2974:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);	
2975:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);	
2976:Src/main.c    **** 	VXISI2CWrite(0xE3,0x17);	
2977:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE0);	
2978:Src/main.c    **** 	VXISI2CWrite(0xE5,0xBC);	
2979:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);	
2980:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);	
2981:Src/main.c    **** 	VXISI2CWrite(0xE8,0x00);	
2982:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);	
2983:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);	
2984:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);	
2985:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);	
2986:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);	
2987:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);	
2988:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);	
2989:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);	
2990:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);	
2991:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);	
2992:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);	
2993:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);	
2994:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);	
2995:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);	
2996:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);	
2997:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);	
2998:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);	
ARM GAS  /tmp/cclqPDF2.s 			page 54


2999:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);	
3000:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);	
3001:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);	
3002:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);	
3003:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);	
3004:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);	
3005:Src/main.c    **** #endif
3006:Src/main.c    **** 
3007:Src/main.c    **** }
3008:Src/main.c    **** void SET_VS4210_720_480_out(void)
3009:Src/main.c    **** {
3010:Src/main.c    **** 	Printf("\r\nSET_VS4210_720_480_out ");
3011:Src/main.c    **** 
3012:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);
3013:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
3014:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
3015:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
3016:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
3017:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
3018:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);
3019:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
3020:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
3021:Src/main.c    **** 	VXISI2CWrite(0x0A,0x41);
3022:Src/main.c    **** 	VXISI2CWrite(0x0B,0x07);
3023:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
3024:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
3025:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
3026:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
3027:Src/main.c    **** 	VXISI2CWrite(0x10,0x80);
3028:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
3029:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);
3030:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);
3031:Src/main.c    **** 	VXISI2CWrite(0x14,0xE0);
3032:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
3033:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
3034:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
3035:Src/main.c    **** 	VXISI2CWrite(0x18,0xC8);
3036:Src/main.c    **** 	VXISI2CWrite(0x19,0x00);
3037:Src/main.c    **** 	VXISI2CWrite(0x1A,0x23);
3038:Src/main.c    **** 	VXISI2CWrite(0x1B,0x00);
3039:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
3040:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
3041:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
3042:Src/main.c    **** 	VXISI2CWrite(0x1F,0x32);
3043:Src/main.c    **** 	VXISI2CWrite(0x20,0x5A);
3044:Src/main.c    **** 	VXISI2CWrite(0x21,0x0D);
3045:Src/main.c    **** 	VXISI2CWrite(0x22,0x32);
3046:Src/main.c    **** 	VXISI2CWrite(0x23,0x5A);
3047:Src/main.c    **** 	VXISI2CWrite(0x24,0xD0);
3048:Src/main.c    **** 	VXISI2CWrite(0x25,0x21);
3049:Src/main.c    **** 	VXISI2CWrite(0x26,0x0D);
3050:Src/main.c    **** 	VXISI2CWrite(0x27,0xE0);
3051:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
3052:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
3053:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
3054:Src/main.c    **** 	VXISI2CWrite(0x2B,0x01);
3055:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);
ARM GAS  /tmp/cclqPDF2.s 			page 55


3056:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
3057:Src/main.c    **** 	VXISI2CWrite(0x2E,0x12);
3058:Src/main.c    **** 	VXISI2CWrite(0x2F,0xD0);
3059:Src/main.c    **** 	VXISI2CWrite(0x30,0xE0);
3060:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
3061:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
3062:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
3063:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
3064:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
3065:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
3066:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
3067:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
3068:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
3069:Src/main.c    **** 	VXISI2CWrite(0x3A,0x03);
3070:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
3071:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
3072:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
3073:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
3074:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
3075:Src/main.c    **** 	//VXISI2CWrite(0xVXISI);2CWrite(0x80
3076:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);
3077:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
3078:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
3079:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
3080:Src/main.c    **** 	VXISI2CWrite(0x45,0x04);
3081:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
3082:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
3083:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
3084:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
3085:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
3086:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
3087:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
3088:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
3089:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
3090:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
3091:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
3092:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);
3093:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);
3094:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);
3095:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);
3096:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);
3097:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
3098:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
3099:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
3100:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
3101:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
3102:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
3103:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);
3104:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);
3105:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);
3106:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
3107:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);
3108:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
3109:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
3110:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
3111:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
3112:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
ARM GAS  /tmp/cclqPDF2.s 			page 56


3113:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
3114:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
3115:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
3116:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
3117:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
3118:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
3119:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
3120:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
3121:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
3122:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
3123:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
3124:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
3125:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
3126:Src/main.c    **** 	VXISI2CWrite(0x74,0x00);
3127:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
3128:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
3129:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
3130:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
3131:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
3132:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
3133:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
3134:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
3135:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
3136:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
3137:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
3138:Src/main.c    **** 	VXISI2CWrite(0x80,0x00);
3139:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);
3140:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
3141:Src/main.c    **** 	VXISI2CWrite(0x83,0x05);
3142:Src/main.c    **** 	VXISI2CWrite(0x84,0x59);
3143:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
3144:Src/main.c    **** 	VXISI2CWrite(0x86,0x04);
3145:Src/main.c    **** 	VXISI2CWrite(0x87,0x24);
3146:Src/main.c    **** 	VXISI2CWrite(0x88,0x94);
3147:Src/main.c    **** 	VXISI2CWrite(0x89,0x58);
3148:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
3149:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
3150:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
3151:Src/main.c    **** 	VXISI2CWrite(0x8D,0x2C);
3152:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
3153:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
3154:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
3155:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
3156:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
3157:Src/main.c    **** 	VXISI2CWrite(0x93,0x31);
3158:Src/main.c    **** 	VXISI2CWrite(0x94,0x87);
3159:Src/main.c    **** 	VXISI2CWrite(0x95,0xD0);
3160:Src/main.c    **** 	VXISI2CWrite(0x96,0xF3);
3161:Src/main.c    **** 	VXISI2CWrite(0x97,0x20);
3162:Src/main.c    **** 	VXISI2CWrite(0x98,0x11);
3163:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
3164:Src/main.c    **** 	VXISI2CWrite(0x9A,0xFF);
3165:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
3166:Src/main.c    **** 	VXISI2CWrite(0x9C,0x0A);
3167:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
3168:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
3169:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
ARM GAS  /tmp/cclqPDF2.s 			page 57


3170:Src/main.c    **** 	VXISI2CWrite(0xA0,0x2F);
3171:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD9);
3172:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
3173:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
3174:Src/main.c    **** 	VXISI2CWrite(0xA4,0xE1);
3175:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);
3176:Src/main.c    **** 	VXISI2CWrite(0xA6,0xC2);
3177:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
3178:Src/main.c    **** 	VXISI2CWrite(0xA8,0x00);
3179:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
3180:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);
3181:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
3182:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);
3183:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF3);
3184:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
3185:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
3186:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
3187:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
3188:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
3189:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
3190:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
3191:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
3192:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
3193:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
3194:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
3195:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
3196:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
3197:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
3198:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
3199:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
3200:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
3201:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
3202:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
3203:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
3204:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
3205:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
3206:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
3207:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
3208:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
3209:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
3210:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
3211:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
3212:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
3213:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
3214:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
3215:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
3216:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);
3217:Src/main.c    **** 	VXISI2CWrite(0xDE,0xAF);
3218:Src/main.c    **** 	VXISI2CWrite(0xDF,0xEF);
3219:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
3220:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
3221:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
3222:Src/main.c    **** 	VXISI2CWrite(0xE3,0x12);
3223:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE2);
3224:Src/main.c    **** 	VXISI2CWrite(0xE5,0xD0);
3225:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
3226:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
ARM GAS  /tmp/cclqPDF2.s 			page 58


3227:Src/main.c    **** 	VXISI2CWrite(0xE8,0x0F);
3228:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
3229:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
3230:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
3231:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
3232:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
3233:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
3234:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
3235:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
3236:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
3237:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
3238:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
3239:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
3240:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
3241:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
3242:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
3243:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
3244:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
3245:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
3246:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
3247:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
3248:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
3249:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
3250:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
3251:Src/main.c    **** 					 
3252:Src/main.c    **** 
3253:Src/main.c    **** 
3254:Src/main.c    **** }
3255:Src/main.c    **** 
3256:Src/main.c    **** void SET_VS4210_1280_720_out(void)
3257:Src/main.c    **** {
3258:Src/main.c    **** 	Printf("\r\nSET_VS4210_1280_720_out");
3259:Src/main.c    **** 
3260:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);
3261:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
3262:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
3263:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
3264:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
3265:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
3266:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);
3267:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
3268:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
3269:Src/main.c    **** 	VXISI2CWrite(0x0A,0x41);
3270:Src/main.c    **** 	VXISI2CWrite(0x0B,0x07);
3271:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
3272:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
3273:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
3274:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
3275:Src/main.c    **** 	VXISI2CWrite(0x10,0x80);
3276:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
3277:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);
3278:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);
3279:Src/main.c    **** 	VXISI2CWrite(0x14,0xE0);
3280:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
3281:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
3282:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
3283:Src/main.c    **** 	VXISI2CWrite(0x18,0xC8);
ARM GAS  /tmp/cclqPDF2.s 			page 59


3284:Src/main.c    **** 	VXISI2CWrite(0x19,0x00);
3285:Src/main.c    **** 	VXISI2CWrite(0x1A,0x23);
3286:Src/main.c    **** 	VXISI2CWrite(0x1B,0x00);
3287:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
3288:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
3289:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
3290:Src/main.c    **** 	VXISI2CWrite(0x1F,0x32);
3291:Src/main.c    **** 	VXISI2CWrite(0x20,0x5A);
3292:Src/main.c    **** 	VXISI2CWrite(0x21,0x0D);
3293:Src/main.c    **** 	VXISI2CWrite(0x22,0x32);
3294:Src/main.c    **** 	VXISI2CWrite(0x23,0x5A);
3295:Src/main.c    **** 	VXISI2CWrite(0x24,0xD0);
3296:Src/main.c    **** 	VXISI2CWrite(0x25,0x21);
3297:Src/main.c    **** 	VXISI2CWrite(0x26,0x0D);
3298:Src/main.c    **** 	VXISI2CWrite(0x27,0xE0);
3299:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
3300:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
3301:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
3302:Src/main.c    **** 	VXISI2CWrite(0x2B,0x01);
3303:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);
3304:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
3305:Src/main.c    **** 	VXISI2CWrite(0x2E,0x12);
3306:Src/main.c    **** 	VXISI2CWrite(0x2F,0xD0);
3307:Src/main.c    **** 	VXISI2CWrite(0x30,0xE0);
3308:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
3309:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
3310:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
3311:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
3312:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
3313:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
3314:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
3315:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
3316:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
3317:Src/main.c    **** 	VXISI2CWrite(0x3A,0x03);
3318:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
3319:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
3320:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
3321:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
3322:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
3323:Src/main.c    **** 	//VXISI2CWrite(0xVXISI);2CWrite(0x80
3324:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);
3325:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
3326:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
3327:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
3328:Src/main.c    **** 	VXISI2CWrite(0x45,0x04);
3329:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
3330:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
3331:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
3332:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
3333:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
3334:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
3335:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
3336:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
3337:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
3338:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
3339:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
3340:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);
ARM GAS  /tmp/cclqPDF2.s 			page 60


3341:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);
3342:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);
3343:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);
3344:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);
3345:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
3346:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
3347:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
3348:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
3349:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
3350:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
3351:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);
3352:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);
3353:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);
3354:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
3355:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);
3356:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
3357:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
3358:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
3359:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
3360:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
3361:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
3362:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
3363:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
3364:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
3365:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
3366:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
3367:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
3368:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
3369:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
3370:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
3371:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
3372:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
3373:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
3374:Src/main.c    **** 	VXISI2CWrite(0x74,0x00);
3375:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
3376:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
3377:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
3378:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
3379:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
3380:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
3381:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
3382:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
3383:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
3384:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
3385:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
3386:Src/main.c    **** 	VXISI2CWrite(0x80,0x00);
3387:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);
3388:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
3389:Src/main.c    **** 	VXISI2CWrite(0x83,0x05);
3390:Src/main.c    **** 	VXISI2CWrite(0x84,0x59);
3391:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
3392:Src/main.c    **** 	VXISI2CWrite(0x86,0x04);
3393:Src/main.c    **** 	VXISI2CWrite(0x87,0x24);
3394:Src/main.c    **** 	VXISI2CWrite(0x88,0x94);
3395:Src/main.c    **** 	VXISI2CWrite(0x89,0x58);
3396:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
3397:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
ARM GAS  /tmp/cclqPDF2.s 			page 61


3398:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
3399:Src/main.c    **** 	VXISI2CWrite(0x8D,0x2C);
3400:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
3401:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
3402:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
3403:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
3404:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
3405:Src/main.c    **** 	VXISI2CWrite(0x93,0x31);
3406:Src/main.c    **** 	VXISI2CWrite(0x94,0x87);
3407:Src/main.c    **** 	VXISI2CWrite(0x95,0xD0);
3408:Src/main.c    **** 	VXISI2CWrite(0x96,0xF3);
3409:Src/main.c    **** 	VXISI2CWrite(0x97,0x20);
3410:Src/main.c    **** 	VXISI2CWrite(0x98,0x11);
3411:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
3412:Src/main.c    **** 	VXISI2CWrite(0x9A,0xFF);
3413:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
3414:Src/main.c    **** 	VXISI2CWrite(0x9C,0x0A);
3415:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
3416:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
3417:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
3418:Src/main.c    **** 	VXISI2CWrite(0xA0,0x2F);
3419:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD9);
3420:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
3421:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
3422:Src/main.c    **** 	VXISI2CWrite(0xA4,0xE1);
3423:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);
3424:Src/main.c    **** 	VXISI2CWrite(0xA6,0xC2);
3425:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
3426:Src/main.c    **** 	VXISI2CWrite(0xA8,0x00);
3427:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
3428:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);
3429:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
3430:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);
3431:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF3);
3432:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
3433:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
3434:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
3435:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
3436:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
3437:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
3438:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
3439:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
3440:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
3441:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
3442:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
3443:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
3444:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
3445:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
3446:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
3447:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
3448:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
3449:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
3450:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
3451:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
3452:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
3453:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
3454:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
ARM GAS  /tmp/cclqPDF2.s 			page 62


3455:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
3456:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
3457:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
3458:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
3459:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
3460:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
3461:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
3462:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
3463:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
3464:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);
3465:Src/main.c    **** 	VXISI2CWrite(0xDE,0xAF);
3466:Src/main.c    **** 	VXISI2CWrite(0xDF,0xEF);
3467:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
3468:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
3469:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
3470:Src/main.c    **** 	VXISI2CWrite(0xE3,0x12);
3471:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE2);
3472:Src/main.c    **** 	VXISI2CWrite(0xE5,0xD0);
3473:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
3474:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
3475:Src/main.c    **** 	VXISI2CWrite(0xE8,0x0F);
3476:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
3477:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
3478:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
3479:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
3480:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
3481:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
3482:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
3483:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
3484:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
3485:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
3486:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
3487:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
3488:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
3489:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
3490:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
3491:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
3492:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
3493:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
3494:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
3495:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
3496:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
3497:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
3498:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
3499:Src/main.c    **** 			 
3500:Src/main.c    **** }
3501:Src/main.c    **** 
3502:Src/main.c    **** void SET_AHD_MDOE(void)
3503:Src/main.c    **** {
3504:Src/main.c    **** 	Printf("\r\nSET_AHD_MDOE...");
3505:Src/main.c    **** 
3506:Src/main.c    **** 	VXISI2CWrite(0x00,0x42);
3507:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);
3508:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
3509:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
3510:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
3511:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
ARM GAS  /tmp/cclqPDF2.s 			page 63


3512:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
3513:Src/main.c    **** 	VXISI2CWrite(0x07,0x0C);
3514:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
3515:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
3516:Src/main.c    **** 	VXISI2CWrite(0x0A,0x40);
3517:Src/main.c    **** 	VXISI2CWrite(0x0B,0x0A);
3518:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
3519:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
3520:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
3521:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
3522:Src/main.c    **** 	VXISI2CWrite(0x10,0x81);
3523:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
3524:Src/main.c    **** 	VXISI2CWrite(0x12,0x74);
3525:Src/main.c    **** 	VXISI2CWrite(0x13,0x80);
3526:Src/main.c    **** 	VXISI2CWrite(0x14,0x38);
3527:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
3528:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
3529:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
3530:Src/main.c    **** 	VXISI2CWrite(0x18,0xC0);
3531:Src/main.c    **** 	VXISI2CWrite(0x19,0x01);
3532:Src/main.c    **** 	VXISI2CWrite(0x1A,0x20);
3533:Src/main.c    **** 	VXISI2CWrite(0x1B,0x30);
3534:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
3535:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
3536:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
3537:Src/main.c    **** 	VXISI2CWrite(0x1F,0xA4);
3538:Src/main.c    **** 	VXISI2CWrite(0x20,0x50);
3539:Src/main.c    **** 	VXISI2CWrite(0x21,0xE2);
3540:Src/main.c    **** 	VXISI2CWrite(0x22,0x87);
3541:Src/main.c    **** 	VXISI2CWrite(0x23,0x98);
3542:Src/main.c    **** 	VXISI2CWrite(0x24,0x80);
3543:Src/main.c    **** 	VXISI2CWrite(0x25,0x44);
3544:Src/main.c    **** 	VXISI2CWrite(0x26,0x65);
3545:Src/main.c    **** 	VXISI2CWrite(0x27,0x38);
3546:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
3547:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
3548:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
3549:Src/main.c    **** 	VXISI2CWrite(0x2B,0x11);
3550:Src/main.c    **** 	VXISI2CWrite(0x2C,0x00);
3551:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
3552:Src/main.c    **** 	VXISI2CWrite(0x2E,0x47);
3553:Src/main.c    **** 	VXISI2CWrite(0x2F,0x80);
3554:Src/main.c    **** 	VXISI2CWrite(0x30,0x38);
3555:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
3556:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
3557:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
3558:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
3559:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
3560:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
3561:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
3562:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
3563:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
3564:Src/main.c    **** 	VXISI2CWrite(0x3A,0x73);
3565:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
3566:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
3567:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
3568:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
ARM GAS  /tmp/cclqPDF2.s 			page 64


3569:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
3570:Src/main.c    **** 	VXISI2CWrite(0x40,0x80);
3571:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);
3572:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
3573:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
3574:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
3575:Src/main.c    **** 	VXISI2CWrite(0x45,0x00);
3576:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
3577:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
3578:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
3579:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
3580:Src/main.c    **** 	VXISI2CWrite(0x4A,0x00);
3581:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
3582:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
3583:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
3584:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
3585:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
3586:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
3587:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
3588:Src/main.c    **** 	VXISI2CWrite(0x52,0xA4);
3589:Src/main.c    **** 	VXISI2CWrite(0x53,0xC0);
3590:Src/main.c    **** 	VXISI2CWrite(0x54,0x42);
3591:Src/main.c    **** 	VXISI2CWrite(0x55,0x60);
3592:Src/main.c    **** 	VXISI2CWrite(0x56,0x5C);
3593:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
3594:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
3595:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
3596:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
3597:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
3598:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
3599:Src/main.c    **** 	VXISI2CWrite(0x5D,0xA8);
3600:Src/main.c    **** 	VXISI2CWrite(0x5E,0xC0);
3601:Src/main.c    **** 	VXISI2CWrite(0x5F,0x53);
3602:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
3603:Src/main.c    **** 	VXISI2CWrite(0x61,0xCC);
3604:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
3605:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
3606:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
3607:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
3608:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
3609:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
3610:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
3611:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
3612:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
3613:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
3614:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
3615:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
3616:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
3617:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
3618:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
3619:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
3620:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
3621:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
3622:Src/main.c    **** 	VXISI2CWrite(0x74,0x06);
3623:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
3624:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
3625:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
ARM GAS  /tmp/cclqPDF2.s 			page 65


3626:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
3627:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
3628:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
3629:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
3630:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
3631:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
3632:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
3633:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
3634:Src/main.c    **** 	VXISI2CWrite(0x80,0x01);
3635:Src/main.c    **** 	VXISI2CWrite(0x81,0x15);
3636:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
3637:Src/main.c    **** 	VXISI2CWrite(0x83,0x2D);
3638:Src/main.c    **** 	VXISI2CWrite(0x84,0x57);
3639:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
3640:Src/main.c    **** 	VXISI2CWrite(0x86,0x00);
3641:Src/main.c    **** 	VXISI2CWrite(0x87,0x00);
3642:Src/main.c    **** 	VXISI2CWrite(0x88,0x00);
3643:Src/main.c    **** 	VXISI2CWrite(0x89,0x00);
3644:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
3645:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
3646:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
3647:Src/main.c    **** 	VXISI2CWrite(0x8D,0x17);
3648:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
3649:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
3650:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
3651:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
3652:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
3653:Src/main.c    **** 	VXISI2CWrite(0x93,0x84);
3654:Src/main.c    **** 	VXISI2CWrite(0x94,0x98);
3655:Src/main.c    **** 	VXISI2CWrite(0x95,0x80);
3656:Src/main.c    **** 	VXISI2CWrite(0x96,0x65);
3657:Src/main.c    **** 	VXISI2CWrite(0x97,0x70);
3658:Src/main.c    **** 	VXISI2CWrite(0x98,0x29);
3659:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
3660:Src/main.c    **** 	VXISI2CWrite(0x9A,0x00);
3661:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
3662:Src/main.c    **** 	VXISI2CWrite(0x9C,0x00);
3663:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
3664:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
3665:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
3666:Src/main.c    **** 	VXISI2CWrite(0xA0,0x80);
3667:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD8);
3668:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
3669:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
3670:Src/main.c    **** 	VXISI2CWrite(0xA4,0x00);
3671:Src/main.c    **** 	VXISI2CWrite(0xA5,0x80);
3672:Src/main.c    **** 	VXISI2CWrite(0xA6,0x00);
3673:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
3674:Src/main.c    **** 	VXISI2CWrite(0xA8,0x40);
3675:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
3676:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2C);
3677:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
3678:Src/main.c    **** 	VXISI2CWrite(0xAC,0x90);
3679:Src/main.c    **** 	VXISI2CWrite(0xAD,0x65);
3680:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
3681:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
3682:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
ARM GAS  /tmp/cclqPDF2.s 			page 66


3683:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
3684:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
3685:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
3686:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
3687:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
3688:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
3689:Src/main.c    **** 	VXISI2CWrite(0xB7,0x00);
3690:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
3691:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
3692:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
3693:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
3694:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
3695:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
3696:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
3697:Src/main.c    **** 	VXISI2CWrite(0xBF,0x00);
3698:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
3699:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
3700:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
3701:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
3702:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
3703:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
3704:Src/main.c    **** 	VXISI2CWrite(0xC6,0x00);
3705:Src/main.c    **** 	VXISI2CWrite(0xC7,0x00);
3706:Src/main.c    **** 	VXISI2CWrite(0xC8,0x00);
3707:Src/main.c    **** 	VXISI2CWrite(0xC9,0x00);
3708:Src/main.c    **** 	VXISI2CWrite(0xCA,0x00);
3709:Src/main.c    **** 	VXISI2CWrite(0xCB,0x00);
3710:Src/main.c    **** 	VXISI2CWrite(0xCC,0x00);
3711:Src/main.c    **** 	VXISI2CWrite(0xCD,0x00);
3712:Src/main.c    **** 	VXISI2CWrite(0xCE,0x00);
3713:Src/main.c    **** 	VXISI2CWrite(0xCF,0x00);
3714:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
3715:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
3716:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
3717:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
3718:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
3719:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
3720:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
3721:Src/main.c    **** 	VXISI2CWrite(0xD7,0x0F);
3722:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
3723:Src/main.c    **** 	VXISI2CWrite(0xD9,0x00);
3724:Src/main.c    **** 	VXISI2CWrite(0xDA,0x00);
3725:Src/main.c    **** 	VXISI2CWrite(0xDB,0x00);
3726:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
3727:Src/main.c    **** 	VXISI2CWrite(0xDD,0x01);
3728:Src/main.c    **** 	VXISI2CWrite(0xDE,0x5F);
3729:Src/main.c    **** 	VXISI2CWrite(0xDF,0x96);
3730:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
3731:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
3732:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
3733:Src/main.c    **** 	VXISI2CWrite(0xE3,0x47);
3734:Src/main.c    **** 	VXISI2CWrite(0xE4,0x3C);
3735:Src/main.c    **** 	VXISI2CWrite(0xE5,0x80);
3736:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
3737:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
3738:Src/main.c    **** 	VXISI2CWrite(0xE8,0x00);
3739:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
ARM GAS  /tmp/cclqPDF2.s 			page 67


3740:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
3741:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
3742:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
3743:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
3744:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
3745:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
3746:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
3747:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
3748:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
3749:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
3750:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
3751:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
3752:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
3753:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
3754:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
3755:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
3756:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
3757:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
3758:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
3759:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
3760:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
3761:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
3762:Src/main.c    **** 
3763:Src/main.c    **** }
3764:Src/main.c    **** /**
3765:Src/main.c    ****   * @brief System Clock Configuration
3766:Src/main.c    ****   * @retval None
3767:Src/main.c    ****   */
3768:Src/main.c    ****   #if 0//crystal
3769:Src/main.c    **** 
3770:Src/main.c    ****   void SystemClock_Config(void)
3771:Src/main.c    ****   {
3772:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
3773:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
3774:Src/main.c    ****   
3775:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks 
3776:Src/main.c    **** 	*/
3777:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
3778:Src/main.c    **** 	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
3779:Src/main.c    **** 	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
3780:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
3781:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
3782:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
3783:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
3784:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3785:Src/main.c    **** 	{
3786:Src/main.c    **** 	  Error_Handler();
3787:Src/main.c    **** 	}
3788:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks 
3789:Src/main.c    **** 	*/
3790:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
3791:Src/main.c    **** 								|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
3792:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
3793:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
3794:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
3795:Src/main.c    **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
3796:Src/main.c    ****   
ARM GAS  /tmp/cclqPDF2.s 			page 68


3797:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
3798:Src/main.c    **** 	{
3799:Src/main.c    **** 	  Error_Handler();
3800:Src/main.c    **** 	}
3801:Src/main.c    ****   }
3802:Src/main.c    **** 
3803:Src/main.c    ****   #else
3804:Src/main.c    **** void SystemClock_Config(void)
3805:Src/main.c    **** {
3806:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
3807:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
3808:Src/main.c    **** 
3809:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
3810:Src/main.c    ****   */
3811:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
3812:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
3813:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
3814:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
3815:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
3816:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
3817:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3818:Src/main.c    ****   {
3819:Src/main.c    ****     Error_Handler();
3820:Src/main.c    ****   }
3821:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
3822:Src/main.c    ****   */
3823:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
3824:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
3825:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
3826:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
3827:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
3828:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
3829:Src/main.c    **** 
3830:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
3831:Src/main.c    ****   {
3832:Src/main.c    ****     Error_Handler();
3833:Src/main.c    ****   }
3834:Src/main.c    **** }
3835:Src/main.c    **** #endif
3836:Src/main.c    **** /**
3837:Src/main.c    ****   * @brief ADC1 Initialization Function.
3838:Src/main.c    ****   * @param None
3839:Src/main.c    ****   * @retval None
3840:Src/main.c    ****   */
3841:Src/main.c    ****   #if 0
3842:Src/main.c    **** static void MX_ADC1_Init(void)
3843:Src/main.c    **** {
3844:Src/main.c    **** 
3845:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
3846:Src/main.c    **** 
3847:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
3848:Src/main.c    **** 
3849:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
3850:Src/main.c    **** 
3851:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
3852:Src/main.c    **** 
3853:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
ARM GAS  /tmp/cclqPDF2.s 			page 69


3854:Src/main.c    ****   /** Common config 
3855:Src/main.c    ****   */
3856:Src/main.c    ****   hadc1.Instance = ADC1;
3857:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
3858:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
3859:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
3860:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
3861:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
3862:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
3863:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
3864:Src/main.c    ****   {
3865:Src/main.c    ****     Error_Handler();
3866:Src/main.c    ****   }
3867:Src/main.c    ****   /** Configure Regular Channel 
3868:Src/main.c    ****   */
3869:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_13;
3870:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
3871:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
3872:Src/main.c    ****   /*
3873:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
3874:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
3875:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
3876:Src/main.c    ****   sConfig.Offset = 0;
3877:Src/main.c    ****   */
3878:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
3879:Src/main.c    ****   {
3880:Src/main.c    ****     Error_Handler();
3881:Src/main.c    ****   }
3882:Src/main.c    **** 
3883:Src/main.c    **** 
3884:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
3885:Src/main.c    **** HAL_ADC_MspInit(&hadc1);
3886:Src/main.c    **** 
3887:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
3888:Src/main.c    **** 
3889:Src/main.c    **** }
3890:Src/main.c    **** #endif
3891:Src/main.c    **** /**
3892:Src/main.c    ****   * @brief TIM2 Initialization Function
3893:Src/main.c    ****   * @param None
3894:Src/main.c    ****   * @retval None
3895:Src/main.c    ****   */
3896:Src/main.c    ****   #if 0
3897:Src/main.c    **** static void MX_TIM2_Init(void)
3898:Src/main.c    **** {
3899:Src/main.c    **** 
3900:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
3901:Src/main.c    **** 
3902:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
3903:Src/main.c    ****   ///TIM_ClockConfigTypeDef sClockSourceConfig = {0};
3904:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
3905:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
3906:Src/main.c    **** 
3907:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
3908:Src/main.c    **** 
3909:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
3910:Src/main.c    ****   htim2.Instance = TIM2;
ARM GAS  /tmp/cclqPDF2.s 			page 70


3911:Src/main.c    ****   htim2.Init.Prescaler = (35/4);
3912:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
3913:Src/main.c    ****   htim2.Init.Period = 4000;
3914:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
3915:Src/main.c    ****  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE; 
3916:Src/main.c    **** /*
3917:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
3918:Src/main.c    **** 	{
3919:Src/main.c    **** 	  Error_Handler();
3920:Src/main.c    **** 	}
3921:Src/main.c    **** 	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
3922:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
3923:Src/main.c    **** 	{
3924:Src/main.c    **** 	  Error_Handler();
3925:Src/main.c    **** 	}
3926:Src/main.c    **** */
3927:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
3928:Src/main.c    ****   {
3929:Src/main.c    ****    Error_Handler();
3930:Src/main.c    ****   }
3931:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
3932:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
3933:Src/main.c    **** 
3934:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
3935:Src/main.c    ****   {
3936:Src/main.c    ****    Error_Handler();
3937:Src/main.c    ****   }
3938:Src/main.c    ****   
3939:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
3940:Src/main.c    **** //  sConfigOC.Pulse = 4000;
3941:Src/main.c    ****   sConfigOC.Pulse = 0;
3942:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
3943:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
3944:Src/main.c    **** 
3945:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
3946:Src/main.c    ****   {
3947:Src/main.c    ****    Error_Handler();
3948:Src/main.c    ****   }
3949:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
3950:Src/main.c    **** 
3951:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
3952:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
3953:Src/main.c    **** 
3954:Src/main.c    **** //TIMOCInitStructure.TIM_Pulse =(period); 						   
3955:Src/main.c    **** 
3956:Src/main.c    **** //TIMOCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;	   
3957:Src/main.c    **** //TIMOCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
3958:Src/main.c    **** //TIM_OC3Init(TIM3, &TIMOCInitStructure); 				   
3959:Src/main.c    **** 				   
3960:Src/main.c    **** 
3961:Src/main.c    **** //TIM_Cmd(TIM3, ENABLE);
3962:Src/main.c    **** 
3963:Src/main.c    **** }
3964:Src/main.c    **** #endif
3965:Src/main.c    **** /**
3966:Src/main.c    ****   * @brief TIM3 Initialization Function
3967:Src/main.c    ****   * @param None
ARM GAS  /tmp/cclqPDF2.s 			page 71


3968:Src/main.c    ****   * @retval None
3969:Src/main.c    ****   */
3970:Src/main.c    **** static void MX_TIM3_Init(void)
3971:Src/main.c    **** {
3972:Src/main.c    **** 
3973:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
3974:Src/main.c    **** 
3975:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
3976:Src/main.c    **** 
3977:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
3978:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
3979:Src/main.c    **** 
3980:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
3981:Src/main.c    **** 
3982:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
3983:Src/main.c    ****   htim3.Instance = TIM3;
3984:Src/main.c    ****   htim3.Init.Prescaler = 35;
3985:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
3986:Src/main.c    ****   htim3.Init.Period = 9;
3987:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
3988:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
3989:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
3990:Src/main.c    ****   {
3991:Src/main.c    ****     Error_Handler();
3992:Src/main.c    ****   }
3993:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
3994:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
3995:Src/main.c    ****   {
3996:Src/main.c    ****     Error_Handler();
3997:Src/main.c    ****   }
3998:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
3999:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
4000:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
4001:Src/main.c    ****   {
4002:Src/main.c    ****     Error_Handler();
4003:Src/main.c    ****   }
4004:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
4005:Src/main.c    **** 
4006:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
4007:Src/main.c    **** 
4008:Src/main.c    **** }
4009:Src/main.c    **** 
4010:Src/main.c    **** /**
4011:Src/main.c    ****   * @brief USART1 Initialization Function
4012:Src/main.c    ****   * @param None
4013:Src/main.c    ****   * @retval None
4014:Src/main.c    ****   */
4015:Src/main.c    **** static void MX_USART1_UART_Init(void)
4016:Src/main.c    **** {
4017:Src/main.c    **** 
4018:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
4019:Src/main.c    **** 
4020:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
4021:Src/main.c    **** 
4022:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
4023:Src/main.c    **** 
4024:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
ARM GAS  /tmp/cclqPDF2.s 			page 72


4025:Src/main.c    ****   huart1.Instance = USART1;
4026:Src/main.c    **** //  huart1.Init.BaudRate = 9600;
4027:Src/main.c    ****   huart1.Init.BaudRate = 115200;
4028:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
4029:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
4030:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
4031:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
4032:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
4033:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
4034:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
4035:Src/main.c    ****   {
4036:Src/main.c    ****     Error_Handler();
4037:Src/main.c    ****   }
4038:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
4039:Src/main.c    **** 
4040:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
4041:Src/main.c    **** 
4042:Src/main.c    **** }
4043:Src/main.c    **** 
4044:Src/main.c    **** /**
4045:Src/main.c    ****   * @brief USART2 Initialization Function
4046:Src/main.c    ****   * @param None
4047:Src/main.c    ****   * @retval None
4048:Src/main.c    ****   */
4049:Src/main.c    **** static void MX_USART2_UART_Init(void)
4050:Src/main.c    **** {
4051:Src/main.c    **** 
4052:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
4053:Src/main.c    **** 
4054:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
4055:Src/main.c    **** 
4056:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
4057:Src/main.c    **** 
4058:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
4059:Src/main.c    ****   huart2.Instance = USART2;
4060:Src/main.c    ****   huart2.Init.BaudRate = 38400;
4061:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
4062:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
4063:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
4064:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
4065:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
4066:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
4067:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
4068:Src/main.c    ****   {
4069:Src/main.c    ****     Error_Handler();
4070:Src/main.c    ****   }
4071:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
4072:Src/main.c    **** 
4073:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
4074:Src/main.c    **** 
4075:Src/main.c    **** }
4076:Src/main.c    **** 
4077:Src/main.c    **** /**
4078:Src/main.c    ****   * @brief GPIO Initialization Function
4079:Src/main.c    ****   * @param None
4080:Src/main.c    ****   * @retval None
4081:Src/main.c    ****   */
ARM GAS  /tmp/cclqPDF2.s 			page 73


4082:Src/main.c    **** static void MX_GPIO_Init(void)
4083:Src/main.c    **** {
  25              		.loc 1 4083 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 89B0     		sub	sp, sp, #36
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 56
4084:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 4084 0
  41 0004 0025     		movs	r5, #0
  42 0006 0495     		str	r5, [sp, #16]
  43 0008 0595     		str	r5, [sp, #20]
  44 000a 0695     		str	r5, [sp, #24]
  45 000c 0795     		str	r5, [sp, #28]
  46              	.LBB2:
4085:Src/main.c    **** 
4086:Src/main.c    ****   /* GPIO Ports Clock Enable */
4087:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  47              		.loc 1 4087 0
  48 000e 2E4B     		ldr	r3, .L3
  49 0010 9A69     		ldr	r2, [r3, #24]
  50 0012 42F00402 		orr	r2, r2, #4
  51 0016 9A61     		str	r2, [r3, #24]
  52 0018 9A69     		ldr	r2, [r3, #24]
  53 001a 02F00402 		and	r2, r2, #4
  54 001e 0092     		str	r2, [sp]
  55 0020 009A     		ldr	r2, [sp]
  56              	.LBE2:
  57              	.LBB3:
4088:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  58              		.loc 1 4088 0
  59 0022 9A69     		ldr	r2, [r3, #24]
  60 0024 42F00802 		orr	r2, r2, #8
  61 0028 9A61     		str	r2, [r3, #24]
  62 002a 9A69     		ldr	r2, [r3, #24]
  63 002c 02F00802 		and	r2, r2, #8
  64 0030 0192     		str	r2, [sp, #4]
  65 0032 019A     		ldr	r2, [sp, #4]
  66              	.LBE3:
  67              	.LBB4:
4089:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  68              		.loc 1 4089 0
  69 0034 9A69     		ldr	r2, [r3, #24]
  70 0036 42F01002 		orr	r2, r2, #16
  71 003a 9A61     		str	r2, [r3, #24]
  72 003c 9A69     		ldr	r2, [r3, #24]
  73 003e 02F01002 		and	r2, r2, #16
ARM GAS  /tmp/cclqPDF2.s 			page 74


  74 0042 0292     		str	r2, [sp, #8]
  75 0044 029A     		ldr	r2, [sp, #8]
  76              	.LBE4:
  77              	.LBB5:
4090:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  78              		.loc 1 4090 0
  79 0046 9A69     		ldr	r2, [r3, #24]
  80 0048 42F02002 		orr	r2, r2, #32
  81 004c 9A61     		str	r2, [r3, #24]
  82 004e 9B69     		ldr	r3, [r3, #24]
  83 0050 03F02003 		and	r3, r3, #32
  84 0054 0393     		str	r3, [sp, #12]
  85 0056 039B     		ldr	r3, [sp, #12]
  86              	.LBE5:
4091:Src/main.c    **** 
4092:Src/main.c    ****   /*Configure GPIO pin Output Level */
4093:Src/main.c    **** HAL_GPIO_WritePin(GPIOA, /*TX_RST_Pin|TP2824_RST_Pin|*/VS_RST_Pin, GPIO_PIN_SET);
  87              		.loc 1 4093 0
  88 0058 1C4F     		ldr	r7, .L3+4
  89 005a 0122     		movs	r2, #1
  90 005c 4FF48051 		mov	r1, #4096
  91 0060 3846     		mov	r0, r7
  92 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
  93              	.LVL0:
4094:Src/main.c    **** 
4095:Src/main.c    ****   /*Configure GPIO pins : TX_RST_Pin TP2824_RST_Pin VS_RST_Pin */
4096:Src/main.c    ****   GPIO_InitStruct.Pin = VIDEO_LOSS;
  94              		.loc 1 4096 0
  95 0066 2023     		movs	r3, #32
  96 0068 0493     		str	r3, [sp, #16]
4097:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  97              		.loc 1 4097 0
  98 006a 0124     		movs	r4, #1
  99 006c 0594     		str	r4, [sp, #20]
4098:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 100              		.loc 1 4098 0
 101 006e 0694     		str	r4, [sp, #24]
4099:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 102              		.loc 1 4099 0
 103 0070 0226     		movs	r6, #2
 104 0072 0796     		str	r6, [sp, #28]
4100:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 105              		.loc 1 4100 0
 106 0074 04A9     		add	r1, sp, #16
 107 0076 3846     		mov	r0, r7
 108 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 109              	.LVL1:
4101:Src/main.c    **** 
4102:Src/main.c    ****   GPIO_InitStruct.Pin = HDMI_SELECT;
 110              		.loc 1 4102 0
 111 007c 1023     		movs	r3, #16
 112 007e 0493     		str	r3, [sp, #16]
4103:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 113              		.loc 1 4103 0
 114 0080 0595     		str	r5, [sp, #20]
4104:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 115              		.loc 1 4104 0
ARM GAS  /tmp/cclqPDF2.s 			page 75


 116 0082 0694     		str	r4, [sp, #24]
4105:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 117              		.loc 1 4105 0
 118 0084 0DEB0301 		add	r1, sp, r3
 119 0088 3846     		mov	r0, r7
 120 008a FFF7FEFF 		bl	HAL_GPIO_Init
 121              	.LVL2:
4106:Src/main.c    **** 
4107:Src/main.c    **** 
4108:Src/main.c    ****   /*Configure GPIO pin : IR_IN_Pin */
4109:Src/main.c    **** /*
4110:Src/main.c    ****   GPIO_InitStruct.Pin = IR_IN_Pin;
4111:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
4112:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
4113:Src/main.c    ****   HAL_GPIO_Init(IR_IN_GPIO_Port, &GPIO_InitStruct);
4114:Src/main.c    **** */
4115:Src/main.c    ****   /*Configure GPIO pin : RX1_Pin */
4116:Src/main.c    ****   /*
4117:Src/main.c    ****   GPIO_InitStruct.Pin = RX1_Pin;
4118:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
4119:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
4120:Src/main.c    ****   HAL_GPIO_Init(RX1_GPIO_Port, &GPIO_InitStruct);
4121:Src/main.c    **** */
4122:Src/main.c    **** #if 0
4123:Src/main.c    ****    GPIO_InitStruct.Pin =DOWN_KEY_Pin|UP_KEY_Pin|MENU_KEY_Pin|POWER_KEY_Pin/*|TOUCH_INT*/;
4124:Src/main.c    ****   // GPIO_InitStruct.Pin =MENU_KEY_Pin|POWER_KEY_Pin;
4125:Src/main.c    ****    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
4126:Src/main.c    ****    GPIO_InitStruct.Pull = GPIO_PULLUP;
4127:Src/main.c    ****    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
4128:Src/main.c    **** #endif
4129:Src/main.c    **** 
4130:Src/main.c    ****   GPIO_InitStruct.Pin =(/*PANEL_EN_Pin|*//*TOUCH_RESET|*/VS_RST_Pin|STM_SCL_Pin|STM_SDA_Pin);
 122              		.loc 1 4130 0
 123 008e 4FF4E053 		mov	r3, #7168
 124 0092 0493     		str	r3, [sp, #16]
4131:Src/main.c    **** //  GPIO_InitStruct.Pin =(PANEL_EN_Pin|TOUCH_RESET);
4132:Src/main.c    **** //  GPIO_InitStruct.Pin =(PANEL_EN_Pin|BL_PWM_Pin);
4133:Src/main.c    ****    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;//GPIO_MODE_OUTPUT_PP;///GPIO_MODE_OUTPUT_OD;
 125              		.loc 1 4133 0
 126 0094 0594     		str	r4, [sp, #20]
4134:Src/main.c    ****    GPIO_InitStruct.Pull =GPIO_PULLUP;// GPIO_PULLUP;
 127              		.loc 1 4134 0
 128 0096 0694     		str	r4, [sp, #24]
4135:Src/main.c    ****    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 129              		.loc 1 4135 0
 130 0098 0796     		str	r6, [sp, #28]
4136:Src/main.c    ****    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 131              		.loc 1 4136 0
 132 009a 04A9     		add	r1, sp, #16
 133 009c 0C48     		ldr	r0, .L3+8
 134 009e FFF7FEFF 		bl	HAL_GPIO_Init
 135              	.LVL3:
4137:Src/main.c    ****   /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin 
4138:Src/main.c    ****                            SW5_Pin SW6_Pin SW7_Pin */
4139:Src/main.c    **** //  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin 
4140:Src/main.c    ****    //                      |SW5_Pin|SW6_Pin|SW7_Pin|DOWN_KEY_Pin|UP_KEY_Pin|MENU_KEY_Pin|POWER_KEY_
4141:Src/main.c    ****   /*
ARM GAS  /tmp/cclqPDF2.s 			page 76


4142:Src/main.c    **** 
4143:Src/main.c    ****   GPIO_InitStruct.Pin =DOWN_KEY_Pin|UP_KEY_Pin|MENU_KEY_Pin|POWER_KEY_Pin|TOUCH_INT;
4144:Src/main.c    ****  // GPIO_InitStruct.Pin =MENU_KEY_Pin|POWER_KEY_Pin;
4145:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
4146:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
4147:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
4148:Src/main.c    **** */
4149:Src/main.c    **** /*
4150:Src/main.c    ****   GPIO_InitStruct.Pin =DOWN_KEY_Pin|UP_KEY_Pin;
4151:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
4152:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
4153:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
4154:Src/main.c    **** */
4155:Src/main.c    ****   GPIO_InitStruct.Pin =TP2824_REST/*LCD_PWR_Pin|TTLI1_RES_Pin|AUD_SEL2_Pin|GREEN_LED_Pin |RED_LED_P
 136              		.loc 1 4155 0
 137 00a2 0496     		str	r6, [sp, #16]
4156:Src/main.c    **** //  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
4157:Src/main.c    **** //   GPIO_InitStruct.Pull = GPIO_PULLUP;
4158:Src/main.c    ****    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 138              		.loc 1 4158 0
 139 00a4 0594     		str	r4, [sp, #20]
4159:Src/main.c    ****    GPIO_InitStruct.Pull = GPIO_PULLUP;
 140              		.loc 1 4159 0
 141 00a6 0694     		str	r4, [sp, #24]
4160:Src/main.c    **** 
4161:Src/main.c    ****    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 142              		.loc 1 4161 0
 143 00a8 0796     		str	r6, [sp, #28]
4162:Src/main.c    ****    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 144              		.loc 1 4162 0
 145 00aa 0A4E     		ldr	r6, .L3+12
 146 00ac 04A9     		add	r1, sp, #16
 147 00ae 3046     		mov	r0, r6
 148 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 149              	.LVL4:
4163:Src/main.c    **** 
4164:Src/main.c    **** 
4165:Src/main.c    **** //  GPIO_InitStruct.Pin =GREEN_LED_Pin|RED_LED_Pin;
4166:Src/main.c    ****   // GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
4167:Src/main.c    ****    //GPIO_InitStruct.Pull = GPIO_NOPULL;
4168:Src/main.c    ****    //GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
4169:Src/main.c    ****    //HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
4170:Src/main.c    **** 
4171:Src/main.c    ****   GPIO_InitStruct.Pin = TP2824_IRQ|MCU_WAKEUP|AUD_I2C_MUTE_Pin/*| JUMP_KEY_Pin*/;
 150              		.loc 1 4171 0
 151 00b4 4923     		movs	r3, #73
 152 00b6 0493     		str	r3, [sp, #16]
4172:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 153              		.loc 1 4172 0
 154 00b8 0595     		str	r5, [sp, #20]
4173:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 155              		.loc 1 4173 0
 156 00ba 0694     		str	r4, [sp, #24]
4174:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 157              		.loc 1 4174 0
 158 00bc 04A9     		add	r1, sp, #16
 159 00be 3046     		mov	r0, r6
ARM GAS  /tmp/cclqPDF2.s 			page 77


 160 00c0 FFF7FEFF 		bl	HAL_GPIO_Init
 161              	.LVL5:
4175:Src/main.c    **** 
4176:Src/main.c    **** /*
4177:Src/main.c    ****   GPIO_InitStruct.Pin =AUD_SEL1_Pin;
4178:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
4179:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
4180:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
4181:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
4182:Src/main.c    ****   */
4183:Src/main.c    **** 
4184:Src/main.c    **** 
4185:Src/main.c    **** 	
4186:Src/main.c    **** 
4187:Src/main.c    ****   /* EXTI interrupt init*/
4188:Src/main.c    **** /*
4189:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
4190:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI2_IRQn);
4191:Src/main.c    **** */
4192:Src/main.c    **** }
 162              		.loc 1 4192 0
 163 00c4 09B0     		add	sp, sp, #36
 164              	.LCFI2:
 165              		.cfi_def_cfa_offset 20
 166              		@ sp needed
 167 00c6 F0BD     		pop	{r4, r5, r6, r7, pc}
 168              	.L4:
 169              		.align	2
 170              	.L3:
 171 00c8 00100240 		.word	1073876992
 172 00cc 00080140 		.word	1073809408
 173 00d0 000C0140 		.word	1073810432
 174 00d4 00100140 		.word	1073811456
 175              		.cfi_endproc
 176              	.LFE98:
 178              		.section	.text.MX_TIM3_Init,"ax",%progbits
 179              		.align	1
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 183              		.fpu softvfp
 185              	MX_TIM3_Init:
 186              	.LFB95:
3971:Src/main.c    **** 
 187              		.loc 1 3971 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 24
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191 0000 30B5     		push	{r4, r5, lr}
 192              	.LCFI3:
 193              		.cfi_def_cfa_offset 12
 194              		.cfi_offset 4, -12
 195              		.cfi_offset 5, -8
 196              		.cfi_offset 14, -4
 197 0002 87B0     		sub	sp, sp, #28
 198              	.LCFI4:
 199              		.cfi_def_cfa_offset 40
ARM GAS  /tmp/cclqPDF2.s 			page 78


3977:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 200              		.loc 1 3977 0
 201 0004 0024     		movs	r4, #0
 202 0006 0294     		str	r4, [sp, #8]
 203 0008 0394     		str	r4, [sp, #12]
 204 000a 0494     		str	r4, [sp, #16]
 205 000c 0594     		str	r4, [sp, #20]
3978:Src/main.c    **** 
 206              		.loc 1 3978 0
 207 000e 0094     		str	r4, [sp]
 208 0010 0194     		str	r4, [sp, #4]
3983:Src/main.c    ****   htim3.Init.Prescaler = 35;
 209              		.loc 1 3983 0
 210 0012 0E4D     		ldr	r5, .L7
 211 0014 0E4B     		ldr	r3, .L7+4
 212 0016 2B60     		str	r3, [r5]
3984:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 213              		.loc 1 3984 0
 214 0018 2323     		movs	r3, #35
 215 001a 6B60     		str	r3, [r5, #4]
3985:Src/main.c    ****   htim3.Init.Period = 9;
 216              		.loc 1 3985 0
 217 001c AC60     		str	r4, [r5, #8]
3986:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 218              		.loc 1 3986 0
 219 001e 0923     		movs	r3, #9
 220 0020 EB60     		str	r3, [r5, #12]
3987:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 221              		.loc 1 3987 0
 222 0022 2C61     		str	r4, [r5, #16]
3988:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 223              		.loc 1 3988 0
 224 0024 8023     		movs	r3, #128
 225 0026 AB61     		str	r3, [r5, #24]
3989:Src/main.c    ****   {
 226              		.loc 1 3989 0
 227 0028 2846     		mov	r0, r5
 228 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 229              	.LVL6:
3993:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 230              		.loc 1 3993 0
 231 002e 4FF48053 		mov	r3, #4096
 232 0032 0293     		str	r3, [sp, #8]
3994:Src/main.c    ****   {
 233              		.loc 1 3994 0
 234 0034 02A9     		add	r1, sp, #8
 235 0036 2846     		mov	r0, r5
 236 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 237              	.LVL7:
3998:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 238              		.loc 1 3998 0
 239 003c 0094     		str	r4, [sp]
3999:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 240              		.loc 1 3999 0
 241 003e 0194     		str	r4, [sp, #4]
4000:Src/main.c    ****   {
 242              		.loc 1 4000 0
ARM GAS  /tmp/cclqPDF2.s 			page 79


 243 0040 6946     		mov	r1, sp
 244 0042 2846     		mov	r0, r5
 245 0044 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 246              	.LVL8:
4008:Src/main.c    **** 
 247              		.loc 1 4008 0
 248 0048 07B0     		add	sp, sp, #28
 249              	.LCFI5:
 250              		.cfi_def_cfa_offset 12
 251              		@ sp needed
 252 004a 30BD     		pop	{r4, r5, pc}
 253              	.L8:
 254              		.align	2
 255              	.L7:
 256 004c 00000000 		.word	htim3
 257 0050 00040040 		.word	1073742848
 258              		.cfi_endproc
 259              	.LFE95:
 261              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 262              		.align	1
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 266              		.fpu softvfp
 268              	MX_USART1_UART_Init:
 269              	.LFB96:
4016:Src/main.c    **** 
 270              		.loc 1 4016 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274 0000 08B5     		push	{r3, lr}
 275              	.LCFI6:
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 3, -8
 278              		.cfi_offset 14, -4
4025:Src/main.c    **** //  huart1.Init.BaudRate = 9600;
 279              		.loc 1 4025 0
 280 0002 0848     		ldr	r0, .L11
 281 0004 084B     		ldr	r3, .L11+4
 282 0006 0360     		str	r3, [r0]
4027:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 283              		.loc 1 4027 0
 284 0008 4FF4E133 		mov	r3, #115200
 285 000c 4360     		str	r3, [r0, #4]
4028:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 286              		.loc 1 4028 0
 287 000e 0023     		movs	r3, #0
 288 0010 8360     		str	r3, [r0, #8]
4029:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 289              		.loc 1 4029 0
 290 0012 C360     		str	r3, [r0, #12]
4030:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 291              		.loc 1 4030 0
 292 0014 0361     		str	r3, [r0, #16]
4031:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 293              		.loc 1 4031 0
ARM GAS  /tmp/cclqPDF2.s 			page 80


 294 0016 0C22     		movs	r2, #12
 295 0018 4261     		str	r2, [r0, #20]
4032:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 296              		.loc 1 4032 0
 297 001a 8361     		str	r3, [r0, #24]
4033:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 298              		.loc 1 4033 0
 299 001c C361     		str	r3, [r0, #28]
4034:Src/main.c    ****   {
 300              		.loc 1 4034 0
 301 001e FFF7FEFF 		bl	HAL_UART_Init
 302              	.LVL9:
4042:Src/main.c    **** 
 303              		.loc 1 4042 0
 304 0022 08BD     		pop	{r3, pc}
 305              	.L12:
 306              		.align	2
 307              	.L11:
 308 0024 00000000 		.word	huart1
 309 0028 00380140 		.word	1073821696
 310              		.cfi_endproc
 311              	.LFE96:
 313              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 314              		.align	1
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu softvfp
 320              	MX_USART2_UART_Init:
 321              	.LFB97:
4050:Src/main.c    **** 
 322              		.loc 1 4050 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326 0000 08B5     		push	{r3, lr}
 327              	.LCFI7:
 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 3, -8
 330              		.cfi_offset 14, -4
4059:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 331              		.loc 1 4059 0
 332 0002 0848     		ldr	r0, .L15
 333 0004 084B     		ldr	r3, .L15+4
 334 0006 0360     		str	r3, [r0]
4060:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 335              		.loc 1 4060 0
 336 0008 4FF41643 		mov	r3, #38400
 337 000c 4360     		str	r3, [r0, #4]
4061:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 338              		.loc 1 4061 0
 339 000e 0023     		movs	r3, #0
 340 0010 8360     		str	r3, [r0, #8]
4062:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 341              		.loc 1 4062 0
 342 0012 C360     		str	r3, [r0, #12]
4063:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
ARM GAS  /tmp/cclqPDF2.s 			page 81


 343              		.loc 1 4063 0
 344 0014 0361     		str	r3, [r0, #16]
4064:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 345              		.loc 1 4064 0
 346 0016 0C22     		movs	r2, #12
 347 0018 4261     		str	r2, [r0, #20]
4065:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 348              		.loc 1 4065 0
 349 001a 8361     		str	r3, [r0, #24]
4066:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 350              		.loc 1 4066 0
 351 001c C361     		str	r3, [r0, #28]
4067:Src/main.c    ****   {
 352              		.loc 1 4067 0
 353 001e FFF7FEFF 		bl	HAL_UART_Init
 354              	.LVL10:
4075:Src/main.c    **** 
 355              		.loc 1 4075 0
 356 0022 08BD     		pop	{r3, pc}
 357              	.L16:
 358              		.align	2
 359              	.L15:
 360 0024 00000000 		.word	huart2
 361 0028 00440040 		.word	1073759232
 362              		.cfi_endproc
 363              	.LFE97:
 365              		.section	.text.HDMI_AudioModeDetect,"ax",%progbits
 366              		.align	1
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 370              		.fpu softvfp
 372              	HDMI_AudioModeDetect:
 373              	.LFB75:
1279:Src/main.c    ****     tByte pbAudioSampleFreq, pbValidCh ;
 374              		.loc 1 1279 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 8
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378 0000 00B5     		push	{lr}
 379              	.LCFI8:
 380              		.cfi_def_cfa_offset 4
 381              		.cfi_offset 14, -4
 382 0002 83B0     		sub	sp, sp, #12
 383              	.LCFI9:
 384              		.cfi_def_cfa_offset 16
1281:Src/main.c    **** 
 385              		.loc 1 1281 0
 386 0004 0023     		movs	r3, #0
 387 0006 8DF80730 		strb	r3, [sp, #7]
1283:Src/main.c    **** 
 388              		.loc 1 1283 0
 389 000a 0DF10601 		add	r1, sp, #6
 390 000e 0DF10700 		add	r0, sp, #7
 391 0012 FFF7FEFF 		bl	getHDMIRXAudioInfo
 392              	.LVL11:
1285:Src/main.c    ****     {
ARM GAS  /tmp/cclqPDF2.s 			page 82


 393              		.loc 1 1285 0
 394 0016 0E4B     		ldr	r3, .L21
 395 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 396 001a 042B     		cmp	r3, #4
 397 001c 03D0     		beq	.L18
1287:Src/main.c    ****         {
 398              		.loc 1 1287 0
 399 001e 0D4A     		ldr	r2, .L21+4
 400 0020 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 401 0022 9342     		cmp	r3, r2
 402 0024 08D0     		beq	.L20
 403              	.L18:
1296:Src/main.c    **** }
 404              		.loc 1 1296 0
 405 0026 0B4B     		ldr	r3, .L21+4
 406 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 407 002a 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 408 002e 0A4A     		ldr	r2, .L21+8
 409 0030 D154     		strb	r1, [r2, r3]
1297:Src/main.c    **** 
 410              		.loc 1 1297 0
 411 0032 03B0     		add	sp, sp, #12
 412              	.LCFI10:
 413              		.cfi_remember_state
 414              		.cfi_def_cfa_offset 4
 415              		@ sp needed
 416 0034 5DF804FB 		ldr	pc, [sp], #4
 417              	.L20:
 418              	.LCFI11:
 419              		.cfi_restore_state
1289:Src/main.c    ****             {
 420              		.loc 1 1289 0
 421 0038 084B     		ldr	r3, .L21+12
 422 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 423 003c 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 424 0040 8342     		cmp	r3, r0
 425 0042 F0D0     		beq	.L18
1291:Src/main.c    ****                 HDMI_Tx_SetAudioFs(gPreAudioSampleFreq )  ;
 426              		.loc 1 1291 0
 427 0044 054B     		ldr	r3, .L21+12
 428 0046 1870     		strb	r0, [r3]
1292:Src/main.c    ****             }
 429              		.loc 1 1292 0
 430 0048 FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 431              	.LVL12:
 432 004c EBE7     		b	.L18
 433              	.L22:
 434 004e 00BF     		.align	2
 435              	.L21:
 436 0050 00000000 		.word	.LANCHOR0
 437 0054 00000000 		.word	gHDMI_Index
 438 0058 00000000 		.word	.LANCHOR1
 439 005c 00000000 		.word	gPreAudioSampleFreq
 440              		.cfi_endproc
 441              	.LFE75:
 443              		.section	.text._write,"ax",%progbits
 444              		.align	1
ARM GAS  /tmp/cclqPDF2.s 			page 83


 445              		.global	_write
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu softvfp
 451              	_write:
 452              	.LFB68:
 256:Src/main.c    ****     if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 453              		.loc 1 256 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              	.LVL13:
 458 0000 10B5     		push	{r4, lr}
 459              	.LCFI12:
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 4, -8
 462              		.cfi_offset 14, -4
 257:Src/main.c    ****     {
 463              		.loc 1 257 0
 464 0002 0138     		subs	r0, r0, #1
 465              	.LVL14:
 466 0004 0128     		cmp	r0, #1
 467 0006 09D8     		bhi	.L28
 468 0008 1446     		mov	r4, r2
 263:Src/main.c    ****         HAL_UART_Transmit(&huart1, (uint8_t*)data, (uint16_t)len, 1000);
 469              		.loc 1 263 0
 470 000a 4FF47A73 		mov	r3, #1000
 471 000e 92B2     		uxth	r2, r2
 472              	.LVL15:
 473 0010 0748     		ldr	r0, .L30
 474              	.LVL16:
 475 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 476              	.LVL17:
 266:Src/main.c    **** }
 477              		.loc 1 266 0
 478 0016 40B1     		cbz	r0, .L29
 479 0018 0020     		movs	r0, #0
 480              	.LVL18:
 481              	.L23:
 267:Src/main.c    **** #else
 482              		.loc 1 267 0
 483 001a 10BD     		pop	{r4, pc}
 484              	.LVL19:
 485              	.L28:
 259:Src/main.c    ****         return -1;
 486              		.loc 1 259 0
 487 001c FFF7FEFF 		bl	__errno
 488              	.LVL20:
 489 0020 0923     		movs	r3, #9
 490 0022 0360     		str	r3, [r0]
 260:Src/main.c    ****     }
 491              		.loc 1 260 0
 492 0024 4FF0FF30 		mov	r0, #-1
 493 0028 F7E7     		b	.L23
 494              	.LVL21:
 495              	.L29:
ARM GAS  /tmp/cclqPDF2.s 			page 84


 266:Src/main.c    **** }
 496              		.loc 1 266 0
 497 002a 2046     		mov	r0, r4
 498              	.LVL22:
 499 002c F5E7     		b	.L23
 500              	.L31:
 501 002e 00BF     		.align	2
 502              	.L30:
 503 0030 00000000 		.word	huart1
 504              		.cfi_endproc
 505              	.LFE68:
 507              		.section	.text.Audio_Sel,"ax",%progbits
 508              		.align	1
 509              		.global	Audio_Sel
 510              		.syntax unified
 511              		.thumb
 512              		.thumb_func
 513              		.fpu softvfp
 515              	Audio_Sel:
 516              	.LFB69:
 279:Src/main.c    ****     gbAUDO_INDEX = mode ;
 517              		.loc 1 279 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              	.LVL23:
 522 0000 38B5     		push	{r3, r4, r5, lr}
 523              	.LCFI13:
 524              		.cfi_def_cfa_offset 16
 525              		.cfi_offset 3, -16
 526              		.cfi_offset 4, -12
 527              		.cfi_offset 5, -8
 528              		.cfi_offset 14, -4
 280:Src/main.c    ****     switch(mode)
 529              		.loc 1 280 0
 530 0002 5B4B     		ldr	r3, .L41
 531 0004 1870     		strb	r0, [r3]
 281:Src/main.c    ****     {
 532              		.loc 1 281 0
 533 0006 0428     		cmp	r0, #4
 534 0008 20D8     		bhi	.L32
 535 000a DFE800F0 		tbb	[pc, r0]
 536              	.L35:
 537 000e 20       		.byte	(.L34-.L35)/2
 538 000f 44       		.byte	(.L36-.L35)/2
 539 0010 68       		.byte	(.L37-.L35)/2
 540 0011 8C       		.byte	(.L38-.L35)/2
 541 0012 03       		.byte	(.L39-.L35)/2
 542 0013 00       		.p2align 1
 543              	.L39:
 291:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 544              		.loc 1 291 0
 545 0014 574D     		ldr	r5, .L41+4
 546 0016 0122     		movs	r2, #1
 547 0018 4021     		movs	r1, #64
 548 001a 2846     		mov	r0, r5
 549              	.LVL24:
ARM GAS  /tmp/cclqPDF2.s 			page 85


 550 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 551              	.LVL25:
 292:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 552              		.loc 1 292 0
 553 0020 554C     		ldr	r4, .L41+8
 554 0022 0122     		movs	r2, #1
 555 0024 2021     		movs	r1, #32
 556 0026 2046     		mov	r0, r4
 557 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 558              	.LVL26:
 293:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 559              		.loc 1 293 0
 560 002c 0122     		movs	r2, #1
 561 002e 1021     		movs	r1, #16
 562 0030 2046     		mov	r0, r4
 563 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 564              	.LVL27:
 294:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 565              		.loc 1 294 0
 566 0036 0122     		movs	r2, #1
 567 0038 0821     		movs	r1, #8
 568 003a 2046     		mov	r0, r4
 569 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 570              	.LVL28:
 295:Src/main.c    ****         break ;
 571              		.loc 1 295 0
 572 0040 0122     		movs	r2, #1
 573 0042 4FF40041 		mov	r1, #32768
 574 0046 2846     		mov	r0, r5
 575 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 576              	.LVL29:
 577              	.L32:
 372:Src/main.c    **** 
 578              		.loc 1 372 0
 579 004c 38BD     		pop	{r3, r4, r5, pc}
 580              	.LVL30:
 581              	.L34:
 307:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_RESET);
 582              		.loc 1 307 0
 583 004e 494D     		ldr	r5, .L41+4
 584 0050 0122     		movs	r2, #1
 585 0052 4021     		movs	r1, #64
 586 0054 2846     		mov	r0, r5
 587              	.LVL31:
 588 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 589              	.LVL32:
 308:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 590              		.loc 1 308 0
 591 005a 474C     		ldr	r4, .L41+8
 592 005c 0022     		movs	r2, #0
 593 005e 2021     		movs	r1, #32
 594 0060 2046     		mov	r0, r4
 595 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 596              	.LVL33:
 309:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 597              		.loc 1 309 0
 598 0066 0122     		movs	r2, #1
ARM GAS  /tmp/cclqPDF2.s 			page 86


 599 0068 1021     		movs	r1, #16
 600 006a 2046     		mov	r0, r4
 601 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 602              	.LVL34:
 310:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 603              		.loc 1 310 0
 604 0070 0122     		movs	r2, #1
 605 0072 0821     		movs	r1, #8
 606 0074 2046     		mov	r0, r4
 607 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 608              	.LVL35:
 311:Src/main.c    **** 
 609              		.loc 1 311 0
 610 007a 0122     		movs	r2, #1
 611 007c 4FF40041 		mov	r1, #32768
 612 0080 2846     		mov	r0, r5
 613 0082 FFF7FEFF 		bl	HAL_GPIO_WritePin
 614              	.LVL36:
 313:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[0] ;
 615              		.loc 1 313 0
 616 0086 3D4C     		ldr	r4, .L41+12
 617 0088 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 618 008a FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 619              	.LVL37:
 314:Src/main.c    ****         break ;
 620              		.loc 1 314 0
 621 008e 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 622 0090 3B4B     		ldr	r3, .L41+16
 623 0092 1A70     		strb	r2, [r3]
 315:Src/main.c    **** 
 624              		.loc 1 315 0
 625 0094 DAE7     		b	.L32
 626              	.LVL38:
 627              	.L36:
 326:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 628              		.loc 1 326 0
 629 0096 374D     		ldr	r5, .L41+4
 630 0098 0122     		movs	r2, #1
 631 009a 4021     		movs	r1, #64
 632 009c 2846     		mov	r0, r5
 633              	.LVL39:
 634 009e FFF7FEFF 		bl	HAL_GPIO_WritePin
 635              	.LVL40:
 327:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_RESET);
 636              		.loc 1 327 0
 637 00a2 354C     		ldr	r4, .L41+8
 638 00a4 0122     		movs	r2, #1
 639 00a6 2021     		movs	r1, #32
 640 00a8 2046     		mov	r0, r4
 641 00aa FFF7FEFF 		bl	HAL_GPIO_WritePin
 642              	.LVL41:
 328:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 643              		.loc 1 328 0
 644 00ae 0022     		movs	r2, #0
 645 00b0 1021     		movs	r1, #16
 646 00b2 2046     		mov	r0, r4
 647 00b4 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/cclqPDF2.s 			page 87


 648              	.LVL42:
 329:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 649              		.loc 1 329 0
 650 00b8 0122     		movs	r2, #1
 651 00ba 0821     		movs	r1, #8
 652 00bc 2046     		mov	r0, r4
 653 00be FFF7FEFF 		bl	HAL_GPIO_WritePin
 654              	.LVL43:
 330:Src/main.c    **** 
 655              		.loc 1 330 0
 656 00c2 0122     		movs	r2, #1
 657 00c4 4FF40041 		mov	r1, #32768
 658 00c8 2846     		mov	r0, r5
 659 00ca FFF7FEFF 		bl	HAL_GPIO_WritePin
 660              	.LVL44:
 332:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[1] ;
 661              		.loc 1 332 0
 662 00ce 2B4C     		ldr	r4, .L41+12
 663 00d0 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 664 00d2 FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 665              	.LVL45:
 333:Src/main.c    ****         break ;
 666              		.loc 1 333 0
 667 00d6 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 668 00d8 294B     		ldr	r3, .L41+16
 669 00da 1A70     		strb	r2, [r3]
 334:Src/main.c    **** 
 670              		.loc 1 334 0
 671 00dc B6E7     		b	.L32
 672              	.LVL46:
 673              	.L37:
 344:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 674              		.loc 1 344 0
 675 00de 254D     		ldr	r5, .L41+4
 676 00e0 0022     		movs	r2, #0
 677 00e2 4021     		movs	r1, #64
 678 00e4 2846     		mov	r0, r5
 679              	.LVL47:
 680 00e6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 681              	.LVL48:
 345:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 682              		.loc 1 345 0
 683 00ea 234C     		ldr	r4, .L41+8
 684 00ec 0122     		movs	r2, #1
 685 00ee 2021     		movs	r1, #32
 686 00f0 2046     		mov	r0, r4
 687 00f2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 688              	.LVL49:
 346:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_RESET);
 689              		.loc 1 346 0
 690 00f6 0122     		movs	r2, #1
 691 00f8 1021     		movs	r1, #16
 692 00fa 2046     		mov	r0, r4
 693 00fc FFF7FEFF 		bl	HAL_GPIO_WritePin
 694              	.LVL50:
 347:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 695              		.loc 1 347 0
ARM GAS  /tmp/cclqPDF2.s 			page 88


 696 0100 0022     		movs	r2, #0
 697 0102 0821     		movs	r1, #8
 698 0104 2046     		mov	r0, r4
 699 0106 FFF7FEFF 		bl	HAL_GPIO_WritePin
 700              	.LVL51:
 348:Src/main.c    **** 
 701              		.loc 1 348 0
 702 010a 0122     		movs	r2, #1
 703 010c 4FF40041 		mov	r1, #32768
 704 0110 2846     		mov	r0, r5
 705 0112 FFF7FEFF 		bl	HAL_GPIO_WritePin
 706              	.LVL52:
 350:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[2] ;
 707              		.loc 1 350 0
 708 0116 194C     		ldr	r4, .L41+12
 709 0118 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 710 011a FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 711              	.LVL53:
 351:Src/main.c    ****         break ;
 712              		.loc 1 351 0
 713 011e A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 714 0120 174B     		ldr	r3, .L41+16
 715 0122 1A70     		strb	r2, [r3]
 352:Src/main.c    **** 
 716              		.loc 1 352 0
 717 0124 92E7     		b	.L32
 718              	.LVL54:
 719              	.L38:
 362:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 720              		.loc 1 362 0
 721 0126 134D     		ldr	r5, .L41+4
 722 0128 0022     		movs	r2, #0
 723 012a 4021     		movs	r1, #64
 724 012c 2846     		mov	r0, r5
 725              	.LVL55:
 726 012e FFF7FEFF 		bl	HAL_GPIO_WritePin
 727              	.LVL56:
 363:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 728              		.loc 1 363 0
 729 0132 114C     		ldr	r4, .L41+8
 730 0134 0122     		movs	r2, #1
 731 0136 2021     		movs	r1, #32
 732 0138 2046     		mov	r0, r4
 733 013a FFF7FEFF 		bl	HAL_GPIO_WritePin
 734              	.LVL57:
 364:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 735              		.loc 1 364 0
 736 013e 0122     		movs	r2, #1
 737 0140 1021     		movs	r1, #16
 738 0142 2046     		mov	r0, r4
 739 0144 FFF7FEFF 		bl	HAL_GPIO_WritePin
 740              	.LVL58:
 365:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_RESET);
 741              		.loc 1 365 0
 742 0148 0122     		movs	r2, #1
 743 014a 0821     		movs	r1, #8
 744 014c 2046     		mov	r0, r4
ARM GAS  /tmp/cclqPDF2.s 			page 89


 745 014e FFF7FEFF 		bl	HAL_GPIO_WritePin
 746              	.LVL59:
 366:Src/main.c    **** 
 747              		.loc 1 366 0
 748 0152 0022     		movs	r2, #0
 749 0154 4FF40041 		mov	r1, #32768
 750 0158 2846     		mov	r0, r5
 751 015a FFF7FEFF 		bl	HAL_GPIO_WritePin
 752              	.LVL60:
 368:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[3] ;
 753              		.loc 1 368 0
 754 015e 074C     		ldr	r4, .L41+12
 755 0160 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 756 0162 FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 757              	.LVL61:
 369:Src/main.c    ****         break ;
 758              		.loc 1 369 0
 759 0166 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 760 0168 054B     		ldr	r3, .L41+16
 761 016a 1A70     		strb	r2, [r3]
 372:Src/main.c    **** 
 762              		.loc 1 372 0
 763 016c 6EE7     		b	.L32
 764              	.L42:
 765 016e 00BF     		.align	2
 766              	.L41:
 767 0170 00000000 		.word	.LANCHOR0
 768 0174 00080140 		.word	1073809408
 769 0178 000C0140 		.word	1073810432
 770 017c 00000000 		.word	.LANCHOR1
 771 0180 00000000 		.word	gPreAudioSampleFreq
 772              		.cfi_endproc
 773              	.LFE69:
 775              		.section	.text.SET_Audio_Mute,"ax",%progbits
 776              		.align	1
 777              		.global	SET_Audio_Mute
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu softvfp
 783              	SET_Audio_Mute:
 784              	.LFB70:
 375:Src/main.c    **** 
 785              		.loc 1 375 0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              	.LVL62:
 790 0000 10B5     		push	{r4, lr}
 791              	.LCFI14:
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 4, -8
 794              		.cfi_offset 14, -4
 795 0002 0446     		mov	r4, r0
 377:Src/main.c    **** 	HAL_GPIO_WritePin(AUD_I2C_MUTE_Port,AUD_I2C_MUTE_Pin, GPIO_PIN_RESET);
 796              		.loc 1 377 0
 797 0004 0128     		cmp	r0, #1
ARM GAS  /tmp/cclqPDF2.s 			page 90


 798 0006 09D0     		beq	.L47
 380:Src/main.c    **** 
 799              		.loc 1 380 0
 800 0008 0122     		movs	r2, #1
 801 000a 0821     		movs	r1, #8
 802 000c 0648     		ldr	r0, .L48
 803              	.LVL63:
 804 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 805              	.LVL64:
 806              	.L45:
 382:Src/main.c    **** 
 807              		.loc 1 382 0
 808 0012 2146     		mov	r1, r4
 809 0014 0548     		ldr	r0, .L48+4
 810 0016 FFF7FEFF 		bl	Printf
 811              	.LVL65:
 384:Src/main.c    **** 
 812              		.loc 1 384 0
 813 001a 10BD     		pop	{r4, pc}
 814              	.LVL66:
 815              	.L47:
 378:Src/main.c    **** else
 816              		.loc 1 378 0
 817 001c 0022     		movs	r2, #0
 818 001e 0821     		movs	r1, #8
 819 0020 0148     		ldr	r0, .L48
 820              	.LVL67:
 821 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 822              	.LVL68:
 823 0026 F4E7     		b	.L45
 824              	.L49:
 825              		.align	2
 826              	.L48:
 827 0028 00100140 		.word	1073811456
 828 002c 00000000 		.word	.LC0
 829              		.cfi_endproc
 830              	.LFE70:
 832              		.section	.text.HDMI_VideoModeDetect,"ax",%progbits
 833              		.align	1
 834              		.syntax unified
 835              		.thumb
 836              		.thumb_func
 837              		.fpu softvfp
 839              	HDMI_VideoModeDetect:
 840              	.LFB74:
1162:Src/main.c    **** 		tByte i  ;
 841              		.loc 1 1162 0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 0
 844              		@ frame_needed = 0, uses_anonymous_args = 0
 845 0000 30B5     		push	{r4, r5, lr}
 846              	.LCFI15:
 847              		.cfi_def_cfa_offset 12
 848              		.cfi_offset 4, -12
 849              		.cfi_offset 5, -8
 850              		.cfi_offset 14, -4
 851 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/cclqPDF2.s 			page 91


 852              	.LCFI16:
 853              		.cfi_def_cfa_offset 24
 854              	.LVL69:
1165:Src/main.c    **** 		{
 855              		.loc 1 1165 0
 856 0004 0024     		movs	r4, #0
 857 0006 58E0     		b	.L51
 858              	.LVL70:
 859              	.L74:
1171:Src/main.c    **** 					bSignal[gHDMI_Index] = 0;
 860              		.loc 1 1171 0
 861 0008 6E4B     		ldr	r3, .L78
 862 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 863 000c 142B     		cmp	r3, #20
 864 000e 03D0     		beq	.L68
1174:Src/main.c    **** 			}
 865              		.loc 1 1174 0
 866 0010 6D4B     		ldr	r3, .L78+4
 867 0012 0122     		movs	r2, #1
 868 0014 1A55     		strb	r2, [r3, r4]
 869 0016 5CE0     		b	.L54
 870              	.L68:
1172:Src/main.c    **** 				else
 871              		.loc 1 1172 0
 872 0018 6B4B     		ldr	r3, .L78+4
 873 001a 0022     		movs	r2, #0
 874 001c 1A55     		strb	r2, [r3, r4]
 875 001e 58E0     		b	.L54
 876              	.L75:
1196:Src/main.c    **** 					dbg_Printf("##ch%d, VS4210_Rx_NoSignal\r\n", (int)(i+1) ) ;
 877              		.loc 1 1196 0
 878 0020 2046     		mov	r0, r4
 879 0022 FFF7FEFF 		bl	VS4210_Rx_NoSignal
 880              	.LVL71:
1197:Src/main.c    **** 					if (pVS4210_MutiWindows1.DrawOSDFlg != 0)
 881              		.loc 1 1197 0
 882 0026 631C     		adds	r3, r4, #1
 883 0028 0093     		str	r3, [sp]
 884 002a 40F2AD43 		movw	r3, #1197
 885 002e 674A     		ldr	r2, .L78+8
 886 0030 6749     		ldr	r1, .L78+12
 887 0032 6848     		ldr	r0, .L78+16
 888 0034 FFF7FEFF 		bl	printf
 889              	.LVL72:
1198:Src/main.c    **** 					{
 890              		.loc 1 1198 0
 891 0038 674B     		ldr	r3, .L78+20
 892 003a DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 893 003c 4BB1     		cbz	r3, .L57
1200:Src/main.c    **** 						Tim1_count = 0 ;
 894              		.loc 1 1200 0
 895 003e 0122     		movs	r2, #1
 896 0040 664B     		ldr	r3, .L78+24
 897 0042 1A60     		str	r2, [r3]
1201:Src/main.c    **** 						OSDStateFlg = 1 ;
 898              		.loc 1 1201 0
 899 0044 0023     		movs	r3, #0
ARM GAS  /tmp/cclqPDF2.s 			page 92


 900 0046 6649     		ldr	r1, .L78+28
 901 0048 0B60     		str	r3, [r1]
1202:Src/main.c    **** 						OSDSecCount = 0 ;
 902              		.loc 1 1202 0
 903 004a 6649     		ldr	r1, .L78+32
 904 004c 0A70     		strb	r2, [r1]
1203:Src/main.c    **** 					}
 905              		.loc 1 1203 0
 906 004e 664A     		ldr	r2, .L78+36
 907 0050 1370     		strb	r3, [r2]
 908              	.L57:
1205:Src/main.c    **** 					PrebVXIS_InputMode[gHDMI_Index] = _OSD_No_Signal ;
 909              		.loc 1 1205 0
 910 0052 664B     		ldr	r3, .L78+40
 911 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 912 0056 1422     		movs	r2, #20
 913 0058 6549     		ldr	r1, .L78+44
 914 005a CA54     		strb	r2, [r1, r3]
1206:Src/main.c    **** 
 915              		.loc 1 1206 0
 916 005c 6549     		ldr	r1, .L78+48
 917 005e CA54     		strb	r2, [r1, r3]
1208:Src/main.c    **** 						Set_Video_Loss_OSD(0,ON);
 918              		.loc 1 1208 0
 919 0060 654A     		ldr	r2, .L78+52
 920 0062 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 921 0064 02B9     		cbnz	r2, .L58
1208:Src/main.c    **** 						Set_Video_Loss_OSD(0,ON);
 922              		.loc 1 1208 0 is_stmt 0 discriminator 1
 923 0066 1BB1     		cbz	r3, .L69
 924              	.L58:
1212:Src/main.c    **** 				}
 925              		.loc 1 1212 0 is_stmt 1
 926 0068 0120     		movs	r0, #1
 927 006a FFF7FEFF 		bl	SET_Audio_Mute
 928              	.LVL73:
 929 006e 44E0     		b	.L56
 930              	.L69:
1209:Src/main.c    **** 					//MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);	
 931              		.loc 1 1209 0
 932 0070 0121     		movs	r1, #1
 933 0072 0020     		movs	r0, #0
 934 0074 FFF7FEFF 		bl	Set_Video_Loss_OSD
 935              	.LVL74:
 936 0078 F6E7     		b	.L58
 937              	.L76:
1219:Src/main.c    **** 					gbVXIS_InputMode[gHDMI_Index] = newInRes[0];
 938              		.loc 1 1219 0
 939 007a 012C     		cmp	r4, #1
 940 007c 05D0     		beq	.L70
1223:Src/main.c    **** 
 941              		.loc 1 1223 0
 942 007e 2846     		mov	r0, r5
 943 0080 FFF7FEFF 		bl	GetHDMI_InputMode
 944              	.LVL75:
 945 0084 5A4B     		ldr	r3, .L78+44
 946 0086 5855     		strb	r0, [r3, r5]
ARM GAS  /tmp/cclqPDF2.s 			page 93


 947 0088 3DE0     		b	.L59
 948              	.L70:
1220:Src/main.c    **** 				else
 949              		.loc 1 1220 0
 950 008a 4E4B     		ldr	r3, .L78
 951 008c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 952 008e 584B     		ldr	r3, .L78+44
 953 0090 5A55     		strb	r2, [r3, r5]
 954 0092 38E0     		b	.L59
 955              	.L77:
1235:Src/main.c    **** 					VXISI2CWrite( 0x19, 0x01 );
 956              		.loc 1 1235 0 discriminator 1
 957 0094 554B     		ldr	r3, .L78+40
 958 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 959 0098 012B     		cmp	r3, #1
 960 009a 4CD1     		bne	.L62
1236:Src/main.c    **** 							
 961              		.loc 1 1236 0
 962 009c 0121     		movs	r1, #1
 963 009e 1920     		movs	r0, #25
 964 00a0 FFF7FEFF 		bl	VXISI2CWrite
 965              	.LVL76:
 966 00a4 47E0     		b	.L62
 967              	.L64:
1265:Src/main.c    **** 							{
 968              		.loc 1 1265 0
 969 00a6 544B     		ldr	r3, .L78+52
 970 00a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 971 00aa 012B     		cmp	r3, #1
 972 00ac 79D0     		beq	.L71
 973              	.L65:
1270:Src/main.c    **** 						SET_Audio_Mute(OFF);	
 974              		.loc 1 1270 0
 975 00ae 4F4B     		ldr	r3, .L78+40
 976 00b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 977 00b2 002B     		cmp	r3, #0
 978 00b4 7FD0     		beq	.L72
 979              	.L61:
1165:Src/main.c    **** 		{
 980              		.loc 1 1165 0 discriminator 2
 981 00b6 0134     		adds	r4, r4, #1
 982              	.LVL77:
 983 00b8 E4B2     		uxtb	r4, r4
 984              	.LVL78:
 985              	.L51:
1165:Src/main.c    **** 		{
 986              		.loc 1 1165 0 is_stmt 0 discriminator 1
 987 00ba 012C     		cmp	r4, #1
 988 00bc 7FD8     		bhi	.L73
1167:Src/main.c    **** 			//--- Start --- 20201214-01
 989              		.loc 1 1167 0 is_stmt 1
 990 00be 4B4B     		ldr	r3, .L78+40
 991 00c0 1C70     		strb	r4, [r3]
1169:Src/main.c    **** 			{
 992              		.loc 1 1169 0
 993 00c2 012C     		cmp	r4, #1
 994 00c4 A0D0     		beq	.L74
ARM GAS  /tmp/cclqPDF2.s 			page 94


1178:Src/main.c    **** 
 995              		.loc 1 1178 0
 996 00c6 FFF7FEFF 		bl	CheckHDMIRX
 997              	.LVL79:
 998 00ca 484B     		ldr	r3, .L78+40
 999 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1000 00ce 3E4A     		ldr	r2, .L78+4
 1001 00d0 D054     		strb	r0, [r2, r3]
 1002              	.L54:
1185:Src/main.c    **** 			{
 1003              		.loc 1 1185 0
 1004 00d2 464B     		ldr	r3, .L78+40
 1005 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1006 00d6 494A     		ldr	r2, .L78+56
 1007 00d8 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1008 00da 494A     		ldr	r2, .L78+60
 1009 00dc D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1010 00de 9142     		cmp	r1, r2
 1011 00e0 01D0     		beq	.L55
1187:Src/main.c    **** 			}
 1012              		.loc 1 1187 0
 1013 00e2 4649     		ldr	r1, .L78+56
 1014 00e4 CA54     		strb	r2, [r1, r3]
 1015              	.L55:
1190:Src/main.c    **** 			{
 1016              		.loc 1 1190 0
 1017 00e6 384A     		ldr	r2, .L78+4
 1018 00e8 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1019 00ea 4649     		ldr	r1, .L78+64
 1020 00ec C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 1021 00ee 8A42     		cmp	r2, r1
 1022 00f0 03D0     		beq	.L56
1192:Src/main.c    **** 	
 1023              		.loc 1 1192 0
 1024 00f2 4449     		ldr	r1, .L78+64
 1025 00f4 CA54     		strb	r2, [r1, r3]
1194:Src/main.c    **** 				{
 1026              		.loc 1 1194 0
 1027 00f6 002A     		cmp	r2, #0
 1028 00f8 92D0     		beq	.L75
 1029              	.L56:
1216:Src/main.c    **** 			{
 1030              		.loc 1 1216 0
 1031 00fa 3C4B     		ldr	r3, .L78+40
 1032 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 1033 00fe 324B     		ldr	r3, .L78+4
 1034 0100 5B5D     		ldrb	r3, [r3, r5]	@ zero_extendqisi2
 1035 0102 012B     		cmp	r3, #1
 1036 0104 B9D0     		beq	.L76
 1037              	.L59:
1227:Src/main.c    **** 			{
 1038              		.loc 1 1227 0
 1039 0106 394B     		ldr	r3, .L78+40
 1040 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1041 010a 394A     		ldr	r2, .L78+44
 1042 010c D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1043 010e 3949     		ldr	r1, .L78+48
ARM GAS  /tmp/cclqPDF2.s 			page 95


 1044 0110 C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 1045 0112 8A42     		cmp	r2, r1
 1046 0114 CFD0     		beq	.L61
1229:Src/main.c    **** 	
 1047              		.loc 1 1229 0
 1048 0116 3749     		ldr	r1, .L78+48
 1049 0118 CA54     		strb	r2, [r1, r3]
1231:Src/main.c    **** 				{
 1050              		.loc 1 1231 0
 1051 011a 142A     		cmp	r2, #20
 1052 011c CBD0     		beq	.L61
1233:Src/main.c    **** 
 1053              		.loc 1 1233 0
 1054 011e 2546     		mov	r5, r4
 1055 0120 2D4B     		ldr	r3, .L78+20
 1056 0122 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1057 0124 324B     		ldr	r3, .L78+44
 1058 0126 195D     		ldrb	r1, [r3, r4]	@ zero_extendqisi2
 1059 0128 2046     		mov	r0, r4
 1060 012a FFF7FEFF 		bl	VS4210_SetInModeOutMode
 1061              	.LVL80:
1235:Src/main.c    **** 					VXISI2CWrite( 0x19, 0x01 );
 1062              		.loc 1 1235 0
 1063 012e 324B     		ldr	r3, .L78+52
 1064 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1065 0132 012B     		cmp	r3, #1
 1066 0134 AED0     		beq	.L77
 1067              	.L62:
1239:Src/main.c    **** 
 1068              		.loc 1 1239 0
 1069 0136 344B     		ldr	r3, .L78+68
 1070 0138 33F81530 		ldrh	r3, [r3, r5, lsl #1]
 1071 013c 334A     		ldr	r2, .L78+72
 1072 013e 32F81520 		ldrh	r2, [r2, r5, lsl #1]
 1073 0142 3349     		ldr	r1, .L78+76
 1074 0144 31F81510 		ldrh	r1, [r1, r5, lsl #1]
 1075 0148 3248     		ldr	r0, .L78+80
 1076 014a 30F81500 		ldrh	r0, [r0, r5, lsl #1]
 1077 014e 0090     		str	r0, [sp]
 1078 0150 2046     		mov	r0, r4
 1079 0152 FFF7FEFF 		bl	VS4210_SetInputSizeHV
 1080              	.LVL81:
1242:Src/main.c    **** 
 1081              		.loc 1 1242 0
 1082 0156 264B     		ldr	r3, .L78+44
 1083 0158 5B5D     		ldrb	r3, [r3, r5]	@ zero_extendqisi2
 1084 015a 0193     		str	r3, [sp, #4]
 1085 015c 0135     		adds	r5, r5, #1
 1086 015e 0095     		str	r5, [sp]
 1087 0160 40F2DA43 		movw	r3, #1242
 1088 0164 194A     		ldr	r2, .L78+8
 1089 0166 1A49     		ldr	r1, .L78+12
 1090 0168 2B48     		ldr	r0, .L78+84
 1091 016a FFF7FEFF 		bl	printf
 1092              	.LVL82:
1254:Src/main.c    **** 					{
 1093              		.loc 1 1254 0
ARM GAS  /tmp/cclqPDF2.s 			page 96


 1094 016e 1A4B     		ldr	r3, .L78+20
 1095 0170 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1096 0172 4BB1     		cbz	r3, .L63
1256:Src/main.c    **** 						Tim1_count = 0 ;
 1097              		.loc 1 1256 0
 1098 0174 0122     		movs	r2, #1
 1099 0176 194B     		ldr	r3, .L78+24
 1100 0178 1A60     		str	r2, [r3]
1257:Src/main.c    **** 						OSDStateFlg = 1 ;
 1101              		.loc 1 1257 0
 1102 017a 0023     		movs	r3, #0
 1103 017c 1849     		ldr	r1, .L78+28
 1104 017e 0B60     		str	r3, [r1]
1258:Src/main.c    **** 						OSDSecCount = 0 ;
 1105              		.loc 1 1258 0
 1106 0180 1849     		ldr	r1, .L78+32
 1107 0182 0A70     		strb	r2, [r1]
1259:Src/main.c    **** 					}
 1108              		.loc 1 1259 0
 1109 0184 184A     		ldr	r2, .L78+36
 1110 0186 1370     		strb	r3, [r2]
 1111              	.L63:
1262:Src/main.c    **** 						Set_Video_Loss_OSD(0,OFF);	
 1112              		.loc 1 1262 0
 1113 0188 1B4B     		ldr	r3, .L78+52
 1114 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1115 018c 002B     		cmp	r3, #0
 1116 018e 8AD1     		bne	.L64
1262:Src/main.c    **** 						Set_Video_Loss_OSD(0,OFF);	
 1117              		.loc 1 1262 0 is_stmt 0 discriminator 1
 1118 0190 164B     		ldr	r3, .L78+40
 1119 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1120 0194 002B     		cmp	r3, #0
 1121 0196 86D1     		bne	.L64
1263:Src/main.c    **** 
 1122              		.loc 1 1263 0 is_stmt 1
 1123 0198 0021     		movs	r1, #0
 1124 019a 0846     		mov	r0, r1
 1125 019c FFF7FEFF 		bl	Set_Video_Loss_OSD
 1126              	.LVL83:
 1127 01a0 81E7     		b	.L64
 1128              	.L71:
1265:Src/main.c    **** 							{
 1129              		.loc 1 1265 0 discriminator 1
 1130 01a2 124B     		ldr	r3, .L78+40
 1131 01a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1132 01a6 012B     		cmp	r3, #1
 1133 01a8 81D1     		bne	.L65
1267:Src/main.c    **** 							}
 1134              		.loc 1 1267 0
 1135 01aa 4021     		movs	r1, #64
 1136 01ac 4FF47A70 		mov	r0, #1000
 1137 01b0 FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 1138              	.LVL84:
 1139 01b4 7BE7     		b	.L65
 1140              	.L72:
1271:Src/main.c    **** 						//MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);
ARM GAS  /tmp/cclqPDF2.s 			page 97


 1141              		.loc 1 1271 0
 1142 01b6 0020     		movs	r0, #0
 1143 01b8 FFF7FEFF 		bl	SET_Audio_Mute
 1144              	.LVL85:
 1145 01bc 7BE7     		b	.L61
 1146              	.L73:
1276:Src/main.c    **** 
 1147              		.loc 1 1276 0
 1148 01be 03B0     		add	sp, sp, #12
 1149              	.LCFI17:
 1150              		.cfi_def_cfa_offset 12
 1151              		@ sp needed
 1152 01c0 30BD     		pop	{r4, r5, pc}
 1153              	.LVL86:
 1154              	.L79:
 1155 01c2 00BF     		.align	2
 1156              	.L78:
 1157 01c4 00000000 		.word	newInRes
 1158 01c8 00000000 		.word	.LANCHOR2
 1159 01cc 00000000 		.word	.LANCHOR4
 1160 01d0 00000000 		.word	.LC1
 1161 01d4 0C000000 		.word	.LC2
 1162 01d8 00000000 		.word	pVS4210_MutiWindows1
 1163 01dc 00000000 		.word	.LANCHOR5
 1164 01e0 00000000 		.word	.LANCHOR6
 1165 01e4 00000000 		.word	.LANCHOR7
 1166 01e8 00000000 		.word	.LANCHOR8
 1167 01ec 00000000 		.word	gHDMI_Index
 1168 01f0 00000000 		.word	gbVXIS_InputMode
 1169 01f4 00000000 		.word	.LANCHOR9
 1170 01f8 00000000 		.word	.LANCHOR10
 1171 01fc 00000000 		.word	PreVState
 1172 0200 00000000 		.word	VState
 1173 0204 00000000 		.word	.LANCHOR3
 1174 0208 00000000 		.word	gHTotal
 1175 020c 00000000 		.word	gVActive
 1176 0210 00000000 		.word	gHActive
 1177 0214 00000000 		.word	gVTotal
 1178 0218 34000000 		.word	.LC3
 1179              		.cfi_endproc
 1180              	.LFE74:
 1182              		.section	.text.InitialTimerEvent,"ax",%progbits
 1183              		.align	1
 1184              		.global	InitialTimerEvent
 1185              		.syntax unified
 1186              		.thumb
 1187              		.thumb_func
 1188              		.fpu softvfp
 1190              	InitialTimerEvent:
 1191              	.LFB71:
 400:Src/main.c    **** 	MCUTimerInitialTimerEvent();  //clear all of timer event	
 1192              		.loc 1 400 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 0
 1195              		@ frame_needed = 0, uses_anonymous_args = 0
 1196 0000 08B5     		push	{r3, lr}
 1197              	.LCFI18:
ARM GAS  /tmp/cclqPDF2.s 			page 98


 1198              		.cfi_def_cfa_offset 8
 1199              		.cfi_offset 3, -8
 1200              		.cfi_offset 14, -4
 401:Src/main.c    **** 
 1201              		.loc 1 401 0
 1202 0002 FFF7FEFF 		bl	MCUTimerInitialTimerEvent
 1203              	.LVL87:
 404:Src/main.c    ****   		   //	MCUTimerActiveTimerEvent(SEC(6), _SYSTEM_TIMER_EVENT_BOOT_VIDEO_DETECT);//for timer
 1204              		.loc 1 404 0
 1205 0006 3F21     		movs	r1, #63
 1206 0008 42F21070 		movw	r0, #10000
 1207 000c FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 1208              	.LVL88:
 418:Src/main.c    **** 
 1209              		.loc 1 418 0
 1210 0010 08BD     		pop	{r3, pc}
 1211              		.cfi_endproc
 1212              	.LFE71:
 1214              		.section	.text.GetRS232_CMD,"ax",%progbits
 1215              		.align	1
 1216              		.global	GetRS232_CMD
 1217              		.syntax unified
 1218              		.thumb
 1219              		.thumb_func
 1220              		.fpu softvfp
 1222              	GetRS232_CMD:
 1223              	.LFB72:
 421:Src/main.c    ****     char achstr[3] ;
 1224              		.loc 1 421 0
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 8
 1227              		@ frame_needed = 0, uses_anonymous_args = 0
 425:Src/main.c    ****     {
 1228              		.loc 1 425 0
 1229 0000 174B     		ldr	r3, .L90
 1230 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1231 0004 012B     		cmp	r3, #1
 1232 0006 00D0     		beq	.L88
 1233 0008 7047     		bx	lr
 1234              	.L88:
 421:Src/main.c    ****     char achstr[3] ;
 1235              		.loc 1 421 0
 1236 000a 10B5     		push	{r4, lr}
 1237              	.LCFI19:
 1238              		.cfi_def_cfa_offset 8
 1239              		.cfi_offset 4, -8
 1240              		.cfi_offset 14, -4
 1241 000c 82B0     		sub	sp, sp, #8
 1242              	.LCFI20:
 1243              		.cfi_def_cfa_offset 16
 427:Src/main.c    ****         printf("RxBufIndex=%d,str=%s\r\n",RxBufIndex, gRxbuf);
 1244              		.loc 1 427 0
 1245 000e 144B     		ldr	r3, .L90
 1246 0010 0022     		movs	r2, #0
 1247 0012 1A70     		strb	r2, [r3]
 428:Src/main.c    ****         if ( RxBufIndex >= 4 )
 1248              		.loc 1 428 0
ARM GAS  /tmp/cclqPDF2.s 			page 99


 1249 0014 134C     		ldr	r4, .L90+4
 1250 0016 2168     		ldr	r1, [r4]
 1251 0018 134A     		ldr	r2, .L90+8
 1252 001a 1448     		ldr	r0, .L90+12
 1253 001c FFF7FEFF 		bl	printf
 1254              	.LVL89:
 429:Src/main.c    ****         {
 1255              		.loc 1 429 0
 1256 0020 2368     		ldr	r3, [r4]
 1257 0022 032B     		cmp	r3, #3
 1258 0024 03DD     		ble	.L82
 431:Src/main.c    ****             {
 1259              		.loc 1 431 0
 1260 0026 104B     		ldr	r3, .L90+8
 1261 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1262 002a 472B     		cmp	r3, #71
 1263 002c 01D0     		beq	.L89
 1264              	.L82:
 443:Src/main.c    **** 
 1265              		.loc 1 443 0
 1266 002e 02B0     		add	sp, sp, #8
 1267              	.LCFI21:
 1268              		.cfi_remember_state
 1269              		.cfi_def_cfa_offset 8
 1270              		@ sp needed
 1271 0030 10BD     		pop	{r4, pc}
 1272              	.L89:
 1273              	.LCFI22:
 1274              		.cfi_restore_state
 431:Src/main.c    ****             {
 1275              		.loc 1 431 0 discriminator 1
 1276 0032 0D4B     		ldr	r3, .L90+8
 1277 0034 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1278 0036 672B     		cmp	r3, #103
 1279 0038 F9D1     		bne	.L82
 433:Src/main.c    ****                 memcpy(&achstr[0], &gRxbuf[1], 2 ) ;
 1280              		.loc 1 433 0
 1281 003a 0023     		movs	r3, #0
 1282 003c 8DF80630 		strb	r3, [sp, #6]
 434:Src/main.c    ****                 IrNum = strtol(achstr, &endptr, 16) ;
 1283              		.loc 1 434 0
 1284 0040 094B     		ldr	r3, .L90+8
 1285 0042 B3F80130 		ldrh	r3, [r3, #1]	@ unaligned
 1286 0046 ADF80430 		strh	r3, [sp, #4]	@ movhi
 435:Src/main.c    ****                 printf("IrNum=0x%02x\r\n",(int)IrNum);
 1287              		.loc 1 435 0
 1288 004a 1022     		movs	r2, #16
 1289 004c 6946     		mov	r1, sp
 1290 004e 01A8     		add	r0, sp, #4
 1291 0050 FFF7FEFF 		bl	strtol
 1292              	.LVL90:
 436:Src/main.c    ****             }
 1293              		.loc 1 436 0
 1294 0054 0146     		mov	r1, r0
 1295 0056 0648     		ldr	r0, .L90+16
 1296              	.LVL91:
 1297 0058 FFF7FEFF 		bl	printf
ARM GAS  /tmp/cclqPDF2.s 			page 100


 1298              	.LVL92:
 443:Src/main.c    **** 
 1299              		.loc 1 443 0
 1300 005c E7E7     		b	.L82
 1301              	.L91:
 1302 005e 00BF     		.align	2
 1303              	.L90:
 1304 0060 00000000 		.word	.LANCHOR11
 1305 0064 00000000 		.word	.LANCHOR12
 1306 0068 00000000 		.word	.LANCHOR13
 1307 006c 00000000 		.word	.LC4
 1308 0070 18000000 		.word	.LC5
 1309              		.cfi_endproc
 1310              	.LFE72:
 1312              		.section	.text.setloopoutmode,"ax",%progbits
 1313              		.align	1
 1314              		.global	setloopoutmode
 1315              		.syntax unified
 1316              		.thumb
 1317              		.thumb_func
 1318              		.fpu softvfp
 1320              	setloopoutmode:
 1321              	.LFB73:
 447:Src/main.c    **** /*
 1322              		.loc 1 447 0
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 0
 1325              		@ frame_needed = 0, uses_anonymous_args = 0
 1326              	.LVL93:
 1327 0000 70B5     		push	{r4, r5, r6, lr}
 1328              	.LCFI23:
 1329              		.cfi_def_cfa_offset 16
 1330              		.cfi_offset 4, -16
 1331              		.cfi_offset 5, -12
 1332              		.cfi_offset 6, -8
 1333              		.cfi_offset 14, -4
 1334 0002 0446     		mov	r4, r0
 455:Src/main.c    ****     {
 1335              		.loc 1 455 0
 1336 0004 1328     		cmp	r0, #19
 1337 0006 25D8     		bhi	.L93
 1338 0008 DFE810F0 		tbh	[pc, r0, lsl #1]
 1339              	.L95:
 1340 000c 1400     		.2byte	(.L94-.L95)/2
 1341 000e 3900     		.2byte	(.L96-.L95)/2
 1342 0010 4A00     		.2byte	(.L97-.L95)/2
 1343 0012 5C00     		.2byte	(.L98-.L95)/2
 1344 0014 6E00     		.2byte	(.L99-.L95)/2
 1345 0016 9500     		.2byte	(.L100-.L95)/2
 1346 0018 2400     		.2byte	(.L93-.L95)/2
 1347 001a 2400     		.2byte	(.L93-.L95)/2
 1348 001c 2400     		.2byte	(.L93-.L95)/2
 1349 001e A400     		.2byte	(.L101-.L95)/2
 1350 0020 BA01     		.2byte	(.L102-.L95)/2
 1351 0022 BD00     		.2byte	(.L103-.L95)/2
 1352 0024 D600     		.2byte	(.L104-.L95)/2
 1353 0026 F000     		.2byte	(.L105-.L95)/2
ARM GAS  /tmp/cclqPDF2.s 			page 101


 1354 0028 0A01     		.2byte	(.L106-.L95)/2
 1355 002a 2501     		.2byte	(.L107-.L95)/2
 1356 002c 3F01     		.2byte	(.L108-.L95)/2
 1357 002e 5901     		.2byte	(.L109-.L95)/2
 1358 0030 D401     		.2byte	(.L110-.L95)/2
 1359 0032 A001     		.2byte	(.L111-.L95)/2
 1360              		.p2align 1
 1361              	.L94:
 459:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1362              		.loc 1 459 0
 1363 0034 AE4B     		ldr	r3, .L113
 1364 0036 0022     		movs	r2, #0
 1365 0038 1A70     		strb	r2, [r3]
 460:Src/main.c    **** 	 OSD_MIRROR[0]=CAMA_M;
 1366              		.loc 1 460 0
 1367 003a 0125     		movs	r5, #1
 1368 003c 5D70     		strb	r5, [r3, #1]
 461:Src/main.c    **** 	 gabVXIS_Input_mirrorH[0]=CAMA_M;
 1369              		.loc 1 461 0
 1370 003e AD4B     		ldr	r3, .L113+4
 1371 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1372 0042 AD4A     		ldr	r2, .L113+8
 1373 0044 1370     		strb	r3, [r2]
 462:Src/main.c    ****         printf("VS4210_MODE0_w0\r\n") ;
 1374              		.loc 1 462 0
 1375 0046 AD4A     		ldr	r2, .L113+12
 1376 0048 1370     		strb	r3, [r2]
 463:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1377              		.loc 1 463 0
 1378 004a AD48     		ldr	r0, .L113+16
 1379              	.LVL94:
 1380 004c FFF7FEFF 		bl	puts
 1381              	.LVL95:
 464:Src/main.c    ****         break ;
 1382              		.loc 1 464 0
 1383 0050 AC4B     		ldr	r3, .L113+20
 1384 0052 1D70     		strb	r5, [r3]
 1385              	.L93:
1097:Src/main.c    **** 
 1386              		.loc 1 1097 0
 1387 0054 A648     		ldr	r0, .L113
 1388 0056 FFF7FEFF 		bl	VS4210_SetMutiWindows
 1389              	.LVL96:
1100:Src/main.c    **** 
 1390              		.loc 1 1100 0
 1391 005a 0120     		movs	r0, #1
 1392 005c FFF7FEFF 		bl	AudioMute
 1393              	.LVL97:
1102:Src/main.c    **** MCUTimerActiveTimerEvent(SEC(1),  _SYSTEM_TIMER_EVENT_AUDIO_CHANNEL_SELECT);
 1394              		.loc 1 1102 0
 1395 0060 3B20     		movs	r0, #59
 1396 0062 FFF7FEFF 		bl	MCUTimerCancelTimerEvent
 1397              	.LVL98:
1103:Src/main.c    **** AUDIO_SELECT(index);
 1398              		.loc 1 1103 0
 1399 0066 3B21     		movs	r1, #59
 1400 0068 4FF47A70 		mov	r0, #1000
ARM GAS  /tmp/cclqPDF2.s 			page 102


 1401 006c FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 1402              	.LVL99:
1104:Src/main.c    **** 
 1403              		.loc 1 1104 0
 1404 0070 E4B2     		uxtb	r4, r4
 1405              	.LVL100:
 1406 0072 2046     		mov	r0, r4
 1407 0074 FFF7FEFF 		bl	AUDIO_SELECT
 1408              	.LVL101:
1106:Src/main.c    **** 
 1409              		.loc 1 1106 0
 1410 0078 A34B     		ldr	r3, .L113+24
 1411 007a 1C70     		strb	r4, [r3]
1110:Src/main.c    **** 
 1412              		.loc 1 1110 0
 1413 007c 70BD     		pop	{r4, r5, r6, pc}
 1414              	.LVL102:
 1415              	.L96:
 469:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 1416              		.loc 1 469 0
 1417 007e 9C4A     		ldr	r2, .L113
 1418 0080 0123     		movs	r3, #1
 1419 0082 1370     		strb	r3, [r2]
 470:Src/main.c    ****    	 OSD_MIRROR[0]=CAMB_M;
 1420              		.loc 1 470 0
 1421 0084 0221     		movs	r1, #2
 1422 0086 5170     		strb	r1, [r2, #1]
 471:Src/main.c    **** 	 gabVXIS_Input_mirrorH[1]=CAMB_M; 
 1423              		.loc 1 471 0
 1424 0088 A04A     		ldr	r2, .L113+28
 1425 008a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1426 008c 9A49     		ldr	r1, .L113+8
 1427 008e 0A70     		strb	r2, [r1]
 472:Src/main.c    **** 	 OSD_SPEAKER[0]=ON;
 1428              		.loc 1 472 0
 1429 0090 9A49     		ldr	r1, .L113+12
 1430 0092 4A70     		strb	r2, [r1, #1]
 473:Src/main.c    ****         printf("VS4210_MODE0_w1\r\n") ;
 1431              		.loc 1 473 0
 1432 0094 9B4A     		ldr	r2, .L113+20
 1433 0096 1370     		strb	r3, [r2]
 474:Src/main.c    ****         break ;
 1434              		.loc 1 474 0
 1435 0098 9D48     		ldr	r0, .L113+32
 1436              	.LVL103:
 1437 009a FFF7FEFF 		bl	puts
 1438              	.LVL104:
 475:Src/main.c    ****     }
 1439              		.loc 1 475 0
 1440 009e D9E7     		b	.L93
 1441              	.LVL105:
 1442              	.L97:
 479:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 1443              		.loc 1 479 0
 1444 00a0 934B     		ldr	r3, .L113
 1445 00a2 0222     		movs	r2, #2
 1446 00a4 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cclqPDF2.s 			page 103


 480:Src/main.c    **** 	 OSD_MIRROR[0]=CAMC_M;	
 1447              		.loc 1 480 0
 1448 00a6 0322     		movs	r2, #3
 1449 00a8 5A70     		strb	r2, [r3, #1]
 481:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 	 
 1450              		.loc 1 481 0
 1451 00aa 9A4B     		ldr	r3, .L113+36
 1452 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1453 00ae 924A     		ldr	r2, .L113+8
 1454 00b0 1370     		strb	r3, [r2]
 482:Src/main.c    **** 	 OSD_SPEAKER[0]=ON;
 1455              		.loc 1 482 0
 1456 00b2 924A     		ldr	r2, .L113+12
 1457 00b4 9370     		strb	r3, [r2, #2]
 483:Src/main.c    ****         printf("VS4210_MODE0_w2\r\n") ;
 1458              		.loc 1 483 0
 1459 00b6 934B     		ldr	r3, .L113+20
 1460 00b8 0122     		movs	r2, #1
 1461 00ba 1A70     		strb	r2, [r3]
 484:Src/main.c    ****         break ;
 1462              		.loc 1 484 0
 1463 00bc 9648     		ldr	r0, .L113+40
 1464              	.LVL106:
 1465 00be FFF7FEFF 		bl	puts
 1466              	.LVL107:
 485:Src/main.c    ****     }
 1467              		.loc 1 485 0
 1468 00c2 C7E7     		b	.L93
 1469              	.LVL108:
 1470              	.L98:
 489:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 1471              		.loc 1 489 0
 1472 00c4 8A4B     		ldr	r3, .L113
 1473 00c6 0322     		movs	r2, #3
 1474 00c8 1A70     		strb	r2, [r3]
 490:Src/main.c    ****    	OSD_MIRROR[0]=CAMR_M;	
 1475              		.loc 1 490 0
 1476 00ca 0422     		movs	r2, #4
 1477 00cc 5A70     		strb	r2, [r3, #1]
 491:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 		
 1478              		.loc 1 491 0
 1479 00ce 934B     		ldr	r3, .L113+44
 1480 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1481 00d2 894A     		ldr	r2, .L113+8
 1482 00d4 1370     		strb	r3, [r2]
 492:Src/main.c    ****   	OSD_SPEAKER[0]=ON;
 1483              		.loc 1 492 0
 1484 00d6 894A     		ldr	r2, .L113+12
 1485 00d8 D370     		strb	r3, [r2, #3]
 493:Src/main.c    ****         printf("VS4210_MODE0_w3\r\n") ;
 1486              		.loc 1 493 0
 1487 00da 8A4B     		ldr	r3, .L113+20
 1488 00dc 0122     		movs	r2, #1
 1489 00de 1A70     		strb	r2, [r3]
 494:Src/main.c    ****         break ;
 1490              		.loc 1 494 0
 1491 00e0 8F48     		ldr	r0, .L113+48
ARM GAS  /tmp/cclqPDF2.s 			page 104


 1492              	.LVL109:
 1493 00e2 FFF7FEFF 		bl	puts
 1494              	.LVL110:
 495:Src/main.c    ****     }
 1495              		.loc 1 495 0
 1496 00e6 B5E7     		b	.L93
 1497              	.LVL111:
 1498              	.L99:
 499:Src/main.c    **** 	
 1499              		.loc 1 499 0
 1500 00e8 814B     		ldr	r3, .L113
 1501 00ea 1022     		movs	r2, #16
 1502 00ec 1A70     		strb	r2, [r3]
 501:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1503              		.loc 1 501 0
 1504 00ee 0121     		movs	r1, #1
 1505 00f0 5970     		strb	r1, [r3, #1]
 502:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 1506              		.loc 1 502 0
 1507 00f2 0222     		movs	r2, #2
 1508 00f4 9A70     		strb	r2, [r3, #2]
 503:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 1509              		.loc 1 503 0
 1510 00f6 0322     		movs	r2, #3
 1511 00f8 DA70     		strb	r2, [r3, #3]
 504:Src/main.c    ****    	  OSD_MIRROR[0]=CAMA_M;	
 1512              		.loc 1 504 0
 1513 00fa 0422     		movs	r2, #4
 1514 00fc 1A71     		strb	r2, [r3, #4]
 505:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 1515              		.loc 1 505 0
 1516 00fe 7D4B     		ldr	r3, .L113+4
 1517 0100 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 1518 0102 7D4B     		ldr	r3, .L113+8
 1519 0104 1E70     		strb	r6, [r3]
 506:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
 1520              		.loc 1 506 0
 1521 0106 814A     		ldr	r2, .L113+28
 1522 0108 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 1523 010a 5D70     		strb	r5, [r3, #1]
 507:Src/main.c    ****    	  OSD_MIRROR[3]=CAMR_M;	
 1524              		.loc 1 507 0
 1525 010c 814A     		ldr	r2, .L113+36
 1526 010e 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 1527              	.LVL112:
 1528 0110 9870     		strb	r0, [r3, #2]
 508:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 1529              		.loc 1 508 0
 1530 0112 824A     		ldr	r2, .L113+44
 1531 0114 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1532 0116 DA70     		strb	r2, [r3, #3]
 509:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 1533              		.loc 1 509 0
 1534 0118 784B     		ldr	r3, .L113+12
 1535 011a 1E70     		strb	r6, [r3]
 510:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		  
 1536              		.loc 1 510 0
ARM GAS  /tmp/cclqPDF2.s 			page 105


 1537 011c 5D70     		strb	r5, [r3, #1]
 511:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 		  
 1538              		.loc 1 511 0
 1539 011e 9870     		strb	r0, [r3, #2]
 512:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 1540              		.loc 1 512 0
 1541 0120 DA70     		strb	r2, [r3, #3]
 513:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 1542              		.loc 1 513 0
 1543 0122 784B     		ldr	r3, .L113+20
 1544 0124 0022     		movs	r2, #0
 1545 0126 1A70     		strb	r2, [r3]
 514:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 1546              		.loc 1 514 0
 1547 0128 5A70     		strb	r2, [r3, #1]
 515:Src/main.c    **** 	  OSD_SPEAKER[3]=ON;
 1548              		.loc 1 515 0
 1549 012a 9A70     		strb	r2, [r3, #2]
 516:Src/main.c    **** 
 1550              		.loc 1 516 0
 1551 012c D970     		strb	r1, [r3, #3]
 518:Src/main.c    ****         break ;
 1552              		.loc 1 518 0
 1553 012e 7D48     		ldr	r0, .L113+52
 1554 0130 FFF7FEFF 		bl	puts
 1555              	.LVL113:
 519:Src/main.c    ****     }
 1556              		.loc 1 519 0
 1557 0134 8EE7     		b	.L93
 1558              	.LVL114:
 1559              	.L100:
 524:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1560              		.loc 1 524 0
 1561 0136 6E4B     		ldr	r3, .L113
 1562 0138 2022     		movs	r2, #32
 1563 013a 1A70     		strb	r2, [r3]
 525:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1564              		.loc 1 525 0
 1565 013c 0122     		movs	r2, #1
 1566 013e 5A70     		strb	r2, [r3, #1]
 526:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 1567              		.loc 1 526 0
 1568 0140 0222     		movs	r2, #2
 1569 0142 9A70     		strb	r2, [r3, #2]
 527:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 1570              		.loc 1 527 0
 1571 0144 0322     		movs	r2, #3
 1572 0146 DA70     		strb	r2, [r3, #3]
 528:Src/main.c    ****         printf("VS4210_MODE2\r\n") ;
 1573              		.loc 1 528 0
 1574 0148 0422     		movs	r2, #4
 1575 014a 1A71     		strb	r2, [r3, #4]
 529:Src/main.c    ****         break ;
 1576              		.loc 1 529 0
 1577 014c 7648     		ldr	r0, .L113+56
 1578              	.LVL115:
 1579 014e FFF7FEFF 		bl	puts
ARM GAS  /tmp/cclqPDF2.s 			page 106


 1580              	.LVL116:
 530:Src/main.c    ****     }
 1581              		.loc 1 530 0
 1582 0152 7FE7     		b	.L93
 1583              	.LVL117:
 1584              	.L101:
 909:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1585              		.loc 1 909 0
 1586 0154 664B     		ldr	r3, .L113
 1587 0156 4022     		movs	r2, #64
 1588 0158 1A70     		strb	r2, [r3]
 910:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1589              		.loc 1 910 0
 1590 015a 0122     		movs	r2, #1
 1591 015c 5A70     		strb	r2, [r3, #1]
 911:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 1592              		.loc 1 911 0
 1593 015e 0221     		movs	r1, #2
 1594 0160 9970     		strb	r1, [r3, #2]
 912:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 1595              		.loc 1 912 0
 1596 0162 644B     		ldr	r3, .L113+4
 1597 0164 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1598              	.LVL118:
 1599 0166 644B     		ldr	r3, .L113+8
 1600 0168 1870     		strb	r0, [r3]
 913:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 1601              		.loc 1 913 0
 1602 016a 6849     		ldr	r1, .L113+28
 1603 016c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1604 016e 5970     		strb	r1, [r3, #1]
 914:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
 1605              		.loc 1 914 0
 1606 0170 624B     		ldr	r3, .L113+12
 1607 0172 1870     		strb	r0, [r3]
 915:Src/main.c    ****   	OSD_SPEAKER[0]=ON;
 1608              		.loc 1 915 0
 1609 0174 5970     		strb	r1, [r3, #1]
 916:Src/main.c    ****   	OSD_SPEAKER[1]=OFF;
 1610              		.loc 1 916 0
 1611 0176 634B     		ldr	r3, .L113+20
 1612 0178 1A70     		strb	r2, [r3]
 917:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch2\r\n") ;
 1613              		.loc 1 917 0
 1614 017a 0022     		movs	r2, #0
 1615 017c 5A70     		strb	r2, [r3, #1]
 918:Src/main.c    ****         break ;
 1616              		.loc 1 918 0
 1617 017e 6B48     		ldr	r0, .L113+60
 1618 0180 FFF7FEFF 		bl	puts
 1619              	.LVL119:
 919:Src/main.c    ****     }
 1620              		.loc 1 919 0
 1621 0184 66E7     		b	.L93
 1622              	.LVL120:
 1623              	.L103:
 923:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
ARM GAS  /tmp/cclqPDF2.s 			page 107


 1624              		.loc 1 923 0
 1625 0186 5A4B     		ldr	r3, .L113
 1626 0188 4022     		movs	r2, #64
 1627 018a 1A70     		strb	r2, [r3]
 924:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
 1628              		.loc 1 924 0
 1629 018c 0122     		movs	r2, #1
 1630 018e 5A70     		strb	r2, [r3, #1]
 925:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 1631              		.loc 1 925 0
 1632 0190 0421     		movs	r1, #4
 1633 0192 9970     		strb	r1, [r3, #2]
 926:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;
 1634              		.loc 1 926 0
 1635 0194 574B     		ldr	r3, .L113+4
 1636 0196 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1637              	.LVL121:
 1638 0198 574B     		ldr	r3, .L113+8
 1639 019a 1870     		strb	r0, [r3]
 927:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 1640              		.loc 1 927 0
 1641 019c 5F49     		ldr	r1, .L113+44
 1642 019e 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1643 01a0 5970     		strb	r1, [r3, #1]
 928:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 1644              		.loc 1 928 0
 1645 01a2 564B     		ldr	r3, .L113+12
 1646 01a4 1870     		strb	r0, [r3]
 929:Src/main.c    ****   	OSD_SPEAKER[0]=OFF;
 1647              		.loc 1 929 0
 1648 01a6 5970     		strb	r1, [r3, #1]
 930:Src/main.c    ****   	OSD_SPEAKER[1]=ON;	  
 1649              		.loc 1 930 0
 1650 01a8 564B     		ldr	r3, .L113+20
 1651 01aa 0021     		movs	r1, #0
 1652 01ac 1970     		strb	r1, [r3]
 931:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch4\r\n") ;	
 1653              		.loc 1 931 0
 1654 01ae 5A70     		strb	r2, [r3, #1]
 932:Src/main.c    **** 	break;
 1655              		.loc 1 932 0
 1656 01b0 5F48     		ldr	r0, .L113+64
 1657 01b2 FFF7FEFF 		bl	puts
 1658              	.LVL122:
 933:Src/main.c    ****     	}
 1659              		.loc 1 933 0
 1660 01b6 4DE7     		b	.L93
 1661              	.LVL123:
 1662              	.L104:
 937:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 1663              		.loc 1 937 0
 1664 01b8 4D4B     		ldr	r3, .L113
 1665 01ba 4022     		movs	r2, #64
 1666 01bc 1A70     		strb	r2, [r3]
 938:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1667              		.loc 1 938 0
 1668 01be 0422     		movs	r2, #4
ARM GAS  /tmp/cclqPDF2.s 			page 108


 1669 01c0 5A70     		strb	r2, [r3, #1]
 939:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 1670              		.loc 1 939 0
 1671 01c2 0222     		movs	r2, #2
 1672 01c4 9A70     		strb	r2, [r3, #2]
 940:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 1673              		.loc 1 940 0
 1674 01c6 554B     		ldr	r3, .L113+44
 1675 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1676 01ca 4B4B     		ldr	r3, .L113+8
 1677 01cc 1970     		strb	r1, [r3]
 941:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMR_M;			  
 1678              		.loc 1 941 0
 1679 01ce 4F4A     		ldr	r2, .L113+28
 1680 01d0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1681 01d2 5A70     		strb	r2, [r3, #1]
 942:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
 1682              		.loc 1 942 0
 1683 01d4 494B     		ldr	r3, .L113+12
 1684 01d6 1970     		strb	r1, [r3]
 943:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1685              		.loc 1 943 0
 1686 01d8 5A70     		strb	r2, [r3, #1]
 944:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 1687              		.loc 1 944 0
 1688 01da 4A4B     		ldr	r3, .L113+20
 1689 01dc 0122     		movs	r2, #1
 1690 01de 1A70     		strb	r2, [r3]
 945:Src/main.c    ****         printf("VS4210_MODE12 ch4 ch2\r\n") ;	
 1691              		.loc 1 945 0
 1692 01e0 0022     		movs	r2, #0
 1693 01e2 5A70     		strb	r2, [r3, #1]
 946:Src/main.c    **** 	break;
 1694              		.loc 1 946 0
 1695 01e4 5348     		ldr	r0, .L113+68
 1696              	.LVL124:
 1697 01e6 FFF7FEFF 		bl	puts
 1698              	.LVL125:
 947:Src/main.c    ****     	}
 1699              		.loc 1 947 0
 1700 01ea 33E7     		b	.L93
 1701              	.LVL126:
 1702              	.L105:
 951:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 1703              		.loc 1 951 0
 1704 01ec 404B     		ldr	r3, .L113
 1705 01ee 4022     		movs	r2, #64
 1706 01f0 1A70     		strb	r2, [r3]
 952:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 1707              		.loc 1 952 0
 1708 01f2 0422     		movs	r2, #4
 1709 01f4 5A70     		strb	r2, [r3, #1]
 953:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 1710              		.loc 1 953 0
 1711 01f6 0322     		movs	r2, #3
 1712 01f8 9A70     		strb	r2, [r3, #2]
 954:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
ARM GAS  /tmp/cclqPDF2.s 			page 109


 1713              		.loc 1 954 0
 1714 01fa 484B     		ldr	r3, .L113+44
 1715 01fc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1716 01fe 3E4B     		ldr	r3, .L113+8
 1717 0200 1970     		strb	r1, [r3]
 955:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMR_M;			  
 1718              		.loc 1 955 0
 1719 0202 444A     		ldr	r2, .L113+36
 1720 0204 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1721 0206 5A70     		strb	r2, [r3, #1]
 956:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 1722              		.loc 1 956 0
 1723 0208 3C4B     		ldr	r3, .L113+12
 1724 020a 1970     		strb	r1, [r3]
 957:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1725              		.loc 1 957 0
 1726 020c 5A70     		strb	r2, [r3, #1]
 958:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 1727              		.loc 1 958 0
 1728 020e 3D4B     		ldr	r3, .L113+20
 1729 0210 0122     		movs	r2, #1
 1730 0212 1A70     		strb	r2, [r3]
 959:Src/main.c    ****         printf("VS4210_MODE12 ch4 ch3\r\n") ;	
 1731              		.loc 1 959 0
 1732 0214 0022     		movs	r2, #0
 1733 0216 5A70     		strb	r2, [r3, #1]
 960:Src/main.c    **** 	break;
 1734              		.loc 1 960 0
 1735 0218 4748     		ldr	r0, .L113+72
 1736              	.LVL127:
 1737 021a FFF7FEFF 		bl	puts
 1738              	.LVL128:
 961:Src/main.c    ****     	}
 1739              		.loc 1 961 0
 1740 021e 19E7     		b	.L93
 1741              	.LVL129:
 1742              	.L106:
 966:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 1743              		.loc 1 966 0
 1744 0220 334B     		ldr	r3, .L113
 1745 0222 4022     		movs	r2, #64
 1746 0224 1A70     		strb	r2, [r3]
 967:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 1747              		.loc 1 967 0
 1748 0226 0222     		movs	r2, #2
 1749 0228 5A70     		strb	r2, [r3, #1]
 968:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 1750              		.loc 1 968 0
 1751 022a 0122     		movs	r2, #1
 1752 022c 9A70     		strb	r2, [r3, #2]
 969:Src/main.c    ****    	  OSD_MIRROR[1]=CAMA_M;	
 1753              		.loc 1 969 0
 1754 022e 374B     		ldr	r3, .L113+28
 1755 0230 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1756 0232 314B     		ldr	r3, .L113+8
 1757 0234 1970     		strb	r1, [r3]
 970:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
ARM GAS  /tmp/cclqPDF2.s 			page 110


 1758              		.loc 1 970 0
 1759 0236 2F48     		ldr	r0, .L113+4
 1760              	.LVL130:
 1761 0238 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1762 023a 5870     		strb	r0, [r3, #1]
 971:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 1763              		.loc 1 971 0
 1764 023c 2F4B     		ldr	r3, .L113+12
 1765 023e 1970     		strb	r1, [r3]
 972:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1766              		.loc 1 972 0
 1767 0240 3649     		ldr	r1, .L113+44
 1768 0242 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1769 0244 5970     		strb	r1, [r3, #1]
 973:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 1770              		.loc 1 973 0
 1771 0246 2F4B     		ldr	r3, .L113+20
 1772 0248 1A70     		strb	r2, [r3]
 974:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch1\r\n") ;	
 1773              		.loc 1 974 0
 1774 024a 0022     		movs	r2, #0
 1775 024c 5A70     		strb	r2, [r3, #1]
 975:Src/main.c    **** 	break;
 1776              		.loc 1 975 0
 1777 024e 3B48     		ldr	r0, .L113+76
 1778 0250 FFF7FEFF 		bl	puts
 1779              	.LVL131:
 976:Src/main.c    ****     	}
 1780              		.loc 1 976 0
 1781 0254 FEE6     		b	.L93
 1782              	.LVL132:
 1783              	.L107:
 980:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 1784              		.loc 1 980 0
 1785 0256 264B     		ldr	r3, .L113
 1786 0258 4022     		movs	r2, #64
 1787 025a 1A70     		strb	r2, [r3]
 981:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 1788              		.loc 1 981 0
 1789 025c 0222     		movs	r2, #2
 1790 025e 5A70     		strb	r2, [r3, #1]
 982:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 1791              		.loc 1 982 0
 1792 0260 0322     		movs	r2, #3
 1793 0262 9A70     		strb	r2, [r3, #2]
 983:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 1794              		.loc 1 983 0
 1795 0264 294B     		ldr	r3, .L113+28
 1796 0266 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1797 0268 234B     		ldr	r3, .L113+8
 1798 026a 1970     		strb	r1, [r3]
 984:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 1799              		.loc 1 984 0
 1800 026c 294A     		ldr	r2, .L113+36
 1801 026e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1802 0270 5A70     		strb	r2, [r3, #1]
 985:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
ARM GAS  /tmp/cclqPDF2.s 			page 111


 1803              		.loc 1 985 0
 1804 0272 224B     		ldr	r3, .L113+12
 1805 0274 1970     		strb	r1, [r3]
 986:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1806              		.loc 1 986 0
 1807 0276 5A70     		strb	r2, [r3, #1]
 987:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 1808              		.loc 1 987 0
 1809 0278 224B     		ldr	r3, .L113+20
 1810 027a 0122     		movs	r2, #1
 1811 027c 1A70     		strb	r2, [r3]
 988:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch3\r\n") ;	
 1812              		.loc 1 988 0
 1813 027e 0022     		movs	r2, #0
 1814 0280 5A70     		strb	r2, [r3, #1]
 989:Src/main.c    **** 	break;
 1815              		.loc 1 989 0
 1816 0282 2F48     		ldr	r0, .L113+80
 1817              	.LVL133:
 1818 0284 FFF7FEFF 		bl	puts
 1819              	.LVL134:
 990:Src/main.c    ****     	}
 1820              		.loc 1 990 0
 1821 0288 E4E6     		b	.L93
 1822              	.LVL135:
 1823              	.L108:
 994:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2;
 1824              		.loc 1 994 0
 1825 028a 194B     		ldr	r3, .L113
 1826 028c 4022     		movs	r2, #64
 1827 028e 1A70     		strb	r2, [r3]
 995:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
 1828              		.loc 1 995 0
 1829 0290 0222     		movs	r2, #2
 1830 0292 5A70     		strb	r2, [r3, #1]
 996:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 1831              		.loc 1 996 0
 1832 0294 0422     		movs	r2, #4
 1833 0296 9A70     		strb	r2, [r3, #2]
 997:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;	
 1834              		.loc 1 997 0
 1835 0298 1C4B     		ldr	r3, .L113+28
 1836 029a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1837 029c 164B     		ldr	r3, .L113+8
 1838 029e 1970     		strb	r1, [r3]
 998:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 1839              		.loc 1 998 0
 1840 02a0 1E4A     		ldr	r2, .L113+44
 1841 02a2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1842 02a4 5A70     		strb	r2, [r3, #1]
 999:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 1843              		.loc 1 999 0
 1844 02a6 154B     		ldr	r3, .L113+12
 1845 02a8 1970     		strb	r1, [r3]
1000:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 1846              		.loc 1 1000 0
 1847 02aa 5A70     		strb	r2, [r3, #1]
ARM GAS  /tmp/cclqPDF2.s 			page 112


1001:Src/main.c    **** 	  OSD_SPEAKER[1]=ON;		  
 1848              		.loc 1 1001 0
 1849 02ac 154B     		ldr	r3, .L113+20
 1850 02ae 0022     		movs	r2, #0
 1851 02b0 1A70     		strb	r2, [r3]
1002:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch4\r\n") ;	
 1852              		.loc 1 1002 0
 1853 02b2 0122     		movs	r2, #1
 1854 02b4 5A70     		strb	r2, [r3, #1]
1003:Src/main.c    **** 	break;
 1855              		.loc 1 1003 0
 1856 02b6 2348     		ldr	r0, .L113+84
 1857              	.LVL136:
 1858 02b8 FFF7FEFF 		bl	puts
 1859              	.LVL137:
1004:Src/main.c    ****     	}
 1860              		.loc 1 1004 0
 1861 02bc CAE6     		b	.L93
 1862              	.LVL138:
 1863              	.L109:
1010:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1864              		.loc 1 1010 0
 1865 02be 0C4B     		ldr	r3, .L113
 1866 02c0 4022     		movs	r2, #64
 1867 02c2 1A70     		strb	r2, [r3]
1011:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 1868              		.loc 1 1011 0
 1869 02c4 0122     		movs	r2, #1
 1870 02c6 5A70     		strb	r2, [r3, #1]
1012:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 1871              		.loc 1 1012 0
 1872 02c8 0321     		movs	r1, #3
 1873 02ca 9970     		strb	r1, [r3, #2]
1013:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 1874              		.loc 1 1013 0
 1875 02cc 094B     		ldr	r3, .L113+4
 1876 02ce 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1877              	.LVL139:
 1878 02d0 094B     		ldr	r3, .L113+8
 1879 02d2 1870     		strb	r0, [r3]
1014:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 1880              		.loc 1 1014 0
 1881 02d4 0F49     		ldr	r1, .L113+36
 1882 02d6 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1883 02d8 5970     		strb	r1, [r3, #1]
1015:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 1884              		.loc 1 1015 0
 1885 02da 084B     		ldr	r3, .L113+12
 1886 02dc 1870     		strb	r0, [r3]
1016:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1887              		.loc 1 1016 0
 1888 02de 5970     		strb	r1, [r3, #1]
1017:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
 1889              		.loc 1 1017 0
 1890 02e0 084B     		ldr	r3, .L113+20
 1891 02e2 1A70     		strb	r2, [r3]
1018:Src/main.c    **** 	  
ARM GAS  /tmp/cclqPDF2.s 			page 113


 1892              		.loc 1 1018 0
 1893 02e4 0022     		movs	r2, #0
 1894 02e6 5A70     		strb	r2, [r3, #1]
1020:Src/main.c    **** 	break;
 1895              		.loc 1 1020 0
 1896 02e8 1748     		ldr	r0, .L113+88
 1897 02ea FFF7FEFF 		bl	puts
 1898              	.LVL140:
1021:Src/main.c    ****     	}
 1899              		.loc 1 1021 0
 1900 02ee B1E6     		b	.L93
 1901              	.L114:
 1902              		.align	2
 1903              	.L113:
 1904 02f0 00000000 		.word	pVS4210_JointKind1
 1905 02f4 00000000 		.word	CAMA_M
 1906 02f8 00000000 		.word	.LANCHOR14
 1907 02fc 00000000 		.word	gabVXIS_Input_mirrorH
 1908 0300 00000000 		.word	.LC6
 1909 0304 00000000 		.word	.LANCHOR15
 1910 0308 00000000 		.word	.LANCHOR16
 1911 030c 00000000 		.word	CAMB_M
 1912 0310 14000000 		.word	.LC7
 1913 0314 00000000 		.word	CAMC_M
 1914 0318 28000000 		.word	.LC8
 1915 031c 00000000 		.word	CAMR_M
 1916 0320 3C000000 		.word	.LC9
 1917 0324 50000000 		.word	.LC10
 1918 0328 60000000 		.word	.LC11
 1919 032c 70000000 		.word	.LC12
 1920 0330 88000000 		.word	.LC13
 1921 0334 A0000000 		.word	.LC14
 1922 0338 B8000000 		.word	.LC15
 1923 033c D0000000 		.word	.LC16
 1924 0340 E8000000 		.word	.LC17
 1925 0344 00010000 		.word	.LC18
 1926 0348 18010000 		.word	.LC19
 1927              	.LVL141:
 1928              	.L111:
1025:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 1929              		.loc 1 1025 0
 1930 034c 264B     		ldr	r3, .L115
 1931 034e 4022     		movs	r2, #64
 1932 0350 1A70     		strb	r2, [r3]
1026:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1933              		.loc 1 1026 0
 1934 0352 0322     		movs	r2, #3
 1935 0354 5A70     		strb	r2, [r3, #1]
1027:Src/main.c    **** 	  OSD_MIRROR[0]=CAMC_M;	
 1936              		.loc 1 1027 0
 1937 0356 0222     		movs	r2, #2
 1938 0358 9A70     		strb	r2, [r3, #2]
1028:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 1939              		.loc 1 1028 0
 1940 035a 244B     		ldr	r3, .L115+4
 1941 035c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1942 035e 244B     		ldr	r3, .L115+8
ARM GAS  /tmp/cclqPDF2.s 			page 114


 1943 0360 1970     		strb	r1, [r3]
1029:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
 1944              		.loc 1 1029 0
 1945 0362 244A     		ldr	r2, .L115+12
 1946 0364 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1947 0366 5A70     		strb	r2, [r3, #1]
1030:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
 1948              		.loc 1 1030 0
 1949 0368 234B     		ldr	r3, .L115+16
 1950 036a 1970     		strb	r1, [r3]
1031:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1951              		.loc 1 1031 0
 1952 036c 5A70     		strb	r2, [r3, #1]
1032:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
 1953              		.loc 1 1032 0
 1954 036e 234B     		ldr	r3, .L115+20
 1955 0370 0122     		movs	r2, #1
 1956 0372 1A70     		strb	r2, [r3]
1033:Src/main.c    **** 	  
 1957              		.loc 1 1033 0
 1958 0374 0022     		movs	r2, #0
 1959 0376 5A70     		strb	r2, [r3, #1]
1035:Src/main.c    **** 	break;
 1960              		.loc 1 1035 0
 1961 0378 2148     		ldr	r0, .L115+24
 1962              	.LVL142:
 1963 037a FFF7FEFF 		bl	puts
 1964              	.LVL143:
1036:Src/main.c    ****     	}
 1965              		.loc 1 1036 0
 1966 037e 69E6     		b	.L93
 1967              	.LVL144:
 1968              	.L102:
1041:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 1969              		.loc 1 1041 0
 1970 0380 194B     		ldr	r3, .L115
 1971 0382 4022     		movs	r2, #64
 1972 0384 1A70     		strb	r2, [r3]
1042:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
 1973              		.loc 1 1042 0
 1974 0386 0322     		movs	r2, #3
 1975 0388 5A70     		strb	r2, [r3, #1]
1043:Src/main.c    **** 	  OSD_MIRROR[0]=CAMC_M;	
 1976              		.loc 1 1043 0
 1977 038a 0422     		movs	r2, #4
 1978 038c 9A70     		strb	r2, [r3, #2]
1044:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;	
 1979              		.loc 1 1044 0
 1980 038e 174B     		ldr	r3, .L115+4
 1981 0390 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1982 0392 174B     		ldr	r3, .L115+8
 1983 0394 1970     		strb	r1, [r3]
1045:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
 1984              		.loc 1 1045 0
 1985 0396 1B4A     		ldr	r2, .L115+28
 1986 0398 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1987 039a 5A70     		strb	r2, [r3, #1]
ARM GAS  /tmp/cclqPDF2.s 			page 115


1046:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 1988              		.loc 1 1046 0
 1989 039c 164B     		ldr	r3, .L115+16
 1990 039e 1970     		strb	r1, [r3]
1047:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 1991              		.loc 1 1047 0
 1992 03a0 5A70     		strb	r2, [r3, #1]
1048:Src/main.c    **** 	  OSD_SPEAKER[1]=ON;	
 1993              		.loc 1 1048 0
 1994 03a2 164B     		ldr	r3, .L115+20
 1995 03a4 0022     		movs	r2, #0
 1996 03a6 1A70     		strb	r2, [r3]
1049:Src/main.c    **** 	  
 1997              		.loc 1 1049 0
 1998 03a8 0122     		movs	r2, #1
 1999 03aa 5A70     		strb	r2, [r3, #1]
1051:Src/main.c    ****         break ;
 2000              		.loc 1 1051 0
 2001 03ac 1648     		ldr	r0, .L115+32
 2002              	.LVL145:
 2003 03ae FFF7FEFF 		bl	puts
 2004              	.LVL146:
1052:Src/main.c    ****     }
 2005              		.loc 1 1052 0
 2006 03b2 4FE6     		b	.L93
 2007              	.LVL147:
 2008              	.L110:
1058:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 2009              		.loc 1 1058 0
 2010 03b4 0C4B     		ldr	r3, .L115
 2011 03b6 4022     		movs	r2, #64
 2012 03b8 1A70     		strb	r2, [r3]
1059:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 2013              		.loc 1 1059 0
 2014 03ba 0322     		movs	r2, #3
 2015 03bc 5A70     		strb	r2, [r3, #1]
1060:Src/main.c    ****   OSD_MIRROR[0]=CAMC_M; 
 2016              		.loc 1 1060 0
 2017 03be 0122     		movs	r2, #1
 2018 03c0 9A70     		strb	r2, [r3, #2]
1061:Src/main.c    ****   OSD_MIRROR[1]=CAMA_M; 
 2019              		.loc 1 1061 0
 2020 03c2 0A4B     		ldr	r3, .L115+4
 2021 03c4 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2022              	.LVL148:
 2023 03c6 0A4B     		ldr	r3, .L115+8
 2024 03c8 1870     		strb	r0, [r3]
1062:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
 2025              		.loc 1 1062 0
 2026 03ca 1049     		ldr	r1, .L115+36
 2027 03cc 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2028 03ce 5970     		strb	r1, [r3, #1]
1063:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M;   
 2029              		.loc 1 1063 0
 2030 03d0 094B     		ldr	r3, .L115+16
 2031 03d2 1870     		strb	r0, [r3]
1064:Src/main.c    ****   OSD_SPEAKER[0]=ON;
ARM GAS  /tmp/cclqPDF2.s 			page 116


 2032              		.loc 1 1064 0
 2033 03d4 5970     		strb	r1, [r3, #1]
1065:Src/main.c    ****   OSD_SPEAKER[1]=OFF;	
 2034              		.loc 1 1065 0
 2035 03d6 094B     		ldr	r3, .L115+20
 2036 03d8 1A70     		strb	r2, [r3]
1066:Src/main.c    ****   
 2037              		.loc 1 1066 0
 2038 03da 0022     		movs	r2, #0
 2039 03dc 5A70     		strb	r2, [r3, #1]
1068:Src/main.c    **** break;
 2040              		.loc 1 1068 0
 2041 03de 0C48     		ldr	r0, .L115+40
 2042 03e0 FFF7FEFF 		bl	puts
 2043              	.LVL149:
1069:Src/main.c    **** 	}
 2044              		.loc 1 1069 0
 2045 03e4 36E6     		b	.L93
 2046              	.L116:
 2047 03e6 00BF     		.align	2
 2048              	.L115:
 2049 03e8 00000000 		.word	pVS4210_JointKind1
 2050 03ec 00000000 		.word	CAMC_M
 2051 03f0 00000000 		.word	.LANCHOR14
 2052 03f4 00000000 		.word	CAMB_M
 2053 03f8 00000000 		.word	gabVXIS_Input_mirrorH
 2054 03fc 00000000 		.word	.LANCHOR15
 2055 0400 30010000 		.word	.LC20
 2056 0404 00000000 		.word	CAMR_M
 2057 0408 48010000 		.word	.LC21
 2058 040c 00000000 		.word	CAMA_M
 2059 0410 60010000 		.word	.LC22
 2060              		.cfi_endproc
 2061              	.LFE73:
 2063              		.section	.text.main_init,"ax",%progbits
 2064              		.align	1
 2065              		.global	main_init
 2066              		.syntax unified
 2067              		.thumb
 2068              		.thumb_func
 2069              		.fpu softvfp
 2071              	main_init:
 2072              	.LFB76:
1303:Src/main.c    **** 
 2073              		.loc 1 1303 0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 0
 2076              		@ frame_needed = 0, uses_anonymous_args = 0
 2077 0000 38B5     		push	{r3, r4, r5, lr}
 2078              	.LCFI24:
 2079              		.cfi_def_cfa_offset 16
 2080              		.cfi_offset 3, -16
 2081              		.cfi_offset 4, -12
 2082              		.cfi_offset 5, -8
 2083              		.cfi_offset 14, -4
1307:Src/main.c    **** 		Printf("\r\nPrev.FW:%04x\r\n", rev);
 2084              		.loc 1 1307 0
ARM GAS  /tmp/cclqPDF2.s 			page 117


 2085 0002 FFF7FEFF 		bl	GetFWRevEE
 2086              	.LVL150:
 2087 0006 0446     		mov	r4, r0
 2088              	.LVL151:
1308:Src/main.c    **** 		
 2089              		.loc 1 1308 0
 2090 0008 0146     		mov	r1, r0
 2091 000a 1848     		ldr	r0, .L125
 2092              	.LVL152:
 2093 000c FFF7FEFF 		bl	Printf
 2094              	.LVL153:
1310:Src/main.c    **** 		{					
 2095              		.loc 1 1310 0
 2096 0010 FFF7FEFF 		bl	GetFWRevEE
 2097              	.LVL154:
 2098 0014 1328     		cmp	r0, #19
 2099 0016 09D1     		bne	.L123
 2100              	.L118:
1317:Src/main.c    **** 		{					// exist EEPROM
 2101              		.loc 1 1317 0
 2102 0018 FFF7FEFF 		bl	GetFWRevEE
 2103              	.LVL155:
 2104 001c 1328     		cmp	r0, #19
 2105 001e 1AD1     		bne	.L119
1319:Src/main.c    **** 				{
 2106              		.loc 1 1319 0
 2107 0020 132C     		cmp	r4, #19
 2108 0022 12D1     		bne	.L124
 2109              	.L120:
1340:Src/main.c    **** 	
 2110              		.loc 1 1340 0
 2111 0024 6420     		movs	r0, #100
 2112 0026 FFF7FEFF 		bl	delay
 2113              	.LVL156:
 2114              	.L117:
1346:Src/main.c    **** 
 2115              		.loc 1 1346 0
 2116 002a 38BD     		pop	{r3, r4, r5, pc}
 2117              	.LVL157:
 2118              	.L123:
1312:Src/main.c    **** 			SaveFWRevEE(FWVER);
 2119              		.loc 1 1312 0
 2120 002c 104D     		ldr	r5, .L125+4
 2121 002e 1321     		movs	r1, #19
 2122 0030 2846     		mov	r0, r5
 2123 0032 FFF7FEFF 		bl	Printf
 2124              	.LVL158:
1313:Src/main.c    **** 			Printf("\r\nCurr.FW:%04x", (WORD)GetFWRevEE());
 2125              		.loc 1 1313 0
 2126 0036 1320     		movs	r0, #19
 2127 0038 FFF7FEFF 		bl	SaveFWRevEE
 2128              	.LVL159:
1314:Src/main.c    **** 		}
 2129              		.loc 1 1314 0
 2130 003c FFF7FEFF 		bl	GetFWRevEE
 2131              	.LVL160:
 2132 0040 0146     		mov	r1, r0
ARM GAS  /tmp/cclqPDF2.s 			page 118


 2133 0042 2846     		mov	r0, r5
 2134 0044 FFF7FEFF 		bl	Printf
 2135              	.LVL161:
 2136 0048 E6E7     		b	.L118
 2137              	.L124:
1321:Src/main.c    **** 			
 2138              		.loc 1 1321 0
 2139 004a FFF7FEFF 		bl	ClearBasicEE
 2140              	.LVL162:
1323:Src/main.c    **** 				}
 2141              		.loc 1 1323 0
 2142 004e 0948     		ldr	r0, .L125+8
 2143 0050 FFF7FEFF 		bl	Printf
 2144              	.LVL163:
 2145 0054 E6E7     		b	.L120
 2146              	.L119:
1333:Src/main.c    **** 			Printf("\r\nNo initialize");
 2147              		.loc 1 1333 0
 2148 0056 0848     		ldr	r0, .L125+12
 2149 0058 FFF7FEFF 		bl	Printf
 2150              	.LVL164:
1334:Src/main.c    **** 			DebugLevel = 0xff;
 2151              		.loc 1 1334 0
 2152 005c 0748     		ldr	r0, .L125+16
 2153 005e FFF7FEFF 		bl	Printf
 2154              	.LVL165:
1335:Src/main.c    **** 			return;
 2155              		.loc 1 1335 0
 2156 0062 074B     		ldr	r3, .L125+20
 2157 0064 FF22     		movs	r2, #255
 2158 0066 1A70     		strb	r2, [r3]
1336:Src/main.c    **** 		}
 2159              		.loc 1 1336 0
 2160 0068 DFE7     		b	.L117
 2161              	.L126:
 2162 006a 00BF     		.align	2
 2163              	.L125:
 2164 006c 00000000 		.word	.LC23
 2165 0070 14000000 		.word	.LC24
 2166 0074 24000000 		.word	.LC25
 2167 0078 60000000 		.word	.LC26
 2168 007c 7C000000 		.word	.LC27
 2169 0080 00000000 		.word	DebugLevel
 2170              		.cfi_endproc
 2171              	.LFE76:
 2173              		.section	.text.LCDPowerON,"ax",%progbits
 2174              		.align	1
 2175              		.global	LCDPowerON
 2176              		.syntax unified
 2177              		.thumb
 2178              		.thumb_func
 2179              		.fpu softvfp
 2181              	LCDPowerON:
 2182              	.LFB78:
1445:Src/main.c    **** /*
 2183              		.loc 1 1445 0
 2184              		.cfi_startproc
ARM GAS  /tmp/cclqPDF2.s 			page 119


 2185              		@ args = 0, pretend = 0, frame = 0
 2186              		@ frame_needed = 0, uses_anonymous_args = 0
 2187              		@ link register save eliminated.
1467:Src/main.c    **** 
 2188              		.loc 1 1467 0
 2189 0000 7047     		bx	lr
 2190              		.cfi_endproc
 2191              	.LFE78:
 2193              		.section	.text.LCDPowerOFF,"ax",%progbits
 2194              		.align	1
 2195              		.global	LCDPowerOFF
 2196              		.syntax unified
 2197              		.thumb
 2198              		.thumb_func
 2199              		.fpu softvfp
 2201              	LCDPowerOFF:
 2202              	.LFB79:
1470:Src/main.c    **** /*
 2203              		.loc 1 1470 0
 2204              		.cfi_startproc
 2205              		@ args = 0, pretend = 0, frame = 0
 2206              		@ frame_needed = 0, uses_anonymous_args = 0
 2207              		@ link register save eliminated.
1505:Src/main.c    **** 
 2208              		.loc 1 1505 0
 2209 0000 7047     		bx	lr
 2210              		.cfi_endproc
 2211              	.LFE79:
 2213              		.section	.text.uComOnChipInitial,"ax",%progbits
 2214              		.align	1
 2215              		.global	uComOnChipInitial
 2216              		.syntax unified
 2217              		.thumb
 2218              		.thumb_func
 2219              		.fpu softvfp
 2221              	uComOnChipInitial:
 2222              	.LFB80:
1516:Src/main.c    **** 
 2223              		.loc 1 1516 0
 2224              		.cfi_startproc
 2225              		@ args = 0, pretend = 0, frame = 0
 2226              		@ frame_needed = 0, uses_anonymous_args = 0
 2227 0000 10B5     		push	{r4, lr}
 2228              	.LCFI25:
 2229              		.cfi_def_cfa_offset 8
 2230              		.cfi_offset 4, -8
 2231              		.cfi_offset 14, -4
1521:Src/main.c    **** PCON1V2_TP(ON);      
 2232              		.loc 1 1521 0
 2233 0002 084C     		ldr	r4, .L131
 2234 0004 0022     		movs	r2, #0
 2235 0006 4021     		movs	r1, #64
 2236 0008 2046     		mov	r0, r4
 2237 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 2238              	.LVL166:
1522:Src/main.c    **** 
 2239              		.loc 1 1522 0
ARM GAS  /tmp/cclqPDF2.s 			page 120


 2240 000e 0022     		movs	r2, #0
 2241 0010 2021     		movs	r1, #32
 2242 0012 2046     		mov	r0, r4
 2243 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2244              	.LVL167:
1524:Src/main.c    **** 
 2245              		.loc 1 1524 0
 2246 0018 0122     		movs	r2, #1
 2247 001a 1021     		movs	r1, #16
 2248 001c 2046     		mov	r0, r4
 2249 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 2250              	.LVL168:
1583:Src/main.c    **** 
 2251              		.loc 1 1583 0
 2252 0022 10BD     		pop	{r4, pc}
 2253              	.L132:
 2254              		.align	2
 2255              	.L131:
 2256 0024 00080140 		.word	1073809408
 2257              		.cfi_endproc
 2258              	.LFE80:
 2260              		.section	.text.user_pwm_setvalue,"ax",%progbits
 2261              		.align	1
 2262              		.global	user_pwm_setvalue
 2263              		.syntax unified
 2264              		.thumb
 2265              		.thumb_func
 2266              		.fpu softvfp
 2268              	user_pwm_setvalue:
 2269              	.LFB81:
1586:Src/main.c    ****     TIM_OC_InitTypeDef sConfigOC;
 2270              		.loc 1 1586 0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 32
 2273              		@ frame_needed = 0, uses_anonymous_args = 0
 2274              	.LVL169:
 2275 0000 10B5     		push	{r4, lr}
 2276              	.LCFI26:
 2277              		.cfi_def_cfa_offset 8
 2278              		.cfi_offset 4, -8
 2279              		.cfi_offset 14, -4
 2280 0002 88B0     		sub	sp, sp, #32
 2281              	.LCFI27:
 2282              		.cfi_def_cfa_offset 40
1589:Src/main.c    ****     sConfigOC.Pulse = value;
 2283              		.loc 1 1589 0
 2284 0004 6023     		movs	r3, #96
 2285 0006 0193     		str	r3, [sp, #4]
1590:Src/main.c    ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2286              		.loc 1 1590 0
 2287 0008 0290     		str	r0, [sp, #8]
1591:Src/main.c    ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2288              		.loc 1 1591 0
 2289 000a 0023     		movs	r3, #0
 2290 000c 0393     		str	r3, [sp, #12]
1592:Src/main.c    ****     HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 2291              		.loc 1 1592 0
ARM GAS  /tmp/cclqPDF2.s 			page 121


 2292 000e 0593     		str	r3, [sp, #20]
1593:Src/main.c    ****     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  
 2293              		.loc 1 1593 0
 2294 0010 054C     		ldr	r4, .L135
 2295 0012 0822     		movs	r2, #8
 2296 0014 01A9     		add	r1, sp, #4
 2297 0016 2046     		mov	r0, r4
 2298              	.LVL170:
 2299 0018 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2300              	.LVL171:
1594:Src/main.c    **** }
 2301              		.loc 1 1594 0
 2302 001c 0821     		movs	r1, #8
 2303 001e 2046     		mov	r0, r4
 2304 0020 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2305              	.LVL172:
1595:Src/main.c    **** 
 2306              		.loc 1 1595 0
 2307 0024 08B0     		add	sp, sp, #32
 2308              	.LCFI28:
 2309              		.cfi_def_cfa_offset 8
 2310              		@ sp needed
 2311 0026 10BD     		pop	{r4, pc}
 2312              	.L136:
 2313              		.align	2
 2314              	.L135:
 2315 0028 00000000 		.word	htim2
 2316              		.cfi_endproc
 2317              	.LFE81:
 2319              		.section	.text.AdjustAutoDayNight,"ax",%progbits
 2320              		.align	1
 2321              		.global	AdjustAutoDayNight
 2322              		.syntax unified
 2323              		.thumb
 2324              		.thumb_func
 2325              		.fpu softvfp
 2327              	AdjustAutoDayNight:
 2328              	.LFB77:
1350:Src/main.c    **** //	BYTE page;
 2329              		.loc 1 1350 0
 2330              		.cfi_startproc
 2331              		@ args = 0, pretend = 0, frame = 0
 2332              		@ frame_needed = 0, uses_anonymous_args = 0
 2333              	.LVL173:
 2334 0000 08B5     		push	{r3, lr}
 2335              	.LCFI29:
 2336              		.cfi_def_cfa_offset 8
 2337              		.cfi_offset 3, -8
 2338              		.cfi_offset 14, -4
 2339              	.LVL174:
1353:Src/main.c    **** 
 2340              		.loc 1 1353 0
 2341 0002 C043     		mvns	r0, r0
 2342              	.LVL175:
 2343 0004 C0B2     		uxtb	r0, r0
 2344              	.LVL176:
1356:Src/main.c    **** 		PWMLevelTemp=0+70;
ARM GAS  /tmp/cclqPDF2.s 			page 122


 2345              		.loc 1 1356 0
 2346 0006 6328     		cmp	r0, #99
 2347 0008 12D9     		bls	.L143
1358:Src/main.c    **** 		PWMLevelTemp=20+70;//20;
 2348              		.loc 1 1358 0
 2349 000a A0F16403 		sub	r3, r0, #100
 2350 000e DBB2     		uxtb	r3, r3
 2351 0010 272B     		cmp	r3, #39
 2352 0012 24D9     		bls	.L144
1360:Src/main.c    **** 		PWMLevelTemp=40+70;//50;
 2353              		.loc 1 1360 0
 2354 0014 00F17403 		add	r3, r0, #116
 2355 0018 DBB2     		uxtb	r3, r3
 2356 001a 272B     		cmp	r3, #39
 2357 001c 21D9     		bls	.L145
1362:Src/main.c    **** 		PWMLevelTemp=60+70;//65;
 2358              		.loc 1 1362 0
 2359 001e 00F14C03 		add	r3, r0, #76
 2360 0022 DBB2     		uxtb	r3, r3
 2361 0024 272B     		cmp	r3, #39
 2362 0026 1ED9     		bls	.L146
1364:Src/main.c    **** 	{
 2363              		.loc 1 1364 0
 2364 0028 DB28     		cmp	r0, #219
 2365 002a 1ED8     		bhi	.L147
1352:Src/main.c    **** 	val=0xff-val;
 2366              		.loc 1 1352 0
 2367 002c 0022     		movs	r2, #0
 2368 002e 00E0     		b	.L138
 2369              	.L143:
1357:Src/main.c    **** 	else if(val>=100&&val<140)
 2370              		.loc 1 1357 0
 2371 0030 4622     		movs	r2, #70
 2372              	.L138:
 2373              	.LVL177:
1396:Src/main.c    **** 	{
 2374              		.loc 1 1396 0
 2375 0032 164B     		ldr	r3, .L149
 2376 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2377 0036 012B     		cmp	r3, #1
 2378 0038 1FD1     		bne	.L139
1402:Src/main.c    **** 				PWMLevel-=1;
 2379              		.loc 1 1402 0
 2380 003a 154B     		ldr	r3, .L149+4
 2381 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2382 003e 9342     		cmp	r3, r2
 2383 0040 15D9     		bls	.L140
1403:Src/main.c    **** 			else if(PWMLevel < PWMLevelTemp)
 2384              		.loc 1 1403 0
 2385 0042 013B     		subs	r3, r3, #1
 2386 0044 124A     		ldr	r2, .L149+4
 2387              	.LVL178:
 2388 0046 1370     		strb	r3, [r2]
 2389              	.L141:
1407:Src/main.c    **** 		}
 2390              		.loc 1 1407 0
 2391 0048 124B     		ldr	r3, .L149+8
ARM GAS  /tmp/cclqPDF2.s 			page 123


 2392 004a 0022     		movs	r2, #0
 2393 004c 1A70     		strb	r2, [r3]
1415:Src/main.c    **** 
 2394              		.loc 1 1415 0
 2395 004e 104B     		ldr	r3, .L149+4
 2396 0050 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2397              	.LVL179:
 2398 0052 C0EB0010 		rsb	r0, r0, r0, lsl #4
 2399 0056 80B2     		uxth	r0, r0
 2400 0058 FFF7FEFF 		bl	user_pwm_setvalue
 2401              	.LVL180:
 2402              	.L137:
1443:Src/main.c    **** void LCDPowerON(void)
 2403              		.loc 1 1443 0
 2404 005c 08BD     		pop	{r3, pc}
 2405              	.LVL181:
 2406              	.L144:
1359:Src/main.c    **** 	else if(val>=140&&val<180)
 2407              		.loc 1 1359 0
 2408 005e 5A22     		movs	r2, #90
 2409 0060 E7E7     		b	.L138
 2410              	.L145:
1361:Src/main.c    **** 	else if(val>=180&&val<220)
 2411              		.loc 1 1361 0
 2412 0062 6E22     		movs	r2, #110
 2413 0064 E5E7     		b	.L138
 2414              	.L146:
1363:Src/main.c    **** 	else if(val>=220&&val<=255)//andy 20110414
 2415              		.loc 1 1363 0
 2416 0066 8222     		movs	r2, #130
 2417 0068 E3E7     		b	.L138
 2418              	.L147:
1367:Src/main.c    **** 		//#else
 2419              		.loc 1 1367 0
 2420 006a 9122     		movs	r2, #145
 2421 006c E1E7     		b	.L138
 2422              	.LVL182:
 2423              	.L140:
1404:Src/main.c    **** 				PWMLevel+=1;
 2424              		.loc 1 1404 0
 2425 006e 9342     		cmp	r3, r2
 2426 0070 EAD2     		bcs	.L141
1405:Src/main.c    **** 
 2427              		.loc 1 1405 0
 2428 0072 0133     		adds	r3, r3, #1
 2429 0074 064A     		ldr	r2, .L149+4
 2430              	.LVL183:
 2431 0076 1370     		strb	r3, [r2]
 2432 0078 E6E7     		b	.L141
 2433              	.LVL184:
 2434              	.L139:
1421:Src/main.c    **** 	//		Printf("(PWMLevel2=%02x)",(WORD)PWMLevel);
 2435              		.loc 1 1421 0
 2436 007a 054B     		ldr	r3, .L149+4
 2437 007c FF22     		movs	r2, #255
 2438              	.LVL185:
 2439 007e 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cclqPDF2.s 			page 124


1423:Src/main.c    **** 	}
 2440              		.loc 1 1423 0
 2441 0080 4FF47A60 		mov	r0, #4000
 2442              	.LVL186:
 2443 0084 FFF7FEFF 		bl	user_pwm_setvalue
 2444              	.LVL187:
1443:Src/main.c    **** void LCDPowerON(void)
 2445              		.loc 1 1443 0
 2446 0088 E8E7     		b	.L137
 2447              	.L150:
 2448 008a 00BF     		.align	2
 2449              	.L149:
 2450 008c 00000000 		.word	.LANCHOR17
 2451 0090 00000000 		.word	.LANCHOR18
 2452 0094 00000000 		.word	.LANCHOR19
 2453              		.cfi_endproc
 2454              	.LFE77:
 2456              		.section	.text.LoadEEPROM,"ax",%progbits
 2457              		.align	1
 2458              		.global	LoadEEPROM
 2459              		.syntax unified
 2460              		.thumb
 2461              		.thumb_func
 2462              		.fpu softvfp
 2464              	LoadEEPROM:
 2465              	.LFB82:
1598:Src/main.c    **** #if 0
 2466              		.loc 1 1598 0
 2467              		.cfi_startproc
 2468              		@ args = 0, pretend = 0, frame = 0
 2469              		@ frame_needed = 0, uses_anonymous_args = 0
 2470              		@ link register save eliminated.
1620:Src/main.c    **** 
 2471              		.loc 1 1620 0
 2472 0000 7047     		bx	lr
 2473              		.cfi_endproc
 2474              	.LFE82:
 2476              		.section	.text.WaitPowerOn,"ax",%progbits
 2477              		.align	1
 2478              		.global	WaitPowerOn
 2479              		.syntax unified
 2480              		.thumb
 2481              		.thumb_func
 2482              		.fpu softvfp
 2484              	WaitPowerOn:
 2485              	.LFB83:
1623:Src/main.c    **** BYTE val;
 2486              		.loc 1 1623 0
 2487              		.cfi_startproc
 2488              		@ args = 0, pretend = 0, frame = 0
 2489              		@ frame_needed = 0, uses_anonymous_args = 0
 2490 0000 10B5     		push	{r4, lr}
 2491              	.LCFI30:
 2492              		.cfi_def_cfa_offset 8
 2493              		.cfi_offset 4, -8
 2494              		.cfi_offset 14, -4
1625:Src/main.c    **** 
ARM GAS  /tmp/cclqPDF2.s 			page 125


 2495              		.loc 1 1625 0
 2496 0002 2C20     		movs	r0, #44
 2497 0004 FFF7FEFF 		bl	PowerLED
 2498              	.LVL188:
1629:Src/main.c    **** 
 2499              		.loc 1 1629 0
 2500 0008 1120     		movs	r0, #17
 2501 000a FFF7FEFF 		bl	MCUTimerCancelTimerEvent
 2502              	.LVL189:
1631:Src/main.c    **** 		
 2503              		.loc 1 1631 0
 2504 000e 1D48     		ldr	r0, .L162
 2505 0010 FFF7FEFF 		bl	Printf
 2506              	.LVL190:
 2507 0014 20E0     		b	.L156
 2508              	.L161:
1640:Src/main.c    **** 				break;		//poweron
 2509              		.loc 1 1640 0
 2510 0016 AB20     		movs	r0, #171
 2511 0018 FFF7FEFF 		bl	WriteEEP
 2512              	.LVL191:
1699:Src/main.c    **** //	SHOWOSDINFO();	
 2513              		.loc 1 1699 0
 2514 001c 2A20     		movs	r0, #42
 2515 001e FFF7FEFF 		bl	PowerLED
 2516              	.LVL192:
1705:Src/main.c    **** 	MCUTimerActiveTimerEvent(SEC(2),_USER_TIMER_EVENT_DISPLAY_DISABLE);
 2517              		.loc 1 1705 0
 2518 0022 0F20     		movs	r0, #15
 2519 0024 FFF7FEFF 		bl	MCUTimerCancelTimerEvent
 2520              	.LVL193:
1706:Src/main.c    **** 
 2521              		.loc 1 1706 0
 2522 0028 0F21     		movs	r1, #15
 2523 002a 4FF4FA60 		mov	r0, #2000
 2524 002e FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 2525              	.LVL194:
1710:Src/main.c    **** //LCDPowerON();
 2526              		.loc 1 1710 0
 2527 0032 1121     		movs	r1, #17
 2528 0034 4FF47A70 		mov	r0, #1000
 2529 0038 FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 2530              	.LVL195:
1712:Src/main.c    **** 
 2531              		.loc 1 1712 0
 2532 003c 1248     		ldr	r0, .L162+4
 2533 003e FFF7FEFF 		bl	Printf
 2534              	.LVL196:
1715:Src/main.c    **** 
 2535              		.loc 1 1715 0
 2536 0042 10BD     		pop	{r4, pc}
 2537              	.LVL197:
 2538              	.L154:
1667:Src/main.c    **** 
 2539              		.loc 1 1667 0
 2540 0044 FFF7FEFF 		bl	TriggerHandler
 2541              	.LVL198:
ARM GAS  /tmp/cclqPDF2.s 			page 126


 2542              	.L155:
1689:Src/main.c    **** 		   	  EQ_Detect();	 
 2543              		.loc 1 1689 0
 2544 0048 FFF7FEFF 		bl	SysTimerHandler
 2545              	.LVL199:
1690:Src/main.c    **** 			  
 2546              		.loc 1 1690 0
 2547 004c FFF7FEFF 		bl	EQ_Detect
 2548              	.LVL200:
1693:Src/main.c    **** 
 2549              		.loc 1 1693 0
 2550 0050 0120     		movs	r0, #1
 2551 0052 FFF7FEFF 		bl	GT9147_Scan
 2552              	.LVL201:
 2553 0056 88B9     		cbnz	r0, .L160
 2554              	.L156:
1636:Src/main.c    **** 			if(PowerFlag==ON)
 2555              		.loc 1 1636 0
 2556 0058 FFF7FEFF 		bl	CheckKeyIn
 2557              	.LVL202:
1637:Src/main.c    **** 			{
 2558              		.loc 1 1637 0
 2559 005c 0B4B     		ldr	r3, .L162+8
 2560 005e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2561 0060 0129     		cmp	r1, #1
 2562 0062 D8D0     		beq	.L161
1644:Src/main.c    **** 		 
 2563              		.loc 1 1644 0
 2564 0064 FFF7FEFF 		bl	CheckTrigger
 2565              	.LVL203:
1648:Src/main.c    **** 		{	
 2566              		.loc 1 1648 0
 2567 0068 0446     		mov	r4, r0
 2568 006a 0028     		cmp	r0, #0
 2569 006c EAD0     		beq	.L154
1650:Src/main.c    **** 			TriggerHandler(val);
 2570              		.loc 1 1650 0
 2571 006e 2A20     		movs	r0, #42
 2572              	.LVL204:
 2573 0070 FFF7FEFF 		bl	PowerLED
 2574              	.LVL205:
1651:Src/main.c    **** 			//	AudioMute(OFF);
 2575              		.loc 1 1651 0
 2576 0074 2046     		mov	r0, r4
 2577 0076 FFF7FEFF 		bl	TriggerHandler
 2578              	.LVL206:
 2579 007a E5E7     		b	.L155
 2580              	.L160:
1695:Src/main.c    **** 					
 2581              		.loc 1 1695 0
 2582 007c 034B     		ldr	r3, .L162+8
 2583 007e 0122     		movs	r2, #1
 2584 0080 1A70     		strb	r2, [r3]
 2585 0082 E9E7     		b	.L156
 2586              	.L163:
 2587              		.align	2
 2588              	.L162:
ARM GAS  /tmp/cclqPDF2.s 			page 127


 2589 0084 00000000 		.word	.LC28
 2590 0088 10000000 		.word	.LC29
 2591 008c 00000000 		.word	.LANCHOR20
 2592              		.cfi_endproc
 2593              	.LFE83:
 2595              		.section	.text.VS4210_FULL88init2,"ax",%progbits
 2596              		.align	1
 2597              		.global	VS4210_FULL88init2
 2598              		.syntax unified
 2599              		.thumb
 2600              		.thumb_func
 2601              		.fpu softvfp
 2603              	VS4210_FULL88init2:
 2604              	.LFB86:
2221:Src/main.c    **** 	 tByte i ;
 2605              		.loc 1 2221 0
 2606              		.cfi_startproc
 2607              		@ args = 0, pretend = 0, frame = 0
 2608              		@ frame_needed = 0, uses_anonymous_args = 0
 2609              	.LVL207:
 2610 0000 38B5     		push	{r3, r4, r5, lr}
 2611              	.LCFI31:
 2612              		.cfi_def_cfa_offset 16
 2613              		.cfi_offset 3, -16
 2614              		.cfi_offset 4, -12
 2615              		.cfi_offset 5, -8
 2616              		.cfi_offset 14, -4
 2617 0002 0546     		mov	r5, r0
 2618              	.LVL208:
2228:Src/main.c    **** 	 {
 2619              		.loc 1 2228 0
 2620 0004 0024     		movs	r4, #0
 2621 0006 06E0     		b	.L165
 2622              	.LVL209:
 2623              	.L166:
2232:Src/main.c    **** 	 }
 2624              		.loc 1 2232 0 discriminator 3
 2625 0008 295D     		ldrb	r1, [r5, r4]	@ zero_extendqisi2
 2626              	.LVL210:
 2627 000a 044B     		ldr	r3, .L168
 2628 000c 185D     		ldrb	r0, [r3, r4]	@ zero_extendqisi2
 2629              	.LVL211:
 2630 000e FFF7FEFF 		bl	VXISI2CWrite
 2631              	.LVL212:
2228:Src/main.c    **** 	 {
 2632              		.loc 1 2228 0 discriminator 3
 2633 0012 0134     		adds	r4, r4, #1
 2634              	.LVL213:
 2635 0014 E4B2     		uxtb	r4, r4
 2636              	.LVL214:
 2637              	.L165:
2228:Src/main.c    **** 	 {
 2638              		.loc 1 2228 0 is_stmt 0 discriminator 1
 2639 0016 572C     		cmp	r4, #87
 2640 0018 F6D9     		bls	.L166
2234:Src/main.c    **** 
 2641              		.loc 1 2234 0 is_stmt 1
ARM GAS  /tmp/cclqPDF2.s 			page 128


 2642 001a 38BD     		pop	{r3, r4, r5, pc}
 2643              	.LVL215:
 2644              	.L169:
 2645              		.align	2
 2646              	.L168:
 2647 001c 00000000 		.word	VS4210_Addr_88param
 2648              		.cfi_endproc
 2649              	.LFE86:
 2651              		.section	.text.TP_bt1120_1080P_1080P_mode0_w0,"ax",%progbits
 2652              		.align	1
 2653              		.global	TP_bt1120_1080P_1080P_mode0_w0
 2654              		.syntax unified
 2655              		.thumb
 2656              		.thumb_func
 2657              		.fpu softvfp
 2659              	TP_bt1120_1080P_1080P_mode0_w0:
 2660              	.LFB87:
2237:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table 1080P... ");
 2661              		.loc 1 2237 0
 2662              		.cfi_startproc
 2663              		@ args = 0, pretend = 0, frame = 0
 2664              		@ frame_needed = 0, uses_anonymous_args = 0
 2665 0000 08B5     		push	{r3, lr}
 2666              	.LCFI32:
 2667              		.cfi_def_cfa_offset 8
 2668              		.cfi_offset 3, -8
 2669              		.cfi_offset 14, -4
2238:Src/main.c    **** #if 1
 2670              		.loc 1 2238 0
 2671 0002 0348     		ldr	r0, .L172
 2672 0004 FFF7FEFF 		bl	Printf
 2673              	.LVL216:
2241:Src/main.c    **** #else
 2674              		.loc 1 2241 0
 2675 0008 0248     		ldr	r0, .L172+4
 2676 000a FFF7FEFF 		bl	VS4210_FULL88init2
 2677              	.LVL217:
2745:Src/main.c    **** 
 2678              		.loc 1 2745 0
 2679 000e 08BD     		pop	{r3, pc}
 2680              	.L173:
 2681              		.align	2
 2682              	.L172:
 2683 0010 00000000 		.word	.LC30
 2684 0014 00000000 		.word	VS4210_TP_bt1120_1080P_1080P_mode0_w0_88param
 2685              		.cfi_endproc
 2686              	.LFE87:
 2688              		.section	.text.TP_bt1120_720P_1080P_mode0_w0,"ax",%progbits
 2689              		.align	1
 2690              		.global	TP_bt1120_720P_1080P_mode0_w0
 2691              		.syntax unified
 2692              		.thumb
 2693              		.thumb_func
 2694              		.fpu softvfp
 2696              	TP_bt1120_720P_1080P_mode0_w0:
 2697              	.LFB88:
2748:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table 720P... ");
ARM GAS  /tmp/cclqPDF2.s 			page 129


 2698              		.loc 1 2748 0
 2699              		.cfi_startproc
 2700              		@ args = 0, pretend = 0, frame = 0
 2701              		@ frame_needed = 0, uses_anonymous_args = 0
 2702 0000 08B5     		push	{r3, lr}
 2703              	.LCFI33:
 2704              		.cfi_def_cfa_offset 8
 2705              		.cfi_offset 3, -8
 2706              		.cfi_offset 14, -4
2749:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_720P_1080P_mode0_w0_88param);
 2707              		.loc 1 2749 0
 2708 0002 0548     		ldr	r0, .L176
 2709 0004 FFF7FEFF 		bl	Printf
 2710              	.LVL218:
2750:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
 2711              		.loc 1 2750 0
 2712 0008 0448     		ldr	r0, .L176+4
 2713 000a FFF7FEFF 		bl	VS4210_FULL88init2
 2714              	.LVL219:
2751:Src/main.c    **** 
 2715              		.loc 1 2751 0
 2716 000e 1021     		movs	r1, #16
 2717 0010 D720     		movs	r0, #215
 2718 0012 FFF7FEFF 		bl	VXISI2CWrite
 2719              	.LVL220:
2753:Src/main.c    **** 
 2720              		.loc 1 2753 0
 2721 0016 08BD     		pop	{r3, pc}
 2722              	.L177:
 2723              		.align	2
 2724              	.L176:
 2725 0018 00000000 		.word	.LC31
 2726 001c 00000000 		.word	VS4210_TP_bt1120_720P_1080P_mode0_w0_88param
 2727              		.cfi_endproc
 2728              	.LFE88:
 2730              		.section	.text.TP_bt1120_NTSC_1080P_mode0_w0,"ax",%progbits
 2731              		.align	1
 2732              		.global	TP_bt1120_NTSC_1080P_mode0_w0
 2733              		.syntax unified
 2734              		.thumb
 2735              		.thumb_func
 2736              		.fpu softvfp
 2738              	TP_bt1120_NTSC_1080P_mode0_w0:
 2739              	.LFB89:
2756:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table NTSC... ");
 2740              		.loc 1 2756 0
 2741              		.cfi_startproc
 2742              		@ args = 0, pretend = 0, frame = 0
 2743              		@ frame_needed = 0, uses_anonymous_args = 0
 2744 0000 08B5     		push	{r3, lr}
 2745              	.LCFI34:
 2746              		.cfi_def_cfa_offset 8
 2747              		.cfi_offset 3, -8
 2748              		.cfi_offset 14, -4
2757:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param);
 2749              		.loc 1 2757 0
 2750 0002 0348     		ldr	r0, .L180
ARM GAS  /tmp/cclqPDF2.s 			page 130


 2751 0004 FFF7FEFF 		bl	Printf
 2752              	.LVL221:
2758:Src/main.c    **** }
 2753              		.loc 1 2758 0
 2754 0008 0248     		ldr	r0, .L180+4
 2755 000a FFF7FEFF 		bl	VS4210_FULL88init2
 2756              	.LVL222:
2759:Src/main.c    **** 
 2757              		.loc 1 2759 0
 2758 000e 08BD     		pop	{r3, pc}
 2759              	.L181:
 2760              		.align	2
 2761              	.L180:
 2762 0010 00000000 		.word	.LC32
 2763 0014 00000000 		.word	VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param
 2764              		.cfi_endproc
 2765              	.LFE89:
 2767              		.section	.text.TP_bt1120_PAL_1080P_mode0_w0,"ax",%progbits
 2768              		.align	1
 2769              		.global	TP_bt1120_PAL_1080P_mode0_w0
 2770              		.syntax unified
 2771              		.thumb
 2772              		.thumb_func
 2773              		.fpu softvfp
 2775              	TP_bt1120_PAL_1080P_mode0_w0:
 2776              	.LFB90:
2762:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table PAL... ");
 2777              		.loc 1 2762 0
 2778              		.cfi_startproc
 2779              		@ args = 0, pretend = 0, frame = 0
 2780              		@ frame_needed = 0, uses_anonymous_args = 0
 2781 0000 08B5     		push	{r3, lr}
 2782              	.LCFI35:
 2783              		.cfi_def_cfa_offset 8
 2784              		.cfi_offset 3, -8
 2785              		.cfi_offset 14, -4
2763:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param);
 2786              		.loc 1 2763 0
 2787 0002 0348     		ldr	r0, .L184
 2788 0004 FFF7FEFF 		bl	Printf
 2789              	.LVL223:
2764:Src/main.c    **** 	#if 0
 2790              		.loc 1 2764 0
 2791 0008 0248     		ldr	r0, .L184+4
 2792 000a FFF7FEFF 		bl	VS4210_FULL88init2
 2793              	.LVL224:
3007:Src/main.c    **** void SET_VS4210_720_480_out(void)
 2794              		.loc 1 3007 0
 2795 000e 08BD     		pop	{r3, pc}
 2796              	.L185:
 2797              		.align	2
 2798              	.L184:
 2799 0010 00000000 		.word	.LC33
 2800 0014 00000000 		.word	VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param
 2801              		.cfi_endproc
 2802              	.LFE90:
 2804              		.section	.text.SET_VS4210_720_480_out,"ax",%progbits
ARM GAS  /tmp/cclqPDF2.s 			page 131


 2805              		.align	1
 2806              		.global	SET_VS4210_720_480_out
 2807              		.syntax unified
 2808              		.thumb
 2809              		.thumb_func
 2810              		.fpu softvfp
 2812              	SET_VS4210_720_480_out:
 2813              	.LFB91:
3009:Src/main.c    **** 	Printf("\r\nSET_VS4210_720_480_out ");
 2814              		.loc 1 3009 0
 2815              		.cfi_startproc
 2816              		@ args = 0, pretend = 0, frame = 0
 2817              		@ frame_needed = 0, uses_anonymous_args = 0
 2818 0000 08B5     		push	{r3, lr}
 2819              	.LCFI36:
 2820              		.cfi_def_cfa_offset 8
 2821              		.cfi_offset 3, -8
 2822              		.cfi_offset 14, -4
3010:Src/main.c    **** 
 2823              		.loc 1 3010 0
 2824 0002 FE48     		ldr	r0, .L188
 2825 0004 FFF7FEFF 		bl	Printf
 2826              	.LVL225:
3012:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
 2827              		.loc 1 3012 0
 2828 0008 0021     		movs	r1, #0
 2829 000a 0120     		movs	r0, #1
 2830 000c FFF7FEFF 		bl	VXISI2CWrite
 2831              	.LVL226:
3013:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
 2832              		.loc 1 3013 0
 2833 0010 0021     		movs	r1, #0
 2834 0012 0220     		movs	r0, #2
 2835 0014 FFF7FEFF 		bl	VXISI2CWrite
 2836              	.LVL227:
3014:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
 2837              		.loc 1 3014 0
 2838 0018 7521     		movs	r1, #117
 2839 001a 0320     		movs	r0, #3
 2840 001c FFF7FEFF 		bl	VXISI2CWrite
 2841              	.LVL228:
3015:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
 2842              		.loc 1 3015 0
 2843 0020 1821     		movs	r1, #24
 2844 0022 0420     		movs	r0, #4
 2845 0024 FFF7FEFF 		bl	VXISI2CWrite
 2846              	.LVL229:
3016:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
 2847              		.loc 1 3016 0
 2848 0028 8021     		movs	r1, #128
 2849 002a 0520     		movs	r0, #5
 2850 002c FFF7FEFF 		bl	VXISI2CWrite
 2851              	.LVL230:
3017:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);
 2852              		.loc 1 3017 0
 2853 0030 2021     		movs	r1, #32
 2854 0032 0620     		movs	r0, #6
ARM GAS  /tmp/cclqPDF2.s 			page 132


 2855 0034 FFF7FEFF 		bl	VXISI2CWrite
 2856              	.LVL231:
3018:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
 2857              		.loc 1 3018 0
 2858 0038 0821     		movs	r1, #8
 2859 003a 0720     		movs	r0, #7
 2860 003c FFF7FEFF 		bl	VXISI2CWrite
 2861              	.LVL232:
3019:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
 2862              		.loc 1 3019 0
 2863 0040 4021     		movs	r1, #64
 2864 0042 0820     		movs	r0, #8
 2865 0044 FFF7FEFF 		bl	VXISI2CWrite
 2866              	.LVL233:
3020:Src/main.c    **** 	VXISI2CWrite(0x0A,0x41);
 2867              		.loc 1 3020 0
 2868 0048 0A21     		movs	r1, #10
 2869 004a 0920     		movs	r0, #9
 2870 004c FFF7FEFF 		bl	VXISI2CWrite
 2871              	.LVL234:
3021:Src/main.c    **** 	VXISI2CWrite(0x0B,0x07);
 2872              		.loc 1 3021 0
 2873 0050 4121     		movs	r1, #65
 2874 0052 0A20     		movs	r0, #10
 2875 0054 FFF7FEFF 		bl	VXISI2CWrite
 2876              	.LVL235:
3022:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
 2877              		.loc 1 3022 0
 2878 0058 0721     		movs	r1, #7
 2879 005a 0B20     		movs	r0, #11
 2880 005c FFF7FEFF 		bl	VXISI2CWrite
 2881              	.LVL236:
3023:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
 2882              		.loc 1 3023 0
 2883 0060 0021     		movs	r1, #0
 2884 0062 0C20     		movs	r0, #12
 2885 0064 FFF7FEFF 		bl	VXISI2CWrite
 2886              	.LVL237:
3024:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
 2887              		.loc 1 3024 0
 2888 0068 2021     		movs	r1, #32
 2889 006a 0D20     		movs	r0, #13
 2890 006c FFF7FEFF 		bl	VXISI2CWrite
 2891              	.LVL238:
3025:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
 2892              		.loc 1 3025 0
 2893 0070 1021     		movs	r1, #16
 2894 0072 0E20     		movs	r0, #14
 2895 0074 FFF7FEFF 		bl	VXISI2CWrite
 2896              	.LVL239:
3026:Src/main.c    **** 	VXISI2CWrite(0x10,0x80);
 2897              		.loc 1 3026 0
 2898 0078 0021     		movs	r1, #0
 2899 007a 0F20     		movs	r0, #15
 2900 007c FFF7FEFF 		bl	VXISI2CWrite
 2901              	.LVL240:
3027:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
ARM GAS  /tmp/cclqPDF2.s 			page 133


 2902              		.loc 1 3027 0
 2903 0080 8021     		movs	r1, #128
 2904 0082 1020     		movs	r0, #16
 2905 0084 FFF7FEFF 		bl	VXISI2CWrite
 2906              	.LVL241:
3028:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);
 2907              		.loc 1 3028 0
 2908 0088 8221     		movs	r1, #130
 2909 008a 1120     		movs	r0, #17
 2910 008c FFF7FEFF 		bl	VXISI2CWrite
 2911              	.LVL242:
3029:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);
 2912              		.loc 1 3029 0
 2913 0090 2121     		movs	r1, #33
 2914 0092 1220     		movs	r0, #18
 2915 0094 FFF7FEFF 		bl	VXISI2CWrite
 2916              	.LVL243:
3030:Src/main.c    **** 	VXISI2CWrite(0x14,0xE0);
 2917              		.loc 1 3030 0
 2918 0098 D021     		movs	r1, #208
 2919 009a 1320     		movs	r0, #19
 2920 009c FFF7FEFF 		bl	VXISI2CWrite
 2921              	.LVL244:
3031:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
 2922              		.loc 1 3031 0
 2923 00a0 E021     		movs	r1, #224
 2924 00a2 1420     		movs	r0, #20
 2925 00a4 FFF7FEFF 		bl	VXISI2CWrite
 2926              	.LVL245:
3032:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
 2927              		.loc 1 3032 0
 2928 00a8 7821     		movs	r1, #120
 2929 00aa 1520     		movs	r0, #21
 2930 00ac FFF7FEFF 		bl	VXISI2CWrite
 2931              	.LVL246:
3033:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
 2932              		.loc 1 3033 0
 2933 00b0 FE21     		movs	r1, #254
 2934 00b2 1620     		movs	r0, #22
 2935 00b4 FFF7FEFF 		bl	VXISI2CWrite
 2936              	.LVL247:
3034:Src/main.c    **** 	VXISI2CWrite(0x18,0xC8);
 2937              		.loc 1 3034 0
 2938 00b8 0021     		movs	r1, #0
 2939 00ba 1720     		movs	r0, #23
 2940 00bc FFF7FEFF 		bl	VXISI2CWrite
 2941              	.LVL248:
3035:Src/main.c    **** 	VXISI2CWrite(0x19,0x00);
 2942              		.loc 1 3035 0
 2943 00c0 C821     		movs	r1, #200
 2944 00c2 1820     		movs	r0, #24
 2945 00c4 FFF7FEFF 		bl	VXISI2CWrite
 2946              	.LVL249:
3036:Src/main.c    **** 	VXISI2CWrite(0x1A,0x23);
 2947              		.loc 1 3036 0
 2948 00c8 0021     		movs	r1, #0
 2949 00ca 1920     		movs	r0, #25
ARM GAS  /tmp/cclqPDF2.s 			page 134


 2950 00cc FFF7FEFF 		bl	VXISI2CWrite
 2951              	.LVL250:
3037:Src/main.c    **** 	VXISI2CWrite(0x1B,0x00);
 2952              		.loc 1 3037 0
 2953 00d0 2321     		movs	r1, #35
 2954 00d2 1A20     		movs	r0, #26
 2955 00d4 FFF7FEFF 		bl	VXISI2CWrite
 2956              	.LVL251:
3038:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
 2957              		.loc 1 3038 0
 2958 00d8 0021     		movs	r1, #0
 2959 00da 1B20     		movs	r0, #27
 2960 00dc FFF7FEFF 		bl	VXISI2CWrite
 2961              	.LVL252:
3039:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
 2962              		.loc 1 3039 0
 2963 00e0 0021     		movs	r1, #0
 2964 00e2 1C20     		movs	r0, #28
 2965 00e4 FFF7FEFF 		bl	VXISI2CWrite
 2966              	.LVL253:
3040:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
 2967              		.loc 1 3040 0
 2968 00e8 0021     		movs	r1, #0
 2969 00ea 1D20     		movs	r0, #29
 2970 00ec FFF7FEFF 		bl	VXISI2CWrite
 2971              	.LVL254:
3041:Src/main.c    **** 	VXISI2CWrite(0x1F,0x32);
 2972              		.loc 1 3041 0
 2973 00f0 2021     		movs	r1, #32
 2974 00f2 1E20     		movs	r0, #30
 2975 00f4 FFF7FEFF 		bl	VXISI2CWrite
 2976              	.LVL255:
3042:Src/main.c    **** 	VXISI2CWrite(0x20,0x5A);
 2977              		.loc 1 3042 0
 2978 00f8 3221     		movs	r1, #50
 2979 00fa 1F20     		movs	r0, #31
 2980 00fc FFF7FEFF 		bl	VXISI2CWrite
 2981              	.LVL256:
3043:Src/main.c    **** 	VXISI2CWrite(0x21,0x0D);
 2982              		.loc 1 3043 0
 2983 0100 5A21     		movs	r1, #90
 2984 0102 2020     		movs	r0, #32
 2985 0104 FFF7FEFF 		bl	VXISI2CWrite
 2986              	.LVL257:
3044:Src/main.c    **** 	VXISI2CWrite(0x22,0x32);
 2987              		.loc 1 3044 0
 2988 0108 0D21     		movs	r1, #13
 2989 010a 2120     		movs	r0, #33
 2990 010c FFF7FEFF 		bl	VXISI2CWrite
 2991              	.LVL258:
3045:Src/main.c    **** 	VXISI2CWrite(0x23,0x5A);
 2992              		.loc 1 3045 0
 2993 0110 3221     		movs	r1, #50
 2994 0112 2220     		movs	r0, #34
 2995 0114 FFF7FEFF 		bl	VXISI2CWrite
 2996              	.LVL259:
3046:Src/main.c    **** 	VXISI2CWrite(0x24,0xD0);
ARM GAS  /tmp/cclqPDF2.s 			page 135


 2997              		.loc 1 3046 0
 2998 0118 5A21     		movs	r1, #90
 2999 011a 2320     		movs	r0, #35
 3000 011c FFF7FEFF 		bl	VXISI2CWrite
 3001              	.LVL260:
3047:Src/main.c    **** 	VXISI2CWrite(0x25,0x21);
 3002              		.loc 1 3047 0
 3003 0120 D021     		movs	r1, #208
 3004 0122 2420     		movs	r0, #36
 3005 0124 FFF7FEFF 		bl	VXISI2CWrite
 3006              	.LVL261:
3048:Src/main.c    **** 	VXISI2CWrite(0x26,0x0D);
 3007              		.loc 1 3048 0
 3008 0128 2121     		movs	r1, #33
 3009 012a 2520     		movs	r0, #37
 3010 012c FFF7FEFF 		bl	VXISI2CWrite
 3011              	.LVL262:
3049:Src/main.c    **** 	VXISI2CWrite(0x27,0xE0);
 3012              		.loc 1 3049 0
 3013 0130 0D21     		movs	r1, #13
 3014 0132 2620     		movs	r0, #38
 3015 0134 FFF7FEFF 		bl	VXISI2CWrite
 3016              	.LVL263:
3050:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
 3017              		.loc 1 3050 0
 3018 0138 E021     		movs	r1, #224
 3019 013a 2720     		movs	r0, #39
 3020 013c FFF7FEFF 		bl	VXISI2CWrite
 3021              	.LVL264:
3051:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
 3022              		.loc 1 3051 0
 3023 0140 F021     		movs	r1, #240
 3024 0142 2820     		movs	r0, #40
 3025 0144 FFF7FEFF 		bl	VXISI2CWrite
 3026              	.LVL265:
3052:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
 3027              		.loc 1 3052 0
 3028 0148 0021     		movs	r1, #0
 3029 014a 2920     		movs	r0, #41
 3030 014c FFF7FEFF 		bl	VXISI2CWrite
 3031              	.LVL266:
3053:Src/main.c    **** 	VXISI2CWrite(0x2B,0x01);
 3032              		.loc 1 3053 0
 3033 0150 0021     		movs	r1, #0
 3034 0152 2A20     		movs	r0, #42
 3035 0154 FFF7FEFF 		bl	VXISI2CWrite
 3036              	.LVL267:
3054:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);
 3037              		.loc 1 3054 0
 3038 0158 0121     		movs	r1, #1
 3039 015a 2B20     		movs	r0, #43
 3040 015c FFF7FEFF 		bl	VXISI2CWrite
 3041              	.LVL268:
3055:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
 3042              		.loc 1 3055 0
 3043 0160 FF21     		movs	r1, #255
 3044 0162 2C20     		movs	r0, #44
ARM GAS  /tmp/cclqPDF2.s 			page 136


 3045 0164 FFF7FEFF 		bl	VXISI2CWrite
 3046              	.LVL269:
3056:Src/main.c    **** 	VXISI2CWrite(0x2E,0x12);
 3047              		.loc 1 3056 0
 3048 0168 0021     		movs	r1, #0
 3049 016a 2D20     		movs	r0, #45
 3050 016c FFF7FEFF 		bl	VXISI2CWrite
 3051              	.LVL270:
3057:Src/main.c    **** 	VXISI2CWrite(0x2F,0xD0);
 3052              		.loc 1 3057 0
 3053 0170 1221     		movs	r1, #18
 3054 0172 2E20     		movs	r0, #46
 3055 0174 FFF7FEFF 		bl	VXISI2CWrite
 3056              	.LVL271:
3058:Src/main.c    **** 	VXISI2CWrite(0x30,0xE0);
 3057              		.loc 1 3058 0
 3058 0178 D021     		movs	r1, #208
 3059 017a 2F20     		movs	r0, #47
 3060 017c FFF7FEFF 		bl	VXISI2CWrite
 3061              	.LVL272:
3059:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
 3062              		.loc 1 3059 0
 3063 0180 E021     		movs	r1, #224
 3064 0182 3020     		movs	r0, #48
 3065 0184 FFF7FEFF 		bl	VXISI2CWrite
 3066              	.LVL273:
3060:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
 3067              		.loc 1 3060 0
 3068 0188 8021     		movs	r1, #128
 3069 018a 3120     		movs	r0, #49
 3070 018c FFF7FEFF 		bl	VXISI2CWrite
 3071              	.LVL274:
3061:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
 3072              		.loc 1 3061 0
 3073 0190 8021     		movs	r1, #128
 3074 0192 3220     		movs	r0, #50
 3075 0194 FFF7FEFF 		bl	VXISI2CWrite
 3076              	.LVL275:
3062:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
 3077              		.loc 1 3062 0
 3078 0198 8021     		movs	r1, #128
 3079 019a 3320     		movs	r0, #51
 3080 019c FFF7FEFF 		bl	VXISI2CWrite
 3081              	.LVL276:
3063:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
 3082              		.loc 1 3063 0
 3083 01a0 A021     		movs	r1, #160
 3084 01a2 3420     		movs	r0, #52
 3085 01a4 FFF7FEFF 		bl	VXISI2CWrite
 3086              	.LVL277:
3064:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
 3087              		.loc 1 3064 0
 3088 01a8 1821     		movs	r1, #24
 3089 01aa 3520     		movs	r0, #53
 3090 01ac FFF7FEFF 		bl	VXISI2CWrite
 3091              	.LVL278:
3065:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
ARM GAS  /tmp/cclqPDF2.s 			page 137


 3092              		.loc 1 3065 0
 3093 01b0 4621     		movs	r1, #70
 3094 01b2 3620     		movs	r0, #54
 3095 01b4 FFF7FEFF 		bl	VXISI2CWrite
 3096              	.LVL279:
3066:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
 3097              		.loc 1 3066 0
 3098 01b8 6421     		movs	r1, #100
 3099 01ba 3720     		movs	r0, #55
 3100 01bc FFF7FEFF 		bl	VXISI2CWrite
 3101              	.LVL280:
3067:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
 3102              		.loc 1 3067 0
 3103 01c0 0021     		movs	r1, #0
 3104 01c2 3820     		movs	r0, #56
 3105 01c4 FFF7FEFF 		bl	VXISI2CWrite
 3106              	.LVL281:
3068:Src/main.c    **** 	VXISI2CWrite(0x3A,0x03);
 3107              		.loc 1 3068 0
 3108 01c8 FF21     		movs	r1, #255
 3109 01ca 3920     		movs	r0, #57
 3110 01cc FFF7FEFF 		bl	VXISI2CWrite
 3111              	.LVL282:
3069:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
 3112              		.loc 1 3069 0
 3113 01d0 0321     		movs	r1, #3
 3114 01d2 3A20     		movs	r0, #58
 3115 01d4 FFF7FEFF 		bl	VXISI2CWrite
 3116              	.LVL283:
3070:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
 3117              		.loc 1 3070 0
 3118 01d8 8021     		movs	r1, #128
 3119 01da 3B20     		movs	r0, #59
 3120 01dc FFF7FEFF 		bl	VXISI2CWrite
 3121              	.LVL284:
3071:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
 3122              		.loc 1 3071 0
 3123 01e0 8021     		movs	r1, #128
 3124 01e2 3C20     		movs	r0, #60
 3125 01e4 FFF7FEFF 		bl	VXISI2CWrite
 3126              	.LVL285:
3072:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
 3127              		.loc 1 3072 0
 3128 01e8 8021     		movs	r1, #128
 3129 01ea 3D20     		movs	r0, #61
 3130 01ec FFF7FEFF 		bl	VXISI2CWrite
 3131              	.LVL286:
3073:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
 3132              		.loc 1 3073 0
 3133 01f0 8021     		movs	r1, #128
 3134 01f2 3E20     		movs	r0, #62
 3135 01f4 FFF7FEFF 		bl	VXISI2CWrite
 3136              	.LVL287:
3074:Src/main.c    **** 	//VXISI2CWrite(0xVXISI);2CWrite(0x80
 3137              		.loc 1 3074 0
 3138 01f8 8021     		movs	r1, #128
 3139 01fa 3F20     		movs	r0, #63
ARM GAS  /tmp/cclqPDF2.s 			page 138


 3140 01fc FFF7FEFF 		bl	VXISI2CWrite
 3141              	.LVL288:
3076:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
 3142              		.loc 1 3076 0
 3143 0200 6021     		movs	r1, #96
 3144 0202 4120     		movs	r0, #65
 3145 0204 FFF7FEFF 		bl	VXISI2CWrite
 3146              	.LVL289:
3077:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
 3147              		.loc 1 3077 0
 3148 0208 5F21     		movs	r1, #95
 3149 020a 4220     		movs	r0, #66
 3150 020c FFF7FEFF 		bl	VXISI2CWrite
 3151              	.LVL290:
3078:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
 3152              		.loc 1 3078 0
 3153 0210 3721     		movs	r1, #55
 3154 0212 4320     		movs	r0, #67
 3155 0214 FFF7FEFF 		bl	VXISI2CWrite
 3156              	.LVL291:
3079:Src/main.c    **** 	VXISI2CWrite(0x45,0x04);
 3157              		.loc 1 3079 0
 3158 0218 1421     		movs	r1, #20
 3159 021a 4420     		movs	r0, #68
 3160 021c FFF7FEFF 		bl	VXISI2CWrite
 3161              	.LVL292:
3080:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
 3162              		.loc 1 3080 0
 3163 0220 0421     		movs	r1, #4
 3164 0222 4520     		movs	r0, #69
 3165 0224 FFF7FEFF 		bl	VXISI2CWrite
 3166              	.LVL293:
3081:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
 3167              		.loc 1 3081 0
 3168 0228 0021     		movs	r1, #0
 3169 022a 4620     		movs	r0, #70
 3170 022c FFF7FEFF 		bl	VXISI2CWrite
 3171              	.LVL294:
3082:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
 3172              		.loc 1 3082 0
 3173 0230 0021     		movs	r1, #0
 3174 0232 4720     		movs	r0, #71
 3175 0234 FFF7FEFF 		bl	VXISI2CWrite
 3176              	.LVL295:
3083:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
 3177              		.loc 1 3083 0
 3178 0238 0021     		movs	r1, #0
 3179 023a 4820     		movs	r0, #72
 3180 023c FFF7FEFF 		bl	VXISI2CWrite
 3181              	.LVL296:
3084:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
 3182              		.loc 1 3084 0
 3183 0240 0021     		movs	r1, #0
 3184 0242 4920     		movs	r0, #73
 3185 0244 FFF7FEFF 		bl	VXISI2CWrite
 3186              	.LVL297:
3085:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
ARM GAS  /tmp/cclqPDF2.s 			page 139


 3187              		.loc 1 3085 0
 3188 0248 2021     		movs	r1, #32
 3189 024a 4B20     		movs	r0, #75
 3190 024c FFF7FEFF 		bl	VXISI2CWrite
 3191              	.LVL298:
3086:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
 3192              		.loc 1 3086 0
 3193 0250 0021     		movs	r1, #0
 3194 0252 4C20     		movs	r0, #76
 3195 0254 FFF7FEFF 		bl	VXISI2CWrite
 3196              	.LVL299:
3087:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
 3197              		.loc 1 3087 0
 3198 0258 0021     		movs	r1, #0
 3199 025a 4D20     		movs	r0, #77
 3200 025c FFF7FEFF 		bl	VXISI2CWrite
 3201              	.LVL300:
3088:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
 3202              		.loc 1 3088 0
 3203 0260 0021     		movs	r1, #0
 3204 0262 4E20     		movs	r0, #78
 3205 0264 FFF7FEFF 		bl	VXISI2CWrite
 3206              	.LVL301:
3089:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
 3207              		.loc 1 3089 0
 3208 0268 7F21     		movs	r1, #127
 3209 026a 4F20     		movs	r0, #79
 3210 026c FFF7FEFF 		bl	VXISI2CWrite
 3211              	.LVL302:
3090:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
 3212              		.loc 1 3090 0
 3213 0270 2021     		movs	r1, #32
 3214 0272 5020     		movs	r0, #80
 3215 0274 FFF7FEFF 		bl	VXISI2CWrite
 3216              	.LVL303:
3091:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);
 3217              		.loc 1 3091 0
 3218 0278 0021     		movs	r1, #0
 3219 027a 5120     		movs	r0, #81
 3220 027c FFF7FEFF 		bl	VXISI2CWrite
 3221              	.LVL304:
3092:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);
 3222              		.loc 1 3092 0
 3223 0280 0021     		movs	r1, #0
 3224 0282 5220     		movs	r0, #82
 3225 0284 FFF7FEFF 		bl	VXISI2CWrite
 3226              	.LVL305:
3093:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);
 3227              		.loc 1 3093 0
 3228 0288 0421     		movs	r1, #4
 3229 028a 5320     		movs	r0, #83
 3230 028c FFF7FEFF 		bl	VXISI2CWrite
 3231              	.LVL306:
3094:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);
 3232              		.loc 1 3094 0
 3233 0290 0021     		movs	r1, #0
 3234 0292 5420     		movs	r0, #84
ARM GAS  /tmp/cclqPDF2.s 			page 140


 3235 0294 FFF7FEFF 		bl	VXISI2CWrite
 3236              	.LVL307:
3095:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);
 3237              		.loc 1 3095 0
 3238 0298 E021     		movs	r1, #224
 3239 029a 5520     		movs	r0, #85
 3240 029c FFF7FEFF 		bl	VXISI2CWrite
 3241              	.LVL308:
3096:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
 3242              		.loc 1 3096 0
 3243 02a0 4021     		movs	r1, #64
 3244 02a2 5620     		movs	r0, #86
 3245 02a4 FFF7FEFF 		bl	VXISI2CWrite
 3246              	.LVL309:
3097:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
 3247              		.loc 1 3097 0
 3248 02a8 0421     		movs	r1, #4
 3249 02aa 5720     		movs	r0, #87
 3250 02ac FFF7FEFF 		bl	VXISI2CWrite
 3251              	.LVL310:
3098:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
 3252              		.loc 1 3098 0
 3253 02b0 0021     		movs	r1, #0
 3254 02b2 5820     		movs	r0, #88
 3255 02b4 FFF7FEFF 		bl	VXISI2CWrite
 3256              	.LVL311:
3099:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
 3257              		.loc 1 3099 0
 3258 02b8 0821     		movs	r1, #8
 3259 02ba 5920     		movs	r0, #89
 3260 02bc FFF7FEFF 		bl	VXISI2CWrite
 3261              	.LVL312:
3100:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
 3262              		.loc 1 3100 0
 3263 02c0 1021     		movs	r1, #16
 3264 02c2 5A20     		movs	r0, #90
 3265 02c4 FFF7FEFF 		bl	VXISI2CWrite
 3266              	.LVL313:
3101:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
 3267              		.loc 1 3101 0
 3268 02c8 0021     		movs	r1, #0
 3269 02ca 5B20     		movs	r0, #91
 3270 02cc FFF7FEFF 		bl	VXISI2CWrite
 3271              	.LVL314:
3102:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);
 3272              		.loc 1 3102 0
 3273 02d0 6821     		movs	r1, #104
 3274 02d2 5C20     		movs	r0, #92
 3275 02d4 FFF7FEFF 		bl	VXISI2CWrite
 3276              	.LVL315:
3103:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);
 3277              		.loc 1 3103 0
 3278 02d8 4021     		movs	r1, #64
 3279 02da 5D20     		movs	r0, #93
 3280 02dc FFF7FEFF 		bl	VXISI2CWrite
 3281              	.LVL316:
3104:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);
ARM GAS  /tmp/cclqPDF2.s 			page 141


 3282              		.loc 1 3104 0
 3283 02e0 0821     		movs	r1, #8
 3284 02e2 5E20     		movs	r0, #94
 3285 02e4 FFF7FEFF 		bl	VXISI2CWrite
 3286              	.LVL317:
3105:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
 3287              		.loc 1 3105 0
 3288 02e8 0021     		movs	r1, #0
 3289 02ea 5F20     		movs	r0, #95
 3290 02ec FFF7FEFF 		bl	VXISI2CWrite
 3291              	.LVL318:
3106:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);
 3292              		.loc 1 3106 0
 3293 02f0 E021     		movs	r1, #224
 3294 02f2 6020     		movs	r0, #96
 3295 02f4 FFF7FEFF 		bl	VXISI2CWrite
 3296              	.LVL319:
3107:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
 3297              		.loc 1 3107 0
 3298 02f8 5421     		movs	r1, #84
 3299 02fa 6120     		movs	r0, #97
 3300 02fc FFF7FEFF 		bl	VXISI2CWrite
 3301              	.LVL320:
3108:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
 3302              		.loc 1 3108 0
 3303 0300 3321     		movs	r1, #51
 3304 0302 6220     		movs	r0, #98
 3305 0304 FFF7FEFF 		bl	VXISI2CWrite
 3306              	.LVL321:
3109:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
 3307              		.loc 1 3109 0
 3308 0308 0121     		movs	r1, #1
 3309 030a 6320     		movs	r0, #99
 3310 030c FFF7FEFF 		bl	VXISI2CWrite
 3311              	.LVL322:
3110:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
 3312              		.loc 1 3110 0
 3313 0310 FF21     		movs	r1, #255
 3314 0312 6420     		movs	r0, #100
 3315 0314 FFF7FEFF 		bl	VXISI2CWrite
 3316              	.LVL323:
3111:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
 3317              		.loc 1 3111 0
 3318 0318 0121     		movs	r1, #1
 3319 031a 6520     		movs	r0, #101
 3320 031c FFF7FEFF 		bl	VXISI2CWrite
 3321              	.LVL324:
3112:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
 3322              		.loc 1 3112 0
 3323 0320 FF21     		movs	r1, #255
 3324 0322 6620     		movs	r0, #102
 3325 0324 FFF7FEFF 		bl	VXISI2CWrite
 3326              	.LVL325:
3113:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
 3327              		.loc 1 3113 0
 3328 0328 8921     		movs	r1, #137
 3329 032a 6720     		movs	r0, #103
ARM GAS  /tmp/cclqPDF2.s 			page 142


 3330 032c FFF7FEFF 		bl	VXISI2CWrite
 3331              	.LVL326:
3114:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
 3332              		.loc 1 3114 0
 3333 0330 AB21     		movs	r1, #171
 3334 0332 6820     		movs	r0, #104
 3335 0334 FFF7FEFF 		bl	VXISI2CWrite
 3336              	.LVL327:
3115:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
 3337              		.loc 1 3115 0
 3338 0338 8821     		movs	r1, #136
 3339 033a 6920     		movs	r0, #105
 3340 033c FFF7FEFF 		bl	VXISI2CWrite
 3341              	.LVL328:
3116:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
 3342              		.loc 1 3116 0
 3343 0340 6E21     		movs	r1, #110
 3344 0342 6A20     		movs	r0, #106
 3345 0344 FFF7FEFF 		bl	VXISI2CWrite
 3346              	.LVL329:
3117:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
 3347              		.loc 1 3117 0
 3348 0348 6E21     		movs	r1, #110
 3349 034a 6B20     		movs	r0, #107
 3350 034c FFF7FEFF 		bl	VXISI2CWrite
 3351              	.LVL330:
3118:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
 3352              		.loc 1 3118 0
 3353 0350 6E21     		movs	r1, #110
 3354 0352 6C20     		movs	r0, #108
 3355 0354 FFF7FEFF 		bl	VXISI2CWrite
 3356              	.LVL331:
3119:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
 3357              		.loc 1 3119 0
 3358 0358 0021     		movs	r1, #0
 3359 035a 6D20     		movs	r0, #109
 3360 035c FFF7FEFF 		bl	VXISI2CWrite
 3361              	.LVL332:
3120:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
 3362              		.loc 1 3120 0
 3363 0360 0021     		movs	r1, #0
 3364 0362 6E20     		movs	r0, #110
 3365 0364 FFF7FEFF 		bl	VXISI2CWrite
 3366              	.LVL333:
3121:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
 3367              		.loc 1 3121 0
 3368 0368 0021     		movs	r1, #0
 3369 036a 6F20     		movs	r0, #111
 3370 036c FFF7FEFF 		bl	VXISI2CWrite
 3371              	.LVL334:
3122:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
 3372              		.loc 1 3122 0
 3373 0370 0021     		movs	r1, #0
 3374 0372 7020     		movs	r0, #112
 3375 0374 FFF7FEFF 		bl	VXISI2CWrite
 3376              	.LVL335:
3123:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
ARM GAS  /tmp/cclqPDF2.s 			page 143


 3377              		.loc 1 3123 0
 3378 0378 0021     		movs	r1, #0
 3379 037a 7120     		movs	r0, #113
 3380 037c FFF7FEFF 		bl	VXISI2CWrite
 3381              	.LVL336:
3124:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
 3382              		.loc 1 3124 0
 3383 0380 0021     		movs	r1, #0
 3384 0382 7220     		movs	r0, #114
 3385 0384 FFF7FEFF 		bl	VXISI2CWrite
 3386              	.LVL337:
3125:Src/main.c    **** 	VXISI2CWrite(0x74,0x00);
 3387              		.loc 1 3125 0
 3388 0388 0021     		movs	r1, #0
 3389 038a 7320     		movs	r0, #115
 3390 038c FFF7FEFF 		bl	VXISI2CWrite
 3391              	.LVL338:
3126:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
 3392              		.loc 1 3126 0
 3393 0390 0021     		movs	r1, #0
 3394 0392 7420     		movs	r0, #116
 3395 0394 FFF7FEFF 		bl	VXISI2CWrite
 3396              	.LVL339:
3127:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
 3397              		.loc 1 3127 0
 3398 0398 FF21     		movs	r1, #255
 3399 039a 7520     		movs	r0, #117
 3400 039c FFF7FEFF 		bl	VXISI2CWrite
 3401              	.LVL340:
3128:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
 3402              		.loc 1 3128 0
 3403 03a0 FF21     		movs	r1, #255
 3404 03a2 7620     		movs	r0, #118
 3405 03a4 FFF7FEFF 		bl	VXISI2CWrite
 3406              	.LVL341:
3129:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
 3407              		.loc 1 3129 0
 3408 03a8 FF21     		movs	r1, #255
 3409 03aa 7720     		movs	r0, #119
 3410 03ac FFF7FEFF 		bl	VXISI2CWrite
 3411              	.LVL342:
3130:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
 3412              		.loc 1 3130 0
 3413 03b0 FF21     		movs	r1, #255
 3414 03b2 7820     		movs	r0, #120
 3415 03b4 FFF7FEFF 		bl	VXISI2CWrite
 3416              	.LVL343:
3131:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
 3417              		.loc 1 3131 0
 3418 03b8 FF21     		movs	r1, #255
 3419 03ba 7920     		movs	r0, #121
 3420 03bc FFF7FEFF 		bl	VXISI2CWrite
 3421              	.LVL344:
3132:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
 3422              		.loc 1 3132 0
 3423 03c0 FF21     		movs	r1, #255
 3424 03c2 7A20     		movs	r0, #122
ARM GAS  /tmp/cclqPDF2.s 			page 144


 3425 03c4 FFF7FEFF 		bl	VXISI2CWrite
 3426              	.LVL345:
3133:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
 3427              		.loc 1 3133 0
 3428 03c8 FF21     		movs	r1, #255
 3429 03ca 7B20     		movs	r0, #123
 3430 03cc FFF7FEFF 		bl	VXISI2CWrite
 3431              	.LVL346:
3134:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
 3432              		.loc 1 3134 0
 3433 03d0 FF21     		movs	r1, #255
 3434 03d2 7C20     		movs	r0, #124
 3435 03d4 FFF7FEFF 		bl	VXISI2CWrite
 3436              	.LVL347:
3135:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
 3437              		.loc 1 3135 0
 3438 03d8 F021     		movs	r1, #240
 3439 03da 7D20     		movs	r0, #125
 3440 03dc FFF7FEFF 		bl	VXISI2CWrite
 3441              	.LVL348:
3136:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
 3442              		.loc 1 3136 0
 3443 03e0 8021     		movs	r1, #128
 3444 03e2 7E20     		movs	r0, #126
 3445 03e4 FFF7FEFF 		bl	VXISI2CWrite
 3446              	.LVL349:
3137:Src/main.c    **** 	VXISI2CWrite(0x80,0x00);
 3447              		.loc 1 3137 0
 3448 03e8 0021     		movs	r1, #0
 3449 03ea 7F20     		movs	r0, #127
 3450 03ec FFF7FEFF 		bl	VXISI2CWrite
 3451              	.LVL350:
3138:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);
 3452              		.loc 1 3138 0
 3453 03f0 0021     		movs	r1, #0
 3454 03f2 8020     		movs	r0, #128
 3455 03f4 FFF7FEFF 		bl	VXISI2CWrite
 3456              	.LVL351:
 3457 03f8 02E0     		b	.L189
 3458              	.L190:
 3459 03fa 00BF     		.align	2
 3460              	.L188:
 3461 03fc 00000000 		.word	.LC34
 3462              	.L189:
3139:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
 3463              		.loc 1 3139 0
 3464 0400 3421     		movs	r1, #52
 3465 0402 8120     		movs	r0, #129
 3466 0404 FFF7FEFF 		bl	VXISI2CWrite
 3467              	.LVL352:
3140:Src/main.c    **** 	VXISI2CWrite(0x83,0x05);
 3468              		.loc 1 3140 0
 3469 0408 4021     		movs	r1, #64
 3470 040a 8220     		movs	r0, #130
 3471 040c FFF7FEFF 		bl	VXISI2CWrite
 3472              	.LVL353:
3141:Src/main.c    **** 	VXISI2CWrite(0x84,0x59);
ARM GAS  /tmp/cclqPDF2.s 			page 145


 3473              		.loc 1 3141 0
 3474 0410 0521     		movs	r1, #5
 3475 0412 8320     		movs	r0, #131
 3476 0414 FFF7FEFF 		bl	VXISI2CWrite
 3477              	.LVL354:
3142:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
 3478              		.loc 1 3142 0
 3479 0418 5921     		movs	r1, #89
 3480 041a 8420     		movs	r0, #132
 3481 041c FFF7FEFF 		bl	VXISI2CWrite
 3482              	.LVL355:
3143:Src/main.c    **** 	VXISI2CWrite(0x86,0x04);
 3483              		.loc 1 3143 0
 3484 0420 FD21     		movs	r1, #253
 3485 0422 8520     		movs	r0, #133
 3486 0424 FFF7FEFF 		bl	VXISI2CWrite
 3487              	.LVL356:
3144:Src/main.c    **** 	VXISI2CWrite(0x87,0x24);
 3488              		.loc 1 3144 0
 3489 0428 0421     		movs	r1, #4
 3490 042a 8620     		movs	r0, #134
 3491 042c FFF7FEFF 		bl	VXISI2CWrite
 3492              	.LVL357:
3145:Src/main.c    **** 	VXISI2CWrite(0x88,0x94);
 3493              		.loc 1 3145 0
 3494 0430 2421     		movs	r1, #36
 3495 0432 8720     		movs	r0, #135
 3496 0434 FFF7FEFF 		bl	VXISI2CWrite
 3497              	.LVL358:
3146:Src/main.c    **** 	VXISI2CWrite(0x89,0x58);
 3498              		.loc 1 3146 0
 3499 0438 9421     		movs	r1, #148
 3500 043a 8820     		movs	r0, #136
 3501 043c FFF7FEFF 		bl	VXISI2CWrite
 3502              	.LVL359:
3147:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
 3503              		.loc 1 3147 0
 3504 0440 5821     		movs	r1, #88
 3505 0442 8920     		movs	r0, #137
 3506 0444 FFF7FEFF 		bl	VXISI2CWrite
 3507              	.LVL360:
3148:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
 3508              		.loc 1 3148 0
 3509 0448 0021     		movs	r1, #0
 3510 044a 8A20     		movs	r0, #138
 3511 044c FFF7FEFF 		bl	VXISI2CWrite
 3512              	.LVL361:
3149:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
 3513              		.loc 1 3149 0
 3514 0450 7E21     		movs	r1, #126
 3515 0452 8B20     		movs	r0, #139
 3516 0454 FFF7FEFF 		bl	VXISI2CWrite
 3517              	.LVL362:
3150:Src/main.c    **** 	VXISI2CWrite(0x8D,0x2C);
 3518              		.loc 1 3150 0
 3519 0458 0321     		movs	r1, #3
 3520 045a 8C20     		movs	r0, #140
ARM GAS  /tmp/cclqPDF2.s 			page 146


 3521 045c FFF7FEFF 		bl	VXISI2CWrite
 3522              	.LVL363:
3151:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
 3523              		.loc 1 3151 0
 3524 0460 2C21     		movs	r1, #44
 3525 0462 8D20     		movs	r0, #141
 3526 0464 FFF7FEFF 		bl	VXISI2CWrite
 3527              	.LVL364:
3152:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
 3528              		.loc 1 3152 0
 3529 0468 8C21     		movs	r1, #140
 3530 046a 8E20     		movs	r0, #142
 3531 046c FFF7FEFF 		bl	VXISI2CWrite
 3532              	.LVL365:
3153:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
 3533              		.loc 1 3153 0
 3534 0470 0021     		movs	r1, #0
 3535 0472 8F20     		movs	r0, #143
 3536 0474 FFF7FEFF 		bl	VXISI2CWrite
 3537              	.LVL366:
3154:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
 3538              		.loc 1 3154 0
 3539 0478 CC21     		movs	r1, #204
 3540 047a 9020     		movs	r0, #144
 3541 047c FFF7FEFF 		bl	VXISI2CWrite
 3542              	.LVL367:
3155:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
 3543              		.loc 1 3155 0
 3544 0480 4121     		movs	r1, #65
 3545 0482 9120     		movs	r0, #145
 3546 0484 FFF7FEFF 		bl	VXISI2CWrite
 3547              	.LVL368:
3156:Src/main.c    **** 	VXISI2CWrite(0x93,0x31);
 3548              		.loc 1 3156 0
 3549 0488 C421     		movs	r1, #196
 3550 048a 9220     		movs	r0, #146
 3551 048c FFF7FEFF 		bl	VXISI2CWrite
 3552              	.LVL369:
3157:Src/main.c    **** 	VXISI2CWrite(0x94,0x87);
 3553              		.loc 1 3157 0
 3554 0490 3121     		movs	r1, #49
 3555 0492 9320     		movs	r0, #147
 3556 0494 FFF7FEFF 		bl	VXISI2CWrite
 3557              	.LVL370:
3158:Src/main.c    **** 	VXISI2CWrite(0x95,0xD0);
 3558              		.loc 1 3158 0
 3559 0498 8721     		movs	r1, #135
 3560 049a 9420     		movs	r0, #148
 3561 049c FFF7FEFF 		bl	VXISI2CWrite
 3562              	.LVL371:
3159:Src/main.c    **** 	VXISI2CWrite(0x96,0xF3);
 3563              		.loc 1 3159 0
 3564 04a0 D021     		movs	r1, #208
 3565 04a2 9520     		movs	r0, #149
 3566 04a4 FFF7FEFF 		bl	VXISI2CWrite
 3567              	.LVL372:
3160:Src/main.c    **** 	VXISI2CWrite(0x97,0x20);
ARM GAS  /tmp/cclqPDF2.s 			page 147


 3568              		.loc 1 3160 0
 3569 04a8 F321     		movs	r1, #243
 3570 04aa 9620     		movs	r0, #150
 3571 04ac FFF7FEFF 		bl	VXISI2CWrite
 3572              	.LVL373:
3161:Src/main.c    **** 	VXISI2CWrite(0x98,0x11);
 3573              		.loc 1 3161 0
 3574 04b0 2021     		movs	r1, #32
 3575 04b2 9720     		movs	r0, #151
 3576 04b4 FFF7FEFF 		bl	VXISI2CWrite
 3577              	.LVL374:
3162:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
 3578              		.loc 1 3162 0
 3579 04b8 1121     		movs	r1, #17
 3580 04ba 9820     		movs	r0, #152
 3581 04bc FFF7FEFF 		bl	VXISI2CWrite
 3582              	.LVL375:
3163:Src/main.c    **** 	VXISI2CWrite(0x9A,0xFF);
 3583              		.loc 1 3163 0
 3584 04c0 9021     		movs	r1, #144
 3585 04c2 9920     		movs	r0, #153
 3586 04c4 FFF7FEFF 		bl	VXISI2CWrite
 3587              	.LVL376:
3164:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
 3588              		.loc 1 3164 0
 3589 04c8 FF21     		movs	r1, #255
 3590 04ca 9A20     		movs	r0, #154
 3591 04cc FFF7FEFF 		bl	VXISI2CWrite
 3592              	.LVL377:
3165:Src/main.c    **** 	VXISI2CWrite(0x9C,0x0A);
 3593              		.loc 1 3165 0
 3594 04d0 0421     		movs	r1, #4
 3595 04d2 9B20     		movs	r0, #155
 3596 04d4 FFF7FEFF 		bl	VXISI2CWrite
 3597              	.LVL378:
3166:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
 3598              		.loc 1 3166 0
 3599 04d8 0A21     		movs	r1, #10
 3600 04da 9C20     		movs	r0, #156
 3601 04dc FFF7FEFF 		bl	VXISI2CWrite
 3602              	.LVL379:
3167:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
 3603              		.loc 1 3167 0
 3604 04e0 0021     		movs	r1, #0
 3605 04e2 9D20     		movs	r0, #157
 3606 04e4 FFF7FEFF 		bl	VXISI2CWrite
 3607              	.LVL380:
3168:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
 3608              		.loc 1 3168 0
 3609 04e8 0421     		movs	r1, #4
 3610 04ea 9E20     		movs	r0, #158
 3611 04ec FFF7FEFF 		bl	VXISI2CWrite
 3612              	.LVL381:
3169:Src/main.c    **** 	VXISI2CWrite(0xA0,0x2F);
 3613              		.loc 1 3169 0
 3614 04f0 6521     		movs	r1, #101
 3615 04f2 9F20     		movs	r0, #159
ARM GAS  /tmp/cclqPDF2.s 			page 148


 3616 04f4 FFF7FEFF 		bl	VXISI2CWrite
 3617              	.LVL382:
3170:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD9);
 3618              		.loc 1 3170 0
 3619 04f8 2F21     		movs	r1, #47
 3620 04fa A020     		movs	r0, #160
 3621 04fc FFF7FEFF 		bl	VXISI2CWrite
 3622              	.LVL383:
3171:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
 3623              		.loc 1 3171 0
 3624 0500 D921     		movs	r1, #217
 3625 0502 A120     		movs	r0, #161
 3626 0504 FFF7FEFF 		bl	VXISI2CWrite
 3627              	.LVL384:
3172:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
 3628              		.loc 1 3172 0
 3629 0508 9821     		movs	r1, #152
 3630 050a A220     		movs	r0, #162
 3631 050c FFF7FEFF 		bl	VXISI2CWrite
 3632              	.LVL385:
3173:Src/main.c    **** 	VXISI2CWrite(0xA4,0xE1);
 3633              		.loc 1 3173 0
 3634 0510 8721     		movs	r1, #135
 3635 0512 A320     		movs	r0, #163
 3636 0514 FFF7FEFF 		bl	VXISI2CWrite
 3637              	.LVL386:
3174:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);
 3638              		.loc 1 3174 0
 3639 0518 E121     		movs	r1, #225
 3640 051a A420     		movs	r0, #164
 3641 051c FFF7FEFF 		bl	VXISI2CWrite
 3642              	.LVL387:
3175:Src/main.c    **** 	VXISI2CWrite(0xA6,0xC2);
 3643              		.loc 1 3175 0
 3644 0520 3821     		movs	r1, #56
 3645 0522 A520     		movs	r0, #165
 3646 0524 FFF7FEFF 		bl	VXISI2CWrite
 3647              	.LVL388:
3176:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
 3648              		.loc 1 3176 0
 3649 0528 C221     		movs	r1, #194
 3650 052a A620     		movs	r0, #166
 3651 052c FFF7FEFF 		bl	VXISI2CWrite
 3652              	.LVL389:
3177:Src/main.c    **** 	VXISI2CWrite(0xA8,0x00);
 3653              		.loc 1 3177 0
 3654 0530 7021     		movs	r1, #112
 3655 0532 A720     		movs	r0, #167
 3656 0534 FFF7FEFF 		bl	VXISI2CWrite
 3657              	.LVL390:
3178:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
 3658              		.loc 1 3178 0
 3659 0538 0021     		movs	r1, #0
 3660 053a A820     		movs	r0, #168
 3661 053c FFF7FEFF 		bl	VXISI2CWrite
 3662              	.LVL391:
3179:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);
ARM GAS  /tmp/cclqPDF2.s 			page 149


 3663              		.loc 1 3179 0
 3664 0540 1E21     		movs	r1, #30
 3665 0542 A920     		movs	r0, #169
 3666 0544 FFF7FEFF 		bl	VXISI2CWrite
 3667              	.LVL392:
3180:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
 3668              		.loc 1 3180 0
 3669 0548 2E21     		movs	r1, #46
 3670 054a AA20     		movs	r0, #170
 3671 054c FFF7FEFF 		bl	VXISI2CWrite
 3672              	.LVL393:
3181:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);
 3673              		.loc 1 3181 0
 3674 0550 0021     		movs	r1, #0
 3675 0552 AB20     		movs	r0, #171
 3676 0554 FFF7FEFF 		bl	VXISI2CWrite
 3677              	.LVL394:
3182:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF3);
 3678              		.loc 1 3182 0
 3679 0558 8421     		movs	r1, #132
 3680 055a AC20     		movs	r0, #172
 3681 055c FFF7FEFF 		bl	VXISI2CWrite
 3682              	.LVL395:
3183:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
 3683              		.loc 1 3183 0
 3684 0560 F321     		movs	r1, #243
 3685 0562 AD20     		movs	r0, #173
 3686 0564 FFF7FEFF 		bl	VXISI2CWrite
 3687              	.LVL396:
3184:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
 3688              		.loc 1 3184 0
 3689 0568 6521     		movs	r1, #101
 3690 056a AE20     		movs	r0, #174
 3691 056c FFF7FEFF 		bl	VXISI2CWrite
 3692              	.LVL397:
3185:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
 3693              		.loc 1 3185 0
 3694 0570 9921     		movs	r1, #153
 3695 0572 AF20     		movs	r0, #175
 3696 0574 FFF7FEFF 		bl	VXISI2CWrite
 3697              	.LVL398:
3186:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
 3698              		.loc 1 3186 0
 3699 0578 0021     		movs	r1, #0
 3700 057a B020     		movs	r0, #176
 3701 057c FFF7FEFF 		bl	VXISI2CWrite
 3702              	.LVL399:
3187:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
 3703              		.loc 1 3187 0
 3704 0580 0021     		movs	r1, #0
 3705 0582 B120     		movs	r0, #177
 3706 0584 FFF7FEFF 		bl	VXISI2CWrite
 3707              	.LVL400:
3188:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
 3708              		.loc 1 3188 0
 3709 0588 0021     		movs	r1, #0
 3710 058a B220     		movs	r0, #178
ARM GAS  /tmp/cclqPDF2.s 			page 150


 3711 058c FFF7FEFF 		bl	VXISI2CWrite
 3712              	.LVL401:
3189:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
 3713              		.loc 1 3189 0
 3714 0590 0021     		movs	r1, #0
 3715 0592 B320     		movs	r0, #179
 3716 0594 FFF7FEFF 		bl	VXISI2CWrite
 3717              	.LVL402:
3190:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
 3718              		.loc 1 3190 0
 3719 0598 0021     		movs	r1, #0
 3720 059a B420     		movs	r0, #180
 3721 059c FFF7FEFF 		bl	VXISI2CWrite
 3722              	.LVL403:
3191:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
 3723              		.loc 1 3191 0
 3724 05a0 0021     		movs	r1, #0
 3725 05a2 B520     		movs	r0, #181
 3726 05a4 FFF7FEFF 		bl	VXISI2CWrite
 3727              	.LVL404:
3192:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
 3728              		.loc 1 3192 0
 3729 05a8 0021     		movs	r1, #0
 3730 05aa B620     		movs	r0, #182
 3731 05ac FFF7FEFF 		bl	VXISI2CWrite
 3732              	.LVL405:
3193:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
 3733              		.loc 1 3193 0
 3734 05b0 8021     		movs	r1, #128
 3735 05b2 B820     		movs	r0, #184
 3736 05b4 FFF7FEFF 		bl	VXISI2CWrite
 3737              	.LVL406:
3194:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
 3738              		.loc 1 3194 0
 3739 05b8 0021     		movs	r1, #0
 3740 05ba B920     		movs	r0, #185
 3741 05bc FFF7FEFF 		bl	VXISI2CWrite
 3742              	.LVL407:
3195:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
 3743              		.loc 1 3195 0
 3744 05c0 0121     		movs	r1, #1
 3745 05c2 BA20     		movs	r0, #186
 3746 05c4 FFF7FEFF 		bl	VXISI2CWrite
 3747              	.LVL408:
3196:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
 3748              		.loc 1 3196 0
 3749 05c8 0021     		movs	r1, #0
 3750 05ca BB20     		movs	r0, #187
 3751 05cc FFF7FEFF 		bl	VXISI2CWrite
 3752              	.LVL409:
3197:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
 3753              		.loc 1 3197 0
 3754 05d0 9021     		movs	r1, #144
 3755 05d2 BC20     		movs	r0, #188
 3756 05d4 FFF7FEFF 		bl	VXISI2CWrite
 3757              	.LVL410:
3198:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
ARM GAS  /tmp/cclqPDF2.s 			page 151


 3758              		.loc 1 3198 0
 3759 05d8 0121     		movs	r1, #1
 3760 05da BD20     		movs	r0, #189
 3761 05dc FFF7FEFF 		bl	VXISI2CWrite
 3762              	.LVL411:
3199:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
 3763              		.loc 1 3199 0
 3764 05e0 2C21     		movs	r1, #44
 3765 05e2 BE20     		movs	r0, #190
 3766 05e4 FFF7FEFF 		bl	VXISI2CWrite
 3767              	.LVL412:
3200:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
 3768              		.loc 1 3200 0
 3769 05e8 0021     		movs	r1, #0
 3770 05ea C020     		movs	r0, #192
 3771 05ec FFF7FEFF 		bl	VXISI2CWrite
 3772              	.LVL413:
3201:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
 3773              		.loc 1 3201 0
 3774 05f0 2021     		movs	r1, #32
 3775 05f2 C120     		movs	r0, #193
 3776 05f4 FFF7FEFF 		bl	VXISI2CWrite
 3777              	.LVL414:
3202:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
 3778              		.loc 1 3202 0
 3779 05f8 2021     		movs	r1, #32
 3780 05fa C220     		movs	r0, #194
 3781 05fc FFF7FEFF 		bl	VXISI2CWrite
 3782              	.LVL415:
3203:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
 3783              		.loc 1 3203 0
 3784 0600 2021     		movs	r1, #32
 3785 0602 C320     		movs	r0, #195
 3786 0604 FFF7FEFF 		bl	VXISI2CWrite
 3787              	.LVL416:
3204:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
 3788              		.loc 1 3204 0
 3789 0608 2021     		movs	r1, #32
 3790 060a C420     		movs	r0, #196
 3791 060c FFF7FEFF 		bl	VXISI2CWrite
 3792              	.LVL417:
3205:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
 3793              		.loc 1 3205 0
 3794 0610 2021     		movs	r1, #32
 3795 0612 C520     		movs	r0, #197
 3796 0614 FFF7FEFF 		bl	VXISI2CWrite
 3797              	.LVL418:
3206:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
 3798              		.loc 1 3206 0
 3799 0618 FF21     		movs	r1, #255
 3800 061a D020     		movs	r0, #208
 3801 061c FFF7FEFF 		bl	VXISI2CWrite
 3802              	.LVL419:
3207:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
 3803              		.loc 1 3207 0
 3804 0620 3F21     		movs	r1, #63
 3805 0622 D120     		movs	r0, #209
ARM GAS  /tmp/cclqPDF2.s 			page 152


 3806 0624 FFF7FEFF 		bl	VXISI2CWrite
 3807              	.LVL420:
3208:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
 3808              		.loc 1 3208 0
 3809 0628 C221     		movs	r1, #194
 3810 062a D220     		movs	r0, #210
 3811 062c FFF7FEFF 		bl	VXISI2CWrite
 3812              	.LVL421:
3209:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
 3813              		.loc 1 3209 0
 3814 0630 3F21     		movs	r1, #63
 3815 0632 D320     		movs	r0, #211
 3816 0634 FFF7FEFF 		bl	VXISI2CWrite
 3817              	.LVL422:
3210:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
 3818              		.loc 1 3210 0
 3819 0638 0021     		movs	r1, #0
 3820 063a D420     		movs	r0, #212
 3821 063c FFF7FEFF 		bl	VXISI2CWrite
 3822              	.LVL423:
3211:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
 3823              		.loc 1 3211 0
 3824 0640 0021     		movs	r1, #0
 3825 0642 D520     		movs	r0, #213
 3826 0644 FFF7FEFF 		bl	VXISI2CWrite
 3827              	.LVL424:
3212:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
 3828              		.loc 1 3212 0
 3829 0648 0021     		movs	r1, #0
 3830 064a D620     		movs	r0, #214
 3831 064c FFF7FEFF 		bl	VXISI2CWrite
 3832              	.LVL425:
3213:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
 3833              		.loc 1 3213 0
 3834 0650 1021     		movs	r1, #16
 3835 0652 D720     		movs	r0, #215
 3836 0654 FFF7FEFF 		bl	VXISI2CWrite
 3837              	.LVL426:
3214:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
 3838              		.loc 1 3214 0
 3839 0658 0021     		movs	r1, #0
 3840 065a D820     		movs	r0, #216
 3841 065c FFF7FEFF 		bl	VXISI2CWrite
 3842              	.LVL427:
3215:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);
 3843              		.loc 1 3215 0
 3844 0660 7721     		movs	r1, #119
 3845 0662 DC20     		movs	r0, #220
 3846 0664 FFF7FEFF 		bl	VXISI2CWrite
 3847              	.LVL428:
3216:Src/main.c    **** 	VXISI2CWrite(0xDE,0xAF);
 3848              		.loc 1 3216 0
 3849 0668 0021     		movs	r1, #0
 3850 066a DD20     		movs	r0, #221
 3851 066c FFF7FEFF 		bl	VXISI2CWrite
 3852              	.LVL429:
3217:Src/main.c    **** 	VXISI2CWrite(0xDF,0xEF);
ARM GAS  /tmp/cclqPDF2.s 			page 153


 3853              		.loc 1 3217 0
 3854 0670 AF21     		movs	r1, #175
 3855 0672 DE20     		movs	r0, #222
 3856 0674 FFF7FEFF 		bl	VXISI2CWrite
 3857              	.LVL430:
3218:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
 3858              		.loc 1 3218 0
 3859 0678 EF21     		movs	r1, #239
 3860 067a DF20     		movs	r0, #223
 3861 067c FFF7FEFF 		bl	VXISI2CWrite
 3862              	.LVL431:
3219:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
 3863              		.loc 1 3219 0
 3864 0680 0021     		movs	r1, #0
 3865 0682 E020     		movs	r0, #224
 3866 0684 FFF7FEFF 		bl	VXISI2CWrite
 3867              	.LVL432:
3220:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
 3868              		.loc 1 3220 0
 3869 0688 0021     		movs	r1, #0
 3870 068a E120     		movs	r0, #225
 3871 068c FFF7FEFF 		bl	VXISI2CWrite
 3872              	.LVL433:
3221:Src/main.c    **** 	VXISI2CWrite(0xE3,0x12);
 3873              		.loc 1 3221 0
 3874 0690 0021     		movs	r1, #0
 3875 0692 E220     		movs	r0, #226
 3876 0694 FFF7FEFF 		bl	VXISI2CWrite
 3877              	.LVL434:
3222:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE2);
 3878              		.loc 1 3222 0
 3879 0698 1221     		movs	r1, #18
 3880 069a E320     		movs	r0, #227
 3881 069c FFF7FEFF 		bl	VXISI2CWrite
 3882              	.LVL435:
3223:Src/main.c    **** 	VXISI2CWrite(0xE5,0xD0);
 3883              		.loc 1 3223 0
 3884 06a0 E221     		movs	r1, #226
 3885 06a2 E420     		movs	r0, #228
 3886 06a4 FFF7FEFF 		bl	VXISI2CWrite
 3887              	.LVL436:
3224:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
 3888              		.loc 1 3224 0
 3889 06a8 D021     		movs	r1, #208
 3890 06aa E520     		movs	r0, #229
 3891 06ac FFF7FEFF 		bl	VXISI2CWrite
 3892              	.LVL437:
3225:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
 3893              		.loc 1 3225 0
 3894 06b0 0021     		movs	r1, #0
 3895 06b2 E620     		movs	r0, #230
 3896 06b4 FFF7FEFF 		bl	VXISI2CWrite
 3897              	.LVL438:
3226:Src/main.c    **** 	VXISI2CWrite(0xE8,0x0F);
 3898              		.loc 1 3226 0
 3899 06b8 0021     		movs	r1, #0
 3900 06ba E720     		movs	r0, #231
ARM GAS  /tmp/cclqPDF2.s 			page 154


 3901 06bc FFF7FEFF 		bl	VXISI2CWrite
 3902              	.LVL439:
3227:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
 3903              		.loc 1 3227 0
 3904 06c0 0F21     		movs	r1, #15
 3905 06c2 E820     		movs	r0, #232
 3906 06c4 FFF7FEFF 		bl	VXISI2CWrite
 3907              	.LVL440:
3228:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
 3908              		.loc 1 3228 0
 3909 06c8 0021     		movs	r1, #0
 3910 06ca E920     		movs	r0, #233
 3911 06cc FFF7FEFF 		bl	VXISI2CWrite
 3912              	.LVL441:
3229:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
 3913              		.loc 1 3229 0
 3914 06d0 0021     		movs	r1, #0
 3915 06d2 EA20     		movs	r0, #234
 3916 06d4 FFF7FEFF 		bl	VXISI2CWrite
 3917              	.LVL442:
3230:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
 3918              		.loc 1 3230 0
 3919 06d8 0021     		movs	r1, #0
 3920 06da EB20     		movs	r0, #235
 3921 06dc FFF7FEFF 		bl	VXISI2CWrite
 3922              	.LVL443:
3231:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
 3923              		.loc 1 3231 0
 3924 06e0 8821     		movs	r1, #136
 3925 06e2 EC20     		movs	r0, #236
 3926 06e4 FFF7FEFF 		bl	VXISI2CWrite
 3927              	.LVL444:
3232:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
 3928              		.loc 1 3232 0
 3929 06e8 0021     		movs	r1, #0
 3930 06ea ED20     		movs	r0, #237
 3931 06ec FFF7FEFF 		bl	VXISI2CWrite
 3932              	.LVL445:
3233:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
 3933              		.loc 1 3233 0
 3934 06f0 0021     		movs	r1, #0
 3935 06f2 EE20     		movs	r0, #238
 3936 06f4 FFF7FEFF 		bl	VXISI2CWrite
 3937              	.LVL446:
3234:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
 3938              		.loc 1 3234 0
 3939 06f8 0021     		movs	r1, #0
 3940 06fa EF20     		movs	r0, #239
 3941 06fc FFF7FEFF 		bl	VXISI2CWrite
 3942              	.LVL447:
3235:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
 3943              		.loc 1 3235 0
 3944 0700 3021     		movs	r1, #48
 3945 0702 F020     		movs	r0, #240
 3946 0704 FFF7FEFF 		bl	VXISI2CWrite
 3947              	.LVL448:
3236:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
ARM GAS  /tmp/cclqPDF2.s 			page 155


 3948              		.loc 1 3236 0
 3949 0708 4321     		movs	r1, #67
 3950 070a F120     		movs	r0, #241
 3951 070c FFF7FEFF 		bl	VXISI2CWrite
 3952              	.LVL449:
3237:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
 3953              		.loc 1 3237 0
 3954 0710 1F21     		movs	r1, #31
 3955 0712 F220     		movs	r0, #242
 3956 0714 FFF7FEFF 		bl	VXISI2CWrite
 3957              	.LVL450:
3238:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
 3958              		.loc 1 3238 0
 3959 0718 1F21     		movs	r1, #31
 3960 071a F320     		movs	r0, #243
 3961 071c FFF7FEFF 		bl	VXISI2CWrite
 3962              	.LVL451:
3239:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
 3963              		.loc 1 3239 0
 3964 0720 2221     		movs	r1, #34
 3965 0722 F420     		movs	r0, #244
 3966 0724 FFF7FEFF 		bl	VXISI2CWrite
 3967              	.LVL452:
3240:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
 3968              		.loc 1 3240 0
 3969 0728 7321     		movs	r1, #115
 3970 072a F520     		movs	r0, #245
 3971 072c FFF7FEFF 		bl	VXISI2CWrite
 3972              	.LVL453:
3241:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
 3973              		.loc 1 3241 0
 3974 0730 5321     		movs	r1, #83
 3975 0732 F620     		movs	r0, #246
 3976 0734 FFF7FEFF 		bl	VXISI2CWrite
 3977              	.LVL454:
3242:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
 3978              		.loc 1 3242 0
 3979 0738 8021     		movs	r1, #128
 3980 073a F720     		movs	r0, #247
 3981 073c FFF7FEFF 		bl	VXISI2CWrite
 3982              	.LVL455:
3243:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
 3983              		.loc 1 3243 0
 3984 0740 0121     		movs	r1, #1
 3985 0742 F820     		movs	r0, #248
 3986 0744 FFF7FEFF 		bl	VXISI2CWrite
 3987              	.LVL456:
3244:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
 3988              		.loc 1 3244 0
 3989 0748 0121     		movs	r1, #1
 3990 074a F920     		movs	r0, #249
 3991 074c FFF7FEFF 		bl	VXISI2CWrite
 3992              	.LVL457:
3245:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
 3993              		.loc 1 3245 0
 3994 0750 0021     		movs	r1, #0
 3995 0752 FA20     		movs	r0, #250
ARM GAS  /tmp/cclqPDF2.s 			page 156


 3996 0754 FFF7FEFF 		bl	VXISI2CWrite
 3997              	.LVL458:
3246:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
 3998              		.loc 1 3246 0
 3999 0758 0021     		movs	r1, #0
 4000 075a FB20     		movs	r0, #251
 4001 075c FFF7FEFF 		bl	VXISI2CWrite
 4002              	.LVL459:
3247:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
 4003              		.loc 1 3247 0
 4004 0760 0021     		movs	r1, #0
 4005 0762 FC20     		movs	r0, #252
 4006 0764 FFF7FEFF 		bl	VXISI2CWrite
 4007              	.LVL460:
3248:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
 4008              		.loc 1 3248 0
 4009 0768 7021     		movs	r1, #112
 4010 076a FD20     		movs	r0, #253
 4011 076c FFF7FEFF 		bl	VXISI2CWrite
 4012              	.LVL461:
3249:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
 4013              		.loc 1 3249 0
 4014 0770 4021     		movs	r1, #64
 4015 0772 FE20     		movs	r0, #254
 4016 0774 FFF7FEFF 		bl	VXISI2CWrite
 4017              	.LVL462:
3250:Src/main.c    **** 					 
 4018              		.loc 1 3250 0
 4019 0778 0721     		movs	r1, #7
 4020 077a FF20     		movs	r0, #255
 4021 077c FFF7FEFF 		bl	VXISI2CWrite
 4022              	.LVL463:
3254:Src/main.c    **** 
 4023              		.loc 1 3254 0
 4024 0780 08BD     		pop	{r3, pc}
 4025              		.cfi_endproc
 4026              	.LFE91:
 4028 0782 00BF     		.section	.text.SET_VS4210_1280_720_out,"ax",%progbits
 4029              		.align	1
 4030              		.global	SET_VS4210_1280_720_out
 4031              		.syntax unified
 4032              		.thumb
 4033              		.thumb_func
 4034              		.fpu softvfp
 4036              	SET_VS4210_1280_720_out:
 4037              	.LFB92:
3257:Src/main.c    **** 	Printf("\r\nSET_VS4210_1280_720_out");
 4038              		.loc 1 3257 0
 4039              		.cfi_startproc
 4040              		@ args = 0, pretend = 0, frame = 0
 4041              		@ frame_needed = 0, uses_anonymous_args = 0
 4042 0000 08B5     		push	{r3, lr}
 4043              	.LCFI37:
 4044              		.cfi_def_cfa_offset 8
 4045              		.cfi_offset 3, -8
 4046              		.cfi_offset 14, -4
3258:Src/main.c    **** 
ARM GAS  /tmp/cclqPDF2.s 			page 157


 4047              		.loc 1 3258 0
 4048 0002 FE48     		ldr	r0, .L193
 4049 0004 FFF7FEFF 		bl	Printf
 4050              	.LVL464:
3260:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
 4051              		.loc 1 3260 0
 4052 0008 0021     		movs	r1, #0
 4053 000a 0120     		movs	r0, #1
 4054 000c FFF7FEFF 		bl	VXISI2CWrite
 4055              	.LVL465:
3261:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
 4056              		.loc 1 3261 0
 4057 0010 0021     		movs	r1, #0
 4058 0012 0220     		movs	r0, #2
 4059 0014 FFF7FEFF 		bl	VXISI2CWrite
 4060              	.LVL466:
3262:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
 4061              		.loc 1 3262 0
 4062 0018 7521     		movs	r1, #117
 4063 001a 0320     		movs	r0, #3
 4064 001c FFF7FEFF 		bl	VXISI2CWrite
 4065              	.LVL467:
3263:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
 4066              		.loc 1 3263 0
 4067 0020 1821     		movs	r1, #24
 4068 0022 0420     		movs	r0, #4
 4069 0024 FFF7FEFF 		bl	VXISI2CWrite
 4070              	.LVL468:
3264:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
 4071              		.loc 1 3264 0
 4072 0028 8021     		movs	r1, #128
 4073 002a 0520     		movs	r0, #5
 4074 002c FFF7FEFF 		bl	VXISI2CWrite
 4075              	.LVL469:
3265:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);
 4076              		.loc 1 3265 0
 4077 0030 2021     		movs	r1, #32
 4078 0032 0620     		movs	r0, #6
 4079 0034 FFF7FEFF 		bl	VXISI2CWrite
 4080              	.LVL470:
3266:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
 4081              		.loc 1 3266 0
 4082 0038 0821     		movs	r1, #8
 4083 003a 0720     		movs	r0, #7
 4084 003c FFF7FEFF 		bl	VXISI2CWrite
 4085              	.LVL471:
3267:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
 4086              		.loc 1 3267 0
 4087 0040 4021     		movs	r1, #64
 4088 0042 0820     		movs	r0, #8
 4089 0044 FFF7FEFF 		bl	VXISI2CWrite
 4090              	.LVL472:
3268:Src/main.c    **** 	VXISI2CWrite(0x0A,0x41);
 4091              		.loc 1 3268 0
 4092 0048 0A21     		movs	r1, #10
 4093 004a 0920     		movs	r0, #9
 4094 004c FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cclqPDF2.s 			page 158


 4095              	.LVL473:
3269:Src/main.c    **** 	VXISI2CWrite(0x0B,0x07);
 4096              		.loc 1 3269 0
 4097 0050 4121     		movs	r1, #65
 4098 0052 0A20     		movs	r0, #10
 4099 0054 FFF7FEFF 		bl	VXISI2CWrite
 4100              	.LVL474:
3270:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
 4101              		.loc 1 3270 0
 4102 0058 0721     		movs	r1, #7
 4103 005a 0B20     		movs	r0, #11
 4104 005c FFF7FEFF 		bl	VXISI2CWrite
 4105              	.LVL475:
3271:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
 4106              		.loc 1 3271 0
 4107 0060 0021     		movs	r1, #0
 4108 0062 0C20     		movs	r0, #12
 4109 0064 FFF7FEFF 		bl	VXISI2CWrite
 4110              	.LVL476:
3272:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
 4111              		.loc 1 3272 0
 4112 0068 2021     		movs	r1, #32
 4113 006a 0D20     		movs	r0, #13
 4114 006c FFF7FEFF 		bl	VXISI2CWrite
 4115              	.LVL477:
3273:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
 4116              		.loc 1 3273 0
 4117 0070 1021     		movs	r1, #16
 4118 0072 0E20     		movs	r0, #14
 4119 0074 FFF7FEFF 		bl	VXISI2CWrite
 4120              	.LVL478:
3274:Src/main.c    **** 	VXISI2CWrite(0x10,0x80);
 4121              		.loc 1 3274 0
 4122 0078 0021     		movs	r1, #0
 4123 007a 0F20     		movs	r0, #15
 4124 007c FFF7FEFF 		bl	VXISI2CWrite
 4125              	.LVL479:
3275:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
 4126              		.loc 1 3275 0
 4127 0080 8021     		movs	r1, #128
 4128 0082 1020     		movs	r0, #16
 4129 0084 FFF7FEFF 		bl	VXISI2CWrite
 4130              	.LVL480:
3276:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);
 4131              		.loc 1 3276 0
 4132 0088 8221     		movs	r1, #130
 4133 008a 1120     		movs	r0, #17
 4134 008c FFF7FEFF 		bl	VXISI2CWrite
 4135              	.LVL481:
3277:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);
 4136              		.loc 1 3277 0
 4137 0090 2121     		movs	r1, #33
 4138 0092 1220     		movs	r0, #18
 4139 0094 FFF7FEFF 		bl	VXISI2CWrite
 4140              	.LVL482:
3278:Src/main.c    **** 	VXISI2CWrite(0x14,0xE0);
 4141              		.loc 1 3278 0
ARM GAS  /tmp/cclqPDF2.s 			page 159


 4142 0098 D021     		movs	r1, #208
 4143 009a 1320     		movs	r0, #19
 4144 009c FFF7FEFF 		bl	VXISI2CWrite
 4145              	.LVL483:
3279:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
 4146              		.loc 1 3279 0
 4147 00a0 E021     		movs	r1, #224
 4148 00a2 1420     		movs	r0, #20
 4149 00a4 FFF7FEFF 		bl	VXISI2CWrite
 4150              	.LVL484:
3280:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
 4151              		.loc 1 3280 0
 4152 00a8 7821     		movs	r1, #120
 4153 00aa 1520     		movs	r0, #21
 4154 00ac FFF7FEFF 		bl	VXISI2CWrite
 4155              	.LVL485:
3281:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
 4156              		.loc 1 3281 0
 4157 00b0 FE21     		movs	r1, #254
 4158 00b2 1620     		movs	r0, #22
 4159 00b4 FFF7FEFF 		bl	VXISI2CWrite
 4160              	.LVL486:
3282:Src/main.c    **** 	VXISI2CWrite(0x18,0xC8);
 4161              		.loc 1 3282 0
 4162 00b8 0021     		movs	r1, #0
 4163 00ba 1720     		movs	r0, #23
 4164 00bc FFF7FEFF 		bl	VXISI2CWrite
 4165              	.LVL487:
3283:Src/main.c    **** 	VXISI2CWrite(0x19,0x00);
 4166              		.loc 1 3283 0
 4167 00c0 C821     		movs	r1, #200
 4168 00c2 1820     		movs	r0, #24
 4169 00c4 FFF7FEFF 		bl	VXISI2CWrite
 4170              	.LVL488:
3284:Src/main.c    **** 	VXISI2CWrite(0x1A,0x23);
 4171              		.loc 1 3284 0
 4172 00c8 0021     		movs	r1, #0
 4173 00ca 1920     		movs	r0, #25
 4174 00cc FFF7FEFF 		bl	VXISI2CWrite
 4175              	.LVL489:
3285:Src/main.c    **** 	VXISI2CWrite(0x1B,0x00);
 4176              		.loc 1 3285 0
 4177 00d0 2321     		movs	r1, #35
 4178 00d2 1A20     		movs	r0, #26
 4179 00d4 FFF7FEFF 		bl	VXISI2CWrite
 4180              	.LVL490:
3286:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
 4181              		.loc 1 3286 0
 4182 00d8 0021     		movs	r1, #0
 4183 00da 1B20     		movs	r0, #27
 4184 00dc FFF7FEFF 		bl	VXISI2CWrite
 4185              	.LVL491:
3287:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
 4186              		.loc 1 3287 0
 4187 00e0 0021     		movs	r1, #0
 4188 00e2 1C20     		movs	r0, #28
 4189 00e4 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cclqPDF2.s 			page 160


 4190              	.LVL492:
3288:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
 4191              		.loc 1 3288 0
 4192 00e8 0021     		movs	r1, #0
 4193 00ea 1D20     		movs	r0, #29
 4194 00ec FFF7FEFF 		bl	VXISI2CWrite
 4195              	.LVL493:
3289:Src/main.c    **** 	VXISI2CWrite(0x1F,0x32);
 4196              		.loc 1 3289 0
 4197 00f0 2021     		movs	r1, #32
 4198 00f2 1E20     		movs	r0, #30
 4199 00f4 FFF7FEFF 		bl	VXISI2CWrite
 4200              	.LVL494:
3290:Src/main.c    **** 	VXISI2CWrite(0x20,0x5A);
 4201              		.loc 1 3290 0
 4202 00f8 3221     		movs	r1, #50
 4203 00fa 1F20     		movs	r0, #31
 4204 00fc FFF7FEFF 		bl	VXISI2CWrite
 4205              	.LVL495:
3291:Src/main.c    **** 	VXISI2CWrite(0x21,0x0D);
 4206              		.loc 1 3291 0
 4207 0100 5A21     		movs	r1, #90
 4208 0102 2020     		movs	r0, #32
 4209 0104 FFF7FEFF 		bl	VXISI2CWrite
 4210              	.LVL496:
3292:Src/main.c    **** 	VXISI2CWrite(0x22,0x32);
 4211              		.loc 1 3292 0
 4212 0108 0D21     		movs	r1, #13
 4213 010a 2120     		movs	r0, #33
 4214 010c FFF7FEFF 		bl	VXISI2CWrite
 4215              	.LVL497:
3293:Src/main.c    **** 	VXISI2CWrite(0x23,0x5A);
 4216              		.loc 1 3293 0
 4217 0110 3221     		movs	r1, #50
 4218 0112 2220     		movs	r0, #34
 4219 0114 FFF7FEFF 		bl	VXISI2CWrite
 4220              	.LVL498:
3294:Src/main.c    **** 	VXISI2CWrite(0x24,0xD0);
 4221              		.loc 1 3294 0
 4222 0118 5A21     		movs	r1, #90
 4223 011a 2320     		movs	r0, #35
 4224 011c FFF7FEFF 		bl	VXISI2CWrite
 4225              	.LVL499:
3295:Src/main.c    **** 	VXISI2CWrite(0x25,0x21);
 4226              		.loc 1 3295 0
 4227 0120 D021     		movs	r1, #208
 4228 0122 2420     		movs	r0, #36
 4229 0124 FFF7FEFF 		bl	VXISI2CWrite
 4230              	.LVL500:
3296:Src/main.c    **** 	VXISI2CWrite(0x26,0x0D);
 4231              		.loc 1 3296 0
 4232 0128 2121     		movs	r1, #33
 4233 012a 2520     		movs	r0, #37
 4234 012c FFF7FEFF 		bl	VXISI2CWrite
 4235              	.LVL501:
3297:Src/main.c    **** 	VXISI2CWrite(0x27,0xE0);
 4236              		.loc 1 3297 0
ARM GAS  /tmp/cclqPDF2.s 			page 161


 4237 0130 0D21     		movs	r1, #13
 4238 0132 2620     		movs	r0, #38
 4239 0134 FFF7FEFF 		bl	VXISI2CWrite
 4240              	.LVL502:
3298:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
 4241              		.loc 1 3298 0
 4242 0138 E021     		movs	r1, #224
 4243 013a 2720     		movs	r0, #39
 4244 013c FFF7FEFF 		bl	VXISI2CWrite
 4245              	.LVL503:
3299:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
 4246              		.loc 1 3299 0
 4247 0140 F021     		movs	r1, #240
 4248 0142 2820     		movs	r0, #40
 4249 0144 FFF7FEFF 		bl	VXISI2CWrite
 4250              	.LVL504:
3300:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
 4251              		.loc 1 3300 0
 4252 0148 0021     		movs	r1, #0
 4253 014a 2920     		movs	r0, #41
 4254 014c FFF7FEFF 		bl	VXISI2CWrite
 4255              	.LVL505:
3301:Src/main.c    **** 	VXISI2CWrite(0x2B,0x01);
 4256              		.loc 1 3301 0
 4257 0150 0021     		movs	r1, #0
 4258 0152 2A20     		movs	r0, #42
 4259 0154 FFF7FEFF 		bl	VXISI2CWrite
 4260              	.LVL506:
3302:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);
 4261              		.loc 1 3302 0
 4262 0158 0121     		movs	r1, #1
 4263 015a 2B20     		movs	r0, #43
 4264 015c FFF7FEFF 		bl	VXISI2CWrite
 4265              	.LVL507:
3303:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
 4266              		.loc 1 3303 0
 4267 0160 FF21     		movs	r1, #255
 4268 0162 2C20     		movs	r0, #44
 4269 0164 FFF7FEFF 		bl	VXISI2CWrite
 4270              	.LVL508:
3304:Src/main.c    **** 	VXISI2CWrite(0x2E,0x12);
 4271              		.loc 1 3304 0
 4272 0168 0021     		movs	r1, #0
 4273 016a 2D20     		movs	r0, #45
 4274 016c FFF7FEFF 		bl	VXISI2CWrite
 4275              	.LVL509:
3305:Src/main.c    **** 	VXISI2CWrite(0x2F,0xD0);
 4276              		.loc 1 3305 0
 4277 0170 1221     		movs	r1, #18
 4278 0172 2E20     		movs	r0, #46
 4279 0174 FFF7FEFF 		bl	VXISI2CWrite
 4280              	.LVL510:
3306:Src/main.c    **** 	VXISI2CWrite(0x30,0xE0);
 4281              		.loc 1 3306 0
 4282 0178 D021     		movs	r1, #208
 4283 017a 2F20     		movs	r0, #47
 4284 017c FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cclqPDF2.s 			page 162


 4285              	.LVL511:
3307:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
 4286              		.loc 1 3307 0
 4287 0180 E021     		movs	r1, #224
 4288 0182 3020     		movs	r0, #48
 4289 0184 FFF7FEFF 		bl	VXISI2CWrite
 4290              	.LVL512:
3308:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
 4291              		.loc 1 3308 0
 4292 0188 8021     		movs	r1, #128
 4293 018a 3120     		movs	r0, #49
 4294 018c FFF7FEFF 		bl	VXISI2CWrite
 4295              	.LVL513:
3309:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
 4296              		.loc 1 3309 0
 4297 0190 8021     		movs	r1, #128
 4298 0192 3220     		movs	r0, #50
 4299 0194 FFF7FEFF 		bl	VXISI2CWrite
 4300              	.LVL514:
3310:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
 4301              		.loc 1 3310 0
 4302 0198 8021     		movs	r1, #128
 4303 019a 3320     		movs	r0, #51
 4304 019c FFF7FEFF 		bl	VXISI2CWrite
 4305              	.LVL515:
3311:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
 4306              		.loc 1 3311 0
 4307 01a0 A021     		movs	r1, #160
 4308 01a2 3420     		movs	r0, #52
 4309 01a4 FFF7FEFF 		bl	VXISI2CWrite
 4310              	.LVL516:
3312:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
 4311              		.loc 1 3312 0
 4312 01a8 1821     		movs	r1, #24
 4313 01aa 3520     		movs	r0, #53
 4314 01ac FFF7FEFF 		bl	VXISI2CWrite
 4315              	.LVL517:
3313:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
 4316              		.loc 1 3313 0
 4317 01b0 4621     		movs	r1, #70
 4318 01b2 3620     		movs	r0, #54
 4319 01b4 FFF7FEFF 		bl	VXISI2CWrite
 4320              	.LVL518:
3314:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
 4321              		.loc 1 3314 0
 4322 01b8 6421     		movs	r1, #100
 4323 01ba 3720     		movs	r0, #55
 4324 01bc FFF7FEFF 		bl	VXISI2CWrite
 4325              	.LVL519:
3315:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
 4326              		.loc 1 3315 0
 4327 01c0 0021     		movs	r1, #0
 4328 01c2 3820     		movs	r0, #56
 4329 01c4 FFF7FEFF 		bl	VXISI2CWrite
 4330              	.LVL520:
3316:Src/main.c    **** 	VXISI2CWrite(0x3A,0x03);
 4331              		.loc 1 3316 0
ARM GAS  /tmp/cclqPDF2.s 			page 163


 4332 01c8 FF21     		movs	r1, #255
 4333 01ca 3920     		movs	r0, #57
 4334 01cc FFF7FEFF 		bl	VXISI2CWrite
 4335              	.LVL521:
3317:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
 4336              		.loc 1 3317 0
 4337 01d0 0321     		movs	r1, #3
 4338 01d2 3A20     		movs	r0, #58
 4339 01d4 FFF7FEFF 		bl	VXISI2CWrite
 4340              	.LVL522:
3318:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
 4341              		.loc 1 3318 0
 4342 01d8 8021     		movs	r1, #128
 4343 01da 3B20     		movs	r0, #59
 4344 01dc FFF7FEFF 		bl	VXISI2CWrite
 4345              	.LVL523:
3319:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
 4346              		.loc 1 3319 0
 4347 01e0 8021     		movs	r1, #128
 4348 01e2 3C20     		movs	r0, #60
 4349 01e4 FFF7FEFF 		bl	VXISI2CWrite
 4350              	.LVL524:
3320:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
 4351              		.loc 1 3320 0
 4352 01e8 8021     		movs	r1, #128
 4353 01ea 3D20     		movs	r0, #61
 4354 01ec FFF7FEFF 		bl	VXISI2CWrite
 4355              	.LVL525:
3321:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
 4356              		.loc 1 3321 0
 4357 01f0 8021     		movs	r1, #128
 4358 01f2 3E20     		movs	r0, #62
 4359 01f4 FFF7FEFF 		bl	VXISI2CWrite
 4360              	.LVL526:
3322:Src/main.c    **** 	//VXISI2CWrite(0xVXISI);2CWrite(0x80
 4361              		.loc 1 3322 0
 4362 01f8 8021     		movs	r1, #128
 4363 01fa 3F20     		movs	r0, #63
 4364 01fc FFF7FEFF 		bl	VXISI2CWrite
 4365              	.LVL527:
3324:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
 4366              		.loc 1 3324 0
 4367 0200 6021     		movs	r1, #96
 4368 0202 4120     		movs	r0, #65
 4369 0204 FFF7FEFF 		bl	VXISI2CWrite
 4370              	.LVL528:
3325:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
 4371              		.loc 1 3325 0
 4372 0208 5F21     		movs	r1, #95
 4373 020a 4220     		movs	r0, #66
 4374 020c FFF7FEFF 		bl	VXISI2CWrite
 4375              	.LVL529:
3326:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
 4376              		.loc 1 3326 0
 4377 0210 3721     		movs	r1, #55
 4378 0212 4320     		movs	r0, #67
 4379 0214 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cclqPDF2.s 			page 164


 4380              	.LVL530:
3327:Src/main.c    **** 	VXISI2CWrite(0x45,0x04);
 4381              		.loc 1 3327 0
 4382 0218 1421     		movs	r1, #20
 4383 021a 4420     		movs	r0, #68
 4384 021c FFF7FEFF 		bl	VXISI2CWrite
 4385              	.LVL531:
3328:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
 4386              		.loc 1 3328 0
 4387 0220 0421     		movs	r1, #4
 4388 0222 4520     		movs	r0, #69
 4389 0224 FFF7FEFF 		bl	VXISI2CWrite
 4390              	.LVL532:
3329:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
 4391              		.loc 1 3329 0
 4392 0228 0021     		movs	r1, #0
 4393 022a 4620     		movs	r0, #70
 4394 022c FFF7FEFF 		bl	VXISI2CWrite
 4395              	.LVL533:
3330:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
 4396              		.loc 1 3330 0
 4397 0230 0021     		movs	r1, #0
 4398 0232 4720     		movs	r0, #71
 4399 0234 FFF7FEFF 		bl	VXISI2CWrite
 4400              	.LVL534:
3331:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
 4401              		.loc 1 3331 0
 4402 0238 0021     		movs	r1, #0
 4403 023a 4820     		movs	r0, #72
 4404 023c FFF7FEFF 		bl	VXISI2CWrite
 4405              	.LVL535:
3332:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
 4406              		.loc 1 3332 0
 4407 0240 0021     		movs	r1, #0
 4408 0242 4920     		movs	r0, #73
 4409 0244 FFF7FEFF 		bl	VXISI2CWrite
 4410              	.LVL536:
3333:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
 4411              		.loc 1 3333 0
 4412 0248 2021     		movs	r1, #32
 4413 024a 4B20     		movs	r0, #75
 4414 024c FFF7FEFF 		bl	VXISI2CWrite
 4415              	.LVL537:
3334:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
 4416              		.loc 1 3334 0
 4417 0250 0021     		movs	r1, #0
 4418 0252 4C20     		movs	r0, #76
 4419 0254 FFF7FEFF 		bl	VXISI2CWrite
 4420              	.LVL538:
3335:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
 4421              		.loc 1 3335 0
 4422 0258 0021     		movs	r1, #0
 4423 025a 4D20     		movs	r0, #77
 4424 025c FFF7FEFF 		bl	VXISI2CWrite
 4425              	.LVL539:
3336:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
 4426              		.loc 1 3336 0
ARM GAS  /tmp/cclqPDF2.s 			page 165


 4427 0260 0021     		movs	r1, #0
 4428 0262 4E20     		movs	r0, #78
 4429 0264 FFF7FEFF 		bl	VXISI2CWrite
 4430              	.LVL540:
3337:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
 4431              		.loc 1 3337 0
 4432 0268 7F21     		movs	r1, #127
 4433 026a 4F20     		movs	r0, #79
 4434 026c FFF7FEFF 		bl	VXISI2CWrite
 4435              	.LVL541:
3338:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
 4436              		.loc 1 3338 0
 4437 0270 2021     		movs	r1, #32
 4438 0272 5020     		movs	r0, #80
 4439 0274 FFF7FEFF 		bl	VXISI2CWrite
 4440              	.LVL542:
3339:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);
 4441              		.loc 1 3339 0
 4442 0278 0021     		movs	r1, #0
 4443 027a 5120     		movs	r0, #81
 4444 027c FFF7FEFF 		bl	VXISI2CWrite
 4445              	.LVL543:
3340:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);
 4446              		.loc 1 3340 0
 4447 0280 0021     		movs	r1, #0
 4448 0282 5220     		movs	r0, #82
 4449 0284 FFF7FEFF 		bl	VXISI2CWrite
 4450              	.LVL544:
3341:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);
 4451              		.loc 1 3341 0
 4452 0288 0421     		movs	r1, #4
 4453 028a 5320     		movs	r0, #83
 4454 028c FFF7FEFF 		bl	VXISI2CWrite
 4455              	.LVL545:
3342:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);
 4456              		.loc 1 3342 0
 4457 0290 0021     		movs	r1, #0
 4458 0292 5420     		movs	r0, #84
 4459 0294 FFF7FEFF 		bl	VXISI2CWrite
 4460              	.LVL546:
3343:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);
 4461              		.loc 1 3343 0
 4462 0298 E021     		movs	r1, #224
 4463 029a 5520     		movs	r0, #85
 4464 029c FFF7FEFF 		bl	VXISI2CWrite
 4465              	.LVL547:
3344:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
 4466              		.loc 1 3344 0
 4467 02a0 4021     		movs	r1, #64
 4468 02a2 5620     		movs	r0, #86
 4469 02a4 FFF7FEFF 		bl	VXISI2CWrite
 4470              	.LVL548:
3345:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
 4471              		.loc 1 3345 0
 4472 02a8 0421     		movs	r1, #4
 4473 02aa 5720     		movs	r0, #87
 4474 02ac FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cclqPDF2.s 			page 166


 4475              	.LVL549:
3346:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
 4476              		.loc 1 3346 0
 4477 02b0 0021     		movs	r1, #0
 4478 02b2 5820     		movs	r0, #88
 4479 02b4 FFF7FEFF 		bl	VXISI2CWrite
 4480              	.LVL550:
3347:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
 4481              		.loc 1 3347 0
 4482 02b8 0821     		movs	r1, #8
 4483 02ba 5920     		movs	r0, #89
 4484 02bc FFF7FEFF 		bl	VXISI2CWrite
 4485              	.LVL551:
3348:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
 4486              		.loc 1 3348 0
 4487 02c0 1021     		movs	r1, #16
 4488 02c2 5A20     		movs	r0, #90
 4489 02c4 FFF7FEFF 		bl	VXISI2CWrite
 4490              	.LVL552:
3349:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
 4491              		.loc 1 3349 0
 4492 02c8 0021     		movs	r1, #0
 4493 02ca 5B20     		movs	r0, #91
 4494 02cc FFF7FEFF 		bl	VXISI2CWrite
 4495              	.LVL553:
3350:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);
 4496              		.loc 1 3350 0
 4497 02d0 6821     		movs	r1, #104
 4498 02d2 5C20     		movs	r0, #92
 4499 02d4 FFF7FEFF 		bl	VXISI2CWrite
 4500              	.LVL554:
3351:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);
 4501              		.loc 1 3351 0
 4502 02d8 4021     		movs	r1, #64
 4503 02da 5D20     		movs	r0, #93
 4504 02dc FFF7FEFF 		bl	VXISI2CWrite
 4505              	.LVL555:
3352:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);
 4506              		.loc 1 3352 0
 4507 02e0 0821     		movs	r1, #8
 4508 02e2 5E20     		movs	r0, #94
 4509 02e4 FFF7FEFF 		bl	VXISI2CWrite
 4510              	.LVL556:
3353:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
 4511              		.loc 1 3353 0
 4512 02e8 0021     		movs	r1, #0
 4513 02ea 5F20     		movs	r0, #95
 4514 02ec FFF7FEFF 		bl	VXISI2CWrite
 4515              	.LVL557:
3354:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);
 4516              		.loc 1 3354 0
 4517 02f0 E021     		movs	r1, #224
 4518 02f2 6020     		movs	r0, #96
 4519 02f4 FFF7FEFF 		bl	VXISI2CWrite
 4520              	.LVL558:
3355:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
 4521              		.loc 1 3355 0
ARM GAS  /tmp/cclqPDF2.s 			page 167


 4522 02f8 5421     		movs	r1, #84
 4523 02fa 6120     		movs	r0, #97
 4524 02fc FFF7FEFF 		bl	VXISI2CWrite
 4525              	.LVL559:
3356:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
 4526              		.loc 1 3356 0
 4527 0300 3321     		movs	r1, #51
 4528 0302 6220     		movs	r0, #98
 4529 0304 FFF7FEFF 		bl	VXISI2CWrite
 4530              	.LVL560:
3357:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
 4531              		.loc 1 3357 0
 4532 0308 0121     		movs	r1, #1
 4533 030a 6320     		movs	r0, #99
 4534 030c FFF7FEFF 		bl	VXISI2CWrite
 4535              	.LVL561:
3358:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
 4536              		.loc 1 3358 0
 4537 0310 FF21     		movs	r1, #255
 4538 0312 6420     		movs	r0, #100
 4539 0314 FFF7FEFF 		bl	VXISI2CWrite
 4540              	.LVL562:
3359:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
 4541              		.loc 1 3359 0
 4542 0318 0121     		movs	r1, #1
 4543 031a 6520     		movs	r0, #101
 4544 031c FFF7FEFF 		bl	VXISI2CWrite
 4545              	.LVL563:
3360:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
 4546              		.loc 1 3360 0
 4547 0320 FF21     		movs	r1, #255
 4548 0322 6620     		movs	r0, #102
 4549 0324 FFF7FEFF 		bl	VXISI2CWrite
 4550              	.LVL564:
3361:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
 4551              		.loc 1 3361 0
 4552 0328 8921     		movs	r1, #137
 4553 032a 6720     		movs	r0, #103
 4554 032c FFF7FEFF 		bl	VXISI2CWrite
 4555              	.LVL565:
3362:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
 4556              		.loc 1 3362 0
 4557 0330 AB21     		movs	r1, #171
 4558 0332 6820     		movs	r0, #104
 4559 0334 FFF7FEFF 		bl	VXISI2CWrite
 4560              	.LVL566:
3363:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
 4561              		.loc 1 3363 0
 4562 0338 8821     		movs	r1, #136
 4563 033a 6920     		movs	r0, #105
 4564 033c FFF7FEFF 		bl	VXISI2CWrite
 4565              	.LVL567:
3364:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
 4566              		.loc 1 3364 0
 4567 0340 6E21     		movs	r1, #110
 4568 0342 6A20     		movs	r0, #106
 4569 0344 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cclqPDF2.s 			page 168


 4570              	.LVL568:
3365:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
 4571              		.loc 1 3365 0
 4572 0348 6E21     		movs	r1, #110
 4573 034a 6B20     		movs	r0, #107
 4574 034c FFF7FEFF 		bl	VXISI2CWrite
 4575              	.LVL569:
3366:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
 4576              		.loc 1 3366 0
 4577 0350 6E21     		movs	r1, #110
 4578 0352 6C20     		movs	r0, #108
 4579 0354 FFF7FEFF 		bl	VXISI2CWrite
 4580              	.LVL570:
3367:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
 4581              		.loc 1 3367 0
 4582 0358 0021     		movs	r1, #0
 4583 035a 6D20     		movs	r0, #109
 4584 035c FFF7FEFF 		bl	VXISI2CWrite
 4585              	.LVL571:
3368:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
 4586              		.loc 1 3368 0
 4587 0360 0021     		movs	r1, #0
 4588 0362 6E20     		movs	r0, #110
 4589 0364 FFF7FEFF 		bl	VXISI2CWrite
 4590              	.LVL572:
3369:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
 4591              		.loc 1 3369 0
 4592 0368 0021     		movs	r1, #0
 4593 036a 6F20     		movs	r0, #111
 4594 036c FFF7FEFF 		bl	VXISI2CWrite
 4595              	.LVL573:
3370:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
 4596              		.loc 1 3370 0
 4597 0370 0021     		movs	r1, #0
 4598 0372 7020     		movs	r0, #112
 4599 0374 FFF7FEFF 		bl	VXISI2CWrite
 4600              	.LVL574:
3371:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
 4601              		.loc 1 3371 0
 4602 0378 0021     		movs	r1, #0
 4603 037a 7120     		movs	r0, #113
 4604 037c FFF7FEFF 		bl	VXISI2CWrite
 4605              	.LVL575:
3372:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
 4606              		.loc 1 3372 0
 4607 0380 0021     		movs	r1, #0
 4608 0382 7220     		movs	r0, #114
 4609 0384 FFF7FEFF 		bl	VXISI2CWrite
 4610              	.LVL576:
3373:Src/main.c    **** 	VXISI2CWrite(0x74,0x00);
 4611              		.loc 1 3373 0
 4612 0388 0021     		movs	r1, #0
 4613 038a 7320     		movs	r0, #115
 4614 038c FFF7FEFF 		bl	VXISI2CWrite
 4615              	.LVL577:
3374:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
 4616              		.loc 1 3374 0
ARM GAS  /tmp/cclqPDF2.s 			page 169


 4617 0390 0021     		movs	r1, #0
 4618 0392 7420     		movs	r0, #116
 4619 0394 FFF7FEFF 		bl	VXISI2CWrite
 4620              	.LVL578:
3375:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
 4621              		.loc 1 3375 0
 4622 0398 FF21     		movs	r1, #255
 4623 039a 7520     		movs	r0, #117
 4624 039c FFF7FEFF 		bl	VXISI2CWrite
 4625              	.LVL579:
3376:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
 4626              		.loc 1 3376 0
 4627 03a0 FF21     		movs	r1, #255
 4628 03a2 7620     		movs	r0, #118
 4629 03a4 FFF7FEFF 		bl	VXISI2CWrite
 4630              	.LVL580:
3377:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
 4631              		.loc 1 3377 0
 4632 03a8 FF21     		movs	r1, #255
 4633 03aa 7720     		movs	r0, #119
 4634 03ac FFF7FEFF 		bl	VXISI2CWrite
 4635              	.LVL581:
3378:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
 4636              		.loc 1 3378 0
 4637 03b0 FF21     		movs	r1, #255
 4638 03b2 7820     		movs	r0, #120
 4639 03b4 FFF7FEFF 		bl	VXISI2CWrite
 4640              	.LVL582:
3379:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
 4641              		.loc 1 3379 0
 4642 03b8 FF21     		movs	r1, #255
 4643 03ba 7920     		movs	r0, #121
 4644 03bc FFF7FEFF 		bl	VXISI2CWrite
 4645              	.LVL583:
3380:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
 4646              		.loc 1 3380 0
 4647 03c0 FF21     		movs	r1, #255
 4648 03c2 7A20     		movs	r0, #122
 4649 03c4 FFF7FEFF 		bl	VXISI2CWrite
 4650              	.LVL584:
3381:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
 4651              		.loc 1 3381 0
 4652 03c8 FF21     		movs	r1, #255
 4653 03ca 7B20     		movs	r0, #123
 4654 03cc FFF7FEFF 		bl	VXISI2CWrite
 4655              	.LVL585:
3382:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
 4656              		.loc 1 3382 0
 4657 03d0 FF21     		movs	r1, #255
 4658 03d2 7C20     		movs	r0, #124
 4659 03d4 FFF7FEFF 		bl	VXISI2CWrite
 4660              	.LVL586:
3383:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
 4661              		.loc 1 3383 0
 4662 03d8 F021     		movs	r1, #240
 4663 03da 7D20     		movs	r0, #125
 4664 03dc FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cclqPDF2.s 			page 170


 4665              	.LVL587:
3384:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
 4666              		.loc 1 3384 0
 4667 03e0 8021     		movs	r1, #128
 4668 03e2 7E20     		movs	r0, #126
 4669 03e4 FFF7FEFF 		bl	VXISI2CWrite
 4670              	.LVL588:
3385:Src/main.c    **** 	VXISI2CWrite(0x80,0x00);
 4671              		.loc 1 3385 0
 4672 03e8 0021     		movs	r1, #0
 4673 03ea 7F20     		movs	r0, #127
 4674 03ec FFF7FEFF 		bl	VXISI2CWrite
 4675              	.LVL589:
3386:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);
 4676              		.loc 1 3386 0
 4677 03f0 0021     		movs	r1, #0
 4678 03f2 8020     		movs	r0, #128
 4679 03f4 FFF7FEFF 		bl	VXISI2CWrite
 4680              	.LVL590:
 4681 03f8 02E0     		b	.L194
 4682              	.L195:
 4683 03fa 00BF     		.align	2
 4684              	.L193:
 4685 03fc 00000000 		.word	.LC35
 4686              	.L194:
3387:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
 4687              		.loc 1 3387 0
 4688 0400 3421     		movs	r1, #52
 4689 0402 8120     		movs	r0, #129
 4690 0404 FFF7FEFF 		bl	VXISI2CWrite
 4691              	.LVL591:
3388:Src/main.c    **** 	VXISI2CWrite(0x83,0x05);
 4692              		.loc 1 3388 0
 4693 0408 4021     		movs	r1, #64
 4694 040a 8220     		movs	r0, #130
 4695 040c FFF7FEFF 		bl	VXISI2CWrite
 4696              	.LVL592:
3389:Src/main.c    **** 	VXISI2CWrite(0x84,0x59);
 4697              		.loc 1 3389 0
 4698 0410 0521     		movs	r1, #5
 4699 0412 8320     		movs	r0, #131
 4700 0414 FFF7FEFF 		bl	VXISI2CWrite
 4701              	.LVL593:
3390:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
 4702              		.loc 1 3390 0
 4703 0418 5921     		movs	r1, #89
 4704 041a 8420     		movs	r0, #132
 4705 041c FFF7FEFF 		bl	VXISI2CWrite
 4706              	.LVL594:
3391:Src/main.c    **** 	VXISI2CWrite(0x86,0x04);
 4707              		.loc 1 3391 0
 4708 0420 FD21     		movs	r1, #253
 4709 0422 8520     		movs	r0, #133
 4710 0424 FFF7FEFF 		bl	VXISI2CWrite
 4711              	.LVL595:
3392:Src/main.c    **** 	VXISI2CWrite(0x87,0x24);
 4712              		.loc 1 3392 0
ARM GAS  /tmp/cclqPDF2.s 			page 171


 4713 0428 0421     		movs	r1, #4
 4714 042a 8620     		movs	r0, #134
 4715 042c FFF7FEFF 		bl	VXISI2CWrite
 4716              	.LVL596:
3393:Src/main.c    **** 	VXISI2CWrite(0x88,0x94);
 4717              		.loc 1 3393 0
 4718 0430 2421     		movs	r1, #36
 4719 0432 8720     		movs	r0, #135
 4720 0434 FFF7FEFF 		bl	VXISI2CWrite
 4721              	.LVL597:
3394:Src/main.c    **** 	VXISI2CWrite(0x89,0x58);
 4722              		.loc 1 3394 0
 4723 0438 9421     		movs	r1, #148
 4724 043a 8820     		movs	r0, #136
 4725 043c FFF7FEFF 		bl	VXISI2CWrite
 4726              	.LVL598:
3395:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
 4727              		.loc 1 3395 0
 4728 0440 5821     		movs	r1, #88
 4729 0442 8920     		movs	r0, #137
 4730 0444 FFF7FEFF 		bl	VXISI2CWrite
 4731              	.LVL599:
3396:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
 4732              		.loc 1 3396 0
 4733 0448 0021     		movs	r1, #0
 4734 044a 8A20     		movs	r0, #138
 4735 044c FFF7FEFF 		bl	VXISI2CWrite
 4736              	.LVL600:
3397:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
 4737              		.loc 1 3397 0
 4738 0450 7E21     		movs	r1, #126
 4739 0452 8B20     		movs	r0, #139
 4740 0454 FFF7FEFF 		bl	VXISI2CWrite
 4741              	.LVL601:
3398:Src/main.c    **** 	VXISI2CWrite(0x8D,0x2C);
 4742              		.loc 1 3398 0
 4743 0458 0321     		movs	r1, #3
 4744 045a 8C20     		movs	r0, #140
 4745 045c FFF7FEFF 		bl	VXISI2CWrite
 4746              	.LVL602:
3399:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
 4747              		.loc 1 3399 0
 4748 0460 2C21     		movs	r1, #44
 4749 0462 8D20     		movs	r0, #141
 4750 0464 FFF7FEFF 		bl	VXISI2CWrite
 4751              	.LVL603:
3400:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
 4752              		.loc 1 3400 0
 4753 0468 8C21     		movs	r1, #140
 4754 046a 8E20     		movs	r0, #142
 4755 046c FFF7FEFF 		bl	VXISI2CWrite
 4756              	.LVL604:
3401:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
 4757              		.loc 1 3401 0
 4758 0470 0021     		movs	r1, #0
 4759 0472 8F20     		movs	r0, #143
 4760 0474 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cclqPDF2.s 			page 172


 4761              	.LVL605:
3402:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
 4762              		.loc 1 3402 0
 4763 0478 CC21     		movs	r1, #204
 4764 047a 9020     		movs	r0, #144
 4765 047c FFF7FEFF 		bl	VXISI2CWrite
 4766              	.LVL606:
3403:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
 4767              		.loc 1 3403 0
 4768 0480 4121     		movs	r1, #65
 4769 0482 9120     		movs	r0, #145
 4770 0484 FFF7FEFF 		bl	VXISI2CWrite
 4771              	.LVL607:
3404:Src/main.c    **** 	VXISI2CWrite(0x93,0x31);
 4772              		.loc 1 3404 0
 4773 0488 C421     		movs	r1, #196
 4774 048a 9220     		movs	r0, #146
 4775 048c FFF7FEFF 		bl	VXISI2CWrite
 4776              	.LVL608:
3405:Src/main.c    **** 	VXISI2CWrite(0x94,0x87);
 4777              		.loc 1 3405 0
 4778 0490 3121     		movs	r1, #49
 4779 0492 9320     		movs	r0, #147
 4780 0494 FFF7FEFF 		bl	VXISI2CWrite
 4781              	.LVL609:
3406:Src/main.c    **** 	VXISI2CWrite(0x95,0xD0);
 4782              		.loc 1 3406 0
 4783 0498 8721     		movs	r1, #135
 4784 049a 9420     		movs	r0, #148
 4785 049c FFF7FEFF 		bl	VXISI2CWrite
 4786              	.LVL610:
3407:Src/main.c    **** 	VXISI2CWrite(0x96,0xF3);
 4787              		.loc 1 3407 0
 4788 04a0 D021     		movs	r1, #208
 4789 04a2 9520     		movs	r0, #149
 4790 04a4 FFF7FEFF 		bl	VXISI2CWrite
 4791              	.LVL611:
3408:Src/main.c    **** 	VXISI2CWrite(0x97,0x20);
 4792              		.loc 1 3408 0
 4793 04a8 F321     		movs	r1, #243
 4794 04aa 9620     		movs	r0, #150
 4795 04ac FFF7FEFF 		bl	VXISI2CWrite
 4796              	.LVL612:
3409:Src/main.c    **** 	VXISI2CWrite(0x98,0x11);
 4797              		.loc 1 3409 0
 4798 04b0 2021     		movs	r1, #32
 4799 04b2 9720     		movs	r0, #151
 4800 04b4 FFF7FEFF 		bl	VXISI2CWrite
 4801              	.LVL613:
3410:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
 4802              		.loc 1 3410 0
 4803 04b8 1121     		movs	r1, #17
 4804 04ba 9820     		movs	r0, #152
 4805 04bc FFF7FEFF 		bl	VXISI2CWrite
 4806              	.LVL614:
3411:Src/main.c    **** 	VXISI2CWrite(0x9A,0xFF);
 4807              		.loc 1 3411 0
ARM GAS  /tmp/cclqPDF2.s 			page 173


 4808 04c0 9021     		movs	r1, #144
 4809 04c2 9920     		movs	r0, #153
 4810 04c4 FFF7FEFF 		bl	VXISI2CWrite
 4811              	.LVL615:
3412:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
 4812              		.loc 1 3412 0
 4813 04c8 FF21     		movs	r1, #255
 4814 04ca 9A20     		movs	r0, #154
 4815 04cc FFF7FEFF 		bl	VXISI2CWrite
 4816              	.LVL616:
3413:Src/main.c    **** 	VXISI2CWrite(0x9C,0x0A);
 4817              		.loc 1 3413 0
 4818 04d0 0421     		movs	r1, #4
 4819 04d2 9B20     		movs	r0, #155
 4820 04d4 FFF7FEFF 		bl	VXISI2CWrite
 4821              	.LVL617:
3414:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
 4822              		.loc 1 3414 0
 4823 04d8 0A21     		movs	r1, #10
 4824 04da 9C20     		movs	r0, #156
 4825 04dc FFF7FEFF 		bl	VXISI2CWrite
 4826              	.LVL618:
3415:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
 4827              		.loc 1 3415 0
 4828 04e0 0021     		movs	r1, #0
 4829 04e2 9D20     		movs	r0, #157
 4830 04e4 FFF7FEFF 		bl	VXISI2CWrite
 4831              	.LVL619:
3416:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
 4832              		.loc 1 3416 0
 4833 04e8 0421     		movs	r1, #4
 4834 04ea 9E20     		movs	r0, #158
 4835 04ec FFF7FEFF 		bl	VXISI2CWrite
 4836              	.LVL620:
3417:Src/main.c    **** 	VXISI2CWrite(0xA0,0x2F);
 4837              		.loc 1 3417 0
 4838 04f0 6521     		movs	r1, #101
 4839 04f2 9F20     		movs	r0, #159
 4840 04f4 FFF7FEFF 		bl	VXISI2CWrite
 4841              	.LVL621:
3418:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD9);
 4842              		.loc 1 3418 0
 4843 04f8 2F21     		movs	r1, #47
 4844 04fa A020     		movs	r0, #160
 4845 04fc FFF7FEFF 		bl	VXISI2CWrite
 4846              	.LVL622:
3419:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
 4847              		.loc 1 3419 0
 4848 0500 D921     		movs	r1, #217
 4849 0502 A120     		movs	r0, #161
 4850 0504 FFF7FEFF 		bl	VXISI2CWrite
 4851              	.LVL623:
3420:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
 4852              		.loc 1 3420 0
 4853 0508 9821     		movs	r1, #152
 4854 050a A220     		movs	r0, #162
 4855 050c FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cclqPDF2.s 			page 174


 4856              	.LVL624:
3421:Src/main.c    **** 	VXISI2CWrite(0xA4,0xE1);
 4857              		.loc 1 3421 0
 4858 0510 8721     		movs	r1, #135
 4859 0512 A320     		movs	r0, #163
 4860 0514 FFF7FEFF 		bl	VXISI2CWrite
 4861              	.LVL625:
3422:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);
 4862              		.loc 1 3422 0
 4863 0518 E121     		movs	r1, #225
 4864 051a A420     		movs	r0, #164
 4865 051c FFF7FEFF 		bl	VXISI2CWrite
 4866              	.LVL626:
3423:Src/main.c    **** 	VXISI2CWrite(0xA6,0xC2);
 4867              		.loc 1 3423 0
 4868 0520 3821     		movs	r1, #56
 4869 0522 A520     		movs	r0, #165
 4870 0524 FFF7FEFF 		bl	VXISI2CWrite
 4871              	.LVL627:
3424:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
 4872              		.loc 1 3424 0
 4873 0528 C221     		movs	r1, #194
 4874 052a A620     		movs	r0, #166
 4875 052c FFF7FEFF 		bl	VXISI2CWrite
 4876              	.LVL628:
3425:Src/main.c    **** 	VXISI2CWrite(0xA8,0x00);
 4877              		.loc 1 3425 0
 4878 0530 7021     		movs	r1, #112
 4879 0532 A720     		movs	r0, #167
 4880 0534 FFF7FEFF 		bl	VXISI2CWrite
 4881              	.LVL629:
3426:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
 4882              		.loc 1 3426 0
 4883 0538 0021     		movs	r1, #0
 4884 053a A820     		movs	r0, #168
 4885 053c FFF7FEFF 		bl	VXISI2CWrite
 4886              	.LVL630:
3427:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);
 4887              		.loc 1 3427 0
 4888 0540 1E21     		movs	r1, #30
 4889 0542 A920     		movs	r0, #169
 4890 0544 FFF7FEFF 		bl	VXISI2CWrite
 4891              	.LVL631:
3428:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
 4892              		.loc 1 3428 0
 4893 0548 2E21     		movs	r1, #46
 4894 054a AA20     		movs	r0, #170
 4895 054c FFF7FEFF 		bl	VXISI2CWrite
 4896              	.LVL632:
3429:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);
 4897              		.loc 1 3429 0
 4898 0550 0021     		movs	r1, #0
 4899 0552 AB20     		movs	r0, #171
 4900 0554 FFF7FEFF 		bl	VXISI2CWrite
 4901              	.LVL633:
3430:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF3);
 4902              		.loc 1 3430 0
ARM GAS  /tmp/cclqPDF2.s 			page 175


 4903 0558 8421     		movs	r1, #132
 4904 055a AC20     		movs	r0, #172
 4905 055c FFF7FEFF 		bl	VXISI2CWrite
 4906              	.LVL634:
3431:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
 4907              		.loc 1 3431 0
 4908 0560 F321     		movs	r1, #243
 4909 0562 AD20     		movs	r0, #173
 4910 0564 FFF7FEFF 		bl	VXISI2CWrite
 4911              	.LVL635:
3432:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
 4912              		.loc 1 3432 0
 4913 0568 6521     		movs	r1, #101
 4914 056a AE20     		movs	r0, #174
 4915 056c FFF7FEFF 		bl	VXISI2CWrite
 4916              	.LVL636:
3433:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
 4917              		.loc 1 3433 0
 4918 0570 9921     		movs	r1, #153
 4919 0572 AF20     		movs	r0, #175
 4920 0574 FFF7FEFF 		bl	VXISI2CWrite
 4921              	.LVL637:
3434:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
 4922              		.loc 1 3434 0
 4923 0578 0021     		movs	r1, #0
 4924 057a B020     		movs	r0, #176
 4925 057c FFF7FEFF 		bl	VXISI2CWrite
 4926              	.LVL638:
3435:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
 4927              		.loc 1 3435 0
 4928 0580 0021     		movs	r1, #0
 4929 0582 B120     		movs	r0, #177
 4930 0584 FFF7FEFF 		bl	VXISI2CWrite
 4931              	.LVL639:
3436:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
 4932              		.loc 1 3436 0
 4933 0588 0021     		movs	r1, #0
 4934 058a B220     		movs	r0, #178
 4935 058c FFF7FEFF 		bl	VXISI2CWrite
 4936              	.LVL640:
3437:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
 4937              		.loc 1 3437 0
 4938 0590 0021     		movs	r1, #0
 4939 0592 B320     		movs	r0, #179
 4940 0594 FFF7FEFF 		bl	VXISI2CWrite
 4941              	.LVL641:
3438:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
 4942              		.loc 1 3438 0
 4943 0598 0021     		movs	r1, #0
 4944 059a B420     		movs	r0, #180
 4945 059c FFF7FEFF 		bl	VXISI2CWrite
 4946              	.LVL642:
3439:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
 4947              		.loc 1 3439 0
 4948 05a0 0021     		movs	r1, #0
 4949 05a2 B520     		movs	r0, #181
 4950 05a4 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cclqPDF2.s 			page 176


 4951              	.LVL643:
3440:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
 4952              		.loc 1 3440 0
 4953 05a8 0021     		movs	r1, #0
 4954 05aa B620     		movs	r0, #182
 4955 05ac FFF7FEFF 		bl	VXISI2CWrite
 4956              	.LVL644:
3441:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
 4957              		.loc 1 3441 0
 4958 05b0 8021     		movs	r1, #128
 4959 05b2 B820     		movs	r0, #184
 4960 05b4 FFF7FEFF 		bl	VXISI2CWrite
 4961              	.LVL645:
3442:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
 4962              		.loc 1 3442 0
 4963 05b8 0021     		movs	r1, #0
 4964 05ba B920     		movs	r0, #185
 4965 05bc FFF7FEFF 		bl	VXISI2CWrite
 4966              	.LVL646:
3443:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
 4967              		.loc 1 3443 0
 4968 05c0 0121     		movs	r1, #1
 4969 05c2 BA20     		movs	r0, #186
 4970 05c4 FFF7FEFF 		bl	VXISI2CWrite
 4971              	.LVL647:
3444:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
 4972              		.loc 1 3444 0
 4973 05c8 0021     		movs	r1, #0
 4974 05ca BB20     		movs	r0, #187
 4975 05cc FFF7FEFF 		bl	VXISI2CWrite
 4976              	.LVL648:
3445:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
 4977              		.loc 1 3445 0
 4978 05d0 9021     		movs	r1, #144
 4979 05d2 BC20     		movs	r0, #188
 4980 05d4 FFF7FEFF 		bl	VXISI2CWrite
 4981              	.LVL649:
3446:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
 4982              		.loc 1 3446 0
 4983 05d8 0121     		movs	r1, #1
 4984 05da BD20     		movs	r0, #189
 4985 05dc FFF7FEFF 		bl	VXISI2CWrite
 4986              	.LVL650:
3447:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
 4987              		.loc 1 3447 0
 4988 05e0 2C21     		movs	r1, #44
 4989 05e2 BE20     		movs	r0, #190
 4990 05e4 FFF7FEFF 		bl	VXISI2CWrite
 4991              	.LVL651:
3448:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
 4992              		.loc 1 3448 0
 4993 05e8 0021     		movs	r1, #0
 4994 05ea C020     		movs	r0, #192
 4995 05ec FFF7FEFF 		bl	VXISI2CWrite
 4996              	.LVL652:
3449:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
 4997              		.loc 1 3449 0
ARM GAS  /tmp/cclqPDF2.s 			page 177


 4998 05f0 2021     		movs	r1, #32
 4999 05f2 C120     		movs	r0, #193
 5000 05f4 FFF7FEFF 		bl	VXISI2CWrite
 5001              	.LVL653:
3450:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
 5002              		.loc 1 3450 0
 5003 05f8 2021     		movs	r1, #32
 5004 05fa C220     		movs	r0, #194
 5005 05fc FFF7FEFF 		bl	VXISI2CWrite
 5006              	.LVL654:
3451:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
 5007              		.loc 1 3451 0
 5008 0600 2021     		movs	r1, #32
 5009 0602 C320     		movs	r0, #195
 5010 0604 FFF7FEFF 		bl	VXISI2CWrite
 5011              	.LVL655:
3452:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
 5012              		.loc 1 3452 0
 5013 0608 2021     		movs	r1, #32
 5014 060a C420     		movs	r0, #196
 5015 060c FFF7FEFF 		bl	VXISI2CWrite
 5016              	.LVL656:
3453:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
 5017              		.loc 1 3453 0
 5018 0610 2021     		movs	r1, #32
 5019 0612 C520     		movs	r0, #197
 5020 0614 FFF7FEFF 		bl	VXISI2CWrite
 5021              	.LVL657:
3454:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
 5022              		.loc 1 3454 0
 5023 0618 FF21     		movs	r1, #255
 5024 061a D020     		movs	r0, #208
 5025 061c FFF7FEFF 		bl	VXISI2CWrite
 5026              	.LVL658:
3455:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
 5027              		.loc 1 3455 0
 5028 0620 3F21     		movs	r1, #63
 5029 0622 D120     		movs	r0, #209
 5030 0624 FFF7FEFF 		bl	VXISI2CWrite
 5031              	.LVL659:
3456:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
 5032              		.loc 1 3456 0
 5033 0628 C221     		movs	r1, #194
 5034 062a D220     		movs	r0, #210
 5035 062c FFF7FEFF 		bl	VXISI2CWrite
 5036              	.LVL660:
3457:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
 5037              		.loc 1 3457 0
 5038 0630 3F21     		movs	r1, #63
 5039 0632 D320     		movs	r0, #211
 5040 0634 FFF7FEFF 		bl	VXISI2CWrite
 5041              	.LVL661:
3458:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
 5042              		.loc 1 3458 0
 5043 0638 0021     		movs	r1, #0
 5044 063a D420     		movs	r0, #212
 5045 063c FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cclqPDF2.s 			page 178


 5046              	.LVL662:
3459:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
 5047              		.loc 1 3459 0
 5048 0640 0021     		movs	r1, #0
 5049 0642 D520     		movs	r0, #213
 5050 0644 FFF7FEFF 		bl	VXISI2CWrite
 5051              	.LVL663:
3460:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
 5052              		.loc 1 3460 0
 5053 0648 0021     		movs	r1, #0
 5054 064a D620     		movs	r0, #214
 5055 064c FFF7FEFF 		bl	VXISI2CWrite
 5056              	.LVL664:
3461:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
 5057              		.loc 1 3461 0
 5058 0650 1021     		movs	r1, #16
 5059 0652 D720     		movs	r0, #215
 5060 0654 FFF7FEFF 		bl	VXISI2CWrite
 5061              	.LVL665:
3462:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
 5062              		.loc 1 3462 0
 5063 0658 0021     		movs	r1, #0
 5064 065a D820     		movs	r0, #216
 5065 065c FFF7FEFF 		bl	VXISI2CWrite
 5066              	.LVL666:
3463:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);
 5067              		.loc 1 3463 0
 5068 0660 7721     		movs	r1, #119
 5069 0662 DC20     		movs	r0, #220
 5070 0664 FFF7FEFF 		bl	VXISI2CWrite
 5071              	.LVL667:
3464:Src/main.c    **** 	VXISI2CWrite(0xDE,0xAF);
 5072              		.loc 1 3464 0
 5073 0668 0021     		movs	r1, #0
 5074 066a DD20     		movs	r0, #221
 5075 066c FFF7FEFF 		bl	VXISI2CWrite
 5076              	.LVL668:
3465:Src/main.c    **** 	VXISI2CWrite(0xDF,0xEF);
 5077              		.loc 1 3465 0
 5078 0670 AF21     		movs	r1, #175
 5079 0672 DE20     		movs	r0, #222
 5080 0674 FFF7FEFF 		bl	VXISI2CWrite
 5081              	.LVL669:
3466:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
 5082              		.loc 1 3466 0
 5083 0678 EF21     		movs	r1, #239
 5084 067a DF20     		movs	r0, #223
 5085 067c FFF7FEFF 		bl	VXISI2CWrite
 5086              	.LVL670:
3467:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
 5087              		.loc 1 3467 0
 5088 0680 0021     		movs	r1, #0
 5089 0682 E020     		movs	r0, #224
 5090 0684 FFF7FEFF 		bl	VXISI2CWrite
 5091              	.LVL671:
3468:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
 5092              		.loc 1 3468 0
ARM GAS  /tmp/cclqPDF2.s 			page 179


 5093 0688 0021     		movs	r1, #0
 5094 068a E120     		movs	r0, #225
 5095 068c FFF7FEFF 		bl	VXISI2CWrite
 5096              	.LVL672:
3469:Src/main.c    **** 	VXISI2CWrite(0xE3,0x12);
 5097              		.loc 1 3469 0
 5098 0690 0021     		movs	r1, #0
 5099 0692 E220     		movs	r0, #226
 5100 0694 FFF7FEFF 		bl	VXISI2CWrite
 5101              	.LVL673:
3470:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE2);
 5102              		.loc 1 3470 0
 5103 0698 1221     		movs	r1, #18
 5104 069a E320     		movs	r0, #227
 5105 069c FFF7FEFF 		bl	VXISI2CWrite
 5106              	.LVL674:
3471:Src/main.c    **** 	VXISI2CWrite(0xE5,0xD0);
 5107              		.loc 1 3471 0
 5108 06a0 E221     		movs	r1, #226
 5109 06a2 E420     		movs	r0, #228
 5110 06a4 FFF7FEFF 		bl	VXISI2CWrite
 5111              	.LVL675:
3472:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
 5112              		.loc 1 3472 0
 5113 06a8 D021     		movs	r1, #208
 5114 06aa E520     		movs	r0, #229
 5115 06ac FFF7FEFF 		bl	VXISI2CWrite
 5116              	.LVL676:
3473:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
 5117              		.loc 1 3473 0
 5118 06b0 0021     		movs	r1, #0
 5119 06b2 E620     		movs	r0, #230
 5120 06b4 FFF7FEFF 		bl	VXISI2CWrite
 5121              	.LVL677:
3474:Src/main.c    **** 	VXISI2CWrite(0xE8,0x0F);
 5122              		.loc 1 3474 0
 5123 06b8 0021     		movs	r1, #0
 5124 06ba E720     		movs	r0, #231
 5125 06bc FFF7FEFF 		bl	VXISI2CWrite
 5126              	.LVL678:
3475:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
 5127              		.loc 1 3475 0
 5128 06c0 0F21     		movs	r1, #15
 5129 06c2 E820     		movs	r0, #232
 5130 06c4 FFF7FEFF 		bl	VXISI2CWrite
 5131              	.LVL679:
3476:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
 5132              		.loc 1 3476 0
 5133 06c8 0021     		movs	r1, #0
 5134 06ca E920     		movs	r0, #233
 5135 06cc FFF7FEFF 		bl	VXISI2CWrite
 5136              	.LVL680:
3477:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
 5137              		.loc 1 3477 0
 5138 06d0 0021     		movs	r1, #0
 5139 06d2 EA20     		movs	r0, #234
 5140 06d4 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cclqPDF2.s 			page 180


 5141              	.LVL681:
3478:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
 5142              		.loc 1 3478 0
 5143 06d8 0021     		movs	r1, #0
 5144 06da EB20     		movs	r0, #235
 5145 06dc FFF7FEFF 		bl	VXISI2CWrite
 5146              	.LVL682:
3479:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
 5147              		.loc 1 3479 0
 5148 06e0 8821     		movs	r1, #136
 5149 06e2 EC20     		movs	r0, #236
 5150 06e4 FFF7FEFF 		bl	VXISI2CWrite
 5151              	.LVL683:
3480:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
 5152              		.loc 1 3480 0
 5153 06e8 0021     		movs	r1, #0
 5154 06ea ED20     		movs	r0, #237
 5155 06ec FFF7FEFF 		bl	VXISI2CWrite
 5156              	.LVL684:
3481:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
 5157              		.loc 1 3481 0
 5158 06f0 0021     		movs	r1, #0
 5159 06f2 EE20     		movs	r0, #238
 5160 06f4 FFF7FEFF 		bl	VXISI2CWrite
 5161              	.LVL685:
3482:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
 5162              		.loc 1 3482 0
 5163 06f8 0021     		movs	r1, #0
 5164 06fa EF20     		movs	r0, #239
 5165 06fc FFF7FEFF 		bl	VXISI2CWrite
 5166              	.LVL686:
3483:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
 5167              		.loc 1 3483 0
 5168 0700 3021     		movs	r1, #48
 5169 0702 F020     		movs	r0, #240
 5170 0704 FFF7FEFF 		bl	VXISI2CWrite
 5171              	.LVL687:
3484:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
 5172              		.loc 1 3484 0
 5173 0708 4321     		movs	r1, #67
 5174 070a F120     		movs	r0, #241
 5175 070c FFF7FEFF 		bl	VXISI2CWrite
 5176              	.LVL688:
3485:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
 5177              		.loc 1 3485 0
 5178 0710 1F21     		movs	r1, #31
 5179 0712 F220     		movs	r0, #242
 5180 0714 FFF7FEFF 		bl	VXISI2CWrite
 5181              	.LVL689:
3486:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
 5182              		.loc 1 3486 0
 5183 0718 1F21     		movs	r1, #31
 5184 071a F320     		movs	r0, #243
 5185 071c FFF7FEFF 		bl	VXISI2CWrite
 5186              	.LVL690:
3487:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
 5187              		.loc 1 3487 0
ARM GAS  /tmp/cclqPDF2.s 			page 181


 5188 0720 2221     		movs	r1, #34
 5189 0722 F420     		movs	r0, #244
 5190 0724 FFF7FEFF 		bl	VXISI2CWrite
 5191              	.LVL691:
3488:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
 5192              		.loc 1 3488 0
 5193 0728 7321     		movs	r1, #115
 5194 072a F520     		movs	r0, #245
 5195 072c FFF7FEFF 		bl	VXISI2CWrite
 5196              	.LVL692:
3489:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
 5197              		.loc 1 3489 0
 5198 0730 5321     		movs	r1, #83
 5199 0732 F620     		movs	r0, #246
 5200 0734 FFF7FEFF 		bl	VXISI2CWrite
 5201              	.LVL693:
3490:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
 5202              		.loc 1 3490 0
 5203 0738 8021     		movs	r1, #128
 5204 073a F720     		movs	r0, #247
 5205 073c FFF7FEFF 		bl	VXISI2CWrite
 5206              	.LVL694:
3491:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
 5207              		.loc 1 3491 0
 5208 0740 0121     		movs	r1, #1
 5209 0742 F820     		movs	r0, #248
 5210 0744 FFF7FEFF 		bl	VXISI2CWrite
 5211              	.LVL695:
3492:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
 5212              		.loc 1 3492 0
 5213 0748 0121     		movs	r1, #1
 5214 074a F920     		movs	r0, #249
 5215 074c FFF7FEFF 		bl	VXISI2CWrite
 5216              	.LVL696:
3493:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
 5217              		.loc 1 3493 0
 5218 0750 0021     		movs	r1, #0
 5219 0752 FA20     		movs	r0, #250
 5220 0754 FFF7FEFF 		bl	VXISI2CWrite
 5221              	.LVL697:
3494:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
 5222              		.loc 1 3494 0
 5223 0758 0021     		movs	r1, #0
 5224 075a FB20     		movs	r0, #251
 5225 075c FFF7FEFF 		bl	VXISI2CWrite
 5226              	.LVL698:
3495:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
 5227              		.loc 1 3495 0
 5228 0760 0021     		movs	r1, #0
 5229 0762 FC20     		movs	r0, #252
 5230 0764 FFF7FEFF 		bl	VXISI2CWrite
 5231              	.LVL699:
3496:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
 5232              		.loc 1 3496 0
 5233 0768 7021     		movs	r1, #112
 5234 076a FD20     		movs	r0, #253
 5235 076c FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cclqPDF2.s 			page 182


 5236              	.LVL700:
3497:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
 5237              		.loc 1 3497 0
 5238 0770 4021     		movs	r1, #64
 5239 0772 FE20     		movs	r0, #254
 5240 0774 FFF7FEFF 		bl	VXISI2CWrite
 5241              	.LVL701:
3498:Src/main.c    **** 			 
 5242              		.loc 1 3498 0
 5243 0778 0721     		movs	r1, #7
 5244 077a FF20     		movs	r0, #255
 5245 077c FFF7FEFF 		bl	VXISI2CWrite
 5246              	.LVL702:
3500:Src/main.c    **** 
 5247              		.loc 1 3500 0
 5248 0780 08BD     		pop	{r3, pc}
 5249              		.cfi_endproc
 5250              	.LFE92:
 5252 0782 00BF     		.section	.text.SET_AHD_MDOE,"ax",%progbits
 5253              		.align	1
 5254              		.global	SET_AHD_MDOE
 5255              		.syntax unified
 5256              		.thumb
 5257              		.thumb_func
 5258              		.fpu softvfp
 5260              	SET_AHD_MDOE:
 5261              	.LFB93:
3503:Src/main.c    **** 	Printf("\r\nSET_AHD_MDOE...");
 5262              		.loc 1 3503 0
 5263              		.cfi_startproc
 5264              		@ args = 0, pretend = 0, frame = 0
 5265              		@ frame_needed = 0, uses_anonymous_args = 0
 5266 0000 08B5     		push	{r3, lr}
 5267              	.LCFI38:
 5268              		.cfi_def_cfa_offset 8
 5269              		.cfi_offset 3, -8
 5270              		.cfi_offset 14, -4
3504:Src/main.c    **** 
 5271              		.loc 1 3504 0
 5272 0002 FE48     		ldr	r0, .L198
 5273 0004 FFF7FEFF 		bl	Printf
 5274              	.LVL703:
3506:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);
 5275              		.loc 1 3506 0
 5276 0008 4221     		movs	r1, #66
 5277 000a 0020     		movs	r0, #0
 5278 000c FFF7FEFF 		bl	VXISI2CWrite
 5279              	.LVL704:
3507:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
 5280              		.loc 1 3507 0
 5281 0010 0021     		movs	r1, #0
 5282 0012 0120     		movs	r0, #1
 5283 0014 FFF7FEFF 		bl	VXISI2CWrite
 5284              	.LVL705:
3508:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
 5285              		.loc 1 3508 0
 5286 0018 0021     		movs	r1, #0
ARM GAS  /tmp/cclqPDF2.s 			page 183


 5287 001a 0220     		movs	r0, #2
 5288 001c FFF7FEFF 		bl	VXISI2CWrite
 5289              	.LVL706:
3509:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
 5290              		.loc 1 3509 0
 5291 0020 7521     		movs	r1, #117
 5292 0022 0320     		movs	r0, #3
 5293 0024 FFF7FEFF 		bl	VXISI2CWrite
 5294              	.LVL707:
3510:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
 5295              		.loc 1 3510 0
 5296 0028 1821     		movs	r1, #24
 5297 002a 0420     		movs	r0, #4
 5298 002c FFF7FEFF 		bl	VXISI2CWrite
 5299              	.LVL708:
3511:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
 5300              		.loc 1 3511 0
 5301 0030 8021     		movs	r1, #128
 5302 0032 0520     		movs	r0, #5
 5303 0034 FFF7FEFF 		bl	VXISI2CWrite
 5304              	.LVL709:
3512:Src/main.c    **** 	VXISI2CWrite(0x07,0x0C);
 5305              		.loc 1 3512 0
 5306 0038 2021     		movs	r1, #32
 5307 003a 0620     		movs	r0, #6
 5308 003c FFF7FEFF 		bl	VXISI2CWrite
 5309              	.LVL710:
3513:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
 5310              		.loc 1 3513 0
 5311 0040 0C21     		movs	r1, #12
 5312 0042 0720     		movs	r0, #7
 5313 0044 FFF7FEFF 		bl	VXISI2CWrite
 5314              	.LVL711:
3514:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
 5315              		.loc 1 3514 0
 5316 0048 4021     		movs	r1, #64
 5317 004a 0820     		movs	r0, #8
 5318 004c FFF7FEFF 		bl	VXISI2CWrite
 5319              	.LVL712:
3515:Src/main.c    **** 	VXISI2CWrite(0x0A,0x40);
 5320              		.loc 1 3515 0
 5321 0050 0A21     		movs	r1, #10
 5322 0052 0920     		movs	r0, #9
 5323 0054 FFF7FEFF 		bl	VXISI2CWrite
 5324              	.LVL713:
3516:Src/main.c    **** 	VXISI2CWrite(0x0B,0x0A);
 5325              		.loc 1 3516 0
 5326 0058 4021     		movs	r1, #64
 5327 005a 0A20     		movs	r0, #10
 5328 005c FFF7FEFF 		bl	VXISI2CWrite
 5329              	.LVL714:
3517:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
 5330              		.loc 1 3517 0
 5331 0060 0A21     		movs	r1, #10
 5332 0062 0B20     		movs	r0, #11
 5333 0064 FFF7FEFF 		bl	VXISI2CWrite
 5334              	.LVL715:
ARM GAS  /tmp/cclqPDF2.s 			page 184


3518:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
 5335              		.loc 1 3518 0
 5336 0068 0021     		movs	r1, #0
 5337 006a 0C20     		movs	r0, #12
 5338 006c FFF7FEFF 		bl	VXISI2CWrite
 5339              	.LVL716:
3519:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
 5340              		.loc 1 3519 0
 5341 0070 2021     		movs	r1, #32
 5342 0072 0D20     		movs	r0, #13
 5343 0074 FFF7FEFF 		bl	VXISI2CWrite
 5344              	.LVL717:
3520:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
 5345              		.loc 1 3520 0
 5346 0078 1021     		movs	r1, #16
 5347 007a 0E20     		movs	r0, #14
 5348 007c FFF7FEFF 		bl	VXISI2CWrite
 5349              	.LVL718:
3521:Src/main.c    **** 	VXISI2CWrite(0x10,0x81);
 5350              		.loc 1 3521 0
 5351 0080 0021     		movs	r1, #0
 5352 0082 0F20     		movs	r0, #15
 5353 0084 FFF7FEFF 		bl	VXISI2CWrite
 5354              	.LVL719:
3522:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
 5355              		.loc 1 3522 0
 5356 0088 8121     		movs	r1, #129
 5357 008a 1020     		movs	r0, #16
 5358 008c FFF7FEFF 		bl	VXISI2CWrite
 5359              	.LVL720:
3523:Src/main.c    **** 	VXISI2CWrite(0x12,0x74);
 5360              		.loc 1 3523 0
 5361 0090 8221     		movs	r1, #130
 5362 0092 1120     		movs	r0, #17
 5363 0094 FFF7FEFF 		bl	VXISI2CWrite
 5364              	.LVL721:
3524:Src/main.c    **** 	VXISI2CWrite(0x13,0x80);
 5365              		.loc 1 3524 0
 5366 0098 7421     		movs	r1, #116
 5367 009a 1220     		movs	r0, #18
 5368 009c FFF7FEFF 		bl	VXISI2CWrite
 5369              	.LVL722:
3525:Src/main.c    **** 	VXISI2CWrite(0x14,0x38);
 5370              		.loc 1 3525 0
 5371 00a0 8021     		movs	r1, #128
 5372 00a2 1320     		movs	r0, #19
 5373 00a4 FFF7FEFF 		bl	VXISI2CWrite
 5374              	.LVL723:
3526:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
 5375              		.loc 1 3526 0
 5376 00a8 3821     		movs	r1, #56
 5377 00aa 1420     		movs	r0, #20
 5378 00ac FFF7FEFF 		bl	VXISI2CWrite
 5379              	.LVL724:
3527:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
 5380              		.loc 1 3527 0
 5381 00b0 7821     		movs	r1, #120
ARM GAS  /tmp/cclqPDF2.s 			page 185


 5382 00b2 1520     		movs	r0, #21
 5383 00b4 FFF7FEFF 		bl	VXISI2CWrite
 5384              	.LVL725:
3528:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
 5385              		.loc 1 3528 0
 5386 00b8 FE21     		movs	r1, #254
 5387 00ba 1620     		movs	r0, #22
 5388 00bc FFF7FEFF 		bl	VXISI2CWrite
 5389              	.LVL726:
3529:Src/main.c    **** 	VXISI2CWrite(0x18,0xC0);
 5390              		.loc 1 3529 0
 5391 00c0 0021     		movs	r1, #0
 5392 00c2 1720     		movs	r0, #23
 5393 00c4 FFF7FEFF 		bl	VXISI2CWrite
 5394              	.LVL727:
3530:Src/main.c    **** 	VXISI2CWrite(0x19,0x01);
 5395              		.loc 1 3530 0
 5396 00c8 C021     		movs	r1, #192
 5397 00ca 1820     		movs	r0, #24
 5398 00cc FFF7FEFF 		bl	VXISI2CWrite
 5399              	.LVL728:
3531:Src/main.c    **** 	VXISI2CWrite(0x1A,0x20);
 5400              		.loc 1 3531 0
 5401 00d0 0121     		movs	r1, #1
 5402 00d2 1920     		movs	r0, #25
 5403 00d4 FFF7FEFF 		bl	VXISI2CWrite
 5404              	.LVL729:
3532:Src/main.c    **** 	VXISI2CWrite(0x1B,0x30);
 5405              		.loc 1 3532 0
 5406 00d8 2021     		movs	r1, #32
 5407 00da 1A20     		movs	r0, #26
 5408 00dc FFF7FEFF 		bl	VXISI2CWrite
 5409              	.LVL730:
3533:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
 5410              		.loc 1 3533 0
 5411 00e0 3021     		movs	r1, #48
 5412 00e2 1B20     		movs	r0, #27
 5413 00e4 FFF7FEFF 		bl	VXISI2CWrite
 5414              	.LVL731:
3534:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
 5415              		.loc 1 3534 0
 5416 00e8 0021     		movs	r1, #0
 5417 00ea 1C20     		movs	r0, #28
 5418 00ec FFF7FEFF 		bl	VXISI2CWrite
 5419              	.LVL732:
3535:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
 5420              		.loc 1 3535 0
 5421 00f0 0021     		movs	r1, #0
 5422 00f2 1D20     		movs	r0, #29
 5423 00f4 FFF7FEFF 		bl	VXISI2CWrite
 5424              	.LVL733:
3536:Src/main.c    **** 	VXISI2CWrite(0x1F,0xA4);
 5425              		.loc 1 3536 0
 5426 00f8 2021     		movs	r1, #32
 5427 00fa 1E20     		movs	r0, #30
 5428 00fc FFF7FEFF 		bl	VXISI2CWrite
 5429              	.LVL734:
ARM GAS  /tmp/cclqPDF2.s 			page 186


3537:Src/main.c    **** 	VXISI2CWrite(0x20,0x50);
 5430              		.loc 1 3537 0
 5431 0100 A421     		movs	r1, #164
 5432 0102 1F20     		movs	r0, #31
 5433 0104 FFF7FEFF 		bl	VXISI2CWrite
 5434              	.LVL735:
3538:Src/main.c    **** 	VXISI2CWrite(0x21,0xE2);
 5435              		.loc 1 3538 0
 5436 0108 5021     		movs	r1, #80
 5437 010a 2020     		movs	r0, #32
 5438 010c FFF7FEFF 		bl	VXISI2CWrite
 5439              	.LVL736:
3539:Src/main.c    **** 	VXISI2CWrite(0x22,0x87);
 5440              		.loc 1 3539 0
 5441 0110 E221     		movs	r1, #226
 5442 0112 2120     		movs	r0, #33
 5443 0114 FFF7FEFF 		bl	VXISI2CWrite
 5444              	.LVL737:
3540:Src/main.c    **** 	VXISI2CWrite(0x23,0x98);
 5445              		.loc 1 3540 0
 5446 0118 8721     		movs	r1, #135
 5447 011a 2220     		movs	r0, #34
 5448 011c FFF7FEFF 		bl	VXISI2CWrite
 5449              	.LVL738:
3541:Src/main.c    **** 	VXISI2CWrite(0x24,0x80);
 5450              		.loc 1 3541 0
 5451 0120 9821     		movs	r1, #152
 5452 0122 2320     		movs	r0, #35
 5453 0124 FFF7FEFF 		bl	VXISI2CWrite
 5454              	.LVL739:
3542:Src/main.c    **** 	VXISI2CWrite(0x25,0x44);
 5455              		.loc 1 3542 0
 5456 0128 8021     		movs	r1, #128
 5457 012a 2420     		movs	r0, #36
 5458 012c FFF7FEFF 		bl	VXISI2CWrite
 5459              	.LVL740:
3543:Src/main.c    **** 	VXISI2CWrite(0x26,0x65);
 5460              		.loc 1 3543 0
 5461 0130 4421     		movs	r1, #68
 5462 0132 2520     		movs	r0, #37
 5463 0134 FFF7FEFF 		bl	VXISI2CWrite
 5464              	.LVL741:
3544:Src/main.c    **** 	VXISI2CWrite(0x27,0x38);
 5465              		.loc 1 3544 0
 5466 0138 6521     		movs	r1, #101
 5467 013a 2620     		movs	r0, #38
 5468 013c FFF7FEFF 		bl	VXISI2CWrite
 5469              	.LVL742:
3545:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
 5470              		.loc 1 3545 0
 5471 0140 3821     		movs	r1, #56
 5472 0142 2720     		movs	r0, #39
 5473 0144 FFF7FEFF 		bl	VXISI2CWrite
 5474              	.LVL743:
3546:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
 5475              		.loc 1 3546 0
 5476 0148 F021     		movs	r1, #240
ARM GAS  /tmp/cclqPDF2.s 			page 187


 5477 014a 2820     		movs	r0, #40
 5478 014c FFF7FEFF 		bl	VXISI2CWrite
 5479              	.LVL744:
3547:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
 5480              		.loc 1 3547 0
 5481 0150 0021     		movs	r1, #0
 5482 0152 2920     		movs	r0, #41
 5483 0154 FFF7FEFF 		bl	VXISI2CWrite
 5484              	.LVL745:
3548:Src/main.c    **** 	VXISI2CWrite(0x2B,0x11);
 5485              		.loc 1 3548 0
 5486 0158 0021     		movs	r1, #0
 5487 015a 2A20     		movs	r0, #42
 5488 015c FFF7FEFF 		bl	VXISI2CWrite
 5489              	.LVL746:
3549:Src/main.c    **** 	VXISI2CWrite(0x2C,0x00);
 5490              		.loc 1 3549 0
 5491 0160 1121     		movs	r1, #17
 5492 0162 2B20     		movs	r0, #43
 5493 0164 FFF7FEFF 		bl	VXISI2CWrite
 5494              	.LVL747:
3550:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
 5495              		.loc 1 3550 0
 5496 0168 0021     		movs	r1, #0
 5497 016a 2C20     		movs	r0, #44
 5498 016c FFF7FEFF 		bl	VXISI2CWrite
 5499              	.LVL748:
3551:Src/main.c    **** 	VXISI2CWrite(0x2E,0x47);
 5500              		.loc 1 3551 0
 5501 0170 0021     		movs	r1, #0
 5502 0172 2D20     		movs	r0, #45
 5503 0174 FFF7FEFF 		bl	VXISI2CWrite
 5504              	.LVL749:
3552:Src/main.c    **** 	VXISI2CWrite(0x2F,0x80);
 5505              		.loc 1 3552 0
 5506 0178 4721     		movs	r1, #71
 5507 017a 2E20     		movs	r0, #46
 5508 017c FFF7FEFF 		bl	VXISI2CWrite
 5509              	.LVL750:
3553:Src/main.c    **** 	VXISI2CWrite(0x30,0x38);
 5510              		.loc 1 3553 0
 5511 0180 8021     		movs	r1, #128
 5512 0182 2F20     		movs	r0, #47
 5513 0184 FFF7FEFF 		bl	VXISI2CWrite
 5514              	.LVL751:
3554:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
 5515              		.loc 1 3554 0
 5516 0188 3821     		movs	r1, #56
 5517 018a 3020     		movs	r0, #48
 5518 018c FFF7FEFF 		bl	VXISI2CWrite
 5519              	.LVL752:
3555:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
 5520              		.loc 1 3555 0
 5521 0190 8021     		movs	r1, #128
 5522 0192 3120     		movs	r0, #49
 5523 0194 FFF7FEFF 		bl	VXISI2CWrite
 5524              	.LVL753:
ARM GAS  /tmp/cclqPDF2.s 			page 188


3556:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
 5525              		.loc 1 3556 0
 5526 0198 8021     		movs	r1, #128
 5527 019a 3220     		movs	r0, #50
 5528 019c FFF7FEFF 		bl	VXISI2CWrite
 5529              	.LVL754:
3557:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
 5530              		.loc 1 3557 0
 5531 01a0 8021     		movs	r1, #128
 5532 01a2 3320     		movs	r0, #51
 5533 01a4 FFF7FEFF 		bl	VXISI2CWrite
 5534              	.LVL755:
3558:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
 5535              		.loc 1 3558 0
 5536 01a8 A021     		movs	r1, #160
 5537 01aa 3420     		movs	r0, #52
 5538 01ac FFF7FEFF 		bl	VXISI2CWrite
 5539              	.LVL756:
3559:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
 5540              		.loc 1 3559 0
 5541 01b0 1821     		movs	r1, #24
 5542 01b2 3520     		movs	r0, #53
 5543 01b4 FFF7FEFF 		bl	VXISI2CWrite
 5544              	.LVL757:
3560:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
 5545              		.loc 1 3560 0
 5546 01b8 4621     		movs	r1, #70
 5547 01ba 3620     		movs	r0, #54
 5548 01bc FFF7FEFF 		bl	VXISI2CWrite
 5549              	.LVL758:
3561:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
 5550              		.loc 1 3561 0
 5551 01c0 6421     		movs	r1, #100
 5552 01c2 3720     		movs	r0, #55
 5553 01c4 FFF7FEFF 		bl	VXISI2CWrite
 5554              	.LVL759:
3562:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
 5555              		.loc 1 3562 0
 5556 01c8 0021     		movs	r1, #0
 5557 01ca 3820     		movs	r0, #56
 5558 01cc FFF7FEFF 		bl	VXISI2CWrite
 5559              	.LVL760:
3563:Src/main.c    **** 	VXISI2CWrite(0x3A,0x73);
 5560              		.loc 1 3563 0
 5561 01d0 FF21     		movs	r1, #255
 5562 01d2 3920     		movs	r0, #57
 5563 01d4 FFF7FEFF 		bl	VXISI2CWrite
 5564              	.LVL761:
3564:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
 5565              		.loc 1 3564 0
 5566 01d8 7321     		movs	r1, #115
 5567 01da 3A20     		movs	r0, #58
 5568 01dc FFF7FEFF 		bl	VXISI2CWrite
 5569              	.LVL762:
3565:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
 5570              		.loc 1 3565 0
 5571 01e0 8021     		movs	r1, #128
ARM GAS  /tmp/cclqPDF2.s 			page 189


 5572 01e2 3B20     		movs	r0, #59
 5573 01e4 FFF7FEFF 		bl	VXISI2CWrite
 5574              	.LVL763:
3566:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
 5575              		.loc 1 3566 0
 5576 01e8 8021     		movs	r1, #128
 5577 01ea 3C20     		movs	r0, #60
 5578 01ec FFF7FEFF 		bl	VXISI2CWrite
 5579              	.LVL764:
3567:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
 5580              		.loc 1 3567 0
 5581 01f0 8021     		movs	r1, #128
 5582 01f2 3D20     		movs	r0, #61
 5583 01f4 FFF7FEFF 		bl	VXISI2CWrite
 5584              	.LVL765:
3568:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
 5585              		.loc 1 3568 0
 5586 01f8 8021     		movs	r1, #128
 5587 01fa 3E20     		movs	r0, #62
 5588 01fc FFF7FEFF 		bl	VXISI2CWrite
 5589              	.LVL766:
3569:Src/main.c    **** 	VXISI2CWrite(0x40,0x80);
 5590              		.loc 1 3569 0
 5591 0200 8021     		movs	r1, #128
 5592 0202 3F20     		movs	r0, #63
 5593 0204 FFF7FEFF 		bl	VXISI2CWrite
 5594              	.LVL767:
3570:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);
 5595              		.loc 1 3570 0
 5596 0208 8021     		movs	r1, #128
 5597 020a 4020     		movs	r0, #64
 5598 020c FFF7FEFF 		bl	VXISI2CWrite
 5599              	.LVL768:
3571:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
 5600              		.loc 1 3571 0
 5601 0210 6021     		movs	r1, #96
 5602 0212 4120     		movs	r0, #65
 5603 0214 FFF7FEFF 		bl	VXISI2CWrite
 5604              	.LVL769:
3572:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
 5605              		.loc 1 3572 0
 5606 0218 5F21     		movs	r1, #95
 5607 021a 4220     		movs	r0, #66
 5608 021c FFF7FEFF 		bl	VXISI2CWrite
 5609              	.LVL770:
3573:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
 5610              		.loc 1 3573 0
 5611 0220 3721     		movs	r1, #55
 5612 0222 4320     		movs	r0, #67
 5613 0224 FFF7FEFF 		bl	VXISI2CWrite
 5614              	.LVL771:
3574:Src/main.c    **** 	VXISI2CWrite(0x45,0x00);
 5615              		.loc 1 3574 0
 5616 0228 1421     		movs	r1, #20
 5617 022a 4420     		movs	r0, #68
 5618 022c FFF7FEFF 		bl	VXISI2CWrite
 5619              	.LVL772:
ARM GAS  /tmp/cclqPDF2.s 			page 190


3575:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
 5620              		.loc 1 3575 0
 5621 0230 0021     		movs	r1, #0
 5622 0232 4520     		movs	r0, #69
 5623 0234 FFF7FEFF 		bl	VXISI2CWrite
 5624              	.LVL773:
3576:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
 5625              		.loc 1 3576 0
 5626 0238 0021     		movs	r1, #0
 5627 023a 4620     		movs	r0, #70
 5628 023c FFF7FEFF 		bl	VXISI2CWrite
 5629              	.LVL774:
3577:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
 5630              		.loc 1 3577 0
 5631 0240 0021     		movs	r1, #0
 5632 0242 4720     		movs	r0, #71
 5633 0244 FFF7FEFF 		bl	VXISI2CWrite
 5634              	.LVL775:
3578:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
 5635              		.loc 1 3578 0
 5636 0248 0021     		movs	r1, #0
 5637 024a 4820     		movs	r0, #72
 5638 024c FFF7FEFF 		bl	VXISI2CWrite
 5639              	.LVL776:
3579:Src/main.c    **** 	VXISI2CWrite(0x4A,0x00);
 5640              		.loc 1 3579 0
 5641 0250 0021     		movs	r1, #0
 5642 0252 4920     		movs	r0, #73
 5643 0254 FFF7FEFF 		bl	VXISI2CWrite
 5644              	.LVL777:
3580:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
 5645              		.loc 1 3580 0
 5646 0258 0021     		movs	r1, #0
 5647 025a 4A20     		movs	r0, #74
 5648 025c FFF7FEFF 		bl	VXISI2CWrite
 5649              	.LVL778:
3581:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
 5650              		.loc 1 3581 0
 5651 0260 2021     		movs	r1, #32
 5652 0262 4B20     		movs	r0, #75
 5653 0264 FFF7FEFF 		bl	VXISI2CWrite
 5654              	.LVL779:
3582:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
 5655              		.loc 1 3582 0
 5656 0268 0021     		movs	r1, #0
 5657 026a 4C20     		movs	r0, #76
 5658 026c FFF7FEFF 		bl	VXISI2CWrite
 5659              	.LVL780:
3583:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
 5660              		.loc 1 3583 0
 5661 0270 0021     		movs	r1, #0
 5662 0272 4D20     		movs	r0, #77
 5663 0274 FFF7FEFF 		bl	VXISI2CWrite
 5664              	.LVL781:
3584:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
 5665              		.loc 1 3584 0
 5666 0278 0021     		movs	r1, #0
ARM GAS  /tmp/cclqPDF2.s 			page 191


 5667 027a 4E20     		movs	r0, #78
 5668 027c FFF7FEFF 		bl	VXISI2CWrite
 5669              	.LVL782:
3585:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
 5670              		.loc 1 3585 0
 5671 0280 7F21     		movs	r1, #127
 5672 0282 4F20     		movs	r0, #79
 5673 0284 FFF7FEFF 		bl	VXISI2CWrite
 5674              	.LVL783:
3586:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
 5675              		.loc 1 3586 0
 5676 0288 2021     		movs	r1, #32
 5677 028a 5020     		movs	r0, #80
 5678 028c FFF7FEFF 		bl	VXISI2CWrite
 5679              	.LVL784:
3587:Src/main.c    **** 	VXISI2CWrite(0x52,0xA4);
 5680              		.loc 1 3587 0
 5681 0290 0021     		movs	r1, #0
 5682 0292 5120     		movs	r0, #81
 5683 0294 FFF7FEFF 		bl	VXISI2CWrite
 5684              	.LVL785:
3588:Src/main.c    **** 	VXISI2CWrite(0x53,0xC0);
 5685              		.loc 1 3588 0
 5686 0298 A421     		movs	r1, #164
 5687 029a 5220     		movs	r0, #82
 5688 029c FFF7FEFF 		bl	VXISI2CWrite
 5689              	.LVL786:
3589:Src/main.c    **** 	VXISI2CWrite(0x54,0x42);
 5690              		.loc 1 3589 0
 5691 02a0 C021     		movs	r1, #192
 5692 02a2 5320     		movs	r0, #83
 5693 02a4 FFF7FEFF 		bl	VXISI2CWrite
 5694              	.LVL787:
3590:Src/main.c    **** 	VXISI2CWrite(0x55,0x60);
 5695              		.loc 1 3590 0
 5696 02a8 4221     		movs	r1, #66
 5697 02aa 5420     		movs	r0, #84
 5698 02ac FFF7FEFF 		bl	VXISI2CWrite
 5699              	.LVL788:
3591:Src/main.c    **** 	VXISI2CWrite(0x56,0x5C);
 5700              		.loc 1 3591 0
 5701 02b0 6021     		movs	r1, #96
 5702 02b2 5520     		movs	r0, #85
 5703 02b4 FFF7FEFF 		bl	VXISI2CWrite
 5704              	.LVL789:
3592:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
 5705              		.loc 1 3592 0
 5706 02b8 5C21     		movs	r1, #92
 5707 02ba 5620     		movs	r0, #86
 5708 02bc FFF7FEFF 		bl	VXISI2CWrite
 5709              	.LVL790:
3593:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
 5710              		.loc 1 3593 0
 5711 02c0 0421     		movs	r1, #4
 5712 02c2 5720     		movs	r0, #87
 5713 02c4 FFF7FEFF 		bl	VXISI2CWrite
 5714              	.LVL791:
ARM GAS  /tmp/cclqPDF2.s 			page 192


3594:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
 5715              		.loc 1 3594 0
 5716 02c8 0021     		movs	r1, #0
 5717 02ca 5820     		movs	r0, #88
 5718 02cc FFF7FEFF 		bl	VXISI2CWrite
 5719              	.LVL792:
3595:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
 5720              		.loc 1 3595 0
 5721 02d0 0821     		movs	r1, #8
 5722 02d2 5920     		movs	r0, #89
 5723 02d4 FFF7FEFF 		bl	VXISI2CWrite
 5724              	.LVL793:
3596:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
 5725              		.loc 1 3596 0
 5726 02d8 1021     		movs	r1, #16
 5727 02da 5A20     		movs	r0, #90
 5728 02dc FFF7FEFF 		bl	VXISI2CWrite
 5729              	.LVL794:
3597:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
 5730              		.loc 1 3597 0
 5731 02e0 0021     		movs	r1, #0
 5732 02e2 5B20     		movs	r0, #91
 5733 02e4 FFF7FEFF 		bl	VXISI2CWrite
 5734              	.LVL795:
3598:Src/main.c    **** 	VXISI2CWrite(0x5D,0xA8);
 5735              		.loc 1 3598 0
 5736 02e8 6821     		movs	r1, #104
 5737 02ea 5C20     		movs	r0, #92
 5738 02ec FFF7FEFF 		bl	VXISI2CWrite
 5739              	.LVL796:
3599:Src/main.c    **** 	VXISI2CWrite(0x5E,0xC0);
 5740              		.loc 1 3599 0
 5741 02f0 A821     		movs	r1, #168
 5742 02f2 5D20     		movs	r0, #93
 5743 02f4 FFF7FEFF 		bl	VXISI2CWrite
 5744              	.LVL797:
3600:Src/main.c    **** 	VXISI2CWrite(0x5F,0x53);
 5745              		.loc 1 3600 0
 5746 02f8 C021     		movs	r1, #192
 5747 02fa 5E20     		movs	r0, #94
 5748 02fc FFF7FEFF 		bl	VXISI2CWrite
 5749              	.LVL798:
3601:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
 5750              		.loc 1 3601 0
 5751 0300 5321     		movs	r1, #83
 5752 0302 5F20     		movs	r0, #95
 5753 0304 FFF7FEFF 		bl	VXISI2CWrite
 5754              	.LVL799:
3602:Src/main.c    **** 	VXISI2CWrite(0x61,0xCC);
 5755              		.loc 1 3602 0
 5756 0308 E021     		movs	r1, #224
 5757 030a 6020     		movs	r0, #96
 5758 030c FFF7FEFF 		bl	VXISI2CWrite
 5759              	.LVL800:
3603:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
 5760              		.loc 1 3603 0
 5761 0310 CC21     		movs	r1, #204
ARM GAS  /tmp/cclqPDF2.s 			page 193


 5762 0312 6120     		movs	r0, #97
 5763 0314 FFF7FEFF 		bl	VXISI2CWrite
 5764              	.LVL801:
3604:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
 5765              		.loc 1 3604 0
 5766 0318 3321     		movs	r1, #51
 5767 031a 6220     		movs	r0, #98
 5768 031c FFF7FEFF 		bl	VXISI2CWrite
 5769              	.LVL802:
3605:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
 5770              		.loc 1 3605 0
 5771 0320 0121     		movs	r1, #1
 5772 0322 6320     		movs	r0, #99
 5773 0324 FFF7FEFF 		bl	VXISI2CWrite
 5774              	.LVL803:
3606:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
 5775              		.loc 1 3606 0
 5776 0328 FF21     		movs	r1, #255
 5777 032a 6420     		movs	r0, #100
 5778 032c FFF7FEFF 		bl	VXISI2CWrite
 5779              	.LVL804:
3607:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
 5780              		.loc 1 3607 0
 5781 0330 0121     		movs	r1, #1
 5782 0332 6520     		movs	r0, #101
 5783 0334 FFF7FEFF 		bl	VXISI2CWrite
 5784              	.LVL805:
3608:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
 5785              		.loc 1 3608 0
 5786 0338 FF21     		movs	r1, #255
 5787 033a 6620     		movs	r0, #102
 5788 033c FFF7FEFF 		bl	VXISI2CWrite
 5789              	.LVL806:
3609:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
 5790              		.loc 1 3609 0
 5791 0340 8921     		movs	r1, #137
 5792 0342 6720     		movs	r0, #103
 5793 0344 FFF7FEFF 		bl	VXISI2CWrite
 5794              	.LVL807:
3610:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
 5795              		.loc 1 3610 0
 5796 0348 AB21     		movs	r1, #171
 5797 034a 6820     		movs	r0, #104
 5798 034c FFF7FEFF 		bl	VXISI2CWrite
 5799              	.LVL808:
3611:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
 5800              		.loc 1 3611 0
 5801 0350 8821     		movs	r1, #136
 5802 0352 6920     		movs	r0, #105
 5803 0354 FFF7FEFF 		bl	VXISI2CWrite
 5804              	.LVL809:
3612:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
 5805              		.loc 1 3612 0
 5806 0358 6E21     		movs	r1, #110
 5807 035a 6A20     		movs	r0, #106
 5808 035c FFF7FEFF 		bl	VXISI2CWrite
 5809              	.LVL810:
ARM GAS  /tmp/cclqPDF2.s 			page 194


3613:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
 5810              		.loc 1 3613 0
 5811 0360 6E21     		movs	r1, #110
 5812 0362 6B20     		movs	r0, #107
 5813 0364 FFF7FEFF 		bl	VXISI2CWrite
 5814              	.LVL811:
3614:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
 5815              		.loc 1 3614 0
 5816 0368 6E21     		movs	r1, #110
 5817 036a 6C20     		movs	r0, #108
 5818 036c FFF7FEFF 		bl	VXISI2CWrite
 5819              	.LVL812:
3615:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
 5820              		.loc 1 3615 0
 5821 0370 0021     		movs	r1, #0
 5822 0372 6D20     		movs	r0, #109
 5823 0374 FFF7FEFF 		bl	VXISI2CWrite
 5824              	.LVL813:
3616:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
 5825              		.loc 1 3616 0
 5826 0378 0021     		movs	r1, #0
 5827 037a 6E20     		movs	r0, #110
 5828 037c FFF7FEFF 		bl	VXISI2CWrite
 5829              	.LVL814:
3617:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
 5830              		.loc 1 3617 0
 5831 0380 0021     		movs	r1, #0
 5832 0382 6F20     		movs	r0, #111
 5833 0384 FFF7FEFF 		bl	VXISI2CWrite
 5834              	.LVL815:
3618:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
 5835              		.loc 1 3618 0
 5836 0388 0021     		movs	r1, #0
 5837 038a 7020     		movs	r0, #112
 5838 038c FFF7FEFF 		bl	VXISI2CWrite
 5839              	.LVL816:
3619:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
 5840              		.loc 1 3619 0
 5841 0390 0021     		movs	r1, #0
 5842 0392 7120     		movs	r0, #113
 5843 0394 FFF7FEFF 		bl	VXISI2CWrite
 5844              	.LVL817:
3620:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
 5845              		.loc 1 3620 0
 5846 0398 0021     		movs	r1, #0
 5847 039a 7220     		movs	r0, #114
 5848 039c FFF7FEFF 		bl	VXISI2CWrite
 5849              	.LVL818:
3621:Src/main.c    **** 	VXISI2CWrite(0x74,0x06);
 5850              		.loc 1 3621 0
 5851 03a0 0021     		movs	r1, #0
 5852 03a2 7320     		movs	r0, #115
 5853 03a4 FFF7FEFF 		bl	VXISI2CWrite
 5854              	.LVL819:
3622:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
 5855              		.loc 1 3622 0
 5856 03a8 0621     		movs	r1, #6
ARM GAS  /tmp/cclqPDF2.s 			page 195


 5857 03aa 7420     		movs	r0, #116
 5858 03ac FFF7FEFF 		bl	VXISI2CWrite
 5859              	.LVL820:
3623:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
 5860              		.loc 1 3623 0
 5861 03b0 FF21     		movs	r1, #255
 5862 03b2 7520     		movs	r0, #117
 5863 03b4 FFF7FEFF 		bl	VXISI2CWrite
 5864              	.LVL821:
3624:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
 5865              		.loc 1 3624 0
 5866 03b8 FF21     		movs	r1, #255
 5867 03ba 7620     		movs	r0, #118
 5868 03bc FFF7FEFF 		bl	VXISI2CWrite
 5869              	.LVL822:
3625:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
 5870              		.loc 1 3625 0
 5871 03c0 FF21     		movs	r1, #255
 5872 03c2 7720     		movs	r0, #119
 5873 03c4 FFF7FEFF 		bl	VXISI2CWrite
 5874              	.LVL823:
3626:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
 5875              		.loc 1 3626 0
 5876 03c8 FF21     		movs	r1, #255
 5877 03ca 7820     		movs	r0, #120
 5878 03cc FFF7FEFF 		bl	VXISI2CWrite
 5879              	.LVL824:
3627:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
 5880              		.loc 1 3627 0
 5881 03d0 FF21     		movs	r1, #255
 5882 03d2 7920     		movs	r0, #121
 5883 03d4 FFF7FEFF 		bl	VXISI2CWrite
 5884              	.LVL825:
3628:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
 5885              		.loc 1 3628 0
 5886 03d8 FF21     		movs	r1, #255
 5887 03da 7A20     		movs	r0, #122
 5888 03dc FFF7FEFF 		bl	VXISI2CWrite
 5889              	.LVL826:
3629:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
 5890              		.loc 1 3629 0
 5891 03e0 FF21     		movs	r1, #255
 5892 03e2 7B20     		movs	r0, #123
 5893 03e4 FFF7FEFF 		bl	VXISI2CWrite
 5894              	.LVL827:
3630:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
 5895              		.loc 1 3630 0
 5896 03e8 FF21     		movs	r1, #255
 5897 03ea 7C20     		movs	r0, #124
 5898 03ec FFF7FEFF 		bl	VXISI2CWrite
 5899              	.LVL828:
3631:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
 5900              		.loc 1 3631 0
 5901 03f0 F021     		movs	r1, #240
 5902 03f2 7D20     		movs	r0, #125
 5903 03f4 FFF7FEFF 		bl	VXISI2CWrite
 5904              	.LVL829:
ARM GAS  /tmp/cclqPDF2.s 			page 196


 5905 03f8 02E0     		b	.L199
 5906              	.L200:
 5907 03fa 00BF     		.align	2
 5908              	.L198:
 5909 03fc 00000000 		.word	.LC36
 5910              	.L199:
3632:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
 5911              		.loc 1 3632 0
 5912 0400 8021     		movs	r1, #128
 5913 0402 7E20     		movs	r0, #126
 5914 0404 FFF7FEFF 		bl	VXISI2CWrite
 5915              	.LVL830:
3633:Src/main.c    **** 	VXISI2CWrite(0x80,0x01);
 5916              		.loc 1 3633 0
 5917 0408 0021     		movs	r1, #0
 5918 040a 7F20     		movs	r0, #127
 5919 040c FFF7FEFF 		bl	VXISI2CWrite
 5920              	.LVL831:
3634:Src/main.c    **** 	VXISI2CWrite(0x81,0x15);
 5921              		.loc 1 3634 0
 5922 0410 0121     		movs	r1, #1
 5923 0412 8020     		movs	r0, #128
 5924 0414 FFF7FEFF 		bl	VXISI2CWrite
 5925              	.LVL832:
3635:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
 5926              		.loc 1 3635 0
 5927 0418 1521     		movs	r1, #21
 5928 041a 8120     		movs	r0, #129
 5929 041c FFF7FEFF 		bl	VXISI2CWrite
 5930              	.LVL833:
3636:Src/main.c    **** 	VXISI2CWrite(0x83,0x2D);
 5931              		.loc 1 3636 0
 5932 0420 4021     		movs	r1, #64
 5933 0422 8220     		movs	r0, #130
 5934 0424 FFF7FEFF 		bl	VXISI2CWrite
 5935              	.LVL834:
3637:Src/main.c    **** 	VXISI2CWrite(0x84,0x57);
 5936              		.loc 1 3637 0
 5937 0428 2D21     		movs	r1, #45
 5938 042a 8320     		movs	r0, #131
 5939 042c FFF7FEFF 		bl	VXISI2CWrite
 5940              	.LVL835:
3638:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
 5941              		.loc 1 3638 0
 5942 0430 5721     		movs	r1, #87
 5943 0432 8420     		movs	r0, #132
 5944 0434 FFF7FEFF 		bl	VXISI2CWrite
 5945              	.LVL836:
3639:Src/main.c    **** 	VXISI2CWrite(0x86,0x00);
 5946              		.loc 1 3639 0
 5947 0438 FD21     		movs	r1, #253
 5948 043a 8520     		movs	r0, #133
 5949 043c FFF7FEFF 		bl	VXISI2CWrite
 5950              	.LVL837:
3640:Src/main.c    **** 	VXISI2CWrite(0x87,0x00);
 5951              		.loc 1 3640 0
 5952 0440 0021     		movs	r1, #0
ARM GAS  /tmp/cclqPDF2.s 			page 197


 5953 0442 8620     		movs	r0, #134
 5954 0444 FFF7FEFF 		bl	VXISI2CWrite
 5955              	.LVL838:
3641:Src/main.c    **** 	VXISI2CWrite(0x88,0x00);
 5956              		.loc 1 3641 0
 5957 0448 0021     		movs	r1, #0
 5958 044a 8720     		movs	r0, #135
 5959 044c FFF7FEFF 		bl	VXISI2CWrite
 5960              	.LVL839:
3642:Src/main.c    **** 	VXISI2CWrite(0x89,0x00);
 5961              		.loc 1 3642 0
 5962 0450 0021     		movs	r1, #0
 5963 0452 8820     		movs	r0, #136
 5964 0454 FFF7FEFF 		bl	VXISI2CWrite
 5965              	.LVL840:
3643:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
 5966              		.loc 1 3643 0
 5967 0458 0021     		movs	r1, #0
 5968 045a 8920     		movs	r0, #137
 5969 045c FFF7FEFF 		bl	VXISI2CWrite
 5970              	.LVL841:
3644:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
 5971              		.loc 1 3644 0
 5972 0460 0021     		movs	r1, #0
 5973 0462 8A20     		movs	r0, #138
 5974 0464 FFF7FEFF 		bl	VXISI2CWrite
 5975              	.LVL842:
3645:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
 5976              		.loc 1 3645 0
 5977 0468 7E21     		movs	r1, #126
 5978 046a 8B20     		movs	r0, #139
 5979 046c FFF7FEFF 		bl	VXISI2CWrite
 5980              	.LVL843:
3646:Src/main.c    **** 	VXISI2CWrite(0x8D,0x17);
 5981              		.loc 1 3646 0
 5982 0470 0321     		movs	r1, #3
 5983 0472 8C20     		movs	r0, #140
 5984 0474 FFF7FEFF 		bl	VXISI2CWrite
 5985              	.LVL844:
3647:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
 5986              		.loc 1 3647 0
 5987 0478 1721     		movs	r1, #23
 5988 047a 8D20     		movs	r0, #141
 5989 047c FFF7FEFF 		bl	VXISI2CWrite
 5990              	.LVL845:
3648:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
 5991              		.loc 1 3648 0
 5992 0480 8C21     		movs	r1, #140
 5993 0482 8E20     		movs	r0, #142
 5994 0484 FFF7FEFF 		bl	VXISI2CWrite
 5995              	.LVL846:
3649:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
 5996              		.loc 1 3649 0
 5997 0488 0021     		movs	r1, #0
 5998 048a 8F20     		movs	r0, #143
 5999 048c FFF7FEFF 		bl	VXISI2CWrite
 6000              	.LVL847:
ARM GAS  /tmp/cclqPDF2.s 			page 198


3650:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
 6001              		.loc 1 3650 0
 6002 0490 CC21     		movs	r1, #204
 6003 0492 9020     		movs	r0, #144
 6004 0494 FFF7FEFF 		bl	VXISI2CWrite
 6005              	.LVL848:
3651:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
 6006              		.loc 1 3651 0
 6007 0498 4121     		movs	r1, #65
 6008 049a 9120     		movs	r0, #145
 6009 049c FFF7FEFF 		bl	VXISI2CWrite
 6010              	.LVL849:
3652:Src/main.c    **** 	VXISI2CWrite(0x93,0x84);
 6011              		.loc 1 3652 0
 6012 04a0 C421     		movs	r1, #196
 6013 04a2 9220     		movs	r0, #146
 6014 04a4 FFF7FEFF 		bl	VXISI2CWrite
 6015              	.LVL850:
3653:Src/main.c    **** 	VXISI2CWrite(0x94,0x98);
 6016              		.loc 1 3653 0
 6017 04a8 8421     		movs	r1, #132
 6018 04aa 9320     		movs	r0, #147
 6019 04ac FFF7FEFF 		bl	VXISI2CWrite
 6020              	.LVL851:
3654:Src/main.c    **** 	VXISI2CWrite(0x95,0x80);
 6021              		.loc 1 3654 0
 6022 04b0 9821     		movs	r1, #152
 6023 04b2 9420     		movs	r0, #148
 6024 04b4 FFF7FEFF 		bl	VXISI2CWrite
 6025              	.LVL852:
3655:Src/main.c    **** 	VXISI2CWrite(0x96,0x65);
 6026              		.loc 1 3655 0
 6027 04b8 8021     		movs	r1, #128
 6028 04ba 9520     		movs	r0, #149
 6029 04bc FFF7FEFF 		bl	VXISI2CWrite
 6030              	.LVL853:
3656:Src/main.c    **** 	VXISI2CWrite(0x97,0x70);
 6031              		.loc 1 3656 0
 6032 04c0 6521     		movs	r1, #101
 6033 04c2 9620     		movs	r0, #150
 6034 04c4 FFF7FEFF 		bl	VXISI2CWrite
 6035              	.LVL854:
3657:Src/main.c    **** 	VXISI2CWrite(0x98,0x29);
 6036              		.loc 1 3657 0
 6037 04c8 7021     		movs	r1, #112
 6038 04ca 9720     		movs	r0, #151
 6039 04cc FFF7FEFF 		bl	VXISI2CWrite
 6040              	.LVL855:
3658:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
 6041              		.loc 1 3658 0
 6042 04d0 2921     		movs	r1, #41
 6043 04d2 9820     		movs	r0, #152
 6044 04d4 FFF7FEFF 		bl	VXISI2CWrite
 6045              	.LVL856:
3659:Src/main.c    **** 	VXISI2CWrite(0x9A,0x00);
 6046              		.loc 1 3659 0
 6047 04d8 9021     		movs	r1, #144
ARM GAS  /tmp/cclqPDF2.s 			page 199


 6048 04da 9920     		movs	r0, #153
 6049 04dc FFF7FEFF 		bl	VXISI2CWrite
 6050              	.LVL857:
3660:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
 6051              		.loc 1 3660 0
 6052 04e0 0021     		movs	r1, #0
 6053 04e2 9A20     		movs	r0, #154
 6054 04e4 FFF7FEFF 		bl	VXISI2CWrite
 6055              	.LVL858:
3661:Src/main.c    **** 	VXISI2CWrite(0x9C,0x00);
 6056              		.loc 1 3661 0
 6057 04e8 0421     		movs	r1, #4
 6058 04ea 9B20     		movs	r0, #155
 6059 04ec FFF7FEFF 		bl	VXISI2CWrite
 6060              	.LVL859:
3662:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
 6061              		.loc 1 3662 0
 6062 04f0 0021     		movs	r1, #0
 6063 04f2 9C20     		movs	r0, #156
 6064 04f4 FFF7FEFF 		bl	VXISI2CWrite
 6065              	.LVL860:
3663:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
 6066              		.loc 1 3663 0
 6067 04f8 0021     		movs	r1, #0
 6068 04fa 9D20     		movs	r0, #157
 6069 04fc FFF7FEFF 		bl	VXISI2CWrite
 6070              	.LVL861:
3664:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
 6071              		.loc 1 3664 0
 6072 0500 0421     		movs	r1, #4
 6073 0502 9E20     		movs	r0, #158
 6074 0504 FFF7FEFF 		bl	VXISI2CWrite
 6075              	.LVL862:
3665:Src/main.c    **** 	VXISI2CWrite(0xA0,0x80);
 6076              		.loc 1 3665 0
 6077 0508 6521     		movs	r1, #101
 6078 050a 9F20     		movs	r0, #159
 6079 050c FFF7FEFF 		bl	VXISI2CWrite
 6080              	.LVL863:
3666:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD8);
 6081              		.loc 1 3666 0
 6082 0510 8021     		movs	r1, #128
 6083 0512 A020     		movs	r0, #160
 6084 0514 FFF7FEFF 		bl	VXISI2CWrite
 6085              	.LVL864:
3667:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
 6086              		.loc 1 3667 0
 6087 0518 D821     		movs	r1, #216
 6088 051a A120     		movs	r0, #161
 6089 051c FFF7FEFF 		bl	VXISI2CWrite
 6090              	.LVL865:
3668:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
 6091              		.loc 1 3668 0
 6092 0520 9821     		movs	r1, #152
 6093 0522 A220     		movs	r0, #162
 6094 0524 FFF7FEFF 		bl	VXISI2CWrite
 6095              	.LVL866:
ARM GAS  /tmp/cclqPDF2.s 			page 200


3669:Src/main.c    **** 	VXISI2CWrite(0xA4,0x00);
 6096              		.loc 1 3669 0
 6097 0528 8721     		movs	r1, #135
 6098 052a A320     		movs	r0, #163
 6099 052c FFF7FEFF 		bl	VXISI2CWrite
 6100              	.LVL867:
3670:Src/main.c    **** 	VXISI2CWrite(0xA5,0x80);
 6101              		.loc 1 3670 0
 6102 0530 0021     		movs	r1, #0
 6103 0532 A420     		movs	r0, #164
 6104 0534 FFF7FEFF 		bl	VXISI2CWrite
 6105              	.LVL868:
3671:Src/main.c    **** 	VXISI2CWrite(0xA6,0x00);
 6106              		.loc 1 3671 0
 6107 0538 8021     		movs	r1, #128
 6108 053a A520     		movs	r0, #165
 6109 053c FFF7FEFF 		bl	VXISI2CWrite
 6110              	.LVL869:
3672:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
 6111              		.loc 1 3672 0
 6112 0540 0021     		movs	r1, #0
 6113 0542 A620     		movs	r0, #166
 6114 0544 FFF7FEFF 		bl	VXISI2CWrite
 6115              	.LVL870:
3673:Src/main.c    **** 	VXISI2CWrite(0xA8,0x40);
 6116              		.loc 1 3673 0
 6117 0548 7021     		movs	r1, #112
 6118 054a A720     		movs	r0, #167
 6119 054c FFF7FEFF 		bl	VXISI2CWrite
 6120              	.LVL871:
3674:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
 6121              		.loc 1 3674 0
 6122 0550 4021     		movs	r1, #64
 6123 0552 A820     		movs	r0, #168
 6124 0554 FFF7FEFF 		bl	VXISI2CWrite
 6125              	.LVL872:
3675:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2C);
 6126              		.loc 1 3675 0
 6127 0558 1E21     		movs	r1, #30
 6128 055a A920     		movs	r0, #169
 6129 055c FFF7FEFF 		bl	VXISI2CWrite
 6130              	.LVL873:
3676:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
 6131              		.loc 1 3676 0
 6132 0560 2C21     		movs	r1, #44
 6133 0562 AA20     		movs	r0, #170
 6134 0564 FFF7FEFF 		bl	VXISI2CWrite
 6135              	.LVL874:
3677:Src/main.c    **** 	VXISI2CWrite(0xAC,0x90);
 6136              		.loc 1 3677 0
 6137 0568 0021     		movs	r1, #0
 6138 056a AB20     		movs	r0, #171
 6139 056c FFF7FEFF 		bl	VXISI2CWrite
 6140              	.LVL875:
3678:Src/main.c    **** 	VXISI2CWrite(0xAD,0x65);
 6141              		.loc 1 3678 0
 6142 0570 9021     		movs	r1, #144
ARM GAS  /tmp/cclqPDF2.s 			page 201


 6143 0572 AC20     		movs	r0, #172
 6144 0574 FFF7FEFF 		bl	VXISI2CWrite
 6145              	.LVL876:
3679:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
 6146              		.loc 1 3679 0
 6147 0578 6521     		movs	r1, #101
 6148 057a AD20     		movs	r0, #173
 6149 057c FFF7FEFF 		bl	VXISI2CWrite
 6150              	.LVL877:
3680:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
 6151              		.loc 1 3680 0
 6152 0580 6521     		movs	r1, #101
 6153 0582 AE20     		movs	r0, #174
 6154 0584 FFF7FEFF 		bl	VXISI2CWrite
 6155              	.LVL878:
3681:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
 6156              		.loc 1 3681 0
 6157 0588 9921     		movs	r1, #153
 6158 058a AF20     		movs	r0, #175
 6159 058c FFF7FEFF 		bl	VXISI2CWrite
 6160              	.LVL879:
3682:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
 6161              		.loc 1 3682 0
 6162 0590 0021     		movs	r1, #0
 6163 0592 B020     		movs	r0, #176
 6164 0594 FFF7FEFF 		bl	VXISI2CWrite
 6165              	.LVL880:
3683:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
 6166              		.loc 1 3683 0
 6167 0598 0021     		movs	r1, #0
 6168 059a B120     		movs	r0, #177
 6169 059c FFF7FEFF 		bl	VXISI2CWrite
 6170              	.LVL881:
3684:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
 6171              		.loc 1 3684 0
 6172 05a0 0021     		movs	r1, #0
 6173 05a2 B220     		movs	r0, #178
 6174 05a4 FFF7FEFF 		bl	VXISI2CWrite
 6175              	.LVL882:
3685:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
 6176              		.loc 1 3685 0
 6177 05a8 0021     		movs	r1, #0
 6178 05aa B320     		movs	r0, #179
 6179 05ac FFF7FEFF 		bl	VXISI2CWrite
 6180              	.LVL883:
3686:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
 6181              		.loc 1 3686 0
 6182 05b0 0021     		movs	r1, #0
 6183 05b2 B420     		movs	r0, #180
 6184 05b4 FFF7FEFF 		bl	VXISI2CWrite
 6185              	.LVL884:
3687:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
 6186              		.loc 1 3687 0
 6187 05b8 0021     		movs	r1, #0
 6188 05ba B520     		movs	r0, #181
 6189 05bc FFF7FEFF 		bl	VXISI2CWrite
 6190              	.LVL885:
ARM GAS  /tmp/cclqPDF2.s 			page 202


3688:Src/main.c    **** 	VXISI2CWrite(0xB7,0x00);
 6191              		.loc 1 3688 0
 6192 05c0 0021     		movs	r1, #0
 6193 05c2 B620     		movs	r0, #182
 6194 05c4 FFF7FEFF 		bl	VXISI2CWrite
 6195              	.LVL886:
3689:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
 6196              		.loc 1 3689 0
 6197 05c8 0021     		movs	r1, #0
 6198 05ca B720     		movs	r0, #183
 6199 05cc FFF7FEFF 		bl	VXISI2CWrite
 6200              	.LVL887:
3690:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
 6201              		.loc 1 3690 0
 6202 05d0 8021     		movs	r1, #128
 6203 05d2 B820     		movs	r0, #184
 6204 05d4 FFF7FEFF 		bl	VXISI2CWrite
 6205              	.LVL888:
3691:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
 6206              		.loc 1 3691 0
 6207 05d8 0021     		movs	r1, #0
 6208 05da B920     		movs	r0, #185
 6209 05dc FFF7FEFF 		bl	VXISI2CWrite
 6210              	.LVL889:
3692:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
 6211              		.loc 1 3692 0
 6212 05e0 0121     		movs	r1, #1
 6213 05e2 BA20     		movs	r0, #186
 6214 05e4 FFF7FEFF 		bl	VXISI2CWrite
 6215              	.LVL890:
3693:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
 6216              		.loc 1 3693 0
 6217 05e8 0021     		movs	r1, #0
 6218 05ea BB20     		movs	r0, #187
 6219 05ec FFF7FEFF 		bl	VXISI2CWrite
 6220              	.LVL891:
3694:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
 6221              		.loc 1 3694 0
 6222 05f0 9021     		movs	r1, #144
 6223 05f2 BC20     		movs	r0, #188
 6224 05f4 FFF7FEFF 		bl	VXISI2CWrite
 6225              	.LVL892:
3695:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
 6226              		.loc 1 3695 0
 6227 05f8 0121     		movs	r1, #1
 6228 05fa BD20     		movs	r0, #189
 6229 05fc FFF7FEFF 		bl	VXISI2CWrite
 6230              	.LVL893:
3696:Src/main.c    **** 	VXISI2CWrite(0xBF,0x00);
 6231              		.loc 1 3696 0
 6232 0600 2C21     		movs	r1, #44
 6233 0602 BE20     		movs	r0, #190
 6234 0604 FFF7FEFF 		bl	VXISI2CWrite
 6235              	.LVL894:
3697:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
 6236              		.loc 1 3697 0
 6237 0608 0021     		movs	r1, #0
ARM GAS  /tmp/cclqPDF2.s 			page 203


 6238 060a BF20     		movs	r0, #191
 6239 060c FFF7FEFF 		bl	VXISI2CWrite
 6240              	.LVL895:
3698:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
 6241              		.loc 1 3698 0
 6242 0610 0021     		movs	r1, #0
 6243 0612 C020     		movs	r0, #192
 6244 0614 FFF7FEFF 		bl	VXISI2CWrite
 6245              	.LVL896:
3699:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
 6246              		.loc 1 3699 0
 6247 0618 2021     		movs	r1, #32
 6248 061a C120     		movs	r0, #193
 6249 061c FFF7FEFF 		bl	VXISI2CWrite
 6250              	.LVL897:
3700:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
 6251              		.loc 1 3700 0
 6252 0620 2021     		movs	r1, #32
 6253 0622 C220     		movs	r0, #194
 6254 0624 FFF7FEFF 		bl	VXISI2CWrite
 6255              	.LVL898:
3701:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
 6256              		.loc 1 3701 0
 6257 0628 2021     		movs	r1, #32
 6258 062a C320     		movs	r0, #195
 6259 062c FFF7FEFF 		bl	VXISI2CWrite
 6260              	.LVL899:
3702:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
 6261              		.loc 1 3702 0
 6262 0630 2021     		movs	r1, #32
 6263 0632 C420     		movs	r0, #196
 6264 0634 FFF7FEFF 		bl	VXISI2CWrite
 6265              	.LVL900:
3703:Src/main.c    **** 	VXISI2CWrite(0xC6,0x00);
 6266              		.loc 1 3703 0
 6267 0638 2021     		movs	r1, #32
 6268 063a C520     		movs	r0, #197
 6269 063c FFF7FEFF 		bl	VXISI2CWrite
 6270              	.LVL901:
3704:Src/main.c    **** 	VXISI2CWrite(0xC7,0x00);
 6271              		.loc 1 3704 0
 6272 0640 0021     		movs	r1, #0
 6273 0642 C620     		movs	r0, #198
 6274 0644 FFF7FEFF 		bl	VXISI2CWrite
 6275              	.LVL902:
3705:Src/main.c    **** 	VXISI2CWrite(0xC8,0x00);
 6276              		.loc 1 3705 0
 6277 0648 0021     		movs	r1, #0
 6278 064a C720     		movs	r0, #199
 6279 064c FFF7FEFF 		bl	VXISI2CWrite
 6280              	.LVL903:
3706:Src/main.c    **** 	VXISI2CWrite(0xC9,0x00);
 6281              		.loc 1 3706 0
 6282 0650 0021     		movs	r1, #0
 6283 0652 C820     		movs	r0, #200
 6284 0654 FFF7FEFF 		bl	VXISI2CWrite
 6285              	.LVL904:
ARM GAS  /tmp/cclqPDF2.s 			page 204


3707:Src/main.c    **** 	VXISI2CWrite(0xCA,0x00);
 6286              		.loc 1 3707 0
 6287 0658 0021     		movs	r1, #0
 6288 065a C920     		movs	r0, #201
 6289 065c FFF7FEFF 		bl	VXISI2CWrite
 6290              	.LVL905:
3708:Src/main.c    **** 	VXISI2CWrite(0xCB,0x00);
 6291              		.loc 1 3708 0
 6292 0660 0021     		movs	r1, #0
 6293 0662 CA20     		movs	r0, #202
 6294 0664 FFF7FEFF 		bl	VXISI2CWrite
 6295              	.LVL906:
3709:Src/main.c    **** 	VXISI2CWrite(0xCC,0x00);
 6296              		.loc 1 3709 0
 6297 0668 0021     		movs	r1, #0
 6298 066a CB20     		movs	r0, #203
 6299 066c FFF7FEFF 		bl	VXISI2CWrite
 6300              	.LVL907:
3710:Src/main.c    **** 	VXISI2CWrite(0xCD,0x00);
 6301              		.loc 1 3710 0
 6302 0670 0021     		movs	r1, #0
 6303 0672 CC20     		movs	r0, #204
 6304 0674 FFF7FEFF 		bl	VXISI2CWrite
 6305              	.LVL908:
3711:Src/main.c    **** 	VXISI2CWrite(0xCE,0x00);
 6306              		.loc 1 3711 0
 6307 0678 0021     		movs	r1, #0
 6308 067a CD20     		movs	r0, #205
 6309 067c FFF7FEFF 		bl	VXISI2CWrite
 6310              	.LVL909:
3712:Src/main.c    **** 	VXISI2CWrite(0xCF,0x00);
 6311              		.loc 1 3712 0
 6312 0680 0021     		movs	r1, #0
 6313 0682 CE20     		movs	r0, #206
 6314 0684 FFF7FEFF 		bl	VXISI2CWrite
 6315              	.LVL910:
3713:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
 6316              		.loc 1 3713 0
 6317 0688 0021     		movs	r1, #0
 6318 068a CF20     		movs	r0, #207
 6319 068c FFF7FEFF 		bl	VXISI2CWrite
 6320              	.LVL911:
3714:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
 6321              		.loc 1 3714 0
 6322 0690 FF21     		movs	r1, #255
 6323 0692 D020     		movs	r0, #208
 6324 0694 FFF7FEFF 		bl	VXISI2CWrite
 6325              	.LVL912:
3715:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
 6326              		.loc 1 3715 0
 6327 0698 3F21     		movs	r1, #63
 6328 069a D120     		movs	r0, #209
 6329 069c FFF7FEFF 		bl	VXISI2CWrite
 6330              	.LVL913:
3716:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
 6331              		.loc 1 3716 0
 6332 06a0 C221     		movs	r1, #194
ARM GAS  /tmp/cclqPDF2.s 			page 205


 6333 06a2 D220     		movs	r0, #210
 6334 06a4 FFF7FEFF 		bl	VXISI2CWrite
 6335              	.LVL914:
3717:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
 6336              		.loc 1 3717 0
 6337 06a8 3F21     		movs	r1, #63
 6338 06aa D320     		movs	r0, #211
 6339 06ac FFF7FEFF 		bl	VXISI2CWrite
 6340              	.LVL915:
3718:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
 6341              		.loc 1 3718 0
 6342 06b0 0021     		movs	r1, #0
 6343 06b2 D420     		movs	r0, #212
 6344 06b4 FFF7FEFF 		bl	VXISI2CWrite
 6345              	.LVL916:
3719:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
 6346              		.loc 1 3719 0
 6347 06b8 0021     		movs	r1, #0
 6348 06ba D520     		movs	r0, #213
 6349 06bc FFF7FEFF 		bl	VXISI2CWrite
 6350              	.LVL917:
3720:Src/main.c    **** 	VXISI2CWrite(0xD7,0x0F);
 6351              		.loc 1 3720 0
 6352 06c0 0021     		movs	r1, #0
 6353 06c2 D620     		movs	r0, #214
 6354 06c4 FFF7FEFF 		bl	VXISI2CWrite
 6355              	.LVL918:
3721:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
 6356              		.loc 1 3721 0
 6357 06c8 0F21     		movs	r1, #15
 6358 06ca D720     		movs	r0, #215
 6359 06cc FFF7FEFF 		bl	VXISI2CWrite
 6360              	.LVL919:
3722:Src/main.c    **** 	VXISI2CWrite(0xD9,0x00);
 6361              		.loc 1 3722 0
 6362 06d0 0021     		movs	r1, #0
 6363 06d2 D820     		movs	r0, #216
 6364 06d4 FFF7FEFF 		bl	VXISI2CWrite
 6365              	.LVL920:
3723:Src/main.c    **** 	VXISI2CWrite(0xDA,0x00);
 6366              		.loc 1 3723 0
 6367 06d8 0021     		movs	r1, #0
 6368 06da D920     		movs	r0, #217
 6369 06dc FFF7FEFF 		bl	VXISI2CWrite
 6370              	.LVL921:
3724:Src/main.c    **** 	VXISI2CWrite(0xDB,0x00);
 6371              		.loc 1 3724 0
 6372 06e0 0021     		movs	r1, #0
 6373 06e2 DA20     		movs	r0, #218
 6374 06e4 FFF7FEFF 		bl	VXISI2CWrite
 6375              	.LVL922:
3725:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
 6376              		.loc 1 3725 0
 6377 06e8 0021     		movs	r1, #0
 6378 06ea DB20     		movs	r0, #219
 6379 06ec FFF7FEFF 		bl	VXISI2CWrite
 6380              	.LVL923:
ARM GAS  /tmp/cclqPDF2.s 			page 206


3726:Src/main.c    **** 	VXISI2CWrite(0xDD,0x01);
 6381              		.loc 1 3726 0
 6382 06f0 7721     		movs	r1, #119
 6383 06f2 DC20     		movs	r0, #220
 6384 06f4 FFF7FEFF 		bl	VXISI2CWrite
 6385              	.LVL924:
3727:Src/main.c    **** 	VXISI2CWrite(0xDE,0x5F);
 6386              		.loc 1 3727 0
 6387 06f8 0121     		movs	r1, #1
 6388 06fa DD20     		movs	r0, #221
 6389 06fc FFF7FEFF 		bl	VXISI2CWrite
 6390              	.LVL925:
3728:Src/main.c    **** 	VXISI2CWrite(0xDF,0x96);
 6391              		.loc 1 3728 0
 6392 0700 5F21     		movs	r1, #95
 6393 0702 DE20     		movs	r0, #222
 6394 0704 FFF7FEFF 		bl	VXISI2CWrite
 6395              	.LVL926:
3729:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
 6396              		.loc 1 3729 0
 6397 0708 9621     		movs	r1, #150
 6398 070a DF20     		movs	r0, #223
 6399 070c FFF7FEFF 		bl	VXISI2CWrite
 6400              	.LVL927:
3730:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
 6401              		.loc 1 3730 0
 6402 0710 0021     		movs	r1, #0
 6403 0712 E020     		movs	r0, #224
 6404 0714 FFF7FEFF 		bl	VXISI2CWrite
 6405              	.LVL928:
3731:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
 6406              		.loc 1 3731 0
 6407 0718 0021     		movs	r1, #0
 6408 071a E120     		movs	r0, #225
 6409 071c FFF7FEFF 		bl	VXISI2CWrite
 6410              	.LVL929:
3732:Src/main.c    **** 	VXISI2CWrite(0xE3,0x47);
 6411              		.loc 1 3732 0
 6412 0720 0021     		movs	r1, #0
 6413 0722 E220     		movs	r0, #226
 6414 0724 FFF7FEFF 		bl	VXISI2CWrite
 6415              	.LVL930:
3733:Src/main.c    **** 	VXISI2CWrite(0xE4,0x3C);
 6416              		.loc 1 3733 0
 6417 0728 4721     		movs	r1, #71
 6418 072a E320     		movs	r0, #227
 6419 072c FFF7FEFF 		bl	VXISI2CWrite
 6420              	.LVL931:
3734:Src/main.c    **** 	VXISI2CWrite(0xE5,0x80);
 6421              		.loc 1 3734 0
 6422 0730 3C21     		movs	r1, #60
 6423 0732 E420     		movs	r0, #228
 6424 0734 FFF7FEFF 		bl	VXISI2CWrite
 6425              	.LVL932:
3735:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
 6426              		.loc 1 3735 0
 6427 0738 8021     		movs	r1, #128
ARM GAS  /tmp/cclqPDF2.s 			page 207


 6428 073a E520     		movs	r0, #229
 6429 073c FFF7FEFF 		bl	VXISI2CWrite
 6430              	.LVL933:
3736:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
 6431              		.loc 1 3736 0
 6432 0740 0021     		movs	r1, #0
 6433 0742 E620     		movs	r0, #230
 6434 0744 FFF7FEFF 		bl	VXISI2CWrite
 6435              	.LVL934:
3737:Src/main.c    **** 	VXISI2CWrite(0xE8,0x00);
 6436              		.loc 1 3737 0
 6437 0748 0021     		movs	r1, #0
 6438 074a E720     		movs	r0, #231
 6439 074c FFF7FEFF 		bl	VXISI2CWrite
 6440              	.LVL935:
3738:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
 6441              		.loc 1 3738 0
 6442 0750 0021     		movs	r1, #0
 6443 0752 E820     		movs	r0, #232
 6444 0754 FFF7FEFF 		bl	VXISI2CWrite
 6445              	.LVL936:
3739:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
 6446              		.loc 1 3739 0
 6447 0758 0021     		movs	r1, #0
 6448 075a E920     		movs	r0, #233
 6449 075c FFF7FEFF 		bl	VXISI2CWrite
 6450              	.LVL937:
3740:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
 6451              		.loc 1 3740 0
 6452 0760 0021     		movs	r1, #0
 6453 0762 EA20     		movs	r0, #234
 6454 0764 FFF7FEFF 		bl	VXISI2CWrite
 6455              	.LVL938:
3741:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
 6456              		.loc 1 3741 0
 6457 0768 0021     		movs	r1, #0
 6458 076a EB20     		movs	r0, #235
 6459 076c FFF7FEFF 		bl	VXISI2CWrite
 6460              	.LVL939:
3742:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
 6461              		.loc 1 3742 0
 6462 0770 8821     		movs	r1, #136
 6463 0772 EC20     		movs	r0, #236
 6464 0774 FFF7FEFF 		bl	VXISI2CWrite
 6465              	.LVL940:
3743:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
 6466              		.loc 1 3743 0
 6467 0778 0021     		movs	r1, #0
 6468 077a ED20     		movs	r0, #237
 6469 077c FFF7FEFF 		bl	VXISI2CWrite
 6470              	.LVL941:
3744:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
 6471              		.loc 1 3744 0
 6472 0780 0021     		movs	r1, #0
 6473 0782 EE20     		movs	r0, #238
 6474 0784 FFF7FEFF 		bl	VXISI2CWrite
 6475              	.LVL942:
ARM GAS  /tmp/cclqPDF2.s 			page 208


3745:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
 6476              		.loc 1 3745 0
 6477 0788 0021     		movs	r1, #0
 6478 078a EF20     		movs	r0, #239
 6479 078c FFF7FEFF 		bl	VXISI2CWrite
 6480              	.LVL943:
3746:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
 6481              		.loc 1 3746 0
 6482 0790 3021     		movs	r1, #48
 6483 0792 F020     		movs	r0, #240
 6484 0794 FFF7FEFF 		bl	VXISI2CWrite
 6485              	.LVL944:
3747:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
 6486              		.loc 1 3747 0
 6487 0798 4321     		movs	r1, #67
 6488 079a F120     		movs	r0, #241
 6489 079c FFF7FEFF 		bl	VXISI2CWrite
 6490              	.LVL945:
3748:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
 6491              		.loc 1 3748 0
 6492 07a0 1F21     		movs	r1, #31
 6493 07a2 F220     		movs	r0, #242
 6494 07a4 FFF7FEFF 		bl	VXISI2CWrite
 6495              	.LVL946:
3749:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
 6496              		.loc 1 3749 0
 6497 07a8 1F21     		movs	r1, #31
 6498 07aa F320     		movs	r0, #243
 6499 07ac FFF7FEFF 		bl	VXISI2CWrite
 6500              	.LVL947:
3750:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
 6501              		.loc 1 3750 0
 6502 07b0 2221     		movs	r1, #34
 6503 07b2 F420     		movs	r0, #244
 6504 07b4 FFF7FEFF 		bl	VXISI2CWrite
 6505              	.LVL948:
3751:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
 6506              		.loc 1 3751 0
 6507 07b8 7321     		movs	r1, #115
 6508 07ba F520     		movs	r0, #245
 6509 07bc FFF7FEFF 		bl	VXISI2CWrite
 6510              	.LVL949:
3752:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
 6511              		.loc 1 3752 0
 6512 07c0 5321     		movs	r1, #83
 6513 07c2 F620     		movs	r0, #246
 6514 07c4 FFF7FEFF 		bl	VXISI2CWrite
 6515              	.LVL950:
3753:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
 6516              		.loc 1 3753 0
 6517 07c8 8021     		movs	r1, #128
 6518 07ca F720     		movs	r0, #247
 6519 07cc FFF7FEFF 		bl	VXISI2CWrite
 6520              	.LVL951:
3754:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
 6521              		.loc 1 3754 0
 6522 07d0 0121     		movs	r1, #1
ARM GAS  /tmp/cclqPDF2.s 			page 209


 6523 07d2 F820     		movs	r0, #248
 6524 07d4 FFF7FEFF 		bl	VXISI2CWrite
 6525              	.LVL952:
3755:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
 6526              		.loc 1 3755 0
 6527 07d8 0121     		movs	r1, #1
 6528 07da F920     		movs	r0, #249
 6529 07dc FFF7FEFF 		bl	VXISI2CWrite
 6530              	.LVL953:
3756:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
 6531              		.loc 1 3756 0
 6532 07e0 0021     		movs	r1, #0
 6533 07e2 FA20     		movs	r0, #250
 6534 07e4 FFF7FEFF 		bl	VXISI2CWrite
 6535              	.LVL954:
3757:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
 6536              		.loc 1 3757 0
 6537 07e8 0021     		movs	r1, #0
 6538 07ea FB20     		movs	r0, #251
 6539 07ec FFF7FEFF 		bl	VXISI2CWrite
 6540              	.LVL955:
3758:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
 6541              		.loc 1 3758 0
 6542 07f0 0021     		movs	r1, #0
 6543 07f2 FC20     		movs	r0, #252
 6544 07f4 FFF7FEFF 		bl	VXISI2CWrite
 6545              	.LVL956:
3759:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
 6546              		.loc 1 3759 0
 6547 07f8 7021     		movs	r1, #112
 6548 07fa FD20     		movs	r0, #253
 6549 07fc FFF7FEFF 		bl	VXISI2CWrite
 6550              	.LVL957:
3760:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
 6551              		.loc 1 3760 0
 6552 0800 4021     		movs	r1, #64
 6553 0802 FE20     		movs	r0, #254
 6554 0804 FFF7FEFF 		bl	VXISI2CWrite
 6555              	.LVL958:
3761:Src/main.c    **** 
 6556              		.loc 1 3761 0
 6557 0808 0721     		movs	r1, #7
 6558 080a FF20     		movs	r0, #255
 6559 080c FFF7FEFF 		bl	VXISI2CWrite
 6560              	.LVL959:
3763:Src/main.c    **** /**
 6561              		.loc 1 3763 0
 6562 0810 08BD     		pop	{r3, pc}
 6563              		.cfi_endproc
 6564              	.LFE93:
 6566 0812 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 6567              		.align	1
 6568              		.global	SystemClock_Config
 6569              		.syntax unified
 6570              		.thumb
 6571              		.thumb_func
 6572              		.fpu softvfp
ARM GAS  /tmp/cclqPDF2.s 			page 210


 6574              	SystemClock_Config:
 6575              	.LFB94:
3805:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 6576              		.loc 1 3805 0
 6577              		.cfi_startproc
 6578              		@ args = 0, pretend = 0, frame = 64
 6579              		@ frame_needed = 0, uses_anonymous_args = 0
 6580 0000 70B5     		push	{r4, r5, r6, lr}
 6581              	.LCFI39:
 6582              		.cfi_def_cfa_offset 16
 6583              		.cfi_offset 4, -16
 6584              		.cfi_offset 5, -12
 6585              		.cfi_offset 6, -8
 6586              		.cfi_offset 14, -4
 6587 0002 90B0     		sub	sp, sp, #64
 6588              	.LCFI40:
 6589              		.cfi_def_cfa_offset 80
3806:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 6590              		.loc 1 3806 0
 6591 0004 2022     		movs	r2, #32
 6592 0006 0021     		movs	r1, #0
 6593 0008 07A8     		add	r0, sp, #28
 6594 000a FFF7FEFF 		bl	memset
 6595              	.LVL960:
3807:Src/main.c    **** 
 6596              		.loc 1 3807 0
 6597 000e 0024     		movs	r4, #0
 6598 0010 0194     		str	r4, [sp, #4]
 6599 0012 0294     		str	r4, [sp, #8]
 6600 0014 0394     		str	r4, [sp, #12]
 6601 0016 0494     		str	r4, [sp, #16]
 6602 0018 0594     		str	r4, [sp, #20]
3811:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 6603              		.loc 1 3811 0
 6604 001a 0225     		movs	r5, #2
 6605 001c 0695     		str	r5, [sp, #24]
3812:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 6606              		.loc 1 3812 0
 6607 001e 0126     		movs	r6, #1
 6608 0020 0A96     		str	r6, [sp, #40]
3813:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 6609              		.loc 1 3813 0
 6610 0022 1023     		movs	r3, #16
 6611 0024 0B93     		str	r3, [sp, #44]
3814:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 6612              		.loc 1 3814 0
 6613 0026 0D95     		str	r5, [sp, #52]
3816:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 6614              		.loc 1 3816 0
 6615 0028 4FF4E013 		mov	r3, #1835008
 6616 002c 0F93     		str	r3, [sp, #60]
3817:Src/main.c    ****   {
 6617              		.loc 1 3817 0
 6618 002e 06A8     		add	r0, sp, #24
 6619 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 6620              	.LVL961:
3823:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  /tmp/cclqPDF2.s 			page 211


 6621              		.loc 1 3823 0
 6622 0034 0F23     		movs	r3, #15
 6623 0036 0193     		str	r3, [sp, #4]
3825:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 6624              		.loc 1 3825 0
 6625 0038 0295     		str	r5, [sp, #8]
3826:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 6626              		.loc 1 3826 0
 6627 003a 0394     		str	r4, [sp, #12]
3827:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 6628              		.loc 1 3827 0
 6629 003c 0494     		str	r4, [sp, #16]
3828:Src/main.c    **** 
 6630              		.loc 1 3828 0
 6631 003e 0594     		str	r4, [sp, #20]
3830:Src/main.c    ****   {
 6632              		.loc 1 3830 0
 6633 0040 3146     		mov	r1, r6
 6634 0042 01A8     		add	r0, sp, #4
 6635 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 6636              	.LVL962:
3834:Src/main.c    **** #endif
 6637              		.loc 1 3834 0
 6638 0048 10B0     		add	sp, sp, #64
 6639              	.LCFI41:
 6640              		.cfi_def_cfa_offset 16
 6641              		@ sp needed
 6642 004a 70BD     		pop	{r4, r5, r6, pc}
 6643              		.cfi_endproc
 6644              	.LFE94:
 6646              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 6647              		.align	1
 6648              		.global	HAL_TIM_PeriodElapsedCallback
 6649              		.syntax unified
 6650              		.thumb
 6651              		.thumb_func
 6652              		.fpu softvfp
 6654              	HAL_TIM_PeriodElapsedCallback:
 6655              	.LFB99:
4193:Src/main.c    **** 
4194:Src/main.c    **** /* USER CODE BEGIN 4 */
4195:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
4196:Src/main.c    **** {
 6656              		.loc 1 4196 0
 6657              		.cfi_startproc
 6658              		@ args = 0, pretend = 0, frame = 0
 6659              		@ frame_needed = 0, uses_anonymous_args = 0
 6660              		@ link register save eliminated.
 6661              	.LVL963:
4197:Src/main.c    **** //	BYTE TempKey=0;
4198:Src/main.c    **** 
4199:Src/main.c    ****     //10us
4200:Src/main.c    ****     if (htim->Instance == TIM3)
 6662              		.loc 1 4200 0
 6663 0000 0268     		ldr	r2, [r0]
 6664 0002 184B     		ldr	r3, .L207
 6665 0004 9A42     		cmp	r2, r3
ARM GAS  /tmp/cclqPDF2.s 			page 212


 6666 0006 00D0     		beq	.L206
 6667              	.L203:
4201:Src/main.c    ****     {
4202:Src/main.c    **** 	
4203:Src/main.c    **** 	// Timer Counter 
4204:Src/main.c    **** 	tic02++;
4205:Src/main.c    **** 	tic03++;
4206:Src/main.c    **** 	tic04++;
4207:Src/main.c    **** //	tic05++;
4208:Src/main.c    **** 	
4209:Src/main.c    **** 	if(tic02>=100)   
4210:Src/main.c    **** 	{
4211:Src/main.c    **** 	g_usTimerCounter += 1;     ///per 10us  interrupt
4212:Src/main.c    **** 	tic02=0;
4213:Src/main.c    **** 	g_bNotifyTimer0Int=_TRUE;
4214:Src/main.c    **** 	}	
4215:Src/main.c    **** /*
4216:Src/main.c    **** 	if(tic05>=100)////1ms
4217:Src/main.c    **** 	{
4218:Src/main.c    **** 	ucTickCount++;	//for IT66021
4219:Src/main.c    **** 	tic05=0;
4220:Src/main.c    **** 	}
4221:Src/main.c    **** 	*/
4222:Src/main.c    ****         tim3count++ ;
4223:Src/main.c    ****         if (tim3count > 100000 )
4224:Src/main.c    ****         {
4225:Src/main.c    ****             tim3count = 0 ;
4226:Src/main.c    ****             //Test_tim3_printf_Flg  = 1;
4227:Src/main.c    ****             if (OSDStateFlg ==1 )
4228:Src/main.c    ****             {
4229:Src/main.c    ****                 //static tByte enOSD10secOff = 1;   //En16wNumberOSD=1
4230:Src/main.c    ****                 OSDSecCount++ ;
4231:Src/main.c    ****             }
4232:Src/main.c    ****         }
4233:Src/main.c    **** #if 0
4234:Src/main.c    **** 
4235:Src/main.c    **** 		//Kane @HS 2007 0814 Ver1.31>>>>
4236:Src/main.c    **** 	//	if(Time5ms)
4237:Src/main.c    **** 	//	Time5ms--;
4238:Src/main.c    **** 		//if(Time5ms==0)
4239:Src/main.c    **** 		{
4240:Src/main.c    **** 			//if(HAL_GPIO_ReadPin(UP_KEY_GPIO_Port,UP_KEY_Pin)==_FALSE)
4241:Src/main.c    **** 			//	TempKey|=0x01;
4242:Src/main.c    **** 			//if(HAL_GPIO_ReadPin(DOWN_KEY_GPIO_Port,DOWN_KEY_Pin)==_FALSE)
4243:Src/main.c    **** 			//	TempKey|=0x02;
4244:Src/main.c    **** 			//TempKey=(( (P2&0x60) >> 5) & 0x03);
4245:Src/main.c    **** //			TempKey=((~GPIOB->IDR)&(UP_KEY_Pin|DOWN_KEY_Pin))>>14;
4246:Src/main.c    **** 			TempKey=(((~GPIOB->IDR)&(UP_KEY_Pin|DOWN_KEY_Pin))>>14)&0x03;
4247:Src/main.c    **** 
4248:Src/main.c    **** 			if(updn_reg[3] != TempKey )  // (( (P2&0x60) >> 5) & 0x03))    //Abel for HS SW key ......951102
4249:Src/main.c    **** 			{																						   
4250:Src/main.c    **** 				updn_reg[0] = updn_reg[1];																
4251:Src/main.c    **** 				updn_reg[1] = updn_reg[2];																
4252:Src/main.c    **** 				updn_reg[2] = updn_reg[3];																
4253:Src/main.c    **** 				updn_reg[3] = TempKey;// ( (P2&0x60) >> 5) & 0x03; 
4254:Src/main.c    **** 				ChangeKey = 1;		
4255:Src/main.c    **** 				//else			//william-v1.42-961130
ARM GAS  /tmp/cclqPDF2.s 			page 213


4256:Src/main.c    **** 				//ChangeKey=0;	//william-v1.42-961130
4257:Src/main.c    **** 			//Time5ms = (48-8);
4258:Src/main.c    **** 			//Time5ms = (48+100);
4259:Src/main.c    **** 			
4260:Src/main.c    **** 				
4261:Src/main.c    **** 			}
4262:Src/main.c    **** 		}
4263:Src/main.c    **** 		#endif
4264:Src/main.c    **** #if 0
4265:Src/main.c    ****         if (IR_IRQFlg == 1)
4266:Src/main.c    ****         {
4267:Src/main.c    ****             if (PreIR_IRQ_Index == IR_IRQ_Index )
4268:Src/main.c    ****             {
4269:Src/main.c    ****                 IR_PlusTimeVal++ ;
4270:Src/main.c    **** 
4271:Src/main.c    ****                 //9.2xms + 4.5xms = 13.8ms
4272:Src/main.c    ****                 if (IR_PlusTimeVal > 15000)  //10us
4273:Src/main.c    ****                 {
4274:Src/main.c    **** //                    IR_PlusTimeVal = 0  ;
4275:Src/main.c    **** //                    PreIR_IRQ_Index = 0 ;
4276:Src/main.c    **** //                    IR_IRQ_Index = 0 ;
4277:Src/main.c    **** //                    IR_IRQFlg = 0 ;
4278:Src/main.c    **** 
4279:Src/main.c    ****                     if (IR_ShiftCount >= 32 )
4280:Src/main.c    ****                     {
4281:Src/main.c    ****                         u16Vendor = (tWord)(IR_4BYTE & 0x0000FFFF) ;
4282:Src/main.c    ****                         if (u16Vendor == IR_Vendor_Code_ )
4283:Src/main.c    ****                         {
4284:Src/main.c    ****                             u8IRcode = (tByte)((IR_4BYTE & 0x00FF0000 ) >> 16)  ;
4285:Src/main.c    ****                             u8IRCheckcode  = 0xFF - (tByte)((IR_4BYTE & 0xFF000000 ) >> 24)  ;
4286:Src/main.c    ****                             IR_END_Flg = 1 ;
4287:Src/main.c    ****                         }
4288:Src/main.c    ****                     }
4289:Src/main.c    **** 
4290:Src/main.c    ****                     IR_ShiftCount = 0 ;
4291:Src/main.c    ****                     IR_PlusTimeVal = 0  ;
4292:Src/main.c    ****                     PreIR_IRQ_Index = 0 ;
4293:Src/main.c    ****                     IR_IRQ_Index = 0 ;
4294:Src/main.c    ****                     IR_IRQFlg = 0 ;
4295:Src/main.c    ****                     //memset(aIR_PlusTime , 0 , 40 )  ;
4296:Src/main.c    ****                     IR_4BYTE = 0 ;
4297:Src/main.c    ****                     IR_StartFlg = 0 ;
4298:Src/main.c    ****                 }
4299:Src/main.c    ****             }
4300:Src/main.c    ****             else
4301:Src/main.c    ****             {
4302:Src/main.c    ****                 if (PreIR_IRQ_Index <= 33)
4303:Src/main.c    ****                 {
4304:Src/main.c    ****                     //aIR_PlusTime[PreIR_IRQ_Index] = IR_PlusTimeVal ;
4305:Src/main.c    ****                     if (IR_StartFlg == 1 )
4306:Src/main.c    ****                     {
4307:Src/main.c    ****                         if (IR_PlusTimeVal >90 )
4308:Src/main.c    ****                         {
4309:Src/main.c    ****                             //IR_4BYTE = IR_4BYTE << 1 ;
4310:Src/main.c    ****                             IR_4BYTE = IR_4BYTE >> 1 ;
4311:Src/main.c    **** 
4312:Src/main.c    ****                             if (IR_PlusTimeVal > 160 )
ARM GAS  /tmp/cclqPDF2.s 			page 214


4313:Src/main.c    ****                             {
4314:Src/main.c    ****                                 //IR_4BYTE = IR_4BYTE | 0x01 ;
4315:Src/main.c    ****                                 IR_4BYTE = IR_4BYTE | 0x80000000 ;
4316:Src/main.c    ****                             }
4317:Src/main.c    ****                             else
4318:Src/main.c    ****                             {
4319:Src/main.c    ****                                 //IR_4BYTE = IR_4BYTE | 0x01 ;
4320:Src/main.c    ****                             }
4321:Src/main.c    ****                             IR_ShiftCount++ ;
4322:Src/main.c    ****                         }
4323:Src/main.c    ****                     }
4324:Src/main.c    **** 
4325:Src/main.c    ****                     if((IR_PlusTimeVal >1250 )&&(IR_PlusTimeVal < 1450))
4326:Src/main.c    ****                     {
4327:Src/main.c    ****                         IR_StartFlg =1 ;
4328:Src/main.c    ****                     }
4329:Src/main.c    ****                 }
4330:Src/main.c    ****                 IR_PlusTimeVal = 0 ;
4331:Src/main.c    ****                 PreIR_IRQ_Index = IR_IRQ_Index ;
4332:Src/main.c    ****             }
4333:Src/main.c    ****         }
4334:Src/main.c    **** #endif
4335:Src/main.c    **** 		///////////////////////////////////////////
4336:Src/main.c    **** 	/*
4337:Src/main.c    **** 		TempKey=0;
4338:Src/main.c    **** 		if(HAL_GPIO_ReadPin(MENU_KEY_GPIO_Port,MENU_KEY_Pin)==_FALSE)
4339:Src/main.c    **** 			TempKey|=0x08;
4340:Src/main.c    **** 		if(HAL_GPIO_ReadPin(POWER_KEY_GPIO_Port,POWER_KEY_Pin)==_FALSE)
4341:Src/main.c    **** 			TempKey|=0x04;
4342:Src/main.c    **** 		if(HAL_GPIO_ReadPin(POWER_KEY_GPIO_Port,POWER_KEY_Pin)==_FALSE)
4343:Src/main.c    **** 			TempKey|=0x04;
4344:Src/main.c    **** 		if(HAL_GPIO_ReadPin(JUMP_KEY_GPIO_Port,JUMP_KEY_Pin)==_FALSE)
4345:Src/main.c    **** 			TempKey|=0x10;
4346:Src/main.c    **** 		if(HAL_GPIO_ReadPin(SOURCE_KEY_GPIO_Port,SOURCE_KEY_Pin)==_FALSE)
4347:Src/main.c    **** 			Te			mpKey|=0x80;
4348:Src/main.c    **** */
4349:Src/main.c    **** #if 0
4350:Src/main.c    **** 	if(tic03==1000)
4351:Src/main.c    **** 		{
4352:Src/main.c    **** 		tic03=0;
4353:Src/main.c    **** 		if(_ReadKey() ) {
4354:Src/main.c    **** 			
4355:Src/main.c    **** 			if( keytic==3 ) {
4356:Src/main.c    **** 				Key = _ReadKey();
4357:Src/main.c    **** 				RepeatKey = 0;
4358:Src/main.c    **** 				KeyReady = 1;
4359:Src/main.c    **** 			}
4360:Src/main.c    **** 			else if( keytic==100 ) {
4361:Src/main.c    **** 				Key = _ReadKey();
4362:Src/main.c    **** 				KeyReady = 1;
4363:Src/main.c    **** 				keytic = 80-70;
4364:Src/main.c    **** 
4365:Src/main.c    **** 			}
4366:Src/main.c    **** 			keytic++;
4367:Src/main.c    **** 		
4368:Src/main.c    **** 		}
4369:Src/main.c    **** 		else 
ARM GAS  /tmp/cclqPDF2.s 			page 215


4370:Src/main.c    **** 		{
4371:Src/main.c    **** 			keytic = 0;
4372:Src/main.c    **** 			Key=0;
4373:Src/main.c    **** 		}
4374:Src/main.c    **** 		}	
4375:Src/main.c    **** 
4376:Src/main.c    **** 	if(tic04==1000)
4377:Src/main.c    **** 		{
4378:Src/main.c    **** 		tic04=0;
4379:Src/main.c    **** 				if(TP_PRES_DOWN ) {
4380:Src/main.c    **** 					
4381:Src/main.c    **** 					if( tptic==3) {
4382:Src/main.c    **** 						TouchP=TP_PRES_DOWN;
4383:Src/main.c    **** 					}
4384:Src/main.c    **** 					else if(tptic==150)
4385:Src/main.c    **** 						{
4386:Src/main.c    **** 						TouchP=TP_PRES_DOWN;						
4387:Src/main.c    **** 						
4388:Src/main.c    **** 						tptic=4;						
4389:Src/main.c    **** 						}
4390:Src/main.c    **** 				tptic++;
4391:Src/main.c    **** 				}
4392:Src/main.c    **** 				else 
4393:Src/main.c    **** 				{
4394:Src/main.c    **** 					tptic = 0;
4395:Src/main.c    **** 					TouchP=0;
4396:Src/main.c    **** 				}
4397:Src/main.c    **** 
4398:Src/main.c    **** 		}
4399:Src/main.c    **** 	#endif
4400:Src/main.c    ****     }
4401:Src/main.c    **** }
 6668              		.loc 1 4401 0
 6669 0008 7047     		bx	lr
 6670              	.L206:
4204:Src/main.c    **** 	tic03++;
 6671              		.loc 1 4204 0
 6672 000a 174A     		ldr	r2, .L207+4
 6673 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 6674 000e 0133     		adds	r3, r3, #1
 6675 0010 DBB2     		uxtb	r3, r3
 6676 0012 1370     		strb	r3, [r2]
4205:Src/main.c    **** 	tic04++;
 6677              		.loc 1 4205 0
 6678 0014 1549     		ldr	r1, .L207+8
 6679 0016 0A68     		ldr	r2, [r1]
 6680 0018 0132     		adds	r2, r2, #1
 6681 001a 0A60     		str	r2, [r1]
4206:Src/main.c    **** //	tic05++;
 6682              		.loc 1 4206 0
 6683 001c 1449     		ldr	r1, .L207+12
 6684 001e 0A68     		ldr	r2, [r1]
 6685 0020 0132     		adds	r2, r2, #1
 6686 0022 0A60     		str	r2, [r1]
4209:Src/main.c    **** 	{
 6687              		.loc 1 4209 0
 6688 0024 632B     		cmp	r3, #99
ARM GAS  /tmp/cclqPDF2.s 			page 216


 6689 0026 09D9     		bls	.L205
4211:Src/main.c    **** 	tic02=0;
 6690              		.loc 1 4211 0
 6691 0028 124A     		ldr	r2, .L207+16
 6692 002a 1368     		ldr	r3, [r2]
 6693 002c 0133     		adds	r3, r3, #1
 6694 002e 1360     		str	r3, [r2]
4212:Src/main.c    **** 	g_bNotifyTimer0Int=_TRUE;
 6695              		.loc 1 4212 0
 6696 0030 0D4B     		ldr	r3, .L207+4
 6697 0032 0022     		movs	r2, #0
 6698 0034 1A70     		strb	r2, [r3]
4213:Src/main.c    **** 	}	
 6699              		.loc 1 4213 0
 6700 0036 104B     		ldr	r3, .L207+20
 6701 0038 0122     		movs	r2, #1
 6702 003a 1A60     		str	r2, [r3]
 6703              	.L205:
4222:Src/main.c    ****         if (tim3count > 100000 )
 6704              		.loc 1 4222 0
 6705 003c 0F4B     		ldr	r3, .L207+24
 6706 003e 1A68     		ldr	r2, [r3]
 6707 0040 0132     		adds	r2, r2, #1
 6708 0042 1A60     		str	r2, [r3]
4223:Src/main.c    ****         {
 6709              		.loc 1 4223 0
 6710 0044 1A68     		ldr	r2, [r3]
 6711 0046 0E4B     		ldr	r3, .L207+28
 6712 0048 9A42     		cmp	r2, r3
 6713 004a DDD9     		bls	.L203
4225:Src/main.c    ****             //Test_tim3_printf_Flg  = 1;
 6714              		.loc 1 4225 0
 6715 004c 0B4B     		ldr	r3, .L207+24
 6716 004e 0022     		movs	r2, #0
 6717 0050 1A60     		str	r2, [r3]
4227:Src/main.c    ****             {
 6718              		.loc 1 4227 0
 6719 0052 0C4B     		ldr	r3, .L207+32
 6720 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6721 0056 012B     		cmp	r3, #1
 6722 0058 D6D1     		bne	.L203
4230:Src/main.c    ****             }
 6723              		.loc 1 4230 0
 6724 005a 0B4A     		ldr	r2, .L207+36
 6725 005c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 6726 005e 0133     		adds	r3, r3, #1
 6727 0060 1370     		strb	r3, [r2]
 6728              		.loc 1 4401 0
 6729 0062 D1E7     		b	.L203
 6730              	.L208:
 6731              		.align	2
 6732              	.L207:
 6733 0064 00040040 		.word	1073742848
 6734 0068 00000000 		.word	tic02
 6735 006c 00000000 		.word	tic03
 6736 0070 00000000 		.word	tic04
 6737 0074 00000000 		.word	g_usTimerCounter
ARM GAS  /tmp/cclqPDF2.s 			page 217


 6738 0078 00000000 		.word	g_bNotifyTimer0Int
 6739 007c 00000000 		.word	.LANCHOR21
 6740 0080 A0860100 		.word	100000
 6741 0084 00000000 		.word	.LANCHOR7
 6742 0088 00000000 		.word	.LANCHOR8
 6743              		.cfi_endproc
 6744              	.LFE99:
 6746              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 6747              		.align	1
 6748              		.global	HAL_UART_RxCpltCallback
 6749              		.syntax unified
 6750              		.thumb
 6751              		.thumb_func
 6752              		.fpu softvfp
 6754              	HAL_UART_RxCpltCallback:
 6755              	.LFB100:
4402:Src/main.c    **** 
4403:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
4404:Src/main.c    **** {
 6756              		.loc 1 4404 0
 6757              		.cfi_startproc
 6758              		@ args = 0, pretend = 0, frame = 0
 6759              		@ frame_needed = 0, uses_anonymous_args = 0
 6760              	.LVL964:
 6761 0000 10B5     		push	{r4, lr}
 6762              	.LCFI42:
 6763              		.cfi_def_cfa_offset 8
 6764              		.cfi_offset 4, -8
 6765              		.cfi_offset 14, -4
 6766 0002 0446     		mov	r4, r0
4405:Src/main.c    ****     if (huart->Instance == USART1)	//current UART
 6767              		.loc 1 4405 0
 6768 0004 0268     		ldr	r2, [r0]
 6769 0006 184B     		ldr	r3, .L217
 6770 0008 9A42     		cmp	r2, r3
 6771 000a 04D0     		beq	.L215
 6772              	.LVL965:
 6773              	.L210:
4406:Src/main.c    ****     {
4407:Src/main.c    **** 
4408:Src/main.c    **** /*
4409:Src/main.c    **** 		if (Rx_indx==0)
4410:Src/main.c    ****         {
4411:Src/main.c    ****             memset(Rx_Buffer , 0  , RXBUFMAX ) ;
4412:Src/main.c    ****         }
4413:Src/main.c    **** 
4414:Src/main.c    ****         if (Rx_data[0] >= 0x30)
4415:Src/main.c    ****         {
4416:Src/main.c    ****             Rx_Buffer[Rx_indx]=Rx_data[0];	//add data to Rx_Buffer
4417:Src/main.c    ****             Rx_indx++ ;
4418:Src/main.c    ****             if (Rx_indx >= RXBUFMAX )
4419:Src/main.c    ****                 Rx_indx = 0 ;
4420:Src/main.c    ****         }
4421:Src/main.c    ****         else if ((Rx_data[0] == 0x0d) || (Rx_data[0] == 0xa))//if received data = 13
4422:Src/main.c    ****         {
4423:Src/main.c    ****             RxBufIndex = Rx_indx ;
4424:Src/main.c    ****             memcpy(gRxbuf ,Rx_Buffer, Rx_indx ) ;
ARM GAS  /tmp/cclqPDF2.s 			page 218


4425:Src/main.c    ****             Rx_indx=0;
4426:Src/main.c    ****             Transfer_cplt=1;//transfer complete, data is ready to read
4427:Src/main.c    ****         }
4428:Src/main.c    **** */
4429:Src/main.c    **** #if 1
4430:Src/main.c    ****        RS_buf [RS_in++] = Rx_data[0];//USART_ReceiveData(USART1);	
4431:Src/main.c    ****     if( RS_in >= BUF_MAX)  RS_in = 0;
4432:Src/main.c    **** 		
4433:Src/main.c    **** 		//RS_tx(Rx_data[0]);
4434:Src/main.c    **** 
4435:Src/main.c    **** 
4436:Src/main.c    **** //HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data, 1);	//activate UART receive interrupt every time
4437:Src/main.c    **** 	HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data, 1);	 //activate UART receive interrupt every time
4438:Src/main.c    **** 	#endif
4439:Src/main.c    ****     }
4440:Src/main.c    **** #if 1
4441:Src/main.c    **** if (huart->Instance == USART2)	//current UART2
 6774              		.loc 1 4441 0
 6775 000c 2268     		ldr	r2, [r4]
 6776 000e 174B     		ldr	r3, .L217+4
 6777 0010 9A42     		cmp	r2, r3
 6778 0012 14D0     		beq	.L216
 6779              	.L209:
4442:Src/main.c    ****     {
4443:Src/main.c    **** 
4444:Src/main.c    ****        RS2_buf [RS2_in++] = Rx2_data[0];//USART_ReceiveData(USART1);	
4445:Src/main.c    ****     if( RS2_in >= TOA_BUF_MAX)  RS2_in = 0;
4446:Src/main.c    **** 	HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	 //activate UART receive interrupt every time
4447:Src/main.c    ****     }	
4448:Src/main.c    **** #endif
4449:Src/main.c    **** }
 6780              		.loc 1 4449 0
 6781 0014 10BD     		pop	{r4, pc}
 6782              	.LVL966:
 6783              	.L215:
4430:Src/main.c    ****     if( RS_in >= BUF_MAX)  RS_in = 0;
 6784              		.loc 1 4430 0
 6785 0016 1649     		ldr	r1, .L217+8
 6786 0018 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 6787 001a 531C     		adds	r3, r2, #1
 6788 001c DBB2     		uxtb	r3, r3
 6789 001e 0B70     		strb	r3, [r1]
 6790 0020 1449     		ldr	r1, .L217+12
 6791 0022 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 6792              	.LVL967:
 6793 0024 1449     		ldr	r1, .L217+16
 6794 0026 8854     		strb	r0, [r1, r2]
4431:Src/main.c    **** 		
 6795              		.loc 1 4431 0
 6796 0028 1D2B     		cmp	r3, #29
 6797 002a 02D9     		bls	.L211
4431:Src/main.c    **** 		
 6798              		.loc 1 4431 0 is_stmt 0 discriminator 1
 6799 002c 104B     		ldr	r3, .L217+8
 6800 002e 0022     		movs	r2, #0
 6801 0030 1A70     		strb	r2, [r3]
 6802              	.L211:
ARM GAS  /tmp/cclqPDF2.s 			page 219


4437:Src/main.c    **** 	#endif
 6803              		.loc 1 4437 0 is_stmt 1
 6804 0032 0122     		movs	r2, #1
 6805 0034 0F49     		ldr	r1, .L217+12
 6806 0036 1148     		ldr	r0, .L217+20
 6807 0038 FFF7FEFF 		bl	HAL_UART_Receive_IT
 6808              	.LVL968:
 6809 003c E6E7     		b	.L210
 6810              	.L216:
4444:Src/main.c    ****     if( RS2_in >= TOA_BUF_MAX)  RS2_in = 0;
 6811              		.loc 1 4444 0
 6812 003e 1049     		ldr	r1, .L217+24
 6813 0040 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 6814 0042 531C     		adds	r3, r2, #1
 6815 0044 DBB2     		uxtb	r3, r3
 6816 0046 0B70     		strb	r3, [r1]
 6817 0048 0E49     		ldr	r1, .L217+28
 6818 004a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 6819 004c 0E49     		ldr	r1, .L217+32
 6820 004e 8854     		strb	r0, [r1, r2]
4445:Src/main.c    **** 	HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	 //activate UART receive interrupt every time
 6821              		.loc 1 4445 0
 6822 0050 C72B     		cmp	r3, #199
 6823 0052 02D9     		bls	.L213
4445:Src/main.c    **** 	HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	 //activate UART receive interrupt every time
 6824              		.loc 1 4445 0 is_stmt 0 discriminator 1
 6825 0054 0A4B     		ldr	r3, .L217+24
 6826 0056 0022     		movs	r2, #0
 6827 0058 1A70     		strb	r2, [r3]
 6828              	.L213:
4446:Src/main.c    ****     }	
 6829              		.loc 1 4446 0 is_stmt 1
 6830 005a 0122     		movs	r2, #1
 6831 005c 0949     		ldr	r1, .L217+28
 6832 005e 0B48     		ldr	r0, .L217+36
 6833 0060 FFF7FEFF 		bl	HAL_UART_Receive_IT
 6834              	.LVL969:
 6835              		.loc 1 4449 0
 6836 0064 D6E7     		b	.L209
 6837              	.L218:
 6838 0066 00BF     		.align	2
 6839              	.L217:
 6840 0068 00380140 		.word	1073821696
 6841 006c 00440040 		.word	1073759232
 6842 0070 00000000 		.word	RS_in
 6843 0074 00000000 		.word	.LANCHOR22
 6844 0078 00000000 		.word	RS_buf
 6845 007c 00000000 		.word	huart1
 6846 0080 00000000 		.word	RS2_in
 6847 0084 00000000 		.word	.LANCHOR23
 6848 0088 00000000 		.word	RS2_buf
 6849 008c 00000000 		.word	huart2
 6850              		.cfi_endproc
 6851              	.LFE100:
 6853              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 6854              		.align	1
 6855              		.global	HAL_GPIO_EXTI_Callback
ARM GAS  /tmp/cclqPDF2.s 			page 220


 6856              		.syntax unified
 6857              		.thumb
 6858              		.thumb_func
 6859              		.fpu softvfp
 6861              	HAL_GPIO_EXTI_Callback:
 6862              	.LFB101:
4450:Src/main.c    **** 
4451:Src/main.c    **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
4452:Src/main.c    **** {
 6863              		.loc 1 4452 0
 6864              		.cfi_startproc
 6865              		@ args = 0, pretend = 0, frame = 0
 6866              		@ frame_needed = 0, uses_anonymous_args = 0
 6867              		@ link register save eliminated.
 6868              	.LVL970:
4453:Src/main.c    **** /*
4454:Src/main.c    ****     if(GPIO_Pin == IR_IN_Pin  )
4455:Src/main.c    ****     {
4456:Src/main.c    ****         IR_IRQFlg =1 ;
4457:Src/main.c    **** 
4458:Src/main.c    ****         IR_IRQ_Index++ ;
4459:Src/main.c    ****     }
4460:Src/main.c    **** 	*/
4461:Src/main.c    **** }
 6869              		.loc 1 4461 0
 6870 0000 7047     		bx	lr
 6871              		.cfi_endproc
 6872              	.LFE101:
 6874              		.section	.text.HS_Select_Win,"ax",%progbits
 6875              		.align	1
 6876              		.global	HS_Select_Win
 6877              		.syntax unified
 6878              		.thumb
 6879              		.thumb_func
 6880              		.fpu softvfp
 6882              	HS_Select_Win:
 6883              	.LFB102:
4462:Src/main.c    **** 
4463:Src/main.c    **** void HS_Select_Win(unsigned char WinNum)	//20201214-02
4464:Src/main.c    **** {
 6884              		.loc 1 4464 0
 6885              		.cfi_startproc
 6886              		@ args = 0, pretend = 0, frame = 0
 6887              		@ frame_needed = 0, uses_anonymous_args = 0
 6888              	.LVL971:
 6889 0000 38B5     		push	{r3, r4, r5, lr}
 6890              	.LCFI43:
 6891              		.cfi_def_cfa_offset 16
 6892              		.cfi_offset 3, -16
 6893              		.cfi_offset 4, -12
 6894              		.cfi_offset 5, -8
 6895              		.cfi_offset 14, -4
4465:Src/main.c    **** 
4466:Src/main.c    **** 	
4467:Src/main.c    **** 	switch (WinNum)
 6896              		.loc 1 4467 0
 6897 0002 0128     		cmp	r0, #1
ARM GAS  /tmp/cclqPDF2.s 			page 221


 6898 0004 25D0     		beq	.L222
4468:Src/main.c    **** 	{
4469:Src/main.c    **** 		default:
4470:Src/main.c    **** 		case 0:
4471:Src/main.c    **** 			VXISI2CWrite( 0x32, 0x00 );
 6899              		.loc 1 4471 0
 6900 0006 0021     		movs	r1, #0
 6901 0008 3220     		movs	r0, #50
 6902              	.LVL972:
 6903 000a FFF7FEFF 		bl	VXISI2CWrite
 6904              	.LVL973:
4472:Src/main.c    **** 			VXISI2CWrite( 0x19, 0x00 );
 6905              		.loc 1 4472 0
 6906 000e 0021     		movs	r1, #0
 6907 0010 1920     		movs	r0, #25
 6908 0012 FFF7FEFF 		bl	VXISI2CWrite
 6909              	.LVL974:
4473:Src/main.c    **** 			SelectInputMode=0;
 6910              		.loc 1 4473 0
 6911 0016 0024     		movs	r4, #0
 6912 0018 394B     		ldr	r3, .L241
 6913 001a 1C70     		strb	r4, [r3]
4474:Src/main.c    **** 			printf("Selected window 0\r\n");
 6914              		.loc 1 4474 0
 6915 001c 3948     		ldr	r0, .L241+4
 6916 001e FFF7FEFF 		bl	puts
 6917              	.LVL975:
4475:Src/main.c    **** 			pVS4210_MutiWindows1.OutputMode =VS4210_1080P_MODE0_w0;						
 6918              		.loc 1 4475 0
 6919 0022 3948     		ldr	r0, .L241+8
 6920 0024 0470     		strb	r4, [r0]
4476:Src/main.c    **** 			pVS4210_MutiWindows1.WindowMap.WMap0 = 1 ;			
 6921              		.loc 1 4476 0
 6922 0026 0123     		movs	r3, #1
 6923 0028 4370     		strb	r3, [r0, #1]
4477:Src/main.c    **** 			VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;	
 6924              		.loc 1 4477 0
 6925 002a FFF7FEFF 		bl	VS4210_SetMutiWindows
 6926              	.LVL976:
4478:Src/main.c    **** 			//#if (_External_Sync==ON)
4479:Src/main.c    **** 			//VXISI2CWrite( 0x32, 0x00 );
4480:Src/main.c    **** 			  VXISI2CWrite( 0x19, 0x00 );
 6927              		.loc 1 4480 0
 6928 002e 2146     		mov	r1, r4
 6929 0030 1920     		movs	r0, #25
 6930 0032 FFF7FEFF 		bl	VXISI2CWrite
 6931              	.LVL977:
4481:Src/main.c    **** 			//#endif
4482:Src/main.c    **** 			//msleep(100) ;
4483:Src/main.c    **** 		//	VXISI2CWrite( 0x32, 0x80 );
4484:Src/main.c    **** 
4485:Src/main.c    **** 			if(bSignal[0]==1)
 6932              		.loc 1 4485 0
 6933 0036 354B     		ldr	r3, .L241+12
 6934 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6935 003a 012B     		cmp	r3, #1
 6936 003c 04D0     		beq	.L233
ARM GAS  /tmp/cclqPDF2.s 			page 222


4486:Src/main.c    **** 				{
4487:Src/main.c    **** 				Set_Video_Loss_OSD(0,OFF);
4488:Src/main.c    **** 				}
4489:Src/main.c    **** 			else
4490:Src/main.c    **** 				{
4491:Src/main.c    **** 				Set_Video_Loss_OSD(0,ON);
 6937              		.loc 1 4491 0
 6938 003e 0121     		movs	r1, #1
 6939 0040 0020     		movs	r0, #0
 6940 0042 FFF7FEFF 		bl	Set_Video_Loss_OSD
 6941              	.LVL978:
 6942 0046 23E0     		b	.L224
 6943              	.L233:
4487:Src/main.c    **** 				}
 6944              		.loc 1 4487 0
 6945 0048 2146     		mov	r1, r4
 6946 004a 2046     		mov	r0, r4
 6947 004c FFF7FEFF 		bl	Set_Video_Loss_OSD
 6948              	.LVL979:
 6949 0050 1EE0     		b	.L224
 6950              	.LVL980:
 6951              	.L222:
4492:Src/main.c    **** 				}
4493:Src/main.c    **** 
4494:Src/main.c    **** 			#if (_External_Sync==OFF)
4495:Src/main.c    **** 				//SET_HDMI_SYNC_PARA();			
4496:Src/main.c    **** 			#endif
4497:Src/main.c    **** 			break;
4498:Src/main.c    **** 		
4499:Src/main.c    **** 		case 1:
4500:Src/main.c    **** 			VXISI2CWrite( 0x32, 0x00 );
 6952              		.loc 1 4500 0
 6953 0052 0021     		movs	r1, #0
 6954 0054 3220     		movs	r0, #50
 6955              	.LVL981:
 6956 0056 FFF7FEFF 		bl	VXISI2CWrite
 6957              	.LVL982:
4501:Src/main.c    **** 			SelectInputMode=1;
 6958              		.loc 1 4501 0
 6959 005a 294C     		ldr	r4, .L241
 6960 005c 0125     		movs	r5, #1
 6961 005e 2570     		strb	r5, [r4]
4502:Src/main.c    **** 			printf("Selected window 1\r\n");
 6962              		.loc 1 4502 0
 6963 0060 2B48     		ldr	r0, .L241+16
 6964 0062 FFF7FEFF 		bl	puts
 6965              	.LVL983:
4503:Src/main.c    **** 			pVS4210_MutiWindows1.OutputMode =VS4210_1080P_MODE0_w1;
 6966              		.loc 1 4503 0
 6967 0066 2848     		ldr	r0, .L241+8
 6968 0068 0570     		strb	r5, [r0]
4504:Src/main.c    **** 			pVS4210_MutiWindows1.WindowMap.WMap0 = 2 ;
 6969              		.loc 1 4504 0
 6970 006a 0223     		movs	r3, #2
 6971 006c 4370     		strb	r3, [r0, #1]
4505:Src/main.c    **** 			VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;		
 6972              		.loc 1 4505 0
ARM GAS  /tmp/cclqPDF2.s 			page 223


 6973 006e FFF7FEFF 		bl	VS4210_SetMutiWindows
 6974              	.LVL984:
4506:Src/main.c    **** 			VXISI2CWrite( 0x19, 0x04 );
 6975              		.loc 1 4506 0
 6976 0072 0421     		movs	r1, #4
 6977 0074 1920     		movs	r0, #25
 6978 0076 FFF7FEFF 		bl	VXISI2CWrite
 6979              	.LVL985:
4507:Src/main.c    **** 
4508:Src/main.c    **** 		if(SelectInputMode==1)
 6980              		.loc 1 4508 0
 6981 007a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 6982 007c AB42     		cmp	r3, r5
 6983 007e 0ED0     		beq	.L234
 6984              	.L225:
4509:Src/main.c    **** 		{
4510:Src/main.c    **** 			if(  mode[0]==7 )
4511:Src/main.c    **** 				{
4512:Src/main.c    **** 			
4513:Src/main.c    **** 				TP_bt1120_1080P_1080P_mode0_w0();
4514:Src/main.c    **** 					printf("(=1)");
4515:Src/main.c    **** 				//VXISI2CWrite(0x10,0x01);
4516:Src/main.c    **** 				//VXISI2CWrite(0x9c,0x0A);
4517:Src/main.c    **** 				Set_Video_Loss_OSD(1,ON);
4518:Src/main.c    **** 
4519:Src/main.c    **** 			}
4520:Src/main.c    **** 			else
4521:Src/main.c    **** 				{
4522:Src/main.c    **** 				
4523:Src/main.c    **** 				printf("(=2)");
4524:Src/main.c    **** 								if(TP_InputMode==5)
4525:Src/main.c    **** 									{
4526:Src/main.c    **** 									TP_bt1120_720P_1080P_mode0_w0();
4527:Src/main.c    **** 									}
4528:Src/main.c    **** 								else if(TP_InputMode==6)
4529:Src/main.c    **** 									{
4530:Src/main.c    **** 									TP_bt1120_1080P_1080P_mode0_w0();
4531:Src/main.c    **** 									}
4532:Src/main.c    **** 								else if(TP_InputMode==0)
4533:Src/main.c    **** 									{
4534:Src/main.c    **** 									TP_bt1120_NTSC_1080P_mode0_w0();
4535:Src/main.c    **** 									}
4536:Src/main.c    **** 								else if(TP_InputMode==1)
4537:Src/main.c    **** 									{
4538:Src/main.c    **** 									TP_bt1120_PAL_1080P_mode0_w0();
4539:Src/main.c    **** 									}
4540:Src/main.c    **** 								else
4541:Src/main.c    **** 									VXISI2CWrite(0x10,0x01);
4542:Src/main.c    **** 
4543:Src/main.c    **** 										
4544:Src/main.c    **** 				}
4545:Src/main.c    **** 
4546:Src/main.c    **** 			#if (_External_Sync==OFF)
4547:Src/main.c    **** 			//SET_AHD_SYNC_PARA();
4548:Src/main.c    **** 			#endif
4549:Src/main.c    **** 		}	
4550:Src/main.c    **** 		// msleep(100) ;
ARM GAS  /tmp/cclqPDF2.s 			page 224


4551:Src/main.c    **** 
4552:Src/main.c    **** 
4553:Src/main.c    **** 
4554:Src/main.c    **** 		
4555:Src/main.c    **** 			if(bSignal[1]==1)
 6985              		.loc 1 4555 0
 6986 0080 224B     		ldr	r3, .L241+12
 6987 0082 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 6988 0084 012B     		cmp	r3, #1
 6989 0086 35D0     		beq	.L235
4556:Src/main.c    **** 				Set_Video_Loss_OSD(1,OFF);
4557:Src/main.c    **** 			else
4558:Src/main.c    **** 				Set_Video_Loss_OSD(1,ON);
 6990              		.loc 1 4558 0
 6991 0088 0121     		movs	r1, #1
 6992 008a 0846     		mov	r0, r1
 6993 008c FFF7FEFF 		bl	Set_Video_Loss_OSD
 6994              	.LVL986:
 6995              	.L224:
4559:Src/main.c    **** 			
4560:Src/main.c    **** 			break;
4561:Src/main.c    **** 		}
4562:Src/main.c    **** 	
4563:Src/main.c    **** 	
4564:Src/main.c    **** 
4565:Src/main.c    ****   		OSDSecCount = 0 ;
 6996              		.loc 1 4565 0
 6997 0090 204B     		ldr	r3, .L241+20
 6998 0092 0022     		movs	r2, #0
 6999 0094 1A70     		strb	r2, [r3]
4566:Src/main.c    **** 		   OSDStateFlg = 1 ;		
 7000              		.loc 1 4566 0
 7001 0096 204B     		ldr	r3, .L241+24
 7002 0098 0122     		movs	r2, #1
 7003 009a 1A70     		strb	r2, [r3]
4567:Src/main.c    **** }
 7004              		.loc 1 4567 0
 7005 009c 38BD     		pop	{r3, r4, r5, pc}
 7006              	.L234:
4510:Src/main.c    **** 				{
 7007              		.loc 1 4510 0
 7008 009e 1F4B     		ldr	r3, .L241+28
 7009 00a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7010 00a2 072B     		cmp	r3, #7
 7011 00a4 10D0     		beq	.L236
4523:Src/main.c    **** 								if(TP_InputMode==5)
 7012              		.loc 1 4523 0
 7013 00a6 1E48     		ldr	r0, .L241+32
 7014 00a8 FFF7FEFF 		bl	printf
 7015              	.LVL987:
4524:Src/main.c    **** 									{
 7016              		.loc 1 4524 0
 7017 00ac 1D4B     		ldr	r3, .L241+36
 7018 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7019 00b0 052B     		cmp	r3, #5
 7020 00b2 13D0     		beq	.L237
4528:Src/main.c    **** 									{
ARM GAS  /tmp/cclqPDF2.s 			page 225


 7021              		.loc 1 4528 0
 7022 00b4 062B     		cmp	r3, #6
 7023 00b6 14D0     		beq	.L238
4532:Src/main.c    **** 									{
 7024              		.loc 1 4532 0
 7025 00b8 B3B1     		cbz	r3, .L239
4536:Src/main.c    **** 									{
 7026              		.loc 1 4536 0
 7027 00ba 012B     		cmp	r3, #1
 7028 00bc 17D0     		beq	.L240
4541:Src/main.c    **** 
 7029              		.loc 1 4541 0
 7030 00be 0121     		movs	r1, #1
 7031 00c0 1020     		movs	r0, #16
 7032 00c2 FFF7FEFF 		bl	VXISI2CWrite
 7033              	.LVL988:
 7034 00c6 DBE7     		b	.L225
 7035              	.L236:
4513:Src/main.c    **** 					printf("(=1)");
 7036              		.loc 1 4513 0
 7037 00c8 FFF7FEFF 		bl	TP_bt1120_1080P_1080P_mode0_w0
 7038              	.LVL989:
4514:Src/main.c    **** 				//VXISI2CWrite(0x10,0x01);
 7039              		.loc 1 4514 0
 7040 00cc 1648     		ldr	r0, .L241+40
 7041 00ce FFF7FEFF 		bl	printf
 7042              	.LVL990:
4517:Src/main.c    **** 
 7043              		.loc 1 4517 0
 7044 00d2 2946     		mov	r1, r5
 7045 00d4 2846     		mov	r0, r5
 7046 00d6 FFF7FEFF 		bl	Set_Video_Loss_OSD
 7047              	.LVL991:
 7048 00da D1E7     		b	.L225
 7049              	.L237:
4526:Src/main.c    **** 									}
 7050              		.loc 1 4526 0
 7051 00dc FFF7FEFF 		bl	TP_bt1120_720P_1080P_mode0_w0
 7052              	.LVL992:
 7053 00e0 CEE7     		b	.L225
 7054              	.L238:
4530:Src/main.c    **** 									}
 7055              		.loc 1 4530 0
 7056 00e2 FFF7FEFF 		bl	TP_bt1120_1080P_1080P_mode0_w0
 7057              	.LVL993:
 7058 00e6 CBE7     		b	.L225
 7059              	.L239:
4534:Src/main.c    **** 									}
 7060              		.loc 1 4534 0
 7061 00e8 FFF7FEFF 		bl	TP_bt1120_NTSC_1080P_mode0_w0
 7062              	.LVL994:
 7063 00ec C8E7     		b	.L225
 7064              	.L240:
4538:Src/main.c    **** 									}
 7065              		.loc 1 4538 0
 7066 00ee FFF7FEFF 		bl	TP_bt1120_PAL_1080P_mode0_w0
 7067              	.LVL995:
ARM GAS  /tmp/cclqPDF2.s 			page 226


 7068 00f2 C5E7     		b	.L225
 7069              	.L235:
4556:Src/main.c    **** 			else
 7070              		.loc 1 4556 0
 7071 00f4 0021     		movs	r1, #0
 7072 00f6 0120     		movs	r0, #1
 7073 00f8 FFF7FEFF 		bl	Set_Video_Loss_OSD
 7074              	.LVL996:
 7075 00fc C8E7     		b	.L224
 7076              	.L242:
 7077 00fe 00BF     		.align	2
 7078              	.L241:
 7079 0100 00000000 		.word	.LANCHOR10
 7080 0104 00000000 		.word	.LC37
 7081 0108 00000000 		.word	pVS4210_MutiWindows1
 7082 010c 00000000 		.word	.LANCHOR2
 7083 0110 14000000 		.word	.LC38
 7084 0114 00000000 		.word	.LANCHOR8
 7085 0118 00000000 		.word	.LANCHOR7
 7086 011c 00000000 		.word	mode
 7087 0120 30000000 		.word	.LC40
 7088 0124 00000000 		.word	TP_InputMode
 7089 0128 28000000 		.word	.LC39
 7090              		.cfi_endproc
 7091              	.LFE102:
 7093              		.section	.text.main_loop,"ax",%progbits
 7094              		.align	1
 7095              		.global	main_loop
 7096              		.syntax unified
 7097              		.thumb
 7098              		.thumb_func
 7099              		.fpu softvfp
 7101              	main_loop:
 7102              	.LFB85:
2030:Src/main.c    **** 
 7103              		.loc 1 2030 0
 7104              		.cfi_startproc
 7105              		@ Volatile: function does not return.
 7106              		@ args = 0, pretend = 0, frame = 0
 7107              		@ frame_needed = 0, uses_anonymous_args = 0
 7108 0000 00B5     		push	{lr}
 7109              	.LCFI44:
 7110              		.cfi_def_cfa_offset 4
 7111              		.cfi_offset 14, -4
 7112 0002 83B0     		sub	sp, sp, #12
 7113              	.LCFI45:
 7114              		.cfi_def_cfa_offset 16
 7115 0004 61E0     		b	.L257
 7116              	.L259:
2050:Src/main.c    **** 		HDMITX_DevLoopProc() ;
 7117              		.loc 1 2050 0
 7118 0006 1346     		mov	r3, r2
 7119 0008 0022     		movs	r2, #0
 7120 000a 1A70     		strb	r2, [r3]
2051:Src/main.c    **** 	}
 7121              		.loc 1 2051 0
 7122 000c FFF7FEFF 		bl	HDMITX_DevLoopProc
ARM GAS  /tmp/cclqPDF2.s 			page 227


 7123              	.LVL997:
 7124 0010 6AE0     		b	.L245
 7125              	.L260:
2086:Src/main.c    **** 			   if (gMode0LoopSecCount > gMode0LoopSecCmpVal)
 7126              		.loc 1 2086 0
 7127 0012 5B4A     		ldr	r2, .L265
 7128 0014 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 7129 0016 0133     		adds	r3, r3, #1
 7130 0018 DBB2     		uxtb	r3, r3
 7131 001a 1370     		strb	r3, [r2]
2087:Src/main.c    **** 			   {
 7132              		.loc 1 2087 0
 7133 001c 594A     		ldr	r2, .L265+4
 7134 001e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7135 0020 9342     		cmp	r3, r2
 7136 0022 7FD9     		bls	.L248
2089:Src/main.c    **** 				   pVS4210_MutiWindows1.OutputMode = VS4210_FULL_MODE0 ;
 7137              		.loc 1 2089 0
 7138 0024 0021     		movs	r1, #0
 7139 0026 564B     		ldr	r3, .L265
 7140 0028 1970     		strb	r1, [r3]
2090:Src/main.c    **** 				   if (pVS4210_MutiWindows1.WindowMap.WMap0 < 4)
 7141              		.loc 1 2090 0
 7142 002a 574B     		ldr	r3, .L265+8
 7143 002c 1970     		strb	r1, [r3]
2091:Src/main.c    **** 				   {
 7144              		.loc 1 2091 0
 7145 002e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 7146 0030 032B     		cmp	r3, #3
 7147 0032 14D8     		bhi	.L249
2093:Src/main.c    **** 				   }
 7148              		.loc 1 2093 0
 7149 0034 0133     		adds	r3, r3, #1
 7150 0036 5449     		ldr	r1, .L265+8
 7151 0038 4B70     		strb	r3, [r1, #1]
 7152              	.L250:
2098:Src/main.c    **** 				   VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;
 7153              		.loc 1 2098 0
 7154 003a 534C     		ldr	r4, .L265+8
 7155 003c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 7156 003e 0192     		str	r2, [sp, #4]
 7157 0040 0093     		str	r3, [sp]
 7158 0042 40F63203 		movw	r3, #2098
 7159 0046 514A     		ldr	r2, .L265+12
 7160 0048 5149     		ldr	r1, .L265+16
 7161 004a 5248     		ldr	r0, .L265+20
 7162 004c FFF7FEFF 		bl	printf
 7163              	.LVL998:
2099:Src/main.c    **** 				   OSDSecCount = 0 ;
 7164              		.loc 1 2099 0
 7165 0050 2046     		mov	r0, r4
 7166 0052 FFF7FEFF 		bl	VS4210_SetMutiWindows
 7167              	.LVL999:
2100:Src/main.c    **** 			   }
 7168              		.loc 1 2100 0
 7169 0056 504B     		ldr	r3, .L265+24
 7170 0058 0022     		movs	r2, #0
ARM GAS  /tmp/cclqPDF2.s 			page 228


 7171 005a 1A70     		strb	r2, [r3]
 7172 005c 62E0     		b	.L248
 7173              	.L249:
2096:Src/main.c    **** 				   }
 7174              		.loc 1 2096 0
 7175 005e 4A4B     		ldr	r3, .L265+8
 7176 0060 0121     		movs	r1, #1
 7177 0062 5970     		strb	r1, [r3, #1]
 7178 0064 E9E7     		b	.L250
 7179              	.L261:
2106:Src/main.c    **** 		   }
 7180              		.loc 1 2106 0
 7181 0066 484B     		ldr	r3, .L265+8
 7182 0068 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 7183 006a 4B4A     		ldr	r2, .L265+24
 7184 006c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7185 006e 0192     		str	r2, [sp, #4]
 7186 0070 0093     		str	r3, [sp]
 7187 0072 40F63A03 		movw	r3, #2106
 7188 0076 454A     		ldr	r2, .L265+12
 7189 0078 4549     		ldr	r1, .L265+16
 7190 007a 4848     		ldr	r0, .L265+28
 7191 007c FFF7FEFF 		bl	printf
 7192              	.LVL1000:
 7193 0080 54E0     		b	.L251
 7194              	.L262:
2115:Src/main.c    **** 			   {
 7195              		.loc 1 2115 0
 7196 0082 454B     		ldr	r3, .L265+24
 7197 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7198 0086 092B     		cmp	r3, #9
 7199 0088 54D9     		bls	.L252
2117:Src/main.c    **** 				   OSDStateFlg = 0 ;
 7200              		.loc 1 2117 0
 7201 008a 0023     		movs	r3, #0
 7202 008c 424A     		ldr	r2, .L265+24
 7203 008e 1370     		strb	r3, [r2]
2118:Src/main.c    **** 				   OSD_Clear_All();
 7204              		.loc 1 2118 0
 7205 0090 434A     		ldr	r2, .L265+32
 7206 0092 1370     		strb	r3, [r2]
2119:Src/main.c    **** 				   ////VXIS_fSetContentOsdOnOff(0) ;
 7207              		.loc 1 2119 0
 7208 0094 FFF7FEFF 		bl	OSD_Clear_All
 7209              	.LVL1001:
 7210 0098 4CE0     		b	.L252
 7211              	.L263:
2125:Src/main.c    **** 		   
 7212              		.loc 1 2125 0
 7213 009a 8021     		movs	r1, #128
 7214 009c 3220     		movs	r0, #50
 7215 009e FFF7FEFF 		bl	VXISI2CWrite
 7216              	.LVL1002:
 7217 00a2 4CE0     		b	.L247
 7218              	.L264:
2161:Src/main.c    **** 				else
 7219              		.loc 1 2161 0
ARM GAS  /tmp/cclqPDF2.s 			page 229


 7220 00a4 FFF7FEFF 		bl	HS_Select_Win
 7221              	.LVL1003:
 7222 00a8 01E0     		b	.L254
 7223              	.L255:
2175:Src/main.c    **** 	}while(AccessEnable == 0);
 7224              		.loc 1 2175 0 discriminator 2
 7225 00aa FFF7FEFF 		bl	Monitor
 7226              	.LVL1004:
 7227              	.L254:
2175:Src/main.c    **** 	}while(AccessEnable == 0);
 7228              		.loc 1 2175 0 is_stmt 0 discriminator 1
 7229 00ae FFF7FEFF 		bl	RS_ready
 7230              	.LVL1005:
 7231 00b2 0028     		cmp	r0, #0
 7232 00b4 F9D1     		bne	.L255
2176:Src/main.c    **** 	#endif
 7233              		.loc 1 2176 0 is_stmt 1
 7234 00b6 3B4B     		ldr	r3, .L265+36
 7235 00b8 1B68     		ldr	r3, [r3]
 7236 00ba 002B     		cmp	r3, #0
 7237 00bc F7D0     		beq	.L254
2179:Src/main.c    **** 		
 7238              		.loc 1 2179 0
 7239 00be FFF7FEFF 		bl	TOAReceivePaser
 7240              	.LVL1006:
2181:Src/main.c    **** 
 7241              		.loc 1 2181 0
 7242 00c2 FFF7FEFF 		bl	SysTimerHandler
 7243              	.LVL1007:
2183:Src/main.c    **** 
 7244              		.loc 1 2183 0
 7245 00c6 FFF7FEFF 		bl	Get_2824cIrq
 7246              	.LVL1008:
 7247              	.L257:
2041:Src/main.c    **** 	#endif
 7248              		.loc 1 2041 0
 7249 00ca 364B     		ldr	r3, .L265+36
 7250 00cc 1B68     		ldr	r3, [r3]
 7251 00ce 012B     		cmp	r3, #1
 7252 00d0 EDD1     		bne	.L254
2044:Src/main.c    **** 	HDMI_AudioModeDetect() ;
 7253              		.loc 1 2044 0
 7254 00d2 FFF7FEFF 		bl	HDMI_VideoModeDetect
 7255              	.LVL1009:
2045:Src/main.c    **** 
 7256              		.loc 1 2045 0
 7257 00d6 FFF7FEFF 		bl	HDMI_AudioModeDetect
 7258              	.LVL1010:
2047:Src/main.c    **** 	if (TxCount > 10 )
 7259              		.loc 1 2047 0
 7260 00da 334A     		ldr	r2, .L265+40
 7261 00dc 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 7262 00de 0133     		adds	r3, r3, #1
 7263 00e0 DBB2     		uxtb	r3, r3
 7264 00e2 1370     		strb	r3, [r2]
2048:Src/main.c    **** 	{
 7265              		.loc 1 2048 0
ARM GAS  /tmp/cclqPDF2.s 			page 230


 7266 00e4 0A2B     		cmp	r3, #10
 7267 00e6 8ED8     		bhi	.L259
 7268              	.L245:
2072:Src/main.c    **** 
 7269              		.loc 1 2072 0
 7270 00e8 0A20     		movs	r0, #10
 7271 00ea FFF7FEFF 		bl	msleep
 7272              	.LVL1011:
2074:Src/main.c    **** 	   if (gMode0LoopCount > 100 )
 7273              		.loc 1 2074 0
 7274 00ee 2F4A     		ldr	r2, .L265+44
 7275 00f0 1388     		ldrh	r3, [r2]
 7276 00f2 0133     		adds	r3, r3, #1
 7277 00f4 9BB2     		uxth	r3, r3
 7278 00f6 1380     		strh	r3, [r2]	@ movhi
2075:Src/main.c    **** 	   {
 7279              		.loc 1 2075 0
 7280 00f8 642B     		cmp	r3, #100
 7281 00fa 06D9     		bls	.L246
2077:Src/main.c    **** 		   OSDSecCount = OSDSecCount +1 ;
 7282              		.loc 1 2077 0
 7283 00fc 1346     		mov	r3, r2
 7284 00fe 0022     		movs	r2, #0
 7285 0100 1A80     		strh	r2, [r3]	@ movhi
2078:Src/main.c    **** 	   }
 7286              		.loc 1 2078 0
 7287 0102 254A     		ldr	r2, .L265+24
 7288 0104 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 7289 0106 0133     		adds	r3, r3, #1
 7290 0108 1370     		strb	r3, [r2]
 7291              	.L246:
2081:Src/main.c    **** 	   {
 7292              		.loc 1 2081 0
 7293 010a 234B     		ldr	r3, .L265+24
 7294 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7295 010e 284A     		ldr	r2, .L265+48
 7296 0110 1268     		ldr	r2, [r2]
 7297 0112 9342     		cmp	r3, r2
 7298 0114 13D0     		beq	.L247
2083:Src/main.c    **** 		   if (gMode0LoopFlg == 1)
 7299              		.loc 1 2083 0
 7300 0116 264A     		ldr	r2, .L265+48
 7301 0118 1360     		str	r3, [r2]
2084:Src/main.c    **** 		   {
 7302              		.loc 1 2084 0
 7303 011a 264B     		ldr	r3, .L265+52
 7304 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7305 011e 012B     		cmp	r3, #1
 7306 0120 3FF477AF 		beq	.L260
 7307              	.L248:
2104:Src/main.c    **** 		   {
 7308              		.loc 1 2104 0
 7309 0124 234B     		ldr	r3, .L265+52
 7310 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7311 0128 012B     		cmp	r3, #1
 7312 012a 9CD0     		beq	.L261
 7313              	.L251:
ARM GAS  /tmp/cclqPDF2.s 			page 231


2113:Src/main.c    **** 		   {
 7314              		.loc 1 2113 0
 7315 012c 1C4B     		ldr	r3, .L265+32
 7316 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7317 0130 012B     		cmp	r3, #1
 7318 0132 A6D0     		beq	.L262
 7319              	.L252:
2124:Src/main.c    **** 			VXISI2CWrite(0x32,0x80);
 7320              		.loc 1 2124 0
 7321 0134 3220     		movs	r0, #50
 7322 0136 FFF7FEFF 		bl	VXISI2CRead
 7323              	.LVL1012:
 7324 013a 0028     		cmp	r0, #0
 7325 013c ADD0     		beq	.L263
 7326              	.L247:
2130:Src/main.c    **** 	
 7327              		.loc 1 2130 0
 7328 013e FFF7FEFF 		bl	EQ_Detect
 7329              	.LVL1013:
2148:Src/main.c    **** 		if((CheckSelectInputMode!=SelectInputMode)/*&&(BOOT_ISSUE==0)*/)
 7330              		.loc 1 2148 0
 7331 0142 1021     		movs	r1, #16
 7332 0144 1C48     		ldr	r0, .L265+56
 7333 0146 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 7334              	.LVL1014:
 7335 014a 1C4B     		ldr	r3, .L265+60
 7336 014c 1870     		strb	r0, [r3]
2149:Src/main.c    **** 		{
 7337              		.loc 1 2149 0
 7338 014e 1C4B     		ldr	r3, .L265+64
 7339 0150 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7340 0152 9842     		cmp	r0, r3
 7341 0154 ABD0     		beq	.L254
2151:Src/main.c    **** 			CheckSelectInputMode=HDMI_SELECT_GET();
 7342              		.loc 1 2151 0
 7343 0156 3220     		movs	r0, #50
 7344 0158 FFF7FEFF 		bl	msleep
 7345              	.LVL1015:
2152:Src/main.c    **** 
 7346              		.loc 1 2152 0
 7347 015c 1021     		movs	r1, #16
 7348 015e 1648     		ldr	r0, .L265+56
 7349 0160 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 7350              	.LVL1016:
 7351 0164 154B     		ldr	r3, .L265+60
 7352 0166 1870     		strb	r0, [r3]
2154:Src/main.c    **** 				{
 7353              		.loc 1 2154 0
 7354 0168 154B     		ldr	r3, .L265+64
 7355 016a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7356 016c 9842     		cmp	r0, r3
 7357 016e 9ED0     		beq	.L254
2156:Src/main.c    **** 
 7358              		.loc 1 2156 0
 7359 0170 134B     		ldr	r3, .L265+64
 7360 0172 1870     		strb	r0, [r3]
2160:Src/main.c    **** 					HS_Select_Win(1);
ARM GAS  /tmp/cclqPDF2.s 			page 232


 7361              		.loc 1 2160 0
 7362 0174 0128     		cmp	r0, #1
 7363 0176 95D0     		beq	.L264
2163:Src/main.c    **** 				}
 7364              		.loc 1 2163 0
 7365 0178 0020     		movs	r0, #0
 7366 017a FFF7FEFF 		bl	HS_Select_Win
 7367              	.LVL1017:
 7368 017e 96E7     		b	.L254
 7369              	.L266:
 7370              		.align	2
 7371              	.L265:
 7372 0180 00000000 		.word	.LANCHOR28
 7373 0184 00000000 		.word	.LANCHOR29
 7374 0188 00000000 		.word	pVS4210_MutiWindows1
 7375 018c 00000000 		.word	.LANCHOR30
 7376 0190 00000000 		.word	.LC1
 7377 0194 00000000 		.word	.LC41
 7378 0198 00000000 		.word	.LANCHOR8
 7379 019c 24000000 		.word	.LC42
 7380 01a0 00000000 		.word	.LANCHOR7
 7381 01a4 00000000 		.word	AccessEnable
 7382 01a8 00000000 		.word	.LANCHOR24
 7383 01ac 00000000 		.word	.LANCHOR25
 7384 01b0 00000000 		.word	.LANCHOR26
 7385 01b4 00000000 		.word	.LANCHOR27
 7386 01b8 00080140 		.word	1073809408
 7387 01bc 00000000 		.word	.LANCHOR31
 7388 01c0 00000000 		.word	.LANCHOR10
 7389              		.cfi_endproc
 7390              	.LFE85:
 7392              		.section	.text.main,"ax",%progbits
 7393              		.align	1
 7394              		.global	main
 7395              		.syntax unified
 7396              		.thumb
 7397              		.thumb_func
 7398              		.fpu softvfp
 7400              	main:
 7401              	.LFB84:
1719:Src/main.c    ****   /* USER CODE BEGIN 1 */
 7402              		.loc 1 1719 0
 7403              		.cfi_startproc
 7404              		@ args = 0, pretend = 0, frame = 0
 7405              		@ frame_needed = 0, uses_anonymous_args = 0
 7406 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7407              	.LCFI46:
 7408              		.cfi_def_cfa_offset 28
 7409              		.cfi_offset 4, -28
 7410              		.cfi_offset 5, -24
 7411              		.cfi_offset 6, -20
 7412              		.cfi_offset 7, -16
 7413              		.cfi_offset 8, -12
 7414              		.cfi_offset 9, -8
 7415              		.cfi_offset 14, -4
 7416 0004 83B0     		sub	sp, sp, #12
 7417              	.LCFI47:
ARM GAS  /tmp/cclqPDF2.s 			page 233


 7418              		.cfi_def_cfa_offset 40
1738:Src/main.c    ****   
 7419              		.loc 1 1738 0
 7420 0006 FFF7FEFF 		bl	HAL_Init
 7421              	.LVL1018:
1745:Src/main.c    **** 
 7422              		.loc 1 1745 0
 7423 000a FFF7FEFF 		bl	SystemClock_Config
 7424              	.LVL1019:
1749:Src/main.c    **** 
 7425              		.loc 1 1749 0
 7426 000e FFF7FEFF 		bl	InitialTimerEvent
 7427              	.LVL1020:
1754:Src/main.c    ****  // LCDPowerOFF();
 7428              		.loc 1 1754 0
 7429 0012 FFF7FEFF 		bl	MX_GPIO_Init
 7430              	.LVL1021:
1769:Src/main.c    ****   MX_USART1_UART_Init();
 7431              		.loc 1 1769 0
 7432 0016 FFF7FEFF 		bl	MX_TIM3_Init
 7433              	.LVL1022:
1770:Src/main.c    ****   MX_USART2_UART_Init();
 7434              		.loc 1 1770 0
 7435 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 7436              	.LVL1023:
1771:Src/main.c    **** //  MX_ADC1_Init();
 7437              		.loc 1 1771 0
 7438 001e FFF7FEFF 		bl	MX_USART2_UART_Init
 7439              	.LVL1024:
1778:Src/main.c    ****  SW_I2C1_Init() ;
 7440              		.loc 1 1778 0
 7441 0022 FFF7FEFF 		bl	SW_I2C0_Init
 7442              	.LVL1025:
1779:Src/main.c    ****  SW_I2C2_Init() ;
 7443              		.loc 1 1779 0
 7444 0026 FFF7FEFF 		bl	SW_I2C1_Init
 7445              	.LVL1026:
1780:Src/main.c    ****  SW_I2C3_Init() ;
 7446              		.loc 1 1780 0
 7447 002a FFF7FEFF 		bl	SW_I2C2_Init
 7448              	.LVL1027:
1781:Src/main.c    **** 
 7449              		.loc 1 1781 0
 7450 002e FFF7FEFF 		bl	SW_I2C3_Init
 7451              	.LVL1028:
1788:Src/main.c    **** SET_Audio_Mute(ON);
 7452              		.loc 1 1788 0
 7453 0032 0121     		movs	r1, #1
 7454 0034 0020     		movs	r0, #0
 7455 0036 FFF7FEFF 		bl	Set_Video_Loss_OSD
 7456              	.LVL1029:
1789:Src/main.c    **** 
 7457              		.loc 1 1789 0
 7458 003a 0120     		movs	r0, #1
 7459 003c FFF7FEFF 		bl	SET_Audio_Mute
 7460              	.LVL1030:
1794:Src/main.c    ****   HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data, 1);	//activate UART receive interrupt every time
ARM GAS  /tmp/cclqPDF2.s 			page 234


 7461              		.loc 1 1794 0
 7462 0040 3220     		movs	r0, #50
 7463 0042 FFF7FEFF 		bl	msleep
 7464              	.LVL1031:
1795:Src/main.c    ****   HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	//activate UART receive interrupt every time
 7465              		.loc 1 1795 0
 7466 0046 0122     		movs	r2, #1
 7467 0048 5749     		ldr	r1, .L274
 7468 004a 5848     		ldr	r0, .L274+4
 7469 004c FFF7FEFF 		bl	HAL_UART_Receive_IT
 7470              	.LVL1032:
1796:Src/main.c    **** 
 7471              		.loc 1 1796 0
 7472 0050 0122     		movs	r2, #1
 7473 0052 5749     		ldr	r1, .L274+8
 7474 0054 5748     		ldr	r0, .L274+12
 7475 0056 FFF7FEFF 		bl	HAL_UART_Receive_IT
 7476              	.LVL1033:
1800:Src/main.c    ****  TP2824_SET_REST(0);
 7477              		.loc 1 1800 0
 7478 005a 574D     		ldr	r5, .L274+16
 7479 005c 0022     		movs	r2, #0
 7480 005e 4FF48051 		mov	r1, #4096
 7481 0062 2846     		mov	r0, r5
 7482 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 7483              	.LVL1034:
1801:Src/main.c    **** 
 7484              		.loc 1 1801 0
 7485 0068 544C     		ldr	r4, .L274+20
 7486 006a 0022     		movs	r2, #0
 7487 006c 0221     		movs	r1, #2
 7488 006e 2046     		mov	r0, r4
 7489 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 7490              	.LVL1035:
1803:Src/main.c    ****   //HAL_GPIO_WritePin(TP2824_RST_GPIO_Port, VS_RST_Pin, 1); //VS4210 RST
 7491              		.loc 1 1803 0
 7492 0074 6420     		movs	r0, #100
 7493 0076 FFF7FEFF 		bl	msleep
 7494              	.LVL1036:
1806:Src/main.c    ****  TP2824_SET_REST(1);
 7495              		.loc 1 1806 0
 7496 007a 0122     		movs	r2, #1
 7497 007c 4FF48051 		mov	r1, #4096
 7498 0080 2846     		mov	r0, r5
 7499 0082 FFF7FEFF 		bl	HAL_GPIO_WritePin
 7500              	.LVL1037:
1807:Src/main.c    **** 
 7501              		.loc 1 1807 0
 7502 0086 0122     		movs	r2, #1
 7503 0088 0221     		movs	r1, #2
 7504 008a 2046     		mov	r0, r4
 7505 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 7506              	.LVL1038:
1821:Src/main.c    ****   {
 7507              		.loc 1 1821 0
 7508 0090 0024     		movs	r4, #0
 7509 0092 20E0     		b	.L268
ARM GAS  /tmp/cclqPDF2.s 			page 235


 7510              	.LVL1039:
 7511              	.L269:
1823:Src/main.c    ****       dbg_Printf("Init HDMI RX,Chip(%d)....\r\n",(int)i ) ;
 7512              		.loc 1 1823 0 discriminator 3
 7513 0094 4A4B     		ldr	r3, .L274+24
 7514 0096 1C70     		strb	r4, [r3]
1824:Src/main.c    ****       InitHDMIRX(0);
 7515              		.loc 1 1824 0 discriminator 3
 7516 0098 4A4E     		ldr	r6, .L274+28
 7517 009a 4B4D     		ldr	r5, .L274+32
 7518 009c 0094     		str	r4, [sp]
 7519 009e 4FF4E463 		mov	r3, #1824
 7520 00a2 3246     		mov	r2, r6
 7521 00a4 2946     		mov	r1, r5
 7522 00a6 4948     		ldr	r0, .L274+36
 7523 00a8 FFF7FEFF 		bl	printf
 7524              	.LVL1040:
1825:Src/main.c    ****       HDMIRX_WriteI2C_Byte(0x89 ,0x80);
 7525              		.loc 1 1825 0 discriminator 3
 7526 00ac 0020     		movs	r0, #0
 7527 00ae FFF7FEFF 		bl	InitHDMIRX
 7528              	.LVL1041:
1826:Src/main.c    **** 
 7529              		.loc 1 1826 0 discriminator 3
 7530 00b2 8021     		movs	r1, #128
 7531 00b4 8920     		movs	r0, #137
 7532 00b6 FFF7FEFF 		bl	HDMIRX_WriteI2C_Byte
 7533              	.LVL1042:
1829:Src/main.c    ****       dbg_Printf("IT66021 chip num=%d , 02reg=0x%02x\r\n", (int )i , (int)val ) ;
 7534              		.loc 1 1829 0 discriminator 3
 7535 00ba 0220     		movs	r0, #2
 7536 00bc FFF7FEFF 		bl	HDMIRX_ReadI2C_Byte
 7537              	.LVL1043:
1830:Src/main.c    **** #endif
 7538              		.loc 1 1830 0 discriminator 3
 7539 00c0 0190     		str	r0, [sp, #4]
 7540 00c2 0094     		str	r4, [sp]
 7541 00c4 40F22673 		movw	r3, #1830
 7542 00c8 3246     		mov	r2, r6
 7543 00ca 2946     		mov	r1, r5
 7544 00cc 4048     		ldr	r0, .L274+40
 7545              	.LVL1044:
 7546 00ce FFF7FEFF 		bl	printf
 7547              	.LVL1045:
1821:Src/main.c    ****   {
 7548              		.loc 1 1821 0 discriminator 3
 7549 00d2 0134     		adds	r4, r4, #1
 7550              	.LVL1046:
 7551 00d4 E4B2     		uxtb	r4, r4
 7552              	.LVL1047:
 7553              	.L268:
1821:Src/main.c    ****   {
 7554              		.loc 1 1821 0 is_stmt 0 discriminator 1
 7555 00d6 012C     		cmp	r4, #1
 7556 00d8 DCD9     		bls	.L269
1843:Src/main.c    **** 	  #endif
 7557              		.loc 1 1843 0 is_stmt 1
ARM GAS  /tmp/cclqPDF2.s 			page 236


 7558 00da 3E4C     		ldr	r4, .L274+44
 7559              	.LVL1048:
 7560 00dc 0025     		movs	r5, #0
 7561 00de 2570     		strb	r5, [r4]
1846:Src/main.c    ****   pVS4210_MutiWindows1.OutputSize = _OUTPUT_1080P60 ;
 7562              		.loc 1 1846 0
 7563 00e0 6571     		strb	r5, [r4, #5]
1847:Src/main.c    **** 	#ifdef VS4210_SELECT_WIN1	//20201211-02
 7564              		.loc 1 1847 0
 7565 00e2 0126     		movs	r6, #1
 7566 00e4 A671     		strb	r6, [r4, #6]
1854:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap1 = 2 ; //set ch2 = video2
 7567              		.loc 1 1854 0
 7568 00e6 6670     		strb	r6, [r4, #1]
1855:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap2 = 3 ; //set ch3 = video3
 7569              		.loc 1 1855 0
 7570 00e8 0223     		movs	r3, #2
 7571 00ea A370     		strb	r3, [r4, #2]
1856:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap3 = 4 ; //set ch4 = video4
 7572              		.loc 1 1856 0
 7573 00ec 0327     		movs	r7, #3
 7574 00ee E770     		strb	r7, [r4, #3]
1857:Src/main.c    **** 	#endif
 7575              		.loc 1 1857 0
 7576 00f0 0423     		movs	r3, #4
 7577 00f2 2371     		strb	r3, [r4, #4]
1861:Src/main.c    **** 
 7578              		.loc 1 1861 0
 7579 00f4 3849     		ldr	r1, .L274+48
 7580 00f6 0F20     		movs	r0, #15
 7581 00f8 FFF7FEFF 		bl	VXOSD_UseFont_init
 7582              	.LVL1049:
1863:Src/main.c    **** #endif
 7583              		.loc 1 1863 0
 7584 00fc FFF7FEFF 		bl	main_init
 7585              	.LVL1050:
1871:Src/main.c    **** 
 7586              		.loc 1 1871 0
 7587 0100 FFF7FEFF 		bl	Init_TP280x_RegSet
 7588              	.LVL1051:
1875:Src/main.c    ****    dbg_Printf("VS4210 chip ID = 0x%02x\r\n",(int)val) ;
 7589              		.loc 1 1875 0
 7590 0104 2846     		mov	r0, r5
 7591 0106 FFF7FEFF 		bl	VXISI2CRead
 7592              	.LVL1052:
1876:Src/main.c    ****    dbg_Printf("VS4210 Init. (Startting...)\r\n") ;
 7593              		.loc 1 1876 0
 7594 010a DFF8B890 		ldr	r9, .L274+28
 7595 010e DFF8B880 		ldr	r8, .L274+32
 7596 0112 0090     		str	r0, [sp]
 7597 0114 40F25473 		movw	r3, #1876
 7598 0118 4A46     		mov	r2, r9
 7599 011a 4146     		mov	r1, r8
 7600 011c 2F48     		ldr	r0, .L274+52
 7601              	.LVL1053:
 7602 011e FFF7FEFF 		bl	printf
 7603              	.LVL1054:
ARM GAS  /tmp/cclqPDF2.s 			page 237


1877:Src/main.c    **** #endif
 7604              		.loc 1 1877 0
 7605 0122 40F25573 		movw	r3, #1877
 7606 0126 4A46     		mov	r2, r9
 7607 0128 4146     		mov	r1, r8
 7608 012a 2D48     		ldr	r0, .L274+56
 7609 012c FFF7FEFF 		bl	printf
 7610              	.LVL1055:
1880:Src/main.c    ****   //pVS4210_MutiWindows1.DrawOSDFlg = 0x00 ;  //Enable OSD, bit1=Title, bit0 = bar
 7611              		.loc 1 1880 0
 7612 0130 E771     		strb	r7, [r4, #7]
1890:Src/main.c    ****   //pVS4210_MutiWindows1.OutputSize = _OUTPUT_720P60 ;
 7613              		.loc 1 1890 0
 7614 0132 A671     		strb	r6, [r4, #6]
1893:Src/main.c    ****   pVS4210_MutiWindows1.DrawBoxColor= _EN_DRAWBOX_COLOR_White ;
 7615              		.loc 1 1893 0
 7616 0134 2572     		strb	r5, [r4, #8]
1894:Src/main.c    ****   VXIS_fSetOsdx2(0) ;
 7617              		.loc 1 1894 0
 7618 0136 6572     		strb	r5, [r4, #9]
1895:Src/main.c    **** 
 7619              		.loc 1 1895 0
 7620 0138 2846     		mov	r0, r5
 7621 013a FFF7FEFF 		bl	VXIS_fSetOsdx2
 7622              	.LVL1056:
1897:Src/main.c    **** 
 7623              		.loc 1 1897 0
 7624 013e 2046     		mov	r0, r4
 7625 0140 FFF7FEFF 		bl	VS4210_SetMutiWindows
 7626              	.LVL1057:
1899:Src/main.c    ****   {
 7627              		.loc 1 1899 0
 7628 0144 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 7629 0146 3BB1     		cbz	r3, .L270
1901:Src/main.c    ****         Tim1_count = 0 ;
 7630              		.loc 1 1901 0
 7631 0148 264B     		ldr	r3, .L274+60
 7632 014a 1E60     		str	r6, [r3]
1902:Src/main.c    ****         OSDStateFlg = 1 ;
 7633              		.loc 1 1902 0
 7634 014c 2649     		ldr	r1, .L274+64
 7635 014e 0D60     		str	r5, [r1]
1903:Src/main.c    ****         OSDSecCount = 0 ;
 7636              		.loc 1 1903 0
 7637 0150 2649     		ldr	r1, .L274+68
 7638 0152 0E70     		strb	r6, [r1]
1904:Src/main.c    ****   }  
 7639              		.loc 1 1904 0
 7640 0154 264A     		ldr	r2, .L274+72
 7641 0156 1570     		strb	r5, [r2]
 7642              	.L270:
1907:Src/main.c    **** memset(&ExOsdContent[1] ,_spc , (EXTERNOSDNUMBER+1) *2 ) ;
 7643              		.loc 1 1907 0
 7644 0158 2648     		ldr	r0, .L274+76
 7645 015a 5D23     		movs	r3, #93
 7646 015c 00F8013B 		strb	r3, [r0], #1
1908:Src/main.c    **** exosdLen = 4*EXTERNOSDNUMBER + 4  ;
ARM GAS  /tmp/cclqPDF2.s 			page 238


 7647              		.loc 1 1908 0
 7648 0160 2022     		movs	r2, #32
 7649 0162 6D21     		movs	r1, #109
 7650 0164 FFF7FEFF 		bl	memset
 7651              	.LVL1058:
1911:Src/main.c    **** for (i = exosdStart ; i <= exosdLen ;i = i+2 )
 7652              		.loc 1 1911 0
 7653 0168 0122     		movs	r2, #1
1912:Src/main.c    **** {
 7654              		.loc 1 1912 0
 7655 016a 2123     		movs	r3, #33
 7656 016c 0AE0     		b	.L271
 7657              	.LVL1059:
 7658              	.L272:
1914:Src/main.c    **** 	ExOsdContent[i+1] = _spc ;
 7659              		.loc 1 1914 0 discriminator 3
 7660 016e 02F17F00 		add	r0, r2, #127
 7661 0172 2049     		ldr	r1, .L274+76
 7662 0174 C854     		strb	r0, [r1, r3]
1915:Src/main.c    **** 	j++ ;
 7663              		.loc 1 1915 0 discriminator 3
 7664 0176 581C     		adds	r0, r3, #1
 7665 0178 6D24     		movs	r4, #109
 7666 017a 0C54     		strb	r4, [r1, r0]
1916:Src/main.c    **** }
 7667              		.loc 1 1916 0 discriminator 3
 7668 017c 0132     		adds	r2, r2, #1
 7669              	.LVL1060:
 7670 017e D2B2     		uxtb	r2, r2
 7671              	.LVL1061:
1912:Src/main.c    **** {
 7672              		.loc 1 1912 0 discriminator 3
 7673 0180 0233     		adds	r3, r3, #2
 7674              	.LVL1062:
 7675 0182 DBB2     		uxtb	r3, r3
 7676              	.LVL1063:
 7677              	.L271:
1912:Src/main.c    **** {
 7678              		.loc 1 1912 0 is_stmt 0 discriminator 1
 7679 0184 402B     		cmp	r3, #64
 7680 0186 F2D9     		bls	.L272
1918:Src/main.c    ****   exosdLen = EXTERNOSDNUMBER *2  ;
 7681              		.loc 1 1918 0 is_stmt 1
 7682 0188 1F22     		movs	r2, #31
 7683              	.LVL1064:
 7684 018a 6D21     		movs	r1, #109
 7685 018c 1A48     		ldr	r0, .L274+80
 7686 018e FFF7FEFF 		bl	memset
 7687              	.LVL1065:
1921:Src/main.c    **** //test@end
 7688              		.loc 1 1921 0
 7689 0192 0020     		movs	r0, #0
 7690 0194 FFF7FEFF 		bl	Audio_Sel
 7691              	.LVL1066:
1984:Src/main.c    ****   /* USER CODE END 2 */
 7692              		.loc 1 1984 0
 7693 0198 1848     		ldr	r0, .L274+84
ARM GAS  /tmp/cclqPDF2.s 			page 239


 7694 019a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 7695              	.LVL1067:
2001:Src/main.c    **** 
 7696              		.loc 1 2001 0
 7697 019e 1848     		ldr	r0, .L274+88
 7698 01a0 FFF7FEFF 		bl	printf
 7699              	.LVL1068:
2014:Src/main.c    **** 	
 7700              		.loc 1 2014 0
 7701 01a4 FFF7FEFF 		bl	main_loop
 7702              	.LVL1069:
 7703              	.L275:
 7704              		.align	2
 7705              	.L274:
 7706 01a8 00000000 		.word	.LANCHOR22
 7707 01ac 00000000 		.word	huart1
 7708 01b0 00000000 		.word	.LANCHOR23
 7709 01b4 00000000 		.word	huart2
 7710 01b8 000C0140 		.word	1073810432
 7711 01bc 00100140 		.word	1073811456
 7712 01c0 00000000 		.word	gHDMI_Index
 7713 01c4 00000000 		.word	.LANCHOR32
 7714 01c8 00000000 		.word	.LC1
 7715 01cc 00000000 		.word	.LC43
 7716 01d0 28000000 		.word	.LC44
 7717 01d4 00000000 		.word	pVS4210_MutiWindows1
 7718 01d8 00000000 		.word	UserDefineFont1
 7719 01dc 58000000 		.word	.LC45
 7720 01e0 7C000000 		.word	.LC46
 7721 01e4 00000000 		.word	.LANCHOR5
 7722 01e8 00000000 		.word	.LANCHOR6
 7723 01ec 00000000 		.word	.LANCHOR7
 7724 01f0 00000000 		.word	.LANCHOR8
 7725 01f4 00000000 		.word	ExOsdContent
 7726 01f8 3F000000 		.word	ExOsdContent+63
 7727 01fc 00000000 		.word	htim3
 7728 0200 A4000000 		.word	.LC47
 7729              		.cfi_endproc
 7730              	.LFE84:
 7732              		.section	.text.Error_Handler,"ax",%progbits
 7733              		.align	1
 7734              		.global	Error_Handler
 7735              		.syntax unified
 7736              		.thumb
 7737              		.thumb_func
 7738              		.fpu softvfp
 7740              	Error_Handler:
 7741              	.LFB103:
4568:Src/main.c    **** 
4569:Src/main.c    **** /* USER CODE END 4 */
4570:Src/main.c    **** 
4571:Src/main.c    **** /**
4572:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
4573:Src/main.c    ****   * @retval None
4574:Src/main.c    ****   */
4575:Src/main.c    **** void Error_Handler(void)
4576:Src/main.c    **** {
ARM GAS  /tmp/cclqPDF2.s 			page 240


 7742              		.loc 1 4576 0
 7743              		.cfi_startproc
 7744              		@ args = 0, pretend = 0, frame = 0
 7745              		@ frame_needed = 0, uses_anonymous_args = 0
 7746              		@ link register save eliminated.
4577:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
4578:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
4579:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
4580:Src/main.c    **** }
 7747              		.loc 1 4580 0
 7748 0000 7047     		bx	lr
 7749              		.cfi_endproc
 7750              	.LFE103:
 7752              		.global	OSDStateFlg
 7753              		.global	OSDSecCount
 7754              		.comm	pVS4210_JointKind1,10,4
 7755              		.global	gRxLoopFlg
 7756              		.comm	gabVXIS_Input_mirrorH,4,4
 7757              		.global	OSD_Show_Flg
 7758              		.global	Tim1_count
 7759              		.comm	pVS4210_MutiWindows1,10,4
 7760              		.global	TxCount
 7761              		.global	bSignal
 7762              		.global	gMode0LoopSecCmpVal
 7763              		.global	gMode0LoopSecCount
 7764              		.global	gMode0LoopFlg
 7765              		.global	gMode0LoopCount
 7766              		.global	gbAUDO_INDEX
 7767              		.comm	gPrebAUDO_INDEX,1,1
 7768              		.comm	gPreAudioSampleFreq,1,1
 7769              		.global	CheckSelectInputMode
 7770              		.global	SelectInputMode
 7771              		.global	OSDPreSecCount
 7772              		.global	PrebVXIS_InputMode
 7773              		.comm	ExOsdContent,256,4
 7774              		.global	CURRENT_CH
 7775              		.global	BOOT_ISSUE
 7776              		.global	OSD_SPEAKER
 7777              		.global	OSD_MIRROR
 7778              		.comm	CAMR_M,1,1
 7779              		.comm	CAMC_M,1,1
 7780              		.comm	CAMB_M,1,1
 7781              		.comm	CAMA_M,1,1
 7782              		.comm	Priority,1,1
 7783              		.comm	SelectModeType,1,1
 7784              		.global	tptic
 7785              		.global	keytic
 7786              		.global	PowerFlag
 7787              		.comm	TimeStep,1,1
 7788              		.global	PWMLevel
 7789              		.global	AutoDayNightDelay
 7790              		.global	LightSensor_ADC
 7791              		.global	DayNightLevel
 7792              		.comm	DebugLevel,1,1
 7793              		.global	half_scaler
 7794              		.comm	ManVidRes,1,1
 7795              		.global	VS8812_ADDR
ARM GAS  /tmp/cclqPDF2.s 			page 241


 7796              		.global	VS4210_ADDR
 7797              		.comm	htim2,64,4
 7798              		.comm	hadc1,48,4
 7799              		.comm	huart2,64,4
 7800              		.comm	huart1,64,4
 7801              		.comm	htim3,64,4
 7802              		.comm	newInRes,4,4
 7803              		.section	.bss.AutoDayNightDelay,"aw",%nobits
 7804              		.set	.LANCHOR19,. + 0
 7807              	AutoDayNightDelay:
 7808 0000 00       		.space	1
 7809              		.section	.bss.CURRENT_CH,"aw",%nobits
 7810              		.set	.LANCHOR16,. + 0
 7813              	CURRENT_CH:
 7814 0000 00       		.space	1
 7815              		.section	.bss.CheckSelectInputMode,"aw",%nobits
 7816              		.set	.LANCHOR31,. + 0
 7819              	CheckSelectInputMode:
 7820 0000 00       		.space	1
 7821              		.section	.bss.DayNightLevel,"aw",%nobits
 7822              		.set	.LANCHOR17,. + 0
 7825              	DayNightLevel:
 7826 0000 00       		.space	1
 7827              		.section	.bss.DebugFlg,"aw",%nobits
 7828              		.align	2
 7831              	DebugFlg:
 7832 0000 00000000 		.space	4
 7833              		.section	.bss.IR_4BYTE,"aw",%nobits
 7834              		.align	2
 7837              	IR_4BYTE:
 7838 0000 00000000 		.space	4
 7839              		.section	.bss.IR_Code,"aw",%nobits
 7842              	IR_Code:
 7843 0000 00       		.space	1
 7844              		.section	.bss.IR_END_Flg,"aw",%nobits
 7847              	IR_END_Flg:
 7848 0000 00       		.space	1
 7849              		.section	.bss.IR_IRQFlg,"aw",%nobits
 7852              	IR_IRQFlg:
 7853 0000 00       		.space	1
 7854              		.section	.bss.IR_IRQ_Index,"aw",%nobits
 7857              	IR_IRQ_Index:
 7858 0000 00       		.space	1
 7859              		.section	.bss.IR_PlusTimeVal,"aw",%nobits
 7860              		.align	1
 7863              	IR_PlusTimeVal:
 7864 0000 0000     		.space	2
 7865              		.section	.bss.IR_ShiftCount,"aw",%nobits
 7868              	IR_ShiftCount:
 7869 0000 00       		.space	1
 7870              		.section	.bss.IR_StartFlg,"aw",%nobits
 7873              	IR_StartFlg:
 7874 0000 00       		.space	1
 7875              		.section	.bss.LightSensor_ADC,"aw",%nobits
 7876              		.align	1
 7879              	LightSensor_ADC:
 7880 0000 0000     		.space	2
ARM GAS  /tmp/cclqPDF2.s 			page 242


 7881              		.section	.bss.OSDSecCount,"aw",%nobits
 7882              		.set	.LANCHOR8,. + 0
 7885              	OSDSecCount:
 7886 0000 00       		.space	1
 7887              		.section	.bss.OSD_MIRROR,"aw",%nobits
 7888              		.align	2
 7889              		.set	.LANCHOR14,. + 0
 7892              	OSD_MIRROR:
 7893 0000 00000000 		.space	4
 7894              		.section	.bss.OSD_SPEAKER,"aw",%nobits
 7895              		.align	2
 7896              		.set	.LANCHOR15,. + 0
 7899              	OSD_SPEAKER:
 7900 0000 00000000 		.space	4
 7901              		.section	.bss.OSD_Show_Flg,"aw",%nobits
 7902              		.align	2
 7903              		.set	.LANCHOR5,. + 0
 7906              	OSD_Show_Flg:
 7907 0000 00000000 		.space	4
 7908              		.section	.bss.PreIR_Code,"aw",%nobits
 7911              	PreIR_Code:
 7912 0000 00       		.space	1
 7913              		.section	.bss.PreIR_IRQ_Index,"aw",%nobits
 7916              	PreIR_IRQ_Index:
 7917 0000 00       		.space	1
 7918              		.section	.bss.Rx2_data,"aw",%nobits
 7919              		.align	2
 7920              		.set	.LANCHOR23,. + 0
 7923              	Rx2_data:
 7924 0000 0000     		.space	2
 7925              		.section	.bss.RxBufIndex,"aw",%nobits
 7926              		.align	2
 7927              		.set	.LANCHOR12,. + 0
 7930              	RxBufIndex:
 7931 0000 00000000 		.space	4
 7932              		.section	.bss.Rx_data,"aw",%nobits
 7933              		.align	2
 7934              		.set	.LANCHOR22,. + 0
 7937              	Rx_data:
 7938 0000 0000     		.space	2
 7939              		.section	.bss.Rx_indx,"aw",%nobits
 7940              		.align	2
 7943              	Rx_indx:
 7944 0000 00000000 		.space	4
 7945              		.section	.bss.RxiCount,"aw",%nobits
 7946              		.align	2
 7949              	RxiCount:
 7950 0000 00000000 		.space	4
 7951              		.section	.bss.SelectInputMode,"aw",%nobits
 7952              		.set	.LANCHOR10,. + 0
 7955              	SelectInputMode:
 7956 0000 00       		.space	1
 7957              		.section	.bss.Tim1_count,"aw",%nobits
 7958              		.align	2
 7959              		.set	.LANCHOR6,. + 0
 7962              	Tim1_count:
 7963 0000 00000000 		.space	4
ARM GAS  /tmp/cclqPDF2.s 			page 243


 7964              		.section	.bss.Transfer_cplt,"aw",%nobits
 7965              		.set	.LANCHOR11,. + 0
 7968              	Transfer_cplt:
 7969 0000 00       		.space	1
 7970              		.section	.bss.TxCount,"aw",%nobits
 7971              		.set	.LANCHOR24,. + 0
 7974              	TxCount:
 7975 0000 00       		.space	1
 7976              		.section	.bss.TxiCount,"aw",%nobits
 7977              		.align	2
 7980              	TxiCount:
 7981 0000 00000000 		.space	4
 7982              		.section	.bss.bOldSignal,"aw",%nobits
 7983              		.align	2
 7984              		.set	.LANCHOR3,. + 0
 7987              	bOldSignal:
 7988 0000 00000000 		.space	4
 7989              		.section	.bss.bSignal,"aw",%nobits
 7990              		.align	2
 7991              		.set	.LANCHOR2,. + 0
 7994              	bSignal:
 7995 0000 00000000 		.space	4
 7996              		.section	.bss.gAudioSampleFreq,"aw",%nobits
 7997              		.align	2
 7998              		.set	.LANCHOR1,. + 0
 8001              	gAudioSampleFreq:
 8002 0000 00000000 		.space	4
 8003              		.section	.bss.gMode0LoopCount,"aw",%nobits
 8004              		.align	1
 8005              		.set	.LANCHOR25,. + 0
 8008              	gMode0LoopCount:
 8009 0000 0000     		.space	2
 8010              		.section	.bss.gMode0LoopFlg,"aw",%nobits
 8011              		.set	.LANCHOR27,. + 0
 8014              	gMode0LoopFlg:
 8015 0000 00       		.space	1
 8016              		.section	.bss.gMode0LoopSecCount,"aw",%nobits
 8017              		.set	.LANCHOR28,. + 0
 8020              	gMode0LoopSecCount:
 8021 0000 00       		.space	1
 8022              		.section	.bss.gRxbuf,"aw",%nobits
 8023              		.align	2
 8024              		.set	.LANCHOR13,. + 0
 8027              	gRxbuf:
 8028 0000 00000000 		.space	50
 8028      00000000 
 8028      00000000 
 8028      00000000 
 8028      00000000 
 8029              		.section	.bss.gbAUDO_INDEX,"aw",%nobits
 8030              		.set	.LANCHOR0,. + 0
 8033              	gbAUDO_INDEX:
 8034 0000 00       		.space	1
 8035              		.section	.bss.half_scaler,"aw",%nobits
 8038              	half_scaler:
 8039 0000 00       		.space	1
 8040              		.section	.bss.keytic,"aw",%nobits
ARM GAS  /tmp/cclqPDF2.s 			page 244


 8043              	keytic:
 8044 0000 00       		.space	1
 8045              		.section	.bss.tim3count,"aw",%nobits
 8046              		.align	2
 8047              		.set	.LANCHOR21,. + 0
 8050              	tim3count:
 8051 0000 00000000 		.space	4
 8052              		.section	.bss.tptic,"aw",%nobits
 8055              	tptic:
 8056 0000 00       		.space	1
 8057              		.section	.bss.u16Vendor,"aw",%nobits
 8058              		.align	1
 8061              	u16Vendor:
 8062 0000 0000     		.space	2
 8063              		.section	.bss.u8IRCheckcode,"aw",%nobits
 8066              	u8IRCheckcode:
 8067 0000 00       		.space	1
 8068              		.section	.bss.u8IRcode,"aw",%nobits
 8071              	u8IRcode:
 8072 0000 00       		.space	1
 8073              		.section	.bss.u8PowerFlg,"aw",%nobits
 8076              	u8PowerFlg:
 8077 0000 00       		.space	1
 8078              		.section	.data.BOOT_ISSUE,"aw",%progbits
 8081              	BOOT_ISSUE:
 8082 0000 01       		.byte	1
 8083              		.section	.data.OSDPreSecCount,"aw",%progbits
 8084              		.align	2
 8085              		.set	.LANCHOR26,. + 0
 8088              	OSDPreSecCount:
 8089 0000 FFFFFFFF 		.word	-1
 8090              		.section	.data.OSDStateFlg,"aw",%progbits
 8091              		.set	.LANCHOR7,. + 0
 8094              	OSDStateFlg:
 8095 0000 01       		.byte	1
 8096              		.section	.data.PWMLevel,"aw",%progbits
 8097              		.set	.LANCHOR18,. + 0
 8100              	PWMLevel:
 8101 0000 80       		.byte	-128
 8102              		.section	.data.PowerFlag,"aw",%progbits
 8103              		.set	.LANCHOR20,. + 0
 8106              	PowerFlag:
 8107 0000 01       		.byte	1
 8108              		.section	.data.PrebVXIS_InputMode,"aw",%progbits
 8109              		.align	2
 8110              		.set	.LANCHOR9,. + 0
 8113              	PrebVXIS_InputMode:
 8114 0000 FA       		.byte	-6
 8115 0001 FA       		.byte	-6
 8116 0002 FA       		.byte	-6
 8117 0003 FA       		.byte	-6
 8118              		.section	.data.VS4210_ADDR,"aw",%progbits
 8121              	VS4210_ADDR:
 8122 0000 40       		.byte	64
 8123              		.section	.data.VS8812_ADDR,"aw",%progbits
 8126              	VS8812_ADDR:
 8127 0000 12       		.byte	18
ARM GAS  /tmp/cclqPDF2.s 			page 245


 8128              		.section	.data.gMode0LoopSecCmpVal,"aw",%progbits
 8129              		.set	.LANCHOR29,. + 0
 8132              	gMode0LoopSecCmpVal:
 8133 0000 0A       		.byte	10
 8134              		.section	.data.gRxLoopFlg,"aw",%progbits
 8137              	gRxLoopFlg:
 8138 0000 01       		.byte	1
 8139              		.section	.rodata.GetRS232_CMD.str1.4,"aMS",%progbits,1
 8140              		.align	2
 8141              	.LC4:
 8142 0000 52784275 		.ascii	"RxBufIndex=%d,str=%s\015\012\000"
 8142      66496E64 
 8142      65783D25 
 8142      642C7374 
 8142      723D2573 
 8143 0017 00       		.space	1
 8144              	.LC5:
 8145 0018 49724E75 		.ascii	"IrNum=0x%02x\015\012\000"
 8145      6D3D3078 
 8145      25303278 
 8145      0D0A00
 8146              		.section	.rodata.HDMI_VideoModeDetect.str1.4,"aMS",%progbits,1
 8147              		.align	2
 8148              	.LC1:
 8149 0000 5372632F 		.ascii	"Src/main.c\000"
 8149      6D61696E 
 8149      2E6300
 8150 000b 00       		.space	1
 8151              	.LC2:
 8152 000c 25732C25 		.ascii	"%s,%s,%d:##ch%d, VS4210_Rx_NoSignal\015\012\000"
 8152      732C2564 
 8152      3A232363 
 8152      6825642C 
 8152      20565334 
 8153 0032 0000     		.space	2
 8154              	.LC3:
 8155 0034 25732C25 		.ascii	"%s,%s,%d:ch%d, InputMode=%d \015\012\000"
 8155      732C2564 
 8155      3A636825 
 8155      642C2049 
 8155      6E707574 
 8156              		.section	.rodata.HS_Select_Win.str1.4,"aMS",%progbits,1
 8157              		.align	2
 8158              	.LC37:
 8159 0000 53656C65 		.ascii	"Selected window 0\015\000"
 8159      63746564 
 8159      2077696E 
 8159      646F7720 
 8159      300D00
 8160 0013 00       		.space	1
 8161              	.LC38:
 8162 0014 53656C65 		.ascii	"Selected window 1\015\000"
 8162      63746564 
 8162      2077696E 
 8162      646F7720 
 8162      310D00
 8163 0027 00       		.space	1
ARM GAS  /tmp/cclqPDF2.s 			page 246


 8164              	.LC39:
 8165 0028 283D3129 		.ascii	"(=1)\000"
 8165      00
 8166 002d 000000   		.space	3
 8167              	.LC40:
 8168 0030 283D3229 		.ascii	"(=2)\000"
 8168      00
 8169              		.section	.rodata.SET_AHD_MDOE.str1.4,"aMS",%progbits,1
 8170              		.align	2
 8171              	.LC36:
 8172 0000 0D0A5345 		.ascii	"\015\012SET_AHD_MDOE...\000"
 8172      545F4148 
 8172      445F4D44 
 8172      4F452E2E 
 8172      2E00
 8173              		.section	.rodata.SET_Audio_Mute.str1.4,"aMS",%progbits,1
 8174              		.align	2
 8175              	.LC0:
 8176 0000 282A5345 		.ascii	"(*SET_Audio_Mute=%d)\000"
 8176      545F4175 
 8176      64696F5F 
 8176      4D757465 
 8176      3D256429 
 8177              		.section	.rodata.SET_VS4210_1280_720_out.str1.4,"aMS",%progbits,1
 8178              		.align	2
 8179              	.LC35:
 8180 0000 0D0A5345 		.ascii	"\015\012SET_VS4210_1280_720_out\000"
 8180      545F5653 
 8180      34323130 
 8180      5F313238 
 8180      305F3732 
 8181              		.section	.rodata.SET_VS4210_720_480_out.str1.4,"aMS",%progbits,1
 8182              		.align	2
 8183              	.LC34:
 8184 0000 0D0A5345 		.ascii	"\015\012SET_VS4210_720_480_out \000"
 8184      545F5653 
 8184      34323130 
 8184      5F373230 
 8184      5F343830 
 8185              		.section	.rodata.TP_bt1120_1080P_1080P_mode0_w0.str1.4,"aMS",%progbits,1
 8186              		.align	2
 8187              	.LC30:
 8188 0000 0D0A4C6F 		.ascii	"\015\012Loading VS4210 AHD table 1080P... \000"
 8188      6164696E 
 8188      67205653 
 8188      34323130 
 8188      20414844 
 8189              		.section	.rodata.TP_bt1120_720P_1080P_mode0_w0.str1.4,"aMS",%progbits,1
 8190              		.align	2
 8191              	.LC31:
 8192 0000 0D0A4C6F 		.ascii	"\015\012Loading VS4210 AHD table 720P... \000"
 8192      6164696E 
 8192      67205653 
 8192      34323130 
 8192      20414844 
 8193              		.section	.rodata.TP_bt1120_NTSC_1080P_mode0_w0.str1.4,"aMS",%progbits,1
 8194              		.align	2
ARM GAS  /tmp/cclqPDF2.s 			page 247


 8195              	.LC32:
 8196 0000 0D0A4C6F 		.ascii	"\015\012Loading VS4210 AHD table NTSC... \000"
 8196      6164696E 
 8196      67205653 
 8196      34323130 
 8196      20414844 
 8197              		.section	.rodata.TP_bt1120_PAL_1080P_mode0_w0.str1.4,"aMS",%progbits,1
 8198              		.align	2
 8199              	.LC33:
 8200 0000 0D0A4C6F 		.ascii	"\015\012Loading VS4210 AHD table PAL... \000"
 8200      6164696E 
 8200      67205653 
 8200      34323130 
 8200      20414844 
 8201              		.section	.rodata.WaitPowerOn.str1.4,"aMS",%progbits,1
 8202              		.align	2
 8203              	.LC28:
 8204 0000 0D0A2850 		.ascii	"\015\012(Power off..)\000"
 8204      6F776572 
 8204      206F6666 
 8204      2E2E2900 
 8205              	.LC29:
 8206 0010 0D0A2850 		.ascii	"\015\012(Power ON..)\000"
 8206      6F776572 
 8206      204F4E2E 
 8206      2E2900
 8207              		.section	.rodata.__FUNCTION__.9355,"a",%progbits
 8208              		.align	2
 8209              		.set	.LANCHOR4,. + 0
 8212              	__FUNCTION__.9355:
 8213 0000 48444D49 		.ascii	"HDMI_VideoModeDetect\000"
 8213      5F566964 
 8213      656F4D6F 
 8213      64654465 
 8213      74656374 
 8214              		.section	.rodata.__FUNCTION__.9402,"a",%progbits
 8215              		.align	2
 8216              		.set	.LANCHOR32,. + 0
 8219              	__FUNCTION__.9402:
 8220 0000 6D61696E 		.ascii	"main\000"
 8220      00
 8221              		.section	.rodata.__FUNCTION__.9413,"a",%progbits
 8222              		.align	2
 8223              		.set	.LANCHOR30,. + 0
 8226              	__FUNCTION__.9413:
 8227 0000 6D61696E 		.ascii	"main_loop\000"
 8227      5F6C6F6F 
 8227      7000
 8228              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 8229              		.align	2
 8230              	.LC43:
 8231 0000 25732C25 		.ascii	"%s,%s,%d:Init HDMI RX,Chip(%d)....\015\012\000"
 8231      732C2564 
 8231      3A496E69 
 8231      74204844 
 8231      4D492052 
 8232 0025 000000   		.space	3
ARM GAS  /tmp/cclqPDF2.s 			page 248


 8233              	.LC44:
 8234 0028 25732C25 		.ascii	"%s,%s,%d:IT66021 chip num=%d , 02reg=0x%02x\015\012"
 8234      732C2564 
 8234      3A495436 
 8234      36303231 
 8234      20636869 
 8235 0055 00       		.ascii	"\000"
 8236 0056 0000     		.space	2
 8237              	.LC45:
 8238 0058 25732C25 		.ascii	"%s,%s,%d:VS4210 chip ID = 0x%02x\015\012\000"
 8238      732C2564 
 8238      3A565334 
 8238      32313020 
 8238      63686970 
 8239 007b 00       		.space	1
 8240              	.LC46:
 8241 007c 25732C25 		.ascii	"%s,%s,%d:VS4210 Init. (Startting...)\015\012\000"
 8241      732C2564 
 8241      3A565334 
 8241      32313020 
 8241      496E6974 
 8242 00a3 00       		.space	1
 8243              	.LC47:
 8244 00a4 0D0A4D61 		.ascii	"\015\012Main Loop...\000"
 8244      696E204C 
 8244      6F6F702E 
 8244      2E2E00
 8245              		.section	.rodata.main_init.str1.4,"aMS",%progbits,1
 8246              		.align	2
 8247              	.LC23:
 8248 0000 0D0A5072 		.ascii	"\015\012Prev.FW:%04x\015\012\000"
 8248      65762E46 
 8248      573A2530 
 8248      34780D0A 
 8248      00
 8249 0011 000000   		.space	3
 8250              	.LC24:
 8251 0014 0D0A4375 		.ascii	"\015\012Curr.FW:%04x\000"
 8251      72722E46 
 8251      573A2530 
 8251      347800
 8252 0023 00       		.space	1
 8253              	.LC25:
 8254 0024 0D0A5B4D 		.ascii	"\015\012[MSG]main_init()=> rev != FWVER & call Clea"
 8254      53475D6D 
 8254      61696E5F 
 8254      696E6974 
 8254      28293D3E 
 8255 0051 72426173 		.ascii	"rBasicEE()\015\012\000"
 8255      69634545 
 8255      28290D0A 
 8255      00
 8256 005e 0000     		.space	2
 8257              	.LC26:
 8258 0060 0D0A4361 		.ascii	"\015\012Cannot access EEPROM!!!!\000"
 8258      6E6E6F74 
 8258      20616363 
ARM GAS  /tmp/cclqPDF2.s 			page 249


 8258      65737320 
 8258      45455052 
 8259 007b 00       		.space	1
 8260              	.LC27:
 8261 007c 0D0A4E6F 		.ascii	"\015\012No initialize\000"
 8261      20696E69 
 8261      7469616C 
 8261      697A6500 
 8262              		.section	.rodata.main_loop.str1.4,"aMS",%progbits,1
 8263              		.align	2
 8264              	.LC41:
 8265 0000 25732C25 		.ascii	"%s,%s,%d:LOOP CH=%d,SMP Sec=%d\015\012\000"
 8265      732C2564 
 8265      3A4C4F4F 
 8265      50204348 
 8265      3D25642C 
 8266 0021 000000   		.space	3
 8267              	.LC42:
 8268 0024 25732C25 		.ascii	"%s,%s,%d:Loop CH=%d,SecCount=%d\015\012\000"
 8268      732C2564 
 8268      3A4C6F6F 
 8268      70204348 
 8268      3D25642C 
 8269              		.section	.rodata.setloopoutmode.str1.4,"aMS",%progbits,1
 8270              		.align	2
 8271              	.LC6:
 8272 0000 56533432 		.ascii	"VS4210_MODE0_w0\015\000"
 8272      31305F4D 
 8272      4F444530 
 8272      5F77300D 
 8272      00
 8273 0011 000000   		.space	3
 8274              	.LC7:
 8275 0014 56533432 		.ascii	"VS4210_MODE0_w1\015\000"
 8275      31305F4D 
 8275      4F444530 
 8275      5F77310D 
 8275      00
 8276 0025 000000   		.space	3
 8277              	.LC8:
 8278 0028 56533432 		.ascii	"VS4210_MODE0_w2\015\000"
 8278      31305F4D 
 8278      4F444530 
 8278      5F77320D 
 8278      00
 8279 0039 000000   		.space	3
 8280              	.LC9:
 8281 003c 56533432 		.ascii	"VS4210_MODE0_w3\015\000"
 8281      31305F4D 
 8281      4F444530 
 8281      5F77330D 
 8281      00
 8282 004d 000000   		.space	3
 8283              	.LC10:
 8284 0050 56533432 		.ascii	"VS4210_MODE1\015\000"
 8284      31305F4D 
 8284      4F444531 
ARM GAS  /tmp/cclqPDF2.s 			page 250


 8284      0D00
 8285 005e 0000     		.space	2
 8286              	.LC11:
 8287 0060 56533432 		.ascii	"VS4210_MODE2\015\000"
 8287      31305F4D 
 8287      4F444532 
 8287      0D00
 8288 006e 0000     		.space	2
 8289              	.LC12:
 8290 0070 56533432 		.ascii	"VS4210_MODE12 ch1 ch2\015\000"
 8290      31305F4D 
 8290      4F444531 
 8290      32206368 
 8290      31206368 
 8291 0087 00       		.space	1
 8292              	.LC13:
 8293 0088 56533432 		.ascii	"VS4210_MODE12 ch1 ch4\015\000"
 8293      31305F4D 
 8293      4F444531 
 8293      32206368 
 8293      31206368 
 8294 009f 00       		.space	1
 8295              	.LC14:
 8296 00a0 56533432 		.ascii	"VS4210_MODE12 ch4 ch2\015\000"
 8296      31305F4D 
 8296      4F444531 
 8296      32206368 
 8296      34206368 
 8297 00b7 00       		.space	1
 8298              	.LC15:
 8299 00b8 56533432 		.ascii	"VS4210_MODE12 ch4 ch3\015\000"
 8299      31305F4D 
 8299      4F444531 
 8299      32206368 
 8299      34206368 
 8300 00cf 00       		.space	1
 8301              	.LC16:
 8302 00d0 56533432 		.ascii	"VS4210_MODE12 ch2 ch1\015\000"
 8302      31305F4D 
 8302      4F444531 
 8302      32206368 
 8302      32206368 
 8303 00e7 00       		.space	1
 8304              	.LC17:
 8305 00e8 56533432 		.ascii	"VS4210_MODE12 ch2 ch3\015\000"
 8305      31305F4D 
 8305      4F444531 
 8305      32206368 
 8305      32206368 
 8306 00ff 00       		.space	1
 8307              	.LC18:
 8308 0100 56533432 		.ascii	"VS4210_MODE12 ch2 ch4\015\000"
 8308      31305F4D 
 8308      4F444531 
 8308      32206368 
 8308      32206368 
 8309 0117 00       		.space	1
ARM GAS  /tmp/cclqPDF2.s 			page 251


 8310              	.LC19:
 8311 0118 56533432 		.ascii	"VS4210_MODE12 ch1 ch3\015\000"
 8311      31305F4D 
 8311      4F444531 
 8311      32206368 
 8311      31206368 
 8312 012f 00       		.space	1
 8313              	.LC20:
 8314 0130 56533432 		.ascii	"VS4210_MODE12 ch3 ch2\015\000"
 8314      31305F4D 
 8314      4F444531 
 8314      32206368 
 8314      33206368 
 8315 0147 00       		.space	1
 8316              	.LC21:
 8317 0148 56533432 		.ascii	"VS4210_MODE12 ch3 ch4\015\000"
 8317      31305F4D 
 8317      4F444531 
 8317      32206368 
 8317      33206368 
 8318 015f 00       		.space	1
 8319              	.LC22:
 8320 0160 56533432 		.ascii	"VS4210_MODE12 ch3 ch1\015\000"
 8320      31305F4D 
 8320      4F444531 
 8320      32206368 
 8320      33206368 
 8321              		.text
 8322              	.Letext0:
 8323              		.file 2 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_
 8324              		.file 3 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 8325              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 8326              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 8327              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 8328              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 8329              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 8330              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 8331              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 8332              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 8333              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 8334              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 8335              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 8336              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 8337              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 8338              		.file 17 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 8339              		.file 18 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 8340              		.file 19 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/st
 8341              		.file 20 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 8342              		.file 21 "VS4210/VXIS_Extern_Define.h"
 8343              		.file 22 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 8344              		.file 23 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/ctype.h"
 8345              		.file 24 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/errno.h"
 8346              		.file 25 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/unistd.h"
 8347              		.file 26 "sw_i2c/VX_swi2c.h"
 8348              		.file 27 "VS4210/VS4210.h"
 8349              		.file 28 "TP2824/tpinc/TP2802.h"
 8350              		.file 29 "VS4210/audio.h"
ARM GAS  /tmp/cclqPDF2.s 			page 252


 8351              		.file 30 "VS4210/GT911.h"
 8352              		.file 31 "VS4210/VX_OSD_Simple.h"
 8353              		.file 32 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdio.h"
 8354              		.file 33 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 8355              		.file 34 "<built-in>"
 8356              		.file 35 "VS4210/Printf.h"
 8357              		.file 36 "VS4210/ite66121.h"
 8358              		.file 37 "VS4210/monitor.h"
 8359              		.file 38 "VS4210/TOA_Protocol.h"
 8360              		.file 39 "sw_i2c/sw_i2c0.h"
 8361              		.file 40 "sw_i2c/sw_i2c1.h"
 8362              		.file 41 "sw_i2c/sw_i2c2.h"
 8363              		.file 42 "Inc/main.h"
 8364              		.file 43 "VS4210/HDMI_RX_lib.h"
 8365              		.file 44 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/string.h"
 8366              		.file 45 "VS4210/keyremo.h"
 8367              		.file 46 "VS4210/Etc_eep.h"
ARM GAS  /tmp/cclqPDF2.s 			page 253


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cclqPDF2.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cclqPDF2.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cclqPDF2.s:171    .text.MX_GPIO_Init:00000000000000c8 $d
     /tmp/cclqPDF2.s:179    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/cclqPDF2.s:185    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/cclqPDF2.s:256    .text.MX_TIM3_Init:000000000000004c $d
                            *COM*:0000000000000040 htim3
     /tmp/cclqPDF2.s:262    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cclqPDF2.s:268    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cclqPDF2.s:308    .text.MX_USART1_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart1
     /tmp/cclqPDF2.s:314    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cclqPDF2.s:320    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cclqPDF2.s:360    .text.MX_USART2_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart2
     /tmp/cclqPDF2.s:366    .text.HDMI_AudioModeDetect:0000000000000000 $t
     /tmp/cclqPDF2.s:372    .text.HDMI_AudioModeDetect:0000000000000000 HDMI_AudioModeDetect
     /tmp/cclqPDF2.s:436    .text.HDMI_AudioModeDetect:0000000000000050 $d
                            *COM*:0000000000000001 gPreAudioSampleFreq
     /tmp/cclqPDF2.s:444    .text._write:0000000000000000 $t
     /tmp/cclqPDF2.s:451    .text._write:0000000000000000 _write
     /tmp/cclqPDF2.s:503    .text._write:0000000000000030 $d
     /tmp/cclqPDF2.s:508    .text.Audio_Sel:0000000000000000 $t
     /tmp/cclqPDF2.s:515    .text.Audio_Sel:0000000000000000 Audio_Sel
     /tmp/cclqPDF2.s:537    .text.Audio_Sel:000000000000000e $d
     /tmp/cclqPDF2.s:767    .text.Audio_Sel:0000000000000170 $d
     /tmp/cclqPDF2.s:776    .text.SET_Audio_Mute:0000000000000000 $t
     /tmp/cclqPDF2.s:783    .text.SET_Audio_Mute:0000000000000000 SET_Audio_Mute
     /tmp/cclqPDF2.s:827    .text.SET_Audio_Mute:0000000000000028 $d
     /tmp/cclqPDF2.s:833    .text.HDMI_VideoModeDetect:0000000000000000 $t
     /tmp/cclqPDF2.s:839    .text.HDMI_VideoModeDetect:0000000000000000 HDMI_VideoModeDetect
     /tmp/cclqPDF2.s:1157   .text.HDMI_VideoModeDetect:00000000000001c4 $d
                            *COM*:0000000000000004 newInRes
                            *COM*:000000000000000a pVS4210_MutiWindows1
     /tmp/cclqPDF2.s:1183   .text.InitialTimerEvent:0000000000000000 $t
     /tmp/cclqPDF2.s:1190   .text.InitialTimerEvent:0000000000000000 InitialTimerEvent
     /tmp/cclqPDF2.s:1215   .text.GetRS232_CMD:0000000000000000 $t
     /tmp/cclqPDF2.s:1222   .text.GetRS232_CMD:0000000000000000 GetRS232_CMD
     /tmp/cclqPDF2.s:1304   .text.GetRS232_CMD:0000000000000060 $d
     /tmp/cclqPDF2.s:1313   .text.setloopoutmode:0000000000000000 $t
     /tmp/cclqPDF2.s:1320   .text.setloopoutmode:0000000000000000 setloopoutmode
     /tmp/cclqPDF2.s:1340   .text.setloopoutmode:000000000000000c $d
     /tmp/cclqPDF2.s:1360   .text.setloopoutmode:0000000000000034 $t
     /tmp/cclqPDF2.s:1904   .text.setloopoutmode:00000000000002f0 $d
                            *COM*:000000000000000a pVS4210_JointKind1
                            *COM*:0000000000000001 CAMA_M
                            *COM*:0000000000000004 gabVXIS_Input_mirrorH
                            *COM*:0000000000000001 CAMB_M
                            *COM*:0000000000000001 CAMC_M
                            *COM*:0000000000000001 CAMR_M
     /tmp/cclqPDF2.s:1930   .text.setloopoutmode:000000000000034c $t
     /tmp/cclqPDF2.s:2049   .text.setloopoutmode:00000000000003e8 $d
     /tmp/cclqPDF2.s:2064   .text.main_init:0000000000000000 $t
     /tmp/cclqPDF2.s:2071   .text.main_init:0000000000000000 main_init
     /tmp/cclqPDF2.s:2164   .text.main_init:000000000000006c $d
ARM GAS  /tmp/cclqPDF2.s 			page 254


                            *COM*:0000000000000001 DebugLevel
     /tmp/cclqPDF2.s:2174   .text.LCDPowerON:0000000000000000 $t
     /tmp/cclqPDF2.s:2181   .text.LCDPowerON:0000000000000000 LCDPowerON
     /tmp/cclqPDF2.s:2194   .text.LCDPowerOFF:0000000000000000 $t
     /tmp/cclqPDF2.s:2201   .text.LCDPowerOFF:0000000000000000 LCDPowerOFF
     /tmp/cclqPDF2.s:2214   .text.uComOnChipInitial:0000000000000000 $t
     /tmp/cclqPDF2.s:2221   .text.uComOnChipInitial:0000000000000000 uComOnChipInitial
     /tmp/cclqPDF2.s:2256   .text.uComOnChipInitial:0000000000000024 $d
     /tmp/cclqPDF2.s:2261   .text.user_pwm_setvalue:0000000000000000 $t
     /tmp/cclqPDF2.s:2268   .text.user_pwm_setvalue:0000000000000000 user_pwm_setvalue
     /tmp/cclqPDF2.s:2315   .text.user_pwm_setvalue:0000000000000028 $d
                            *COM*:0000000000000040 htim2
     /tmp/cclqPDF2.s:2320   .text.AdjustAutoDayNight:0000000000000000 $t
     /tmp/cclqPDF2.s:2327   .text.AdjustAutoDayNight:0000000000000000 AdjustAutoDayNight
     /tmp/cclqPDF2.s:2450   .text.AdjustAutoDayNight:000000000000008c $d
     /tmp/cclqPDF2.s:2457   .text.LoadEEPROM:0000000000000000 $t
     /tmp/cclqPDF2.s:2464   .text.LoadEEPROM:0000000000000000 LoadEEPROM
     /tmp/cclqPDF2.s:2477   .text.WaitPowerOn:0000000000000000 $t
     /tmp/cclqPDF2.s:2484   .text.WaitPowerOn:0000000000000000 WaitPowerOn
     /tmp/cclqPDF2.s:2589   .text.WaitPowerOn:0000000000000084 $d
     /tmp/cclqPDF2.s:2596   .text.VS4210_FULL88init2:0000000000000000 $t
     /tmp/cclqPDF2.s:2603   .text.VS4210_FULL88init2:0000000000000000 VS4210_FULL88init2
     /tmp/cclqPDF2.s:2647   .text.VS4210_FULL88init2:000000000000001c $d
     /tmp/cclqPDF2.s:2652   .text.TP_bt1120_1080P_1080P_mode0_w0:0000000000000000 $t
     /tmp/cclqPDF2.s:2659   .text.TP_bt1120_1080P_1080P_mode0_w0:0000000000000000 TP_bt1120_1080P_1080P_mode0_w0
     /tmp/cclqPDF2.s:2683   .text.TP_bt1120_1080P_1080P_mode0_w0:0000000000000010 $d
     /tmp/cclqPDF2.s:2689   .text.TP_bt1120_720P_1080P_mode0_w0:0000000000000000 $t
     /tmp/cclqPDF2.s:2696   .text.TP_bt1120_720P_1080P_mode0_w0:0000000000000000 TP_bt1120_720P_1080P_mode0_w0
     /tmp/cclqPDF2.s:2725   .text.TP_bt1120_720P_1080P_mode0_w0:0000000000000018 $d
     /tmp/cclqPDF2.s:2731   .text.TP_bt1120_NTSC_1080P_mode0_w0:0000000000000000 $t
     /tmp/cclqPDF2.s:2738   .text.TP_bt1120_NTSC_1080P_mode0_w0:0000000000000000 TP_bt1120_NTSC_1080P_mode0_w0
     /tmp/cclqPDF2.s:2762   .text.TP_bt1120_NTSC_1080P_mode0_w0:0000000000000010 $d
     /tmp/cclqPDF2.s:2768   .text.TP_bt1120_PAL_1080P_mode0_w0:0000000000000000 $t
     /tmp/cclqPDF2.s:2775   .text.TP_bt1120_PAL_1080P_mode0_w0:0000000000000000 TP_bt1120_PAL_1080P_mode0_w0
     /tmp/cclqPDF2.s:2799   .text.TP_bt1120_PAL_1080P_mode0_w0:0000000000000010 $d
     /tmp/cclqPDF2.s:2805   .text.SET_VS4210_720_480_out:0000000000000000 $t
     /tmp/cclqPDF2.s:2812   .text.SET_VS4210_720_480_out:0000000000000000 SET_VS4210_720_480_out
     /tmp/cclqPDF2.s:3461   .text.SET_VS4210_720_480_out:00000000000003fc $d
     /tmp/cclqPDF2.s:3464   .text.SET_VS4210_720_480_out:0000000000000400 $t
     /tmp/cclqPDF2.s:4029   .text.SET_VS4210_1280_720_out:0000000000000000 $t
     /tmp/cclqPDF2.s:4036   .text.SET_VS4210_1280_720_out:0000000000000000 SET_VS4210_1280_720_out
     /tmp/cclqPDF2.s:4685   .text.SET_VS4210_1280_720_out:00000000000003fc $d
     /tmp/cclqPDF2.s:4688   .text.SET_VS4210_1280_720_out:0000000000000400 $t
     /tmp/cclqPDF2.s:5253   .text.SET_AHD_MDOE:0000000000000000 $t
     /tmp/cclqPDF2.s:5260   .text.SET_AHD_MDOE:0000000000000000 SET_AHD_MDOE
     /tmp/cclqPDF2.s:5909   .text.SET_AHD_MDOE:00000000000003fc $d
     /tmp/cclqPDF2.s:5912   .text.SET_AHD_MDOE:0000000000000400 $t
     /tmp/cclqPDF2.s:6567   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cclqPDF2.s:6574   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cclqPDF2.s:6647   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cclqPDF2.s:6654   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cclqPDF2.s:6733   .text.HAL_TIM_PeriodElapsedCallback:0000000000000064 $d
     /tmp/cclqPDF2.s:6747   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cclqPDF2.s:6754   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cclqPDF2.s:6840   .text.HAL_UART_RxCpltCallback:0000000000000068 $d
     /tmp/cclqPDF2.s:6854   .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/cclqPDF2.s:6861   .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
ARM GAS  /tmp/cclqPDF2.s 			page 255


     /tmp/cclqPDF2.s:6875   .text.HS_Select_Win:0000000000000000 $t
     /tmp/cclqPDF2.s:6882   .text.HS_Select_Win:0000000000000000 HS_Select_Win
     /tmp/cclqPDF2.s:7079   .text.HS_Select_Win:0000000000000100 $d
     /tmp/cclqPDF2.s:7094   .text.main_loop:0000000000000000 $t
     /tmp/cclqPDF2.s:7101   .text.main_loop:0000000000000000 main_loop
     /tmp/cclqPDF2.s:7372   .text.main_loop:0000000000000180 $d
     /tmp/cclqPDF2.s:7393   .text.main:0000000000000000 $t
     /tmp/cclqPDF2.s:7400   .text.main:0000000000000000 main
     /tmp/cclqPDF2.s:7706   .text.main:00000000000001a8 $d
                            *COM*:0000000000000100 ExOsdContent
     /tmp/cclqPDF2.s:7733   .text.Error_Handler:0000000000000000 $t
     /tmp/cclqPDF2.s:7740   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cclqPDF2.s:8094   .data.OSDStateFlg:0000000000000000 OSDStateFlg
     /tmp/cclqPDF2.s:7885   .bss.OSDSecCount:0000000000000000 OSDSecCount
     /tmp/cclqPDF2.s:8137   .data.gRxLoopFlg:0000000000000000 gRxLoopFlg
     /tmp/cclqPDF2.s:7906   .bss.OSD_Show_Flg:0000000000000000 OSD_Show_Flg
     /tmp/cclqPDF2.s:7962   .bss.Tim1_count:0000000000000000 Tim1_count
     /tmp/cclqPDF2.s:7974   .bss.TxCount:0000000000000000 TxCount
     /tmp/cclqPDF2.s:7994   .bss.bSignal:0000000000000000 bSignal
     /tmp/cclqPDF2.s:8132   .data.gMode0LoopSecCmpVal:0000000000000000 gMode0LoopSecCmpVal
     /tmp/cclqPDF2.s:8020   .bss.gMode0LoopSecCount:0000000000000000 gMode0LoopSecCount
     /tmp/cclqPDF2.s:8014   .bss.gMode0LoopFlg:0000000000000000 gMode0LoopFlg
     /tmp/cclqPDF2.s:8008   .bss.gMode0LoopCount:0000000000000000 gMode0LoopCount
     /tmp/cclqPDF2.s:8033   .bss.gbAUDO_INDEX:0000000000000000 gbAUDO_INDEX
                            *COM*:0000000000000001 gPrebAUDO_INDEX
     /tmp/cclqPDF2.s:7819   .bss.CheckSelectInputMode:0000000000000000 CheckSelectInputMode
     /tmp/cclqPDF2.s:7955   .bss.SelectInputMode:0000000000000000 SelectInputMode
     /tmp/cclqPDF2.s:8088   .data.OSDPreSecCount:0000000000000000 OSDPreSecCount
     /tmp/cclqPDF2.s:8113   .data.PrebVXIS_InputMode:0000000000000000 PrebVXIS_InputMode
     /tmp/cclqPDF2.s:7813   .bss.CURRENT_CH:0000000000000000 CURRENT_CH
     /tmp/cclqPDF2.s:8081   .data.BOOT_ISSUE:0000000000000000 BOOT_ISSUE
     /tmp/cclqPDF2.s:7899   .bss.OSD_SPEAKER:0000000000000000 OSD_SPEAKER
     /tmp/cclqPDF2.s:7892   .bss.OSD_MIRROR:0000000000000000 OSD_MIRROR
                            *COM*:0000000000000001 Priority
                            *COM*:0000000000000001 SelectModeType
     /tmp/cclqPDF2.s:8055   .bss.tptic:0000000000000000 tptic
     /tmp/cclqPDF2.s:8043   .bss.keytic:0000000000000000 keytic
     /tmp/cclqPDF2.s:8106   .data.PowerFlag:0000000000000000 PowerFlag
                            *COM*:0000000000000001 TimeStep
     /tmp/cclqPDF2.s:8100   .data.PWMLevel:0000000000000000 PWMLevel
     /tmp/cclqPDF2.s:7807   .bss.AutoDayNightDelay:0000000000000000 AutoDayNightDelay
     /tmp/cclqPDF2.s:7879   .bss.LightSensor_ADC:0000000000000000 LightSensor_ADC
     /tmp/cclqPDF2.s:7825   .bss.DayNightLevel:0000000000000000 DayNightLevel
     /tmp/cclqPDF2.s:8038   .bss.half_scaler:0000000000000000 half_scaler
                            *COM*:0000000000000001 ManVidRes
     /tmp/cclqPDF2.s:8126   .data.VS8812_ADDR:0000000000000000 VS8812_ADDR
     /tmp/cclqPDF2.s:8121   .data.VS4210_ADDR:0000000000000000 VS4210_ADDR
                            *COM*:0000000000000030 hadc1
     /tmp/cclqPDF2.s:7808   .bss.AutoDayNightDelay:0000000000000000 $d
     /tmp/cclqPDF2.s:7814   .bss.CURRENT_CH:0000000000000000 $d
     /tmp/cclqPDF2.s:7820   .bss.CheckSelectInputMode:0000000000000000 $d
     /tmp/cclqPDF2.s:7826   .bss.DayNightLevel:0000000000000000 $d
     /tmp/cclqPDF2.s:7828   .bss.DebugFlg:0000000000000000 $d
     /tmp/cclqPDF2.s:7831   .bss.DebugFlg:0000000000000000 DebugFlg
     /tmp/cclqPDF2.s:7834   .bss.IR_4BYTE:0000000000000000 $d
     /tmp/cclqPDF2.s:7837   .bss.IR_4BYTE:0000000000000000 IR_4BYTE
     /tmp/cclqPDF2.s:7842   .bss.IR_Code:0000000000000000 IR_Code
ARM GAS  /tmp/cclqPDF2.s 			page 256


     /tmp/cclqPDF2.s:7843   .bss.IR_Code:0000000000000000 $d
     /tmp/cclqPDF2.s:7847   .bss.IR_END_Flg:0000000000000000 IR_END_Flg
     /tmp/cclqPDF2.s:7848   .bss.IR_END_Flg:0000000000000000 $d
     /tmp/cclqPDF2.s:7852   .bss.IR_IRQFlg:0000000000000000 IR_IRQFlg
     /tmp/cclqPDF2.s:7853   .bss.IR_IRQFlg:0000000000000000 $d
     /tmp/cclqPDF2.s:7857   .bss.IR_IRQ_Index:0000000000000000 IR_IRQ_Index
     /tmp/cclqPDF2.s:7858   .bss.IR_IRQ_Index:0000000000000000 $d
     /tmp/cclqPDF2.s:7860   .bss.IR_PlusTimeVal:0000000000000000 $d
     /tmp/cclqPDF2.s:7863   .bss.IR_PlusTimeVal:0000000000000000 IR_PlusTimeVal
     /tmp/cclqPDF2.s:7868   .bss.IR_ShiftCount:0000000000000000 IR_ShiftCount
     /tmp/cclqPDF2.s:7869   .bss.IR_ShiftCount:0000000000000000 $d
     /tmp/cclqPDF2.s:7873   .bss.IR_StartFlg:0000000000000000 IR_StartFlg
     /tmp/cclqPDF2.s:7874   .bss.IR_StartFlg:0000000000000000 $d
     /tmp/cclqPDF2.s:7876   .bss.LightSensor_ADC:0000000000000000 $d
     /tmp/cclqPDF2.s:7886   .bss.OSDSecCount:0000000000000000 $d
     /tmp/cclqPDF2.s:7888   .bss.OSD_MIRROR:0000000000000000 $d
     /tmp/cclqPDF2.s:7895   .bss.OSD_SPEAKER:0000000000000000 $d
     /tmp/cclqPDF2.s:7902   .bss.OSD_Show_Flg:0000000000000000 $d
     /tmp/cclqPDF2.s:7911   .bss.PreIR_Code:0000000000000000 PreIR_Code
     /tmp/cclqPDF2.s:7912   .bss.PreIR_Code:0000000000000000 $d
     /tmp/cclqPDF2.s:7916   .bss.PreIR_IRQ_Index:0000000000000000 PreIR_IRQ_Index
     /tmp/cclqPDF2.s:7917   .bss.PreIR_IRQ_Index:0000000000000000 $d
     /tmp/cclqPDF2.s:7919   .bss.Rx2_data:0000000000000000 $d
     /tmp/cclqPDF2.s:7923   .bss.Rx2_data:0000000000000000 Rx2_data
     /tmp/cclqPDF2.s:7926   .bss.RxBufIndex:0000000000000000 $d
     /tmp/cclqPDF2.s:7930   .bss.RxBufIndex:0000000000000000 RxBufIndex
     /tmp/cclqPDF2.s:7933   .bss.Rx_data:0000000000000000 $d
     /tmp/cclqPDF2.s:7937   .bss.Rx_data:0000000000000000 Rx_data
     /tmp/cclqPDF2.s:7940   .bss.Rx_indx:0000000000000000 $d
     /tmp/cclqPDF2.s:7943   .bss.Rx_indx:0000000000000000 Rx_indx
     /tmp/cclqPDF2.s:7946   .bss.RxiCount:0000000000000000 $d
     /tmp/cclqPDF2.s:7949   .bss.RxiCount:0000000000000000 RxiCount
     /tmp/cclqPDF2.s:7956   .bss.SelectInputMode:0000000000000000 $d
     /tmp/cclqPDF2.s:7958   .bss.Tim1_count:0000000000000000 $d
     /tmp/cclqPDF2.s:7968   .bss.Transfer_cplt:0000000000000000 Transfer_cplt
     /tmp/cclqPDF2.s:7969   .bss.Transfer_cplt:0000000000000000 $d
     /tmp/cclqPDF2.s:7975   .bss.TxCount:0000000000000000 $d
     /tmp/cclqPDF2.s:7977   .bss.TxiCount:0000000000000000 $d
     /tmp/cclqPDF2.s:7980   .bss.TxiCount:0000000000000000 TxiCount
     /tmp/cclqPDF2.s:7983   .bss.bOldSignal:0000000000000000 $d
     /tmp/cclqPDF2.s:7987   .bss.bOldSignal:0000000000000000 bOldSignal
     /tmp/cclqPDF2.s:7990   .bss.bSignal:0000000000000000 $d
     /tmp/cclqPDF2.s:7997   .bss.gAudioSampleFreq:0000000000000000 $d
     /tmp/cclqPDF2.s:8001   .bss.gAudioSampleFreq:0000000000000000 gAudioSampleFreq
     /tmp/cclqPDF2.s:8004   .bss.gMode0LoopCount:0000000000000000 $d
     /tmp/cclqPDF2.s:8015   .bss.gMode0LoopFlg:0000000000000000 $d
     /tmp/cclqPDF2.s:8021   .bss.gMode0LoopSecCount:0000000000000000 $d
     /tmp/cclqPDF2.s:8023   .bss.gRxbuf:0000000000000000 $d
     /tmp/cclqPDF2.s:8027   .bss.gRxbuf:0000000000000000 gRxbuf
     /tmp/cclqPDF2.s:8034   .bss.gbAUDO_INDEX:0000000000000000 $d
     /tmp/cclqPDF2.s:8039   .bss.half_scaler:0000000000000000 $d
     /tmp/cclqPDF2.s:8044   .bss.keytic:0000000000000000 $d
     /tmp/cclqPDF2.s:8046   .bss.tim3count:0000000000000000 $d
     /tmp/cclqPDF2.s:8050   .bss.tim3count:0000000000000000 tim3count
     /tmp/cclqPDF2.s:8056   .bss.tptic:0000000000000000 $d
     /tmp/cclqPDF2.s:8058   .bss.u16Vendor:0000000000000000 $d
     /tmp/cclqPDF2.s:8061   .bss.u16Vendor:0000000000000000 u16Vendor
ARM GAS  /tmp/cclqPDF2.s 			page 257


     /tmp/cclqPDF2.s:8066   .bss.u8IRCheckcode:0000000000000000 u8IRCheckcode
     /tmp/cclqPDF2.s:8067   .bss.u8IRCheckcode:0000000000000000 $d
     /tmp/cclqPDF2.s:8071   .bss.u8IRcode:0000000000000000 u8IRcode
     /tmp/cclqPDF2.s:8072   .bss.u8IRcode:0000000000000000 $d
     /tmp/cclqPDF2.s:8076   .bss.u8PowerFlg:0000000000000000 u8PowerFlg
     /tmp/cclqPDF2.s:8077   .bss.u8PowerFlg:0000000000000000 $d
     /tmp/cclqPDF2.s:8084   .data.OSDPreSecCount:0000000000000000 $d
     /tmp/cclqPDF2.s:8109   .data.PrebVXIS_InputMode:0000000000000000 $d
     /tmp/cclqPDF2.s:8140   .rodata.GetRS232_CMD.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8147   .rodata.HDMI_VideoModeDetect.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8157   .rodata.HS_Select_Win.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8170   .rodata.SET_AHD_MDOE.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8174   .rodata.SET_Audio_Mute.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8178   .rodata.SET_VS4210_1280_720_out.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8182   .rodata.SET_VS4210_720_480_out.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8186   .rodata.TP_bt1120_1080P_1080P_mode0_w0.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8190   .rodata.TP_bt1120_720P_1080P_mode0_w0.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8194   .rodata.TP_bt1120_NTSC_1080P_mode0_w0.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8198   .rodata.TP_bt1120_PAL_1080P_mode0_w0.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8202   .rodata.WaitPowerOn.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8208   .rodata.__FUNCTION__.9355:0000000000000000 $d
     /tmp/cclqPDF2.s:8212   .rodata.__FUNCTION__.9355:0000000000000000 __FUNCTION__.9355
     /tmp/cclqPDF2.s:8215   .rodata.__FUNCTION__.9402:0000000000000000 $d
     /tmp/cclqPDF2.s:8219   .rodata.__FUNCTION__.9402:0000000000000000 __FUNCTION__.9402
     /tmp/cclqPDF2.s:8222   .rodata.__FUNCTION__.9413:0000000000000000 $d
     /tmp/cclqPDF2.s:8226   .rodata.__FUNCTION__.9413:0000000000000000 __FUNCTION__.9413
     /tmp/cclqPDF2.s:8229   .rodata.main.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8246   .rodata.main_init.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8263   .rodata.main_loop.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:8270   .rodata.setloopoutmode.str1.4:0000000000000000 $d
     /tmp/cclqPDF2.s:542    .text.Audio_Sel:0000000000000013 $d
     /tmp/cclqPDF2.s:542    .text.Audio_Sel:0000000000000014 $t

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
getHDMIRXAudioInfo
HDMI_Tx_SetAudioFs
gHDMI_Index
HAL_UART_Transmit
__errno
Printf
VS4210_Rx_NoSignal
printf
Set_Video_Loss_OSD
GetHDMI_InputMode
VXISI2CWrite
CheckHDMIRX
VS4210_SetInModeOutMode
VS4210_SetInputSizeHV
MCUTimerActiveTimerEvent
gbVXIS_InputMode
PreVState
ARM GAS  /tmp/cclqPDF2.s 			page 258


VState
gHTotal
gVActive
gHActive
gVTotal
MCUTimerInitialTimerEvent
strtol
puts
VS4210_SetMutiWindows
AudioMute
MCUTimerCancelTimerEvent
AUDIO_SELECT
GetFWRevEE
delay
SaveFWRevEE
ClearBasicEE
HAL_TIM_PWM_ConfigChannel
HAL_TIM_PWM_Start
PowerLED
WriteEEP
TriggerHandler
SysTimerHandler
EQ_Detect
GT9147_Scan
CheckKeyIn
CheckTrigger
VS4210_Addr_88param
VS4210_TP_bt1120_1080P_1080P_mode0_w0_88param
VS4210_TP_bt1120_720P_1080P_mode0_w0_88param
VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param
VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
tic02
tic03
tic04
g_usTimerCounter
g_bNotifyTimer0Int
HAL_UART_Receive_IT
RS_in
RS_buf
RS2_in
RS2_buf
mode
TP_InputMode
HDMITX_DevLoopProc
OSD_Clear_All
Monitor
RS_ready
TOAReceivePaser
Get_2824cIrq
msleep
VXISI2CRead
HAL_GPIO_ReadPin
AccessEnable
HAL_Init
ARM GAS  /tmp/cclqPDF2.s 			page 259


SW_I2C0_Init
SW_I2C1_Init
SW_I2C2_Init
SW_I2C3_Init
InitHDMIRX
HDMIRX_WriteI2C_Byte
HDMIRX_ReadI2C_Byte
VXOSD_UseFont_init
Init_TP280x_RegSet
VXIS_fSetOsdx2
HAL_TIM_Base_Start_IT
UserDefineFont1
