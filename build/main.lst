ARM GAS  /tmp/cc8epWVM.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB99:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include <stdio.h>
  27:Src/main.c    **** #include <stdlib.h>
  28:Src/main.c    **** #include <ctype.h>
  29:Src/main.c    **** #include <errno.h>
  30:Src/main.c    **** #ifdef __GNUC__
  31:Src/main.c    ****     #include <sys/unistd.h>
  32:Src/main.c    **** #endif
  33:Src/main.c    **** 
  34:Src/main.c    **** #include "VXIS_Extern_Define.h"
ARM GAS  /tmp/cc8epWVM.s 			page 2


  35:Src/main.c    **** #include "sw_i2c0.h"  //TP2824
  36:Src/main.c    **** #include "sw_i2c1.h"  //VS4210
  37:Src/main.c    **** #include "sw_i2c2.h"  //IT66121
  38:Src/main.c    **** #include "VX_swi2c.h"
  39:Src/main.c    **** #include "ite66121.h"
  40:Src/main.c    **** #include "HDMI_RX_lib.h"
  41:Src/main.c    **** #include "VS4210.h"
  42:Src/main.c    **** #include "IRdef.h"
  43:Src/main.c    **** #include "TP2802.h"
  44:Src/main.c    **** #include "VX_OSD_Simple.h"
  45:Src/main.c    **** #include "monitor.h"
  46:Src/main.c    **** #include "Printf.h"
  47:Src/main.c    **** #include "Etc_eep.h"
  48:Src/main.c    **** #include 	"audio.h"
  49:Src/main.c    **** #include "keyremo.h"
  50:Src/main.c    **** #include "VX8812.h"
  51:Src/main.c    **** #include "HDMI_RX_lib.h"
  52:Src/main.c    **** 
  53:Src/main.c    **** #include "TOA_Protocol.h"
  54:Src/main.c    **** 
  55:Src/main.c    **** //#include "VS4210_param_Mode88.h"
  56:Src/main.c    **** //#include "VS4210_param_Modex26.h"
  57:Src/main.c    **** 
  58:Src/main.c    **** #include "GT911.h"
  59:Src/main.c    **** //#include "exOSDfont.h"
  60:Src/main.c    **** 
  61:Src/main.c    **** //#include "it660x.h"
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE END Includes */
  64:Src/main.c    **** 
  65:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  66:Src/main.c    **** /* USER CODE BEGIN PTD */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE END PTD */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  71:Src/main.c    **** /* USER CODE BEGIN PD */
  72:Src/main.c    **** #define RXBUFMAX 50
  73:Src/main.c    **** #define IR_Vendor_Code_ 0xFF00
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE END PD */
  76:Src/main.c    **** 
  77:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  78:Src/main.c    **** /* USER CODE BEGIN PM */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* USER CODE END PM */
  81:Src/main.c    **** 
  82:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  83:Src/main.c    **** TIM_HandleTypeDef htim3;
  84:Src/main.c    **** 
  85:Src/main.c    **** UART_HandleTypeDef huart1;
  86:Src/main.c    **** UART_HandleTypeDef huart2;
  87:Src/main.c    **** 
  88:Src/main.c    **** ADC_HandleTypeDef hadc1;
  89:Src/main.c    **** TIM_HandleTypeDef htim2;
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE BEGIN PV */
ARM GAS  /tmp/cc8epWVM.s 			page 3


  92:Src/main.c    **** volatile tByte VS4210_ADDR = 0x40 ;
  93:Src/main.c    **** volatile tByte VS8812_ADDR = 0x12 ;
  94:Src/main.c    **** #define OSD_OFF_SEC 10
  95:Src/main.c    **** 
  96:Src/main.c    **** //RX
  97:Src/main.c    **** tByte	ManVidRes;
  98:Src/main.c    **** tByte	half_scaler = 0;
  99:Src/main.c    **** tByte	DebugLevel;
 100:Src/main.c    **** tByte	DayNightLevel=0;
 101:Src/main.c    **** tWord LightSensor_ADC=0;
 102:Src/main.c    **** BYTE AutoDayNightDelay=0;
 103:Src/main.c    **** DATA BYTE PWMLevel=0x80;
 104:Src/main.c    **** BYTE TimeStep;
 105:Src/main.c    **** BYTE	PowerFlag=1;
 106:Src/main.c    **** DATA BYTE keytic=0,tptic=0;
 107:Src/main.c    **** BYTE	SelectModeType;
 108:Src/main.c    **** BYTE	Priority;
 109:Src/main.c    **** BYTE CAMA_M;	
 110:Src/main.c    **** BYTE CAMB_M;	
 111:Src/main.c    **** BYTE CAMC_M;	
 112:Src/main.c    **** BYTE CAMR_M;
 113:Src/main.c    **** BYTE OSD_MIRROR[4]={0,0,0,0};
 114:Src/main.c    **** BYTE OSD_SPEAKER[4]={0,0,0,0};
 115:Src/main.c    **** BYTE BOOT_ISSUE=1;
 116:Src/main.c    **** BYTE CURRENT_CH=0;
 117:Src/main.c    **** tByte ExOsdContent[256] ;
 118:Src/main.c    **** tByte PrebVXIS_InputMode[4]= {250,250,250,250} ;
 119:Src/main.c    **** 
 120:Src/main.c    **** int OSDPreSecCount =-1 ;
 121:Src/main.c    **** BYTE SelectInputMode=0;///0=HDMI , 1=AHD
 122:Src/main.c    **** BYTE CheckSelectInputMode=0;///0=HDMI , 1=AHD
 123:Src/main.c    **** 
 124:Src/main.c    **** //audio
 125:Src/main.c    **** tByte gPreAudioSampleFreq ;
 126:Src/main.c    **** tByte gPrebAUDO_INDEX  ;
 127:Src/main.c    **** tByte gbAUDO_INDEX = 0  ;
 128:Src/main.c    **** static tByte gAudioSampleFreq[4] ;
 129:Src/main.c    **** 
 130:Src/main.c    **** tWord gMode0LoopCount = 0 ;
 131:Src/main.c    **** tByte gMode0LoopFlg = 0 ;
 132:Src/main.c    **** tByte gMode0LoopSecCount = 0 ;
 133:Src/main.c    **** tByte gMode0LoopSecCmpVal = 10 ;
 134:Src/main.c    **** 
 135:Src/main.c    **** //Rx
 136:Src/main.c    **** static tByte bOldSignal[4] ;
 137:Src/main.c    **** tByte bSignal[4]= {0,0,0,0} ;
 138:Src/main.c    **** extern tByte PreVState[4] ;
 139:Src/main.c    **** extern tByte VState[4] ;
 140:Src/main.c    **** extern tByte AState[4] ;
 141:Src/main.c    **** 
 142:Src/main.c    **** //Tx
 143:Src/main.c    **** tByte TxCount = 0 ;
 144:Src/main.c    **** 
 145:Src/main.c    **** T_VS4210_MutiWindows pVS4210_MutiWindows1 ;
 146:Src/main.c    **** unsigned int volatile Tim1_count=0;
 147:Src/main.c    **** bit OSD_Show_Flg = 0 ;
 148:Src/main.c    **** 
ARM GAS  /tmp/cc8epWVM.s 			page 4


 149:Src/main.c    **** static int TimeOutCount ;
 150:Src/main.c    **** 
 151:Src/main.c    **** extern DATA BYTE keytic;
 152:Src/main.c    **** extern 	DATA BYTE Key;
 153:Src/main.c    **** extern 	bit KeyReady, RepeatKey;
 154:Src/main.c    **** 
 155:Src/main.c    **** extern BYTE  updn_reg[4];
 156:Src/main.c    **** extern BYTE Time5ms;
 157:Src/main.c    **** extern bit ChangeKey;
 158:Src/main.c    **** extern tByte RS_buf[BUF_MAX];
 159:Src/main.c    **** extern  tByte RS2_buf[TOA_BUF_MAX];
 160:Src/main.c    **** extern  tByte	 RS_in, RS2_in;
 161:Src/main.c    **** extern BYTE tic02;
 162:Src/main.c    **** extern WORD tic03,tic04,tic05;
 163:Src/main.c    **** extern volatile WORD  g_usTimerCounter;
 164:Src/main.c    **** extern volatile bit g_bNotifyTimer0Int;
 165:Src/main.c    **** extern BYTE	AudioVol;
 166:Src/main.c    **** extern BYTE NowModeState;
 167:Src/main.c    **** extern BYTE Disp_Input;
 168:Src/main.c    **** extern BYTE OSD_LOCKF;
 169:Src/main.c    **** extern BYTE TriggerFlag;
 170:Src/main.c    **** 
 171:Src/main.c    **** extern BYTE	MainSetSelectMode[13];
 172:Src/main.c    **** /*extern*/ tByte gabVXIS_Input_mirrorH[4];
 173:Src/main.c    **** extern tByte gWindowNum ;
 174:Src/main.c    **** 
 175:Src/main.c    **** extern BYTE TP_ACTION;
 176:Src/main.c    **** extern BYTE TP_PRES_DOWN;
 177:Src/main.c    **** extern BYTE TouchP;
 178:Src/main.c    **** extern USHORT ucTickCount;
 179:Src/main.c    **** extern bit   AccessEnable;
 180:Src/main.c    **** extern tByte TP_InputMode;
 181:Src/main.c    **** extern tByte mode[0];
 182:Src/main.c    **** 
 183:Src/main.c    **** extern tcByte VS4210_TP_bt1120_1080P_1080P_mode0_w0_88param[VS4210_INIT_NUMBER] ;
 184:Src/main.c    **** extern tcByte VS4210_TP_bt1120_720P_1080P_mode0_w0_88param[VS4210_INIT_NUMBER] ;
 185:Src/main.c    **** extern tcByte VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param[VS4210_INIT_NUMBER] ;
 186:Src/main.c    **** extern tcByte VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param[VS4210_INIT_NUMBER] ;
 187:Src/main.c    **** 
 188:Src/main.c    **** //Extern OSD 20200110-01
 189:Src/main.c    **** extern const unsigned char UserDefineFont1[40*(4+23+1)] ; //extern OSD
 190:Src/main.c    **** 
 191:Src/main.c    **** extern tcByte VS4210_hdmi1080P_1080P_mode0_w0_88param[VS4210_INIT_NUMBER];
 192:Src/main.c    **** extern tcByte VS4210_Addr_88param[VS4210_INIT_NUMBER];
 193:Src/main.c    **** 
 194:Src/main.c    **** tByte volatile gRxLoopFlg = 1 ;
 195:Src/main.c    **** T_VS4210_MutiWindows pVS4210_JointKind1 ;
 196:Src/main.c    **** 
 197:Src/main.c    **** static volatile tByte  u8PowerFlg  = 0 ;
 198:Src/main.c    **** /*static volatile */tByte  OSDSecCount = 0 ;
 199:Src/main.c    **** //static volatile 
 200:Src/main.c    **** 	tByte  OSDStateFlg = 1 ;
 201:Src/main.c    **** static volatile tByte  IR_ShiftCount = 0 ;
 202:Src/main.c    **** static volatile tDWord IR_4BYTE = 0 ;
 203:Src/main.c    **** static volatile tWord  u16Vendor ;
 204:Src/main.c    **** static volatile tByte  u8IRcode ;
 205:Src/main.c    **** static volatile tByte  u8IRCheckcode ;
ARM GAS  /tmp/cc8epWVM.s 			page 5


 206:Src/main.c    **** static volatile tByte  PreIR_Code = 0 ;
 207:Src/main.c    **** static volatile tByte  IR_Code = 0 ;
 208:Src/main.c    **** static volatile tByte  IR_StartFlg = 0 ;
 209:Src/main.c    **** static volatile tByte  IR_END_Flg = 0 ;
 210:Src/main.c    **** static volatile tByte  IR_IRQFlg = 0 ;
 211:Src/main.c    **** static volatile tByte  PreIR_IRQ_Index = 0 ;
 212:Src/main.c    **** static volatile tByte  IR_IRQ_Index = 0 ;
 213:Src/main.c    **** static volatile tWord  IR_PlusTimeVal = 0 ;
 214:Src/main.c    **** static volatile tDWord tim3count = 0 ; //10us
 215:Src/main.c    **** 
 216:Src/main.c    **** static volatile tDWord TxiCount = 0 ;
 217:Src/main.c    **** static volatile tDWord RxiCount = 0 ;
 218:Src/main.c    **** 
 219:Src/main.c    **** static char Rx_data[2],Rx2_data[2]/*, Rx_Buffer[RXBUFMAX]*/, Transfer_cplt;
 220:Src/main.c    **** static volatile int Rx_indx = 0 ;
 221:Src/main.c    **** static volatile int RxBufIndex= 0 ;
 222:Src/main.c    **** static char gRxbuf[RXBUFMAX] ;
 223:Src/main.c    **** 
 224:Src/main.c    **** static volatile int DebugFlg = 0 ;
 225:Src/main.c    **** 
 226:Src/main.c    **** //static int OutMapLoopModeIndex = VS4210_LOOP_MODE_NUMBER ;
 227:Src/main.c    **** //static tByte OutMapLoopOutSizeIndex ;
 228:Src/main.c    **** 
 229:Src/main.c    **** /* USER CODE END PV */
 230:Src/main.c    **** 
 231:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 232:Src/main.c    **** void SystemClock_Config(void);
 233:Src/main.c    **** //static void MX_ADC1_Init(void);
 234:Src/main.c    **** //static void MX_TIM2_Init(void);
 235:Src/main.c    **** static void MX_GPIO_Init(void);
 236:Src/main.c    **** static void MX_TIM3_Init(void);
 237:Src/main.c    **** static void MX_USART1_UART_Init(void);
 238:Src/main.c    **** static void MX_USART2_UART_Init(void);
 239:Src/main.c    **** 
 240:Src/main.c    **** extern void MCUTimerInitialTimerEvent(void);
 241:Src/main.c    **** extern void MCUTimerActiveTimerEvent(WORD usTime, BYTE ucEventID);
 242:Src/main.c    **** extern BYTE RS_ready(void);
 243:Src/main.c    **** extern BYTE RS2_ready(void);
 244:Src/main.c    **** 
 245:Src/main.c    **** extern void SysTimerHandler(void);
 246:Src/main.c    **** 
 247:Src/main.c    **** 
 248:Src/main.c    **** /* USER CODE BEGIN PFP */
 249:Src/main.c    **** #ifdef __GNUC__
 250:Src/main.c    **** 
 251:Src/main.c    **** // With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
 252:Src/main.c    **** 
 253:Src/main.c    **** //   set to 'Yes') calls __io_putchar()
 254:Src/main.c    **** 
 255:Src/main.c    **** int _write(int file, char *data, int len)
 256:Src/main.c    **** {
 257:Src/main.c    ****     if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 258:Src/main.c    ****     {
 259:Src/main.c    ****         errno = EBADF;
 260:Src/main.c    ****         return -1;
 261:Src/main.c    ****     }
 262:Src/main.c    ****     // arbitrary timeout 1000
ARM GAS  /tmp/cc8epWVM.s 			page 6


 263:Src/main.c    ****     HAL_StatusTypeDef status =
 264:Src/main.c    ****         HAL_UART_Transmit(&huart1, (uint8_t*)data, (uint16_t)len, 1000);
 265:Src/main.c    ****     // return # of bytes written - as best we can tell
 266:Src/main.c    ****     return (status == HAL_OK ? len : 0);
 267:Src/main.c    **** }
 268:Src/main.c    **** #else
 269:Src/main.c    **** int fputc(int ch, FILE *f)
 270:Src/main.c    **** {
 271:Src/main.c    ****     /* Place your implementation of fputc here */
 272:Src/main.c    ****     /* e.g. write a character to the USART */
 273:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 274:Src/main.c    ****     return ch;
 275:Src/main.c    **** }
 276:Src/main.c    **** #endif
 277:Src/main.c    **** 
 278:Src/main.c    **** void Audio_Sel(unsigned char mode )
 279:Src/main.c    **** {
 280:Src/main.c    ****     gbAUDO_INDEX = mode ;
 281:Src/main.c    ****     switch(mode)
 282:Src/main.c    ****     {
 283:Src/main.c    ****     case HDMI_AUDIO_NONE:
 284:Src/main.c    **** //        A_AUDIO = 1 ;
 285:Src/main.c    **** //        B_AUDIO = 1 ;
 286:Src/main.c    **** //        H1_AUDIO= 1 ;
 287:Src/main.c    **** //        H2_AUDIO= 1 ;
 288:Src/main.c    **** //        H3_AUDIO= 1 ;
 289:Src/main.c    **** //        H4_AUDIO= 1 ;
 290:Src/main.c    ****   //mask by ryan@20210126             HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_SE
 291:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_SET);
 292:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 293:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 294:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 295:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 296:Src/main.c    ****         break ;
 297:Src/main.c    **** 
 298:Src/main.c    ****     case HDMI_AUDIO_1:
 299:Src/main.c    **** //        A_AUDIO = 0 ;
 300:Src/main.c    **** //        B_AUDIO = 1 ;
 301:Src/main.c    **** //        H1_AUDIO= 0 ;
 302:Src/main.c    **** //        H2_AUDIO= 1 ;
 303:Src/main.c    **** //        H3_AUDIO= 1 ;
 304:Src/main.c    **** //        H4_AUDIO= 1 ;
 305:Src/main.c    **** 
 306:Src/main.c    ****   //mask by ryan@20210126      HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_RESET);
 307:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_SET);
 308:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_RESET);
 309:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 310:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 311:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 312:Src/main.c    **** 
 313:Src/main.c    ****         HDMI_Tx_SetAudioFs(gAudioSampleFreq[0])  ;
 314:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[0] ;
 315:Src/main.c    ****         break ;
 316:Src/main.c    **** 
 317:Src/main.c    ****     case HDMI_AUDIO_2:
 318:Src/main.c    **** //        A_AUDIO = 0 ;
 319:Src/main.c    **** //        B_AUDIO = 1 ;
ARM GAS  /tmp/cc8epWVM.s 			page 7


 320:Src/main.c    **** //        H1_AUDIO= 1 ;
 321:Src/main.c    **** //        H2_AUDIO= 0 ;
 322:Src/main.c    **** //        H3_AUDIO= 1 ;
 323:Src/main.c    **** //        H4_AUDIO= 1 ;
 324:Src/main.c    **** 
 325:Src/main.c    ****   //mask by ryan@20210126             HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_RE
 326:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_SET);
 327:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 328:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_RESET);
 329:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 330:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 331:Src/main.c    **** 
 332:Src/main.c    ****         HDMI_Tx_SetAudioFs(gAudioSampleFreq[1])  ;
 333:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[1] ;
 334:Src/main.c    ****         break ;
 335:Src/main.c    **** 
 336:Src/main.c    ****     case HDMI_AUDIO_3:
 337:Src/main.c    **** //        A_AUDIO = 1 ;
 338:Src/main.c    **** //        B_AUDIO = 0 ;
 339:Src/main.c    **** //        H1_AUDIO= 1 ;
 340:Src/main.c    **** //        H2_AUDIO= 1 ;
 341:Src/main.c    **** //        H3_AUDIO= 0 ;
 342:Src/main.c    **** //        H4_AUDIO= 1 ;
 343:Src/main.c    ****    //mask by ryan@20210126            HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_SE
 344:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_RESET);
 345:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 346:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 347:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_RESET);
 348:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 349:Src/main.c    **** 
 350:Src/main.c    ****         HDMI_Tx_SetAudioFs(gAudioSampleFreq[2])  ;
 351:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[2] ;
 352:Src/main.c    ****         break ;
 353:Src/main.c    **** 
 354:Src/main.c    ****     case HDMI_AUDIO_4:
 355:Src/main.c    **** //        A_AUDIO = 1 ;
 356:Src/main.c    **** //        B_AUDIO = 0 ;
 357:Src/main.c    **** //        H1_AUDIO= 1 ;
 358:Src/main.c    **** //        H2_AUDIO= 1 ;
 359:Src/main.c    **** //        H3_AUDIO= 1 ;
 360:Src/main.c    **** //        H4_AUDIO= 0 ;
 361:Src/main.c    ****   //mask by ryan@20210126             HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_SE
 362:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_RESET);
 363:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 364:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 365:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 366:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_RESET);
 367:Src/main.c    **** 
 368:Src/main.c    ****         HDMI_Tx_SetAudioFs(gAudioSampleFreq[3])  ;
 369:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[3] ;
 370:Src/main.c    ****         break ;
 371:Src/main.c    ****     }
 372:Src/main.c    **** }
 373:Src/main.c    **** 
 374:Src/main.c    **** void SET_Audio_Mute(unsigned char mode )
 375:Src/main.c    **** {
 376:Src/main.c    **** 
ARM GAS  /tmp/cc8epWVM.s 			page 8


 377:Src/main.c    **** if(mode==ON)
 378:Src/main.c    **** 	HAL_GPIO_WritePin(AUD_I2C_MUTE_Port,AUD_I2C_MUTE_Pin, GPIO_PIN_RESET);
 379:Src/main.c    **** else
 380:Src/main.c    **** 	HAL_GPIO_WritePin(AUD_I2C_MUTE_Port,AUD_I2C_MUTE_Pin, GPIO_PIN_SET);
 381:Src/main.c    **** 
 382:Src/main.c    **** Printf("(*SET_Audio_Mute=%d)",(WORD)mode);
 383:Src/main.c    **** 
 384:Src/main.c    **** }
 385:Src/main.c    **** 
 386:Src/main.c    **** //Sleep
 387:Src/main.c    **** /*
 388:Src/main.c    **** void msleep(unsigned int i )
 389:Src/main.c    **** {
 390:Src/main.c    ****     HAL_Delay(i);
 391:Src/main.c    **** }
 392:Src/main.c    **** */
 393:Src/main.c    **** 
 394:Src/main.c    **** /* USER CODE END PFP */
 395:Src/main.c    **** 
 396:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 397:Src/main.c    **** /* USER CODE BEGIN 0 */
 398:Src/main.c    **** 
 399:Src/main.c    **** void InitialTimerEvent(void)
 400:Src/main.c    **** {
 401:Src/main.c    **** 	MCUTimerInitialTimerEvent();  //clear all of timer event	
 402:Src/main.c    **** 
 403:Src/main.c    **** 		#if (_DEBUG_MESSAGE_SysTimerEvent==ON)
 404:Src/main.c    ****   		//MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER);//for timer
 405:Src/main.c    **** 
 406:Src/main.c    **** 
 407:Src/main.c    **** 
 408:Src/main.c    **** 		   //	MCUTimerActiveTimerEvent(SEC(6), _SYSTEM_TIMER_EVENT_BOOT_VIDEO_DETECT);//for timer
 409:Src/main.c    ****   		//MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);//for timer
 410:Src/main.c    **** 
 411:Src/main.c    **** //	MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_UART2_CHECK);//for test
 412:Src/main.c    **** 		
 413:Src/main.c    ****      		#endif
 414:Src/main.c    **** //MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_VIDEO_RESET);			
 415:Src/main.c    **** 	/*		
 416:Src/main.c    ****      	MCUTimerActiveTimerEvent(SEC(5-2), _SYSTEM_TIMER_EVENT_BOOT_VIDEO_DETECT);//for timer
 417:Src/main.c    **** 	MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_LIGHT_SENSOR_CHECK);//for timer
 418:Src/main.c    **** 	MCUTimerActiveTimerEvent(100, _SYSTEM_TIMER_EVENT_GRN_ON);
 419:Src/main.c    **** 	MCUTimerActiveTimerEvent(SEC(1),  _SYSTEM_TIMER_EVENT_ADC_CHECK);
 420:Src/main.c    **** 	*/
 421:Src/main.c    **** }
 422:Src/main.c    **** 
 423:Src/main.c    **** void GetRS232_CMD(void)
 424:Src/main.c    **** {
 425:Src/main.c    ****     char achstr[3] ;
 426:Src/main.c    ****     char *endptr ;
 427:Src/main.c    ****     long IrNum  ;
 428:Src/main.c    ****     if (Transfer_cplt == 1)
 429:Src/main.c    ****     {
 430:Src/main.c    ****         Transfer_cplt = 0 ;
 431:Src/main.c    ****         printf("RxBufIndex=%d,str=%s\r\n",RxBufIndex, gRxbuf);
 432:Src/main.c    ****         if ( RxBufIndex >= 4 )
 433:Src/main.c    ****         {
ARM GAS  /tmp/cc8epWVM.s 			page 9


 434:Src/main.c    ****             if ((gRxbuf[0] =='G') && (gRxbuf[3]=='g'))
 435:Src/main.c    ****             {
 436:Src/main.c    ****                 achstr[2] = '\0' ;
 437:Src/main.c    ****                 memcpy(&achstr[0], &gRxbuf[1], 2 ) ;
 438:Src/main.c    ****                 IrNum = strtol(achstr, &endptr, 16) ;
 439:Src/main.c    ****                 printf("IrNum=0x%02x\r\n",(int)IrNum);
 440:Src/main.c    ****             }
 441:Src/main.c    ****             else if ((gRxbuf[0] =='S') && (gRxbuf[5]=='s'))
 442:Src/main.c    ****             {                
 443:Src/main.c    ****             }
 444:Src/main.c    ****         }
 445:Src/main.c    ****     }
 446:Src/main.c    **** }
 447:Src/main.c    **** 
 448:Src/main.c    **** //static
 449:Src/main.c    **** 	void setloopoutmode(int index)
 450:Src/main.c    **** {
 451:Src/main.c    **** /*
 452:Src/main.c    **** 	pVS4210_JointKind1.AudioChannel = HDMI_AUDIO_NONE ;
 453:Src/main.c    **** 	  pVS4210_JointKind1.DrawBoxFlg =1 ;
 454:Src/main.c    **** 	  pVS4210_JointKind1.DrawOSDFlg =0x03 ; //bits 0 ,1
 455:Src/main.c    **** //	pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE1 ;
 456:Src/main.c    **** 	  pVS4210_JointKind1.OutputSize = _OUTPUT_800x480;//_OUTPUT_1080P60 ;
 457:Src/main.c    **** */
 458:Src/main.c    ****     switch(index)
 459:Src/main.c    ****     {
 460:Src/main.c    ****     case VS4210_LOOP_MODE0_w0:
 461:Src/main.c    ****     {
 462:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w0 ;
 463:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 464:Src/main.c    **** 	 OSD_MIRROR[0]=CAMA_M;
 465:Src/main.c    **** 	 gabVXIS_Input_mirrorH[0]=CAMA_M;
 466:Src/main.c    ****         printf("VS4210_MODE0_w0\r\n") ;
 467:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 468:Src/main.c    ****         break ;
 469:Src/main.c    ****     }
 470:Src/main.c    ****     case VS4210_LOOP_MODE0_w1:
 471:Src/main.c    ****     {
 472:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w1 ;
 473:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 474:Src/main.c    ****    	 OSD_MIRROR[0]=CAMB_M;
 475:Src/main.c    **** 	 gabVXIS_Input_mirrorH[1]=CAMB_M; 
 476:Src/main.c    **** 	 OSD_SPEAKER[0]=ON;
 477:Src/main.c    ****         printf("VS4210_MODE0_w1\r\n") ;
 478:Src/main.c    ****         break ;
 479:Src/main.c    ****     }
 480:Src/main.c    ****     case VS4210_LOOP_MODE0_w2:
 481:Src/main.c    ****     {
 482:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w2 ;
 483:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 484:Src/main.c    **** 	 OSD_MIRROR[0]=CAMC_M;	
 485:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 	 
 486:Src/main.c    **** 	 OSD_SPEAKER[0]=ON;
 487:Src/main.c    ****         printf("VS4210_MODE0_w2\r\n") ;
 488:Src/main.c    ****         break ;
 489:Src/main.c    ****     }
 490:Src/main.c    ****     case VS4210_LOOP_MODE0_w3:
ARM GAS  /tmp/cc8epWVM.s 			page 10


 491:Src/main.c    ****     {
 492:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w3 ;
 493:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 494:Src/main.c    ****    	OSD_MIRROR[0]=CAMR_M;	
 495:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 		
 496:Src/main.c    ****   	OSD_SPEAKER[0]=ON;
 497:Src/main.c    ****         printf("VS4210_MODE0_w3\r\n") ;
 498:Src/main.c    ****         break ;
 499:Src/main.c    ****     }
 500:Src/main.c    ****     case VS4210_LOOP_MODE1:
 501:Src/main.c    ****     {
 502:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE1 ;
 503:Src/main.c    **** 	
 504:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 505:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 506:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 507:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 508:Src/main.c    ****    	  OSD_MIRROR[0]=CAMA_M;	
 509:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 510:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
 511:Src/main.c    ****    	  OSD_MIRROR[3]=CAMR_M;	
 512:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 513:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 514:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		  
 515:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 		  
 516:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 517:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 518:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 519:Src/main.c    **** 	  OSD_SPEAKER[3]=ON;
 520:Src/main.c    **** 
 521:Src/main.c    ****         printf("VS4210_MODE1\r\n") ;
 522:Src/main.c    ****         break ;
 523:Src/main.c    ****     }
 524:Src/main.c    **** 	
 525:Src/main.c    ****     case VS4210_LOOP_MODE2:
 526:Src/main.c    ****     {
 527:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE2 ;
 528:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 529:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 530:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 531:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 532:Src/main.c    ****         printf("VS4210_MODE2\r\n") ;
 533:Src/main.c    ****         break ;
 534:Src/main.c    ****     }
 535:Src/main.c    **** 	#if 0
 536:Src/main.c    ****     case VS4210_LOOP_MODE8:
 537:Src/main.c    ****     {
 538:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 539:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 540:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 541:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 542:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 543:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 544:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 545:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
 546:Src/main.c    ****    	  OSD_MIRROR[3]=CAMR_M;	
 547:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
ARM GAS  /tmp/cc8epWVM.s 			page 11


 548:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 549:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		  
 550:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M;	  
 551:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 552:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 553:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 554:Src/main.c    ****         printf("VS4210_MODE8 ch1 ch2 ch3\r\n") ;
 555:Src/main.c    ****         break ;
 556:Src/main.c    ****     }
 557:Src/main.c    **** 	    case VS4210_LOOP_MODE8_412:
 558:Src/main.c    ****     {
 559:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 560:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 561:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 562:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =2 ;
 563:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =0 ;
 564:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 565:Src/main.c    ****    	  OSD_MIRROR[1]=CAMA_M;	
 566:Src/main.c    ****    	  OSD_MIRROR[2]=CAMB_M;	
 567:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 568:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 569:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMB_M; 		  
 570:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 571:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 572:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 573:Src/main.c    **** 	  
 574:Src/main.c    ****       //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 575:Src/main.c    ****         printf("VS4210_MODE8 ch4 ch1 ch2\r\n") ;
 576:Src/main.c    ****         break ;
 577:Src/main.c    ****     }
 578:Src/main.c    ****      case VS4210_LOOP_MODE8_123:
 579:Src/main.c    **** 	 {
 580:Src/main.c    **** 			 pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 581:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 582:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 583:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 584:Src/main.c    **** 		   OSD_MIRROR[0]=CAMA_M; 
 585:Src/main.c    **** 		   OSD_MIRROR[1]=CAMB_M; 
 586:Src/main.c    **** 		   OSD_MIRROR[2]=CAMC_M; 
 587:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 588:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 589:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		   
 590:Src/main.c    **** 		   OSD_SPEAKER[0]=ON;
 591:Src/main.c    **** 		   OSD_SPEAKER[1]=OFF;
 592:Src/main.c    **** 		   OSD_SPEAKER[2]=OFF;
 593:Src/main.c    **** 		   
 594:Src/main.c    **** 		   //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 595:Src/main.c    **** 			 printf("VS4210_MODE8 ch1 ch2 ch3\r\n") ;
 596:Src/main.c    **** 			 break ;
 597:Src/main.c    **** 		 }
 598:Src/main.c    ****   case VS4210_LOOP_MODE8_124:
 599:Src/main.c    **** 	 {
 600:Src/main.c    **** 			 pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 601:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 602:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 603:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 604:Src/main.c    **** 		   OSD_MIRROR[0]=CAMA_M; 
ARM GAS  /tmp/cc8epWVM.s 			page 12


 605:Src/main.c    **** 		   OSD_MIRROR[1]=CAMB_M; 
 606:Src/main.c    **** 		   OSD_MIRROR[2]=CAMR_M; 
 607:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 608:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 609:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 		   
 610:Src/main.c    **** 		   OSD_SPEAKER[0]=OFF;
 611:Src/main.c    **** 		   OSD_SPEAKER[1]=OFF;
 612:Src/main.c    **** 		   OSD_SPEAKER[2]=ON;
 613:Src/main.c    **** 		   
 614:Src/main.c    **** 		   //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 615:Src/main.c    **** 			 printf("VS4210_MODE8 ch1 ch2 ch4\r\n") ;
 616:Src/main.c    **** 			 break ;
 617:Src/main.c    **** 		 }	 
 618:Src/main.c    ****   case VS4210_LOOP_MODE8_134:
 619:Src/main.c    **** 	 {
 620:Src/main.c    **** 			 pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 621:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 622:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 623:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 624:Src/main.c    **** 		   OSD_MIRROR[0]=CAMA_M; 
 625:Src/main.c    **** 		   OSD_MIRROR[1]=CAMC_M; 
 626:Src/main.c    **** 		   OSD_MIRROR[2]=CAMR_M; 
 627:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 628:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 		  
 629:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 		   
 630:Src/main.c    **** 		   OSD_SPEAKER[0]=OFF;
 631:Src/main.c    **** 		   OSD_SPEAKER[1]=OFF;
 632:Src/main.c    **** 		   OSD_SPEAKER[2]=ON;
 633:Src/main.c    **** 		   //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 634:Src/main.c    **** 			 printf("VS4210_MODE8 ch1 ch3 ch4\r\n") ;
 635:Src/main.c    **** 			 break ;
 636:Src/main.c    **** 		 }	 
 637:Src/main.c    **** //=============
 638:Src/main.c    **** case VS4210_LOOP_MODE8_213:
 639:Src/main.c    ****    {
 640:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 641:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 642:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 643:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 644:Src/main.c    **** 		 OSD_MIRROR[0]=CAMB_M; 
 645:Src/main.c    **** 		 OSD_MIRROR[1]=CAMA_M; 
 646:Src/main.c    **** 		 OSD_MIRROR[2]=CAMC_M; 
 647:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMB_M; 		  
 648:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 649:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 			 
 650:Src/main.c    **** 		 OSD_SPEAKER[0]=ON;
 651:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 652:Src/main.c    **** 		 OSD_SPEAKER[2]=OFF;
 653:Src/main.c    **** 		 
 654:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 655:Src/main.c    **** 		   printf("VS4210_MODE8 ch2 ch1 ch3\r\n") ;
 656:Src/main.c    **** 		   break ;
 657:Src/main.c    **** 	   }   
 658:Src/main.c    **** case VS4210_LOOP_MODE8_214:
 659:Src/main.c    ****    {
 660:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 661:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =2 ;
ARM GAS  /tmp/cc8epWVM.s 			page 13


 662:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 663:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 664:Src/main.c    **** 		 OSD_MIRROR[0]=CAMB_M; 
 665:Src/main.c    **** 		 OSD_MIRROR[1]=CAMA_M; 
 666:Src/main.c    **** 		 OSD_MIRROR[2]=CAMR_M; 
 667:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMB_M; 		  
 668:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 669:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 			 
 670:Src/main.c    **** 		 OSD_SPEAKER[0]=OFF;
 671:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 672:Src/main.c    **** 		 OSD_SPEAKER[2]=ON;
 673:Src/main.c    **** 		 
 674:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 675:Src/main.c    **** 		   printf("VS4210_MODE8 ch2 ch1 ch4\r\n") ;
 676:Src/main.c    **** 		   break ;
 677:Src/main.c    **** 	   }   
 678:Src/main.c    **** case VS4210_LOOP_MODE8_234:
 679:Src/main.c    ****    {
 680:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 681:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 682:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 683:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 684:Src/main.c    **** 		 OSD_MIRROR[0]=CAMA_M; 
 685:Src/main.c    **** 		 OSD_MIRROR[1]=CAMC_M; 
 686:Src/main.c    **** 		 OSD_MIRROR[2]=CAMR_M; 
 687:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 688:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 		  
 689:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 			 
 690:Src/main.c    **** 		 OSD_SPEAKER[0]=OFF;
 691:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 692:Src/main.c    **** 		 OSD_SPEAKER[2]=ON;
 693:Src/main.c    **** 		 
 694:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 695:Src/main.c    **** 		   printf("VS4210_MODE8 ch2 ch3 ch4\r\n") ;
 696:Src/main.c    **** 		   break ;
 697:Src/main.c    **** 	   }   
 698:Src/main.c    **** 
 699:Src/main.c    **** //=============
 700:Src/main.c    **** case VS4210_LOOP_MODE8_312:
 701:Src/main.c    ****    {
 702:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 703:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 704:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 705:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =2 ;
 706:Src/main.c    **** 		 OSD_MIRROR[0]=CAMC_M; 
 707:Src/main.c    **** 		 OSD_MIRROR[1]=CAMA_M; 
 708:Src/main.c    **** 		 OSD_MIRROR[2]=CAMB_M; 
 709:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMC_M; 		  
 710:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 711:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMB_M; 		 
 712:Src/main.c    **** 		 OSD_SPEAKER[0]=ON;
 713:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 714:Src/main.c    **** 		 OSD_SPEAKER[2]=OFF;	 
 715:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 716:Src/main.c    **** 		   printf("VS4210_MODE8 ch3 ch1 ch2\r\n") ;
 717:Src/main.c    **** 		   break ;
 718:Src/main.c    **** 	   }   
ARM GAS  /tmp/cc8epWVM.s 			page 14


 719:Src/main.c    **** case VS4210_LOOP_MODE8_314:
 720:Src/main.c    ****    {
 721:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 722:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 723:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 724:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 725:Src/main.c    **** 		 OSD_MIRROR[0]=CAMC_M; 
 726:Src/main.c    **** 		 OSD_MIRROR[1]=CAMA_M; 
 727:Src/main.c    **** 		 OSD_MIRROR[2]=CAMR_M; 
 728:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMC_M; 		  
 729:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 730:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 		 
 731:Src/main.c    **** 		 OSD_SPEAKER[0]=OFF;
 732:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 733:Src/main.c    **** 		 OSD_SPEAKER[2]=ON;	 
 734:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 735:Src/main.c    **** 		   printf("VS4210_MODE8 ch3 ch1 ch4\r\n") ;
 736:Src/main.c    **** 		   break ;
 737:Src/main.c    **** 	   }   
 738:Src/main.c    **** case VS4210_LOOP_MODE8_324:
 739:Src/main.c    ****    {
 740:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 741:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 742:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 743:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 744:Src/main.c    **** 		 OSD_MIRROR[0]=CAMC_M; 
 745:Src/main.c    **** 		 OSD_MIRROR[1]=CAMB_M; 
 746:Src/main.c    **** 		 OSD_MIRROR[2]=CAMR_M; 
 747:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMC_M; 		  
 748:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 749:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 			 
 750:Src/main.c    **** 		 OSD_SPEAKER[0]=OFF;
 751:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 752:Src/main.c    **** 		 OSD_SPEAKER[2]=ON;	 
 753:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 754:Src/main.c    **** 		   printf("VS4210_MODE8 ch3 ch2 ch4\r\n") ;
 755:Src/main.c    **** 		   break ;
 756:Src/main.c    **** 	   }   
 757:Src/main.c    **** //=============
 758:Src/main.c    **** 
 759:Src/main.c    **** 		case VS4210_LOOP_MODE8_413:
 760:Src/main.c    **** 		   {
 761:Src/main.c    **** 				   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 762:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 763:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 764:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 765:Src/main.c    **** 				 OSD_MIRROR[0]=CAMR_M; 
 766:Src/main.c    **** 				 OSD_MIRROR[1]=CAMA_M; 
 767:Src/main.c    **** 				 OSD_MIRROR[2]=CAMC_M; 
 768:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 769:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 770:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 				 
 771:Src/main.c    **** 				 OSD_SPEAKER[0]=ON;
 772:Src/main.c    **** 				 OSD_SPEAKER[1]=OFF;
 773:Src/main.c    **** 				 OSD_SPEAKER[2]=OFF;  
 774:Src/main.c    **** 				 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 775:Src/main.c    **** 				   printf("VS4210_MODE8 ch4 ch1 ch3\r\n") ;
ARM GAS  /tmp/cc8epWVM.s 			page 15


 776:Src/main.c    **** 				   break ;
 777:Src/main.c    **** 			   }   
 778:Src/main.c    **** 		case VS4210_LOOP_MODE8_423:
 779:Src/main.c    **** 		   {
 780:Src/main.c    **** 				   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 781:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 782:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 783:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 784:Src/main.c    **** 				 OSD_MIRROR[0]=CAMR_M; 
 785:Src/main.c    **** 				 OSD_MIRROR[1]=CAMB_M; 
 786:Src/main.c    **** 				 OSD_MIRROR[2]=CAMC_M; 
 787:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 788:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 789:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 					 
 790:Src/main.c    **** 				 OSD_SPEAKER[0]=ON;
 791:Src/main.c    **** 				 OSD_SPEAKER[1]=OFF;
 792:Src/main.c    **** 				 OSD_SPEAKER[2]=OFF;  
 793:Src/main.c    **** 				 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 794:Src/main.c    **** 				   printf("VS4210_MODE8 ch4 ch2 ch3\r\n") ;
 795:Src/main.c    **** 				   break ;
 796:Src/main.c    **** 			   }   
 797:Src/main.c    **** 
 798:Src/main.c    **** 		//=============
 799:Src/main.c    **** 	    case VS4210_LOOP_MODE10_123:
 800:Src/main.c    ****     {
 801:Src/main.c    ****   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE10 ;
 802:Src/main.c    **** 
 803:Src/main.c    **** pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 804:Src/main.c    **** pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 805:Src/main.c    **** pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 806:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 807:Src/main.c    **** 
 808:Src/main.c    **** 	OSD_MIRROR[0]=CAMR_M; 
 809:Src/main.c    **** 	OSD_MIRROR[1]=CAMA_M; 
 810:Src/main.c    **** 	OSD_MIRROR[2]=CAMB_M; 
 811:Src/main.c    **** 	OSD_MIRROR[3]=CAMC_M; 
 812:Src/main.c    **** 
 813:Src/main.c    **** gabVXIS_Input_mirrorH[0]=CAMR_M;		  
 814:Src/main.c    **** gabVXIS_Input_mirrorH[1]=CAMA_M;		  
 815:Src/main.c    **** gabVXIS_Input_mirrorH[2]=CAMB_M;		
 816:Src/main.c    **** gabVXIS_Input_mirrorH[3]=CAMC_M;		  
 817:Src/main.c    **** 
 818:Src/main.c    **** 	OSD_SPEAKER[0]=ON;
 819:Src/main.c    **** 	OSD_SPEAKER[1]=OFF;
 820:Src/main.c    **** 	OSD_SPEAKER[2]=OFF;
 821:Src/main.c    **** 	OSD_SPEAKER[3]=OFF;
 822:Src/main.c    **** 
 823:Src/main.c    **** 
 824:Src/main.c    ****      //   pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 825:Src/main.c    ****         printf("VS4210_MODE10 ch1 ch2 ch3\r\n") ;
 826:Src/main.c    ****         break ;
 827:Src/main.c    ****     }
 828:Src/main.c    **** case VS4210_LOOP_MODE10_412:
 829:Src/main.c    **** 	{
 830:Src/main.c    **** 	   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE10 ;
 831:Src/main.c    **** 	   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 832:Src/main.c    **** 	   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
ARM GAS  /tmp/cc8epWVM.s 			page 16


 833:Src/main.c    **** 	   pVS4210_JointKind1.WindowMap.WMap2 =2 ;
 834:Src/main.c    **** 	    pVS4210_JointKind1.WindowMap.WMap3 =0 ;
 835:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 836:Src/main.c    ****    	  OSD_MIRROR[1]=CAMA_M;	
 837:Src/main.c    ****    	  OSD_MIRROR[2]=CAMB_M;	
 838:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 839:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 840:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMB_M; 	  
 841:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 842:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 843:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 844:Src/main.c    **** 	//	 pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 845:Src/main.c    **** 	   printf("VS4210_MODE10 ch4 ch1 ch2\r\n") ;
 846:Src/main.c    **** 		break;
 847:Src/main.c    ****     	}
 848:Src/main.c    **** 	case VS4210_LOOP_MODE10_413:
 849:Src/main.c    **** 		{
 850:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE10 ;
 851:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 852:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 853:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 854:Src/main.c    **** 		  OSD_MIRROR[0]=CAMR_M; 
 855:Src/main.c    **** 		  OSD_MIRROR[1]=CAMA_M; 
 856:Src/main.c    **** 		  OSD_MIRROR[2]=CAMC_M; 
 857:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 858:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 859:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 			  
 860:Src/main.c    **** 		  OSD_SPEAKER[0]=ON;
 861:Src/main.c    **** 		  OSD_SPEAKER[1]=OFF;
 862:Src/main.c    **** 		  OSD_SPEAKER[2]=OFF;
 863:Src/main.c    **** 		//	 pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 864:Src/main.c    **** 		   printf("VS4210_MODE10 ch4 ch1 ch3\r\n") ;
 865:Src/main.c    **** 			break;
 866:Src/main.c    **** 			}
 867:Src/main.c    **** 	case VS4210_LOOP_MODE10_423:
 868:Src/main.c    **** 		{
 869:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE10 ;
 870:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 871:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 872:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 873:Src/main.c    **** 		  OSD_MIRROR[0]=CAMR_M; 
 874:Src/main.c    **** 		  OSD_MIRROR[1]=CAMB_M; 
 875:Src/main.c    **** 		  OSD_MIRROR[2]=CAMC_M; 
 876:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 877:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 878:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 			  
 879:Src/main.c    **** 		  OSD_SPEAKER[0]=ON;
 880:Src/main.c    **** 		  OSD_SPEAKER[1]=OFF;
 881:Src/main.c    **** 		  OSD_SPEAKER[2]=OFF;
 882:Src/main.c    **** 		//	 pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 883:Src/main.c    **** 		   printf("VS4210_MODE10 ch4 ch2 ch3\r\n") ;
 884:Src/main.c    **** 			break;
 885:Src/main.c    **** 			}
 886:Src/main.c    **** 
 887:Src/main.c    ****     case VS4210_LOOP_MODE9:
 888:Src/main.c    ****     {
 889:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE9 ;
ARM GAS  /tmp/cc8epWVM.s 			page 17


 890:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 891:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 892:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 893:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 894:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 895:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 896:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
 897:Src/main.c    ****    	  OSD_MIRROR[3]=CAMR_M;	
 898:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 899:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 900:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		  
 901:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 	  
 902:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 903:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 904:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 905:Src/main.c    **** 	  OSD_SPEAKER[3]=ON;	  
 906:Src/main.c    ****         printf("VS4210_MODE9\r\n") ;
 907:Src/main.c    ****         break ;
 908:Src/main.c    ****     }
 909:Src/main.c    **** 	#endif
 910:Src/main.c    ****     case VS4210_LOOP_MODE12_12:
 911:Src/main.c    ****     {
 912:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 913:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 914:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 915:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 916:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 917:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 918:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
 919:Src/main.c    ****   	OSD_SPEAKER[0]=ON;
 920:Src/main.c    ****   	OSD_SPEAKER[1]=OFF;
 921:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch2\r\n") ;
 922:Src/main.c    ****         break ;
 923:Src/main.c    ****     }
 924:Src/main.c    **** 	case VS4210_LOOP_MODE12_14:
 925:Src/main.c    ****       {
 926:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 927:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 928:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
 929:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 930:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;
 931:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 932:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 933:Src/main.c    ****   	OSD_SPEAKER[0]=OFF;
 934:Src/main.c    ****   	OSD_SPEAKER[1]=ON;	  
 935:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch4\r\n") ;	
 936:Src/main.c    **** 	break;
 937:Src/main.c    ****     	}
 938:Src/main.c    **** 	case VS4210_LOOP_MODE12_42:
 939:Src/main.c    ****       {
 940:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 941:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 942:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 943:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 944:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 945:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMR_M;			  
 946:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
ARM GAS  /tmp/cc8epWVM.s 			page 18


 947:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 948:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 949:Src/main.c    ****         printf("VS4210_MODE12 ch4 ch2\r\n") ;	
 950:Src/main.c    **** 	break;
 951:Src/main.c    ****     	}
 952:Src/main.c    **** 	case VS4210_LOOP_MODE12_43:
 953:Src/main.c    ****       {
 954:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 955:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 956:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 957:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 958:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 959:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMR_M;			  
 960:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 961:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 962:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 963:Src/main.c    ****         printf("VS4210_MODE12 ch4 ch3\r\n") ;	
 964:Src/main.c    **** 	break;
 965:Src/main.c    ****     	}
 966:Src/main.c    **** 	//==============
 967:Src/main.c    **** 	case VS4210_LOOP_MODE12_21:
 968:Src/main.c    ****       {
 969:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 970:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 971:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 972:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 973:Src/main.c    ****    	  OSD_MIRROR[1]=CAMA_M;	
 974:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 975:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 976:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 977:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 978:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch1\r\n") ;	
 979:Src/main.c    **** 	break;
 980:Src/main.c    ****     	}
 981:Src/main.c    **** 	case VS4210_LOOP_MODE12_23:
 982:Src/main.c    ****       {
 983:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 984:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 985:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 986:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 987:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 988:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 989:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 990:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 991:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 992:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch3\r\n") ;	
 993:Src/main.c    **** 	break;
 994:Src/main.c    ****     	}
 995:Src/main.c    **** 	case VS4210_LOOP_MODE12_24:
 996:Src/main.c    ****       {
 997:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 998:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2;
 999:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
1000:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
1001:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;	
1002:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
1003:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
ARM GAS  /tmp/cc8epWVM.s 			page 19


1004:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
1005:Src/main.c    **** 	  OSD_SPEAKER[1]=ON;		  
1006:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch4\r\n") ;	
1007:Src/main.c    **** 	break;
1008:Src/main.c    ****     	}
1009:Src/main.c    **** 
1010:Src/main.c    **** 	//==============
1011:Src/main.c    **** 	case VS4210_LOOP_MODE12_13:
1012:Src/main.c    ****       {
1013:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
1014:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
1015:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
1016:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
1017:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
1018:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
1019:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
1020:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
1021:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
1022:Src/main.c    **** 	  
1023:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch3\r\n") ;	
1024:Src/main.c    **** 	break;
1025:Src/main.c    ****     	}
1026:Src/main.c    **** 	case VS4210_LOOP_MODE12_32:
1027:Src/main.c    ****       {
1028:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
1029:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
1030:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
1031:Src/main.c    **** 	  OSD_MIRROR[0]=CAMC_M;	
1032:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
1033:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
1034:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
1035:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
1036:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
1037:Src/main.c    **** 	  
1038:Src/main.c    ****         printf("VS4210_MODE12 ch3 ch2\r\n") ;	
1039:Src/main.c    **** 	break;
1040:Src/main.c    ****     	}
1041:Src/main.c    **** 
1042:Src/main.c    ****     case VS4210_LOOP_MODE12_34:
1043:Src/main.c    ****     {
1044:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
1045:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
1046:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
1047:Src/main.c    **** 	  OSD_MIRROR[0]=CAMC_M;	
1048:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;	
1049:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
1050:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
1051:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
1052:Src/main.c    **** 	  OSD_SPEAKER[1]=ON;	
1053:Src/main.c    **** 	  
1054:Src/main.c    ****         printf("VS4210_MODE12 ch3 ch4\r\n") ;
1055:Src/main.c    ****         break ;
1056:Src/main.c    ****     }
1057:Src/main.c    **** //========================
1058:Src/main.c    **** 
1059:Src/main.c    **** case VS4210_LOOP_MODE12_31:
1060:Src/main.c    ****   {
ARM GAS  /tmp/cc8epWVM.s 			page 20


1061:Src/main.c    ****    pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
1062:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap0 =3 ;
1063:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap1 =1 ;
1064:Src/main.c    ****   OSD_MIRROR[0]=CAMC_M; 
1065:Src/main.c    ****   OSD_MIRROR[1]=CAMA_M; 
1066:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
1067:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M;   
1068:Src/main.c    ****   OSD_SPEAKER[0]=ON;
1069:Src/main.c    ****   OSD_SPEAKER[1]=OFF;	
1070:Src/main.c    ****   
1071:Src/main.c    **** 	printf("VS4210_MODE12 ch3 ch1\r\n") ;	
1072:Src/main.c    **** break;
1073:Src/main.c    **** 	}
1074:Src/main.c    **** 
1075:Src/main.c    **** //=======================
1076:Src/main.c    **** #if 0
1077:Src/main.c    ****     case VS4210_LOOP_MODE14:
1078:Src/main.c    ****     {
1079:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE14 ;
1080:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
1081:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
1082:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
1083:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
1084:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
1085:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
1086:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
1087:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
1088:Src/main.c    **** 	  gabVXIS_Input_mirrorH[2]=CAMC_M;		
1089:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
1090:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
1091:Src/main.c    **** 	  OSD_SPEAKER[3]=OFF;	
1092:Src/main.c    **** 	  
1093:Src/main.c    ****         printf("VS4210_MODE14 ch1 ch2\r\n") ;
1094:Src/main.c    ****         break ;
1095:Src/main.c    ****     }
1096:Src/main.c    **** #endif
1097:Src/main.c    ****     }
1098:Src/main.c    **** 
1099:Src/main.c    **** 	
1100:Src/main.c    **** VS4210_SetMutiWindows(&pVS4210_JointKind1) ;
1101:Src/main.c    **** 
1102:Src/main.c    **** //AUDIO_SELECT(index);
1103:Src/main.c    **** AudioMute(ON);
1104:Src/main.c    **** 
1105:Src/main.c    **** MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_AUDIO_CHANNEL_SELECT);
1106:Src/main.c    **** MCUTimerActiveTimerEvent(SEC(1),  _SYSTEM_TIMER_EVENT_AUDIO_CHANNEL_SELECT);
1107:Src/main.c    **** AUDIO_SELECT(index);
1108:Src/main.c    **** 
1109:Src/main.c    **** CURRENT_CH=index;
1110:Src/main.c    **** 
1111:Src/main.c    **** //ChangeVol(0);
1112:Src/main.c    **** 
1113:Src/main.c    **** }
1114:Src/main.c    **** 
1115:Src/main.c    **** /*
1116:Src/main.c    **** static int GetKet_State(void)
1117:Src/main.c    **** {
ARM GAS  /tmp/cc8epWVM.s 			page 21


1118:Src/main.c    ****     int re = 0  ;
1119:Src/main.c    **** 
1120:Src/main.c    **** 	#if 0
1121:Src/main.c    ****     if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin ) == 0)
1122:Src/main.c    ****     {
1123:Src/main.c    ****         re =1 ;
1124:Src/main.c    **** 		  re =0 ;
1125:Src/main.c    ****      //   printf("SW1 Key\r\n") ;
1126:Src/main.c    ****     }
1127:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin ) == 0)
1128:Src/main.c    ****     {
1129:Src/main.c    ****         re =2 ;
1130:Src/main.c    **** 		 re =0 ;
1131:Src/main.c    ****     //    printf("SW2 Key\r\n") ;
1132:Src/main.c    ****     }
1133:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin ) == 0)
1134:Src/main.c    ****     {
1135:Src/main.c    ****         re =3 ;
1136:Src/main.c    ****         printf("SW3 Key\r\n") ;
1137:Src/main.c    ****     }
1138:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin ) == 0)
1139:Src/main.c    ****     {
1140:Src/main.c    ****         re =4 ;
1141:Src/main.c    ****         printf("SW4 Key\r\n") ;
1142:Src/main.c    ****     }
1143:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin ) == 0)
1144:Src/main.c    ****     {
1145:Src/main.c    ****        // re =5 ;
1146:Src/main.c    ****       //  printf("SW5 Key\r\n") ;
1147:Src/main.c    ****       Monitor(); 
1148:Src/main.c    ****     }
1149:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW6_GPIO_Port, SW6_Pin ) == 0)
1150:Src/main.c    ****     {
1151:Src/main.c    ****         re =6 ;
1152:Src/main.c    ****         printf("SW6 Key\r\n") ;
1153:Src/main.c    ****     }
1154:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW7_GPIO_Port, SW7_Pin ) == 0)
1155:Src/main.c    ****     {
1156:Src/main.c    ****         re =7 ;
1157:Src/main.c    ****         printf("SW7 Key\r\n") ;
1158:Src/main.c    ****     }
1159:Src/main.c    **** #endif
1160:Src/main.c    **** 
1161:Src/main.c    ****     return re ;
1162:Src/main.c    **** }
1163:Src/main.c    **** */
1164:Src/main.c    **** 
1165:Src/main.c    **** BYTE CHECK_HDMI720P50(void)
1166:Src/main.c    **** {
1167:Src/main.c    **** 	tByte REG9C,REG9D,REGA1,REGA2 ;
1168:Src/main.c    **** 	tByte ret=0,i=0;
1169:Src/main.c    **** 	gHDMI_Index=0;	
1170:Src/main.c    **** 				REG9C=HDMIRX_ReadI2C_Byte(0x9c);			
1171:Src/main.c    **** 				REG9D=HDMIRX_ReadI2C_Byte(0x9d);
1172:Src/main.c    **** 				REGA1=HDMIRX_ReadI2C_Byte(0xa1);
1173:Src/main.c    **** 				REGA2=HDMIRX_ReadI2C_Byte(0xa2);
1174:Src/main.c    **** 				
ARM GAS  /tmp/cc8epWVM.s 			page 22


1175:Src/main.c    **** 				if((REG9C==0xbc)&&(REG9D==0x07)&&(REGA1==0x10)&&(REGA2==0xB8))
1176:Src/main.c    **** 					{
1177:Src/main.c    **** 					dbg_Printf("ch%d, InputMode=%d \r\n", (int)(i+1),(int) gbVXIS_InputMode[i] ) ;
1178:Src/main.c    **** 					//dbg_Printf("ch%d, REG 0xA2=%x \r\n", (int)(i+1),(int) HDMIRX_ReadI2C_Byte(0xa2) ) ;
1179:Src/main.c    **** 					//dbg_Printf("ch%d, REG 0x9C=%x \r\n", (int)(i+1),(int) HDMIRX_ReadI2C_Byte(0x9c) ) ;
1180:Src/main.c    **** 					//dbg_Printf("ch%d, REG 0x9D=%x \r\n", (int)(i+1),(int) HDMIRX_ReadI2C_Byte(0x9d) ) ;
1181:Src/main.c    **** 					//dbg_Printf("ch%d, REG 0xA1=%x \r\n", (int)(i+1),(int) HDMIRX_ReadI2C_Byte(0xa1) ) ;
1182:Src/main.c    **** 					//dbg_Printf("ch%d, InputMode=720P50\r\n",(int)(i+1)) ;
1183:Src/main.c    **** 					ret=1;
1184:Src/main.c    **** 					}
1185:Src/main.c    **** 
1186:Src/main.c    **** return ret;
1187:Src/main.c    **** }
1188:Src/main.c    **** 	static void HDMI_VideoModeDetect(void)
1189:Src/main.c    **** 	{
1190:Src/main.c    **** 		tByte i  ;
1191:Src/main.c    **** 	
1192:Src/main.c    **** 		for(i = 0 ; i< 2/*4*/ ; i++ )
1193:Src/main.c    **** 		{
1194:Src/main.c    **** 			gHDMI_Index = i ;
1195:Src/main.c    **** 			//--- Start --- 20201214-01
1196:Src/main.c    **** 			if( i == 1 )
1197:Src/main.c    **** 			{
1198:Src/main.c    **** 				if( newInRes[0] == _OSD_No_Signal )
1199:Src/main.c    **** 					bSignal[gHDMI_Index] = 0;
1200:Src/main.c    **** 				else
1201:Src/main.c    **** 					bSignal[gHDMI_Index] = 1;
1202:Src/main.c    **** 			}
1203:Src/main.c    **** 			else
1204:Src/main.c    **** 			//--- End ---
1205:Src/main.c    **** 			bSignal[gHDMI_Index] = CheckHDMIRX();
1206:Src/main.c    **** 
1207:Src/main.c    **** 			//if( (i == 1 )&&(bSignal[1]==1))
1208:Src/main.c    **** 			//{
1209:Src/main.c    **** 			//dbg_Printf("ch%d, InputMode=%d \r\n", (int)(i+1),(int) gbVXIS_InputMode[i] ) ;
1210:Src/main.c    **** 			//}
1211:Src/main.c    **** 			
1212:Src/main.c    **** 			if (PreVState[gHDMI_Index] != VState[gHDMI_Index]  )
1213:Src/main.c    **** 			{
1214:Src/main.c    **** 				PreVState[gHDMI_Index]	= VState[gHDMI_Index] ;
1215:Src/main.c    **** 			}
1216:Src/main.c    **** 	
1217:Src/main.c    **** 			if(bSignal[gHDMI_Index] != bOldSignal[gHDMI_Index] )
1218:Src/main.c    **** 			{
1219:Src/main.c    **** 				bOldSignal[gHDMI_Index] = bSignal[gHDMI_Index] ;
1220:Src/main.c    **** 	
1221:Src/main.c    **** 				if(bSignal[gHDMI_Index] == 0 )
1222:Src/main.c    **** 				{
1223:Src/main.c    **** 					VS4210_Rx_NoSignal(i) ;
1224:Src/main.c    **** 					dbg_Printf("##ch%d, VS4210_Rx_NoSignal\r\n", (int)(i+1) ) ;
1225:Src/main.c    **** 					if (pVS4210_MutiWindows1.DrawOSDFlg != 0)
1226:Src/main.c    **** 					{
1227:Src/main.c    **** 						OSD_Show_Flg = 1 ;
1228:Src/main.c    **** 						Tim1_count = 0 ;
1229:Src/main.c    **** 						OSDStateFlg = 1 ;
1230:Src/main.c    **** 						OSDSecCount = 0 ;
1231:Src/main.c    **** 					}
ARM GAS  /tmp/cc8epWVM.s 			page 23


1232:Src/main.c    **** 					gbVXIS_InputMode[gHDMI_Index] =_OSD_No_Signal ;
1233:Src/main.c    **** 					PrebVXIS_InputMode[gHDMI_Index] = _OSD_No_Signal ;
1234:Src/main.c    **** 
1235:Src/main.c    **** 					if((SelectInputMode==_HDMI_Input)&&(gHDMI_Index==0))
1236:Src/main.c    **** 						Set_Video_Loss_OSD(0,ON);
1237:Src/main.c    **** 					//MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);	
1238:Src/main.c    **** 					//VXISI2CWrite(0x9C,0x0A);
1239:Src/main.c    **** 						if(i==0)
1240:Src/main.c    **** 						SET_Audio_Mute(ON);
1241:Src/main.c    **** 				}
1242:Src/main.c    **** 			}
1243:Src/main.c    **** 	
1244:Src/main.c    **** 			if( bSignal[gHDMI_Index] == 1  )
1245:Src/main.c    **** 			{
1246:Src/main.c    **** 				//--- Start --- 20201214-01
1247:Src/main.c    **** 				if( i == 1 )
1248:Src/main.c    **** 					gbVXIS_InputMode[gHDMI_Index] = newInRes[0];
1249:Src/main.c    **** 				else
1250:Src/main.c    **** 				//--- End ---
1251:Src/main.c    **** 				gbVXIS_InputMode[gHDMI_Index] = GetHDMI_InputMode(gHDMI_Index ) ;
1252:Src/main.c    **** 
1253:Src/main.c    **** 			}
1254:Src/main.c    **** 	
1255:Src/main.c    **** 			if (gbVXIS_InputMode[gHDMI_Index] != PrebVXIS_InputMode[gHDMI_Index] )
1256:Src/main.c    **** 			{
1257:Src/main.c    **** 				PrebVXIS_InputMode[gHDMI_Index] = gbVXIS_InputMode[gHDMI_Index] ;
1258:Src/main.c    **** 
1259:Src/main.c    **** 					if(CHECK_HDMI720P50())
1260:Src/main.c    **** 					{
1261:Src/main.c    **** 					dbg_Printf("ch%d, HDMI=720P50 no support\r\n",(int)(i+1)) ;
1262:Src/main.c    **** 					}
1263:Src/main.c    **** 				else if (gbVXIS_InputMode[gHDMI_Index] != _OSD_No_Signal)
1264:Src/main.c    **** 				{
1265:Src/main.c    **** 					VS4210_SetInModeOutMode(i , gbVXIS_InputMode[i] , pVS4210_MutiWindows1.OutputMode );
1266:Src/main.c    **** 
1267:Src/main.c    **** 					if((SelectInputMode==_AHD_Input)&&(gHDMI_Index==1))			
1268:Src/main.c    **** 					VXISI2CWrite( 0x19, 0x01 );
1269:Src/main.c    **** 							
1270:Src/main.c    **** 							
1271:Src/main.c    **** 					VS4210_SetInputSizeHV(i ,gHActive[i], gVActive[i], gHTotal[i] ,gVTotal[i] ) ;
1272:Src/main.c    **** 
1273:Src/main.c    **** 					dbg_Printf("ch%d, InputMode=%d \r\n", (int)(i+1),(int) gbVXIS_InputMode[i] ) ;
1274:Src/main.c    **** 
1275:Src/main.c    **** 						#if 0
1276:Src/main.c    **** 						if(gbVXIS_InputMode[i]==6)
1277:Src/main.c    **** 						{
1278:Src/main.c    **** 						printf("(set reg.)");
1279:Src/main.c    **** 						 VXISI2CWrite(0x08,0x21);
1280:Src/main.c    **** 						 VXISI2CWrite(0x0A,0x21);
1281:Src/main.c    **** 						 VXISI2CWrite(0x74,0x02);
1282:Src/main.c    **** 						 VXISI2CWrite(0x82,0x40);
1283:Src/main.c    **** 						}
1284:Src/main.c    **** 						#endif
1285:Src/main.c    **** 					if (pVS4210_MutiWindows1.DrawOSDFlg != 0)
1286:Src/main.c    **** 					{
1287:Src/main.c    **** 						OSD_Show_Flg = 1 ;
1288:Src/main.c    **** 						Tim1_count = 0 ;
ARM GAS  /tmp/cc8epWVM.s 			page 24


1289:Src/main.c    **** 						OSDStateFlg = 1 ;
1290:Src/main.c    **** 						OSDSecCount = 0 ;
1291:Src/main.c    **** 					}
1292:Src/main.c    **** 
1293:Src/main.c    **** 						if((SelectInputMode==_HDMI_Input)&&(gHDMI_Index==0))
1294:Src/main.c    **** 						Set_Video_Loss_OSD(0,OFF);	
1295:Src/main.c    **** 
1296:Src/main.c    **** 						if((SelectInputMode==_AHD_Input)&&(gHDMI_Index==1))
1297:Src/main.c    **** 							{
1298:Src/main.c    **** 							MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_VIDEO_RESET);
1299:Src/main.c    **** 							}
1300:Src/main.c    **** 						
1301:Src/main.c    **** 						if(gHDMI_Index==0)
1302:Src/main.c    **** 						SET_Audio_Mute(OFF);	
1303:Src/main.c    **** 						//MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);
1304:Src/main.c    **** 				}
1305:Src/main.c    **** 			}
1306:Src/main.c    **** 		}
1307:Src/main.c    **** 	}
1308:Src/main.c    **** 
1309:Src/main.c    **** static void HDMI_AudioModeDetect(void)
1310:Src/main.c    **** {
1311:Src/main.c    ****     tByte pbAudioSampleFreq, pbValidCh ;
1312:Src/main.c    ****     pbAudioSampleFreq = 0 ;
1313:Src/main.c    **** 
1314:Src/main.c    ****     getHDMIRXAudioInfo(&pbAudioSampleFreq , &pbValidCh ) ;
1315:Src/main.c    **** 
1316:Src/main.c    ****     if (gbAUDO_INDEX != HDMI_AUDIO_NONE )
1317:Src/main.c    ****     {
1318:Src/main.c    ****         if (gbAUDO_INDEX  == gHDMI_Index )
1319:Src/main.c    ****         {
1320:Src/main.c    ****             if (gPreAudioSampleFreq != pbAudioSampleFreq)
1321:Src/main.c    ****             {
1322:Src/main.c    ****                 gPreAudioSampleFreq = pbAudioSampleFreq ;
1323:Src/main.c    ****                 HDMI_Tx_SetAudioFs(gPreAudioSampleFreq )  ;
1324:Src/main.c    ****             }
1325:Src/main.c    ****         }
1326:Src/main.c    ****     }
1327:Src/main.c    ****     gAudioSampleFreq[gHDMI_Index] = pbAudioSampleFreq ;
1328:Src/main.c    **** }
1329:Src/main.c    **** 
1330:Src/main.c    **** //=============================================================================
1331:Src/main.c    **** //    Main Initialize Routine
1332:Src/main.c    **** //=============================================================================
1333:Src/main.c    **** void main_init (void)
1334:Src/main.c    **** {
1335:Src/main.c    **** 
1336:Src/main.c    **** 	WORD	rev;
1337:Src/main.c    **** 
1338:Src/main.c    **** 		rev = GetFWRevEE();
1339:Src/main.c    **** 		Printf("\r\nPrev.FW:%04x\r\n", rev);
1340:Src/main.c    **** 		
1341:Src/main.c    **** 		if( GetFWRevEE()!=FWVER )	// exist EEPROM
1342:Src/main.c    **** 		{					
1343:Src/main.c    **** 			Printf("\r\nCurr.FW:%04x", (WORD)FWVER);
1344:Src/main.c    **** 			SaveFWRevEE(FWVER);
1345:Src/main.c    **** 			Printf("\r\nCurr.FW:%04x", (WORD)GetFWRevEE());
ARM GAS  /tmp/cc8epWVM.s 			page 25


1346:Src/main.c    **** 		}
1347:Src/main.c    **** 
1348:Src/main.c    **** 		if( GetFWRevEE()==FWVER )
1349:Src/main.c    **** 		{					// exist EEPROM
1350:Src/main.c    **** 			if( rev != FWVER ) 
1351:Src/main.c    **** 				{
1352:Src/main.c    **** 				ClearBasicEE();
1353:Src/main.c    **** 			
1354:Src/main.c    **** 			Printf("\r\n[MSG]main_init()=> rev != FWVER & call ClearBasicEE()\r\n");  //pinchi test
1355:Src/main.c    **** 				}
1356:Src/main.c    **** 			else
1357:Src/main.c    **** 				{
1358:Src/main.c    **** 				;//DebugLevel = GetDebugLevelEE();
1359:Src/main.c    **** 
1360:Src/main.c    **** 				}
1361:Src/main.c    **** 		}
1362:Src/main.c    **** 		else 
1363:Src/main.c    **** 		{
1364:Src/main.c    **** 			Printf("\r\nCannot access EEPROM!!!!");
1365:Src/main.c    **** 			Printf("\r\nNo initialize");
1366:Src/main.c    **** 			DebugLevel = 0xff;
1367:Src/main.c    **** 			return;
1368:Src/main.c    **** 		}
1369:Src/main.c    **** 
1370:Src/main.c    **** 
1371:Src/main.c    **** 	delay(100);
1372:Src/main.c    **** 	
1373:Src/main.c    **** 
1374:Src/main.c    **** //	SET_POWER_STATUS(_POWER_STATUS_OFF);
1375:Src/main.c    **** //	SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1376:Src/main.c    **** 
1377:Src/main.c    **** }
1378:Src/main.c    **** 
1379:Src/main.c    **** 
1380:Src/main.c    **** void AdjustAutoDayNight(BYTE val)
1381:Src/main.c    **** {
1382:Src/main.c    **** //	BYTE page;
1383:Src/main.c    **** 	BYTE PWMLevelTemp=0;
1384:Src/main.c    **** 	val=0xff-val;
1385:Src/main.c    **** 
1386:Src/main.c    **** 	#if 1//ryan@20170928
1387:Src/main.c    **** 	if(val>=0&&val<100)
1388:Src/main.c    **** 		PWMLevelTemp=0+70;
1389:Src/main.c    **** 	else if(val>=100&&val<140)
1390:Src/main.c    **** 		PWMLevelTemp=20+70;//20;
1391:Src/main.c    **** 	else if(val>=140&&val<180)
1392:Src/main.c    **** 		PWMLevelTemp=40+70;//50;
1393:Src/main.c    **** 	else if(val>=180&&val<220)
1394:Src/main.c    **** 		PWMLevelTemp=60+70;//65;
1395:Src/main.c    **** 	else if(val>=220&&val<=255)//andy 20110414
1396:Src/main.c    **** 	{
1397:Src/main.c    **** 		//#ifdef AWT
1398:Src/main.c    **** 		PWMLevelTemp=75+70;//80;
1399:Src/main.c    **** 		//#else
1400:Src/main.c    **** 		//PWMLevelTemp=115;
1401:Src/main.c    **** 		//#endif
1402:Src/main.c    **** 		//	PWMLevelTemp=128;
ARM GAS  /tmp/cc8epWVM.s 			page 26


1403:Src/main.c    **** 	}
1404:Src/main.c    **** 
1405:Src/main.c    **** 	#else
1406:Src/main.c    **** 	if(val>=0&&val<100)
1407:Src/main.c    **** 		PWMLevelTemp=0;
1408:Src/main.c    **** 	else if(val>=100&&val<140)
1409:Src/main.c    **** 		PWMLevelTemp=30;//20;
1410:Src/main.c    **** 	else if(val>=140&&val<180)
1411:Src/main.c    **** 		PWMLevelTemp=60;//50;
1412:Src/main.c    **** 	else if(val>=180&&val<220)
1413:Src/main.c    **** 		PWMLevelTemp=80;//65;
1414:Src/main.c    **** 	else if(val>=220&&val<=255)//andy 20110414
1415:Src/main.c    **** 	{
1416:Src/main.c    **** 		//#ifdef AWT
1417:Src/main.c    **** 		PWMLevelTemp=110;//80;
1418:Src/main.c    **** 		//#else
1419:Src/main.c    **** 		//PWMLevelTemp=115;
1420:Src/main.c    **** 		//#endif
1421:Src/main.c    **** 	}
1422:Src/main.c    **** 	#endif
1423:Src/main.c    **** 	//else
1424:Src/main.c    **** 	//	PWMLevelTemp=0;
1425:Src/main.c    **** 
1426:Src/main.c    **** 
1427:Src/main.c    **** 	if(DayNightLevel==1)
1428:Src/main.c    **** 	{
1429:Src/main.c    **** 		//if(AutoDayNightDelay<(5+5+5))
1430:Src/main.c    **** 	//		AutoDayNightDelay++;
1431:Src/main.c    **** 		//else
1432:Src/main.c    **** 		{
1433:Src/main.c    **** 			if(PWMLevel > PWMLevelTemp)
1434:Src/main.c    **** 				PWMLevel-=1;
1435:Src/main.c    **** 			else if(PWMLevel < PWMLevelTemp)
1436:Src/main.c    **** 				PWMLevel+=1;
1437:Src/main.c    **** 
1438:Src/main.c    **** 			AutoDayNightDelay=0;
1439:Src/main.c    **** 		}
1440:Src/main.c    **** 
1441:Src/main.c    **** 	//	PWMLevel=PWMLevelTemp;
1442:Src/main.c    **** 
1443:Src/main.c    **** 		
1444:Src/main.c    **** 	//	Printf("(PWMLevel1=%02x %02x)",(WORD)PWMLevel,(WORD)PWMLevelTemp);
1445:Src/main.c    **** 
1446:Src/main.c    **** 	user_pwm_setvalue(PWMLevel*15);
1447:Src/main.c    **** 
1448:Src/main.c    **** 	}
1449:Src/main.c    **** 	else
1450:Src/main.c    **** 	{
1451:Src/main.c    **** 	//	PWMLevel=PWMLevelTemp;
1452:Src/main.c    **** 		PWMLevel=255/*0x80*/;
1453:Src/main.c    **** 	//		Printf("(PWMLevel2=%02x)",(WORD)PWMLevel);
1454:Src/main.c    **** 	user_pwm_setvalue(_PWMLevelMax);
1455:Src/main.c    **** 	}
1456:Src/main.c    **** 	
1457:Src/main.c    **** #if 0
1458:Src/main.c    **** 
1459:Src/main.c    **** 	//Printf("\r\nLADC0=%02x",(WORD)val);
ARM GAS  /tmp/cc8epWVM.s 			page 27


1460:Src/main.c    **** 	page = ReadTW88( 0xff );
1461:Src/main.c    **** 	WriteTW88( 0xff, 0x00 );		// set page 0
1462:Src/main.c    **** 	WriteTW88( 0xbe, ((ReadTW88(0xbe) & 0xcf) | 0x10) );	// set active Low control, if want active hig
1463:Src/main.c    **** 	//WriteTW88( 0xc4, ((ReadTW88(0xc4) & 0x80)|(val>>2)) );	// set pwm number
1464:Src/main.c    **** 	WriteTW88( 0xc4, ((ReadTW88(0xc4) & 0x80)|(PWMLevel)) );	// set pwm number
1465:Src/main.c    **** 	WriteTW88( 0xff, page );
1466:Src/main.c    **** 	
1467:Src/main.c    **** 	#endif
1468:Src/main.c    **** 	/*
1469:Src/main.c    **** 	if(DayNightLevel==0)
1470:Src/main.c    **** 	user_pwm_setvalue(4000);
1471:Src/main.c    **** 	else
1472:Src/main.c    **** 	user_pwm_setvalue(PWMLevel*15);
1473:Src/main.c    **** */		
1474:Src/main.c    **** }
1475:Src/main.c    **** void LCDPowerON(void)
1476:Src/main.c    **** {
1477:Src/main.c    **** /*
1478:Src/main.c    **** 	Printf("(LCDPowerON)");
1479:Src/main.c    **** 
1480:Src/main.c    **** 	TTLI1_RES(OFF);
1481:Src/main.c    **** 	PANEL_EN(ON);
1482:Src/main.c    **** 	msleep(50) ;
1483:Src/main.c    **** 	msleep(100) ;///for new 7in panel  	LCM : TH070800480NYR40S1-L
1484:Src/main.c    **** //	MCUTimerDelayXms(50);
1485:Src/main.c    **** 	LCD_PWR(ON);
1486:Src/main.c    **** 
1487:Src/main.c    **** 	msleep(50) ;
1488:Src/main.c    **** 
1489:Src/main.c    **** //	MCUTimerDelayXms(50);
1490:Src/main.c    **** 	BL_ENABLE(ON);
1491:Src/main.c    **** HAL_GPIO_WritePin(PA7_GPIO_Port, PA7_Pin, 0);
1492:Src/main.c    **** 
1493:Src/main.c    **** //	BL_PWM(ON);
1494:Src/main.c    **** 
1495:Src/main.c    **** AudioMute(OFF);
1496:Src/main.c    **** */
1497:Src/main.c    **** 
1498:Src/main.c    **** }
1499:Src/main.c    **** 
1500:Src/main.c    **** void LCDPowerOFF(void)
1501:Src/main.c    **** {
1502:Src/main.c    **** /*
1503:Src/main.c    **** 	Printf("(LCDPowerOFF)");
1504:Src/main.c    **** 
1505:Src/main.c    **** #if 0
1506:Src/main.c    **** 
1507:Src/main.c    **** 	TTLI1_RES(OFF);
1508:Src/main.c    **** 	PANEL_EN(ON);
1509:Src/main.c    **** 	msleep(50) ;
1510:Src/main.c    **** //	MCUTimerDelayXms(50);
1511:Src/main.c    **** 	LCD_PWR(ON);
1512:Src/main.c    **** 
1513:Src/main.c    **** 	msleep(50) ;
1514:Src/main.c    **** 
1515:Src/main.c    **** //	MCUTimerDelayXms(50);
1516:Src/main.c    **** 	BL_ENABLE(ON);
ARM GAS  /tmp/cc8epWVM.s 			page 28


1517:Src/main.c    **** //	BL_PWM(ON);
1518:Src/main.c    **** 
1519:Src/main.c    **** #else
1520:Src/main.c    **** 	BL_ENABLE(OFF);
1521:Src/main.c    **** HAL_GPIO_WritePin(PA7_GPIO_Port, PA7_Pin, 1); 
1522:Src/main.c    **** 
1523:Src/main.c    **** //	BL_PWM(OFF);
1524:Src/main.c    **** //	msleep(50) ;
1525:Src/main.c    **** //	MCUTimerDelayXms(50);
1526:Src/main.c    **** 	TTLI1_RES(ON);
1527:Src/main.c    **** 	PANEL_EN(OFF);
1528:Src/main.c    **** //	MCUTimerDelayXms(50);
1529:Src/main.c    **** //	msleep(50) ;
1530:Src/main.c    **** 
1531:Src/main.c    **** 	LCD_PWR(OFF);
1532:Src/main.c    **** #endif
1533:Src/main.c    **** 
1534:Src/main.c    **** AudioMute(ON);
1535:Src/main.c    **** */
1536:Src/main.c    **** }
1537:Src/main.c    **** 
1538:Src/main.c    **** 
1539:Src/main.c    **** /* USER CODE END 0 */
1540:Src/main.c    **** 
1541:Src/main.c    **** /**
1542:Src/main.c    ****   * @brief  The application entry point.
1543:Src/main.c    ****   * @retval int
1544:Src/main.c    ****   */
1545:Src/main.c    **** 
1546:Src/main.c    **** void uComOnChipInitial(void)
1547:Src/main.c    **** {
1548:Src/main.c    **** 
1549:Src/main.c    **** //power reset
1550:Src/main.c    **** 
1551:Src/main.c    **** //power
1552:Src/main.c    **** PCON3V3_TP(ON);      
1553:Src/main.c    **** PCON1V2_TP(ON);      
1554:Src/main.c    **** 
1555:Src/main.c    **** VS4210_RST(OFF);   
1556:Src/main.c    **** 
1557:Src/main.c    **** #if 0
1558:Src/main.c    **** 
1559:Src/main.c    **** 	Set_USART1();
1560:Src/main.c    **** 
1561:Src/main.c    **** 
1562:Src/main.c    **** 	//Set_USART2();
1563:Src/main.c    **** 	//Set_USB();
1564:Src/main.c    **** 	//USB_Interrupts_Config();
1565:Src/main.c    **** 	Set_GPIO_Port();
1566:Src/main.c    **** 
1567:Src/main.c    **** 	//AUDIO_OUT_Flag=ReadEEP(0xae);
1568:Src/main.c    **** 	MUTE_OUT(1);
1569:Src/main.c    **** 
1570:Src/main.c    **** 
1571:Src/main.c    **** 
1572:Src/main.c    **** 	Set_Timer();
1573:Src/main.c    **** 	Set_Init_GPIO();
ARM GAS  /tmp/cc8epWVM.s 			page 29


1574:Src/main.c    **** 
1575:Src/main.c    **** 	TIM4_PWM(0);
1576:Src/main.c    **** 	Set_Battery_ADC();
1577:Src/main.c    **** 
1578:Src/main.c    **** 	EXTI_Configuration();
1579:Src/main.c    **** 
1580:Src/main.c    **** 	//Set_I2C_Port();
1581:Src/main.c    **** 	//Set_IR_Port();
1582:Src/main.c    **** 	//Set_ADC_Port();
1583:Src/main.c    **** 	
1584:Src/main.c    **** GPIO_SetBits(GPIOA, GPIO_Pin_1);//TW8816 reset
1585:Src/main.c    **** GPIO_ResetBits(GPIOA, GPIO_Pin_0);//TW8816 reset
1586:Src/main.c    **** 
1587:Src/main.c    **** GPIO_SetBits(GPIOA, GPIO_Pin_12);//ryan@20150525
1588:Src/main.c    **** GPIO_SetBits(GPIOA, GPIO_Pin_13);//ryan@20150525
1589:Src/main.c    **** GPIO_SetBits(GPIOA, GPIO_Pin_14);//ryan@20150525
1590:Src/main.c    **** 
1591:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_9);//ryan@20150525
1592:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_13);//ryan@20150525
1593:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_14);//ryan@20150525
1594:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_15);//ryan@20150525
1595:Src/main.c    **** 
1596:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_7);//ryan@20150525
1597:Src/main.c    **** 
1598:Src/main.c    **** //GPIO_ResetBits(GPIOC, GPIO_Pin_8);//ryan@20150525
1599:Src/main.c    **** PC_SW(1);//MP board
1600:Src/main.c    **** DC_OUT(0);//MP board
1601:Src/main.c    **** 	
1602:Src/main.c    **** 
1603:Src/main.c    **** #if __USE_SPI_FLASH__ == 1
1604:Src/main.c    **** 	Reset_SPI();
1605:Src/main.c    **** 	Set_SPI();
1606:Src/main.c    **** #endif
1607:Src/main.c    **** 
1608:Src/main.c    **** 	//Set_USBClock();
1609:Src/main.c    **** 	//USB_Interrupts_Config();
1610:Src/main.c    **** 	//USB_Init();
1611:Src/main.c    **** 
1612:Src/main.c    **** #endif
1613:Src/main.c    **** 
1614:Src/main.c    **** }
1615:Src/main.c    **** 
1616:Src/main.c    **** void user_pwm_setvalue(uint16_t value)
1617:Src/main.c    **** {
1618:Src/main.c    ****     TIM_OC_InitTypeDef sConfigOC;
1619:Src/main.c    ****   
1620:Src/main.c    ****     sConfigOC.OCMode = TIM_OCMODE_PWM1;
1621:Src/main.c    ****     sConfigOC.Pulse = value;
1622:Src/main.c    ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1623:Src/main.c    ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
1624:Src/main.c    ****     HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
1625:Src/main.c    ****     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  
1626:Src/main.c    **** }
1627:Src/main.c    **** 
1628:Src/main.c    **** void LoadEEPROM (void)
1629:Src/main.c    **** {
1630:Src/main.c    **** #if 0
ARM GAS  /tmp/cc8epWVM.s 			page 30


1631:Src/main.c    **** 	 PowerFlag = ReadEEP(EEP_Powerflag);
1632:Src/main.c    **** 	 SelectModeType = ReadEEP(EEP_SelectMode);
1633:Src/main.c    **** 
1634:Src/main.c    **** 	OSD_LOCKF= ReadEEP(EEP_ONOFFChoice);
1635:Src/main.c    **** 	Disp_Input = ReadEEP(EEP_COSDMode); 
1636:Src/main.c    **** 		
1637:Src/main.c    **** 	 TimeStep = ReadEEP(EEP_TimeStep);
1638:Src/main.c    **** 	 Priority=ReadEEP(EEP_PRIORITY);
1639:Src/main.c    **** 	 DayNightLevel= ReadEEP(EEP_AutoMode);
1640:Src/main.c    **** 	 NowModeState = ReadEEP(EEP_NowModeState);
1641:Src/main.c    **** 	
1642:Src/main.c    **** 	AudioVol = GetAudioVolEE();
1643:Src/main.c    **** 	CAMA_M= ReadEEP(EEP_CAMAMode);
1644:Src/main.c    **** 	CAMB_M= ReadEEP(EEP_CAMBMode);
1645:Src/main.c    **** 	CAMC_M= ReadEEP(EEP_CAMCMode);
1646:Src/main.c    **** 	CAMR_M= ReadEEP(EEP_CAMRMode);
1647:Src/main.c    **** 
1648:Src/main.c    **** 	AudioVol = GetAudioVolEE();
1649:Src/main.c    **** 
1650:Src/main.c    **** #endif
1651:Src/main.c    **** }
1652:Src/main.c    **** 
1653:Src/main.c    **** void WaitPowerOn(void)
1654:Src/main.c    **** {
1655:Src/main.c    **** BYTE val;
1656:Src/main.c    **** 	PowerLED(_SYSTEM_TIMER_EVENT_RED_ON);
1657:Src/main.c    **** 
1658:Src/main.c    **** 	LCDPowerOFF();
1659:Src/main.c    **** 	
1660:Src/main.c    **** 	MCUTimerCancelTimerEvent( _USER_TIMER_EVENT_PANEL_BACKLIGHT_ON);
1661:Src/main.c    **** 
1662:Src/main.c    **** 	Printf("\r\n(Power off..)");
1663:Src/main.c    **** 		
1664:Src/main.c    **** 	while(1) 
1665:Src/main.c    **** 	{	
1666:Src/main.c    **** 
1667:Src/main.c    **** 			CheckKeyIn();
1668:Src/main.c    **** 			if(PowerFlag==ON)
1669:Src/main.c    **** 			{
1670:Src/main.c    **** 				//PowerFlag=ON;
1671:Src/main.c    **** 				WriteEEP(EEP_Powerflag,PowerFlag);//2007.3.28 Justin
1672:Src/main.c    **** 				break;		//poweron
1673:Src/main.c    **** 			}
1674:Src/main.c    **** 			
1675:Src/main.c    **** 		  val=CheckTrigger();
1676:Src/main.c    **** 		 
1677:Src/main.c    **** //		  TriggerHandler(val);
1678:Src/main.c    **** 
1679:Src/main.c    **** 		if(val!=0)
1680:Src/main.c    **** 		{	
1681:Src/main.c    **** 			  PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON);
1682:Src/main.c    **** 			TriggerHandler(val);
1683:Src/main.c    **** 			//	AudioMute(OFF);
1684:Src/main.c    **** 			//DisplayInput();		//william v0.2 20120223
1685:Src/main.c    **** 			/*
1686:Src/main.c    **** 			if(!(TriggerMode==0x08))
1687:Src/main.c    **** 			{
ARM GAS  /tmp/cc8epWVM.s 			page 31


1688:Src/main.c    **** 				//Printf("\r\n(**PowerFlag=%02x)",(WORD)PowerFlag);
1689:Src/main.c    **** 				LCDPowerON(1);//修正power on時顯示太慢問題
1690:Src/main.c    **** 				AudioMute(1);
1691:Src/main.c    **** 			}
1692:Src/main.c    **** 			*/
1693:Src/main.c    **** 			
1694:Src/main.c    **** 		}
1695:Src/main.c    **** 		else
1696:Src/main.c    **** 		{
1697:Src/main.c    **** 			//Printf("\r\n(*NO-TRIG)");
1698:Src/main.c    **** 			TriggerHandler(val);  //Pinchi 20140922 add for AWT ML072Q
1699:Src/main.c    **** 
1700:Src/main.c    **** 
1701:Src/main.c    **** 				if(TriggerFlag==0)
1702:Src/main.c    **** 				{
1703:Src/main.c    **** 				//PowerOff();
1704:Src/main.c    **** 			//	AudioMute(ON);
1705:Src/main.c    **** 				
1706:Src/main.c    **** 				//PowerLED(_SYSTEM_TIMER_EVENT_RED_ON);
1707:Src/main.c    **** 				/*
1708:Src/main.c    **** 				if(live_out_state==1)	////live out issue 
1709:Src/main.c    **** 				{
1710:Src/main.c    **** 				live_out_state=0;
1711:Src/main.c    **** 				SetNowMode();
1712:Src/main.c    **** 				Panel_power=0;
1713:Src/main.c    **** 				}
1714:Src/main.c    **** 				*/
1715:Src/main.c    **** 				}
1716:Src/main.c    **** 			
1717:Src/main.c    **** 		//	TriggerHandler(val);  //Pinchi 20140922 move to above for AWT ML072Q	
1718:Src/main.c    **** 		}		  
1719:Src/main.c    **** 
1720:Src/main.c    **** 		   SysTimerHandler();
1721:Src/main.c    **** 		   	  EQ_Detect();	 
1722:Src/main.c    **** 			  
1723:Src/main.c    **** //			  	if((GT9147_Scan(1)>=_TOUCH_COUNT_1)&&(TP_ACTION==ON))
1724:Src/main.c    **** 					if(GT9147_Scan(1)>=_TOUCH_COUNT_1)
1725:Src/main.c    **** 
1726:Src/main.c    **** 					PowerFlag=ON;
1727:Src/main.c    **** 					
1728:Src/main.c    ****    	}
1729:Src/main.c    **** 
1730:Src/main.c    **** 	PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON);
1731:Src/main.c    **** //	SHOWOSDINFO();	
1732:Src/main.c    **** 	
1733:Src/main.c    **** //		if((NowModeState==JumpMode)&&(TriggerFlag==0))
1734:Src/main.c    **** //			 ShowJUMPOSD();
1735:Src/main.c    **** 		
1736:Src/main.c    **** 	MCUTimerCancelTimerEvent(_USER_TIMER_EVENT_DISPLAY_DISABLE);
1737:Src/main.c    **** 	MCUTimerActiveTimerEvent(SEC(2),_USER_TIMER_EVENT_DISPLAY_DISABLE);
1738:Src/main.c    **** 
1739:Src/main.c    **** 	
1740:Src/main.c    **** 
1741:Src/main.c    **** MCUTimerActiveTimerEvent(SEC(1),  _USER_TIMER_EVENT_PANEL_BACKLIGHT_ON);
1742:Src/main.c    **** //LCDPowerON();
1743:Src/main.c    **** Printf("\r\n(Power ON..)");		
1744:Src/main.c    **** 
ARM GAS  /tmp/cc8epWVM.s 			page 32


1745:Src/main.c    **** 
1746:Src/main.c    **** }
1747:Src/main.c    **** 
1748:Src/main.c    **** 
1749:Src/main.c    **** int main(void)
1750:Src/main.c    **** {
1751:Src/main.c    ****   /* USER CODE BEGIN 1 */
1752:Src/main.c    ****   TimeOutCount = 0 ;
1753:Src/main.c    **** 
1754:Src/main.c    ****     tByte i ;
1755:Src/main.c    ****     tByte j ;
1756:Src/main.c    ****     tByte exosdLen ;
1757:Src/main.c    ****     tByte exosdStart ;
1758:Src/main.c    **** #ifdef VICTOR_DEBUG
1759:Src/main.c    ****     tByte val ;
1760:Src/main.c    **** #endif
1761:Src/main.c    ****   //  int keystate ;
1762:Src/main.c    **** 
1763:Src/main.c    ****   /* USER CODE END 1 */
1764:Src/main.c    **** 
1765:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
1766:Src/main.c    **** 
1767:Src/main.c    ****   /* Reset of all peripherals, Initializes the F
1768:Src/main.c    ****    sh interface and the Systick. */
1769:Src/main.c    ****   HAL_Init();
1770:Src/main.c    ****   
1771:Src/main.c    ****   /* USER CODE BEGIN Init */
1772:Src/main.c    **** 
1773:Src/main.c    ****   /* USER CODE END Init */
1774:Src/main.c    **** 
1775:Src/main.c    ****   /* Configure the system clock */
1776:Src/main.c    ****   SystemClock_Config();
1777:Src/main.c    **** 
1778:Src/main.c    ****   
1779:Src/main.c    ****   /* USER CODE BEGIN SysInit */
1780:Src/main.c    ****   InitialTimerEvent();
1781:Src/main.c    **** 
1782:Src/main.c    ****   /* USER CODE END SysInit */
1783:Src/main.c    **** 
1784:Src/main.c    ****   /* Initialize all configured peripherals */
1785:Src/main.c    ****   MX_GPIO_Init();
1786:Src/main.c    ****  // LCDPowerOFF();
1787:Src/main.c    **** // AudioMute(ON);
1788:Src/main.c    **** 
1789:Src/main.c    **** //SET_PCA9554PW(_Shutter_SW,OFF);
1790:Src/main.c    ****  // SET_PCA9554PW(_CCD12_SW,ON);
1791:Src/main.c    **** //SET_PCA9554PW(_PCON5V_AUDIO,ON);
1792:Src/main.c    ****  //SET_PCA9554PW(_COL_PW_5V,OFF);
1793:Src/main.c    **** 
1794:Src/main.c    **** //  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin , GPIO_PIN_SET);
1795:Src/main.c    **** //  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin , GPIO_PIN_SET); 
1796:Src/main.c    **** 
1797:Src/main.c    ****  // PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON);
1798:Src/main.c    **** 
1799:Src/main.c    **** //  MX_TIM2_Init();
1800:Src/main.c    ****   MX_TIM3_Init();
1801:Src/main.c    ****   MX_USART1_UART_Init();
ARM GAS  /tmp/cc8epWVM.s 			page 33


1802:Src/main.c    ****   MX_USART2_UART_Init();
1803:Src/main.c    **** //  MX_ADC1_Init();
1804:Src/main.c    ****   
1805:Src/main.c    ****   /* USER CODE BEGIN 2 */
1806:Src/main.c    **** 
1807:Src/main.c    **** //HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);	
1808:Src/main.c    ****   
1809:Src/main.c    ****  SW_I2C0_Init() ;
1810:Src/main.c    ****  SW_I2C1_Init() ;
1811:Src/main.c    ****  SW_I2C2_Init() ;
1812:Src/main.c    ****  SW_I2C3_Init() ;
1813:Src/main.c    **** 
1814:Src/main.c    **** //user_pwm_setvalue(2000);
1815:Src/main.c    **** 
1816:Src/main.c    ****   //uComOnChipInitial();
1817:Src/main.c    ****   
1818:Src/main.c    **** // if((SelectInputMode==_HDMI_Input)&&(gHDMI_Index==0))
1819:Src/main.c    **** Set_Video_Loss_OSD(0,ON);
1820:Src/main.c    **** SET_Audio_Mute(ON);
1821:Src/main.c    **** 
1822:Src/main.c    **** 
1823:Src/main.c    ****  // GT9147_Init();
1824:Src/main.c    **** #if 1
1825:Src/main.c    ****   msleep(50) ;
1826:Src/main.c    ****   HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data, 1);	//activate UART receive interrupt every time
1827:Src/main.c    ****   HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	//activate UART receive interrupt every time
1828:Src/main.c    **** 
1829:Src/main.c    ****  // HAL_GPIO_WritePin(TP2824_RST_GPIO_Port, VS_RST_Pin, 0); //RX RST
1830:Src/main.c    ****  //HAL_GPIO_WritePin(TX_RST_GPIO_Port, VS_RST_Pin, 0); //TX RST
1831:Src/main.c    ****   HAL_GPIO_WritePin(VS_RST_GPIO_Port, VS_RST_Pin, 0); //VS4210 RST
1832:Src/main.c    ****  TP2824_SET_REST(0);
1833:Src/main.c    **** 
1834:Src/main.c    ****   msleep(100) ;
1835:Src/main.c    ****   //HAL_GPIO_WritePin(TP2824_RST_GPIO_Port, VS_RST_Pin, 1); //VS4210 RST
1836:Src/main.c    **** // HAL_GPIO_WritePin(TX_RST_GPIO_Port, VS_RST_Pin, 1); //TX RST
1837:Src/main.c    ****   HAL_GPIO_WritePin(VS_RST_GPIO_Port, VS_RST_Pin, 1); //VS4210 RST
1838:Src/main.c    ****  TP2824_SET_REST(1);
1839:Src/main.c    **** 
1840:Src/main.c    **** #endif
1841:Src/main.c    **** //LCDPowerON();
1842:Src/main.c    **** // SET_PCA9554PW(_COL_PW_5V,ON); 
1843:Src/main.c    **** 
1844:Src/main.c    ****   //I2CWrite(VS9988_ADDR, 0x01, 0x5A);  //reset
1845:Src/main.c    **** //  printf("\r\nVS4210 sdk2.0 Compiled %s %s !\r\n",__DATE__ , __TIME__);
1846:Src/main.c    **** // val = VXISI2CRead(0x00) ;
1847:Src/main.c    **** //  printf("VS4210 ID = 0x%02X !\r\n", (int)val );
1848:Src/main.c    **** 
1849:Src/main.c    ****   //Init_TP280x_RegSet();
1850:Src/main.c    **** 
1851:Src/main.c    ****   // RX Init
1852:Src/main.c    ****   for (i = 0 ; i < HDMI_IN_NUMBER ; i++ )
1853:Src/main.c    ****   {
1854:Src/main.c    ****       gHDMI_Index = i ;
1855:Src/main.c    ****       dbg_Printf("Init HDMI RX,Chip(%d)....\r\n",(int)i ) ;
1856:Src/main.c    ****       InitHDMIRX(0);
1857:Src/main.c    ****       HDMIRX_WriteI2C_Byte(0x89 ,0x80);
1858:Src/main.c    **** 
ARM GAS  /tmp/cc8epWVM.s 			page 34


1859:Src/main.c    **** #ifdef VICTOR_DEBUG
1860:Src/main.c    ****       val = HDMIRX_ReadI2C_Byte(0x02) ;
1861:Src/main.c    ****       dbg_Printf("IT66021 chip num=%d , 02reg=0x%02x\r\n", (int )i , (int)val ) ;
1862:Src/main.c    **** #endif
1863:Src/main.c    ****   }
1864:Src/main.c    ****   
1865:Src/main.c    **** //  dbg_Printf("Init HDMI Tx....\r\n") ;
1866:Src/main.c    ****  //  HDMI_Tx_Init();
1867:Src/main.c    **** 
1868:Src/main.c    ****    if (HDMI_IN_NUMBER == 4 )
1869:Src/main.c    ****     pVS4210_MutiWindows1.OutputMode = VS4210_1080P_MODE1 ;  // 4windows
1870:Src/main.c    ****   else
1871:Src/main.c    **** 	  #ifdef VS4210_SELECT_WIN1	//20201211-02
1872:Src/main.c    **** 	  pVS4210_MutiWindows1.OutputMode =VS4210_1080P_MODE0_w1;
1873:Src/main.c    **** 	  #else
1874:Src/main.c    ****       pVS4210_MutiWindows1.OutputMode =VS4210_1080P_MODE0_w0;/// VS4210_1080P_MODE12 ;  
1875:Src/main.c    **** 	  #endif
1876:Src/main.c    **** 
1877:Src/main.c    ****   pVS4210_MutiWindows1.AudioChannel = HDMI_AUDIO_1 ;
1878:Src/main.c    ****   pVS4210_MutiWindows1.OutputSize = _OUTPUT_1080P60 ;
1879:Src/main.c    **** 	#ifdef VS4210_SELECT_WIN1	//20201211-02
1880:Src/main.c    **** 	pVS4210_MutiWindows1.WindowMap.WMap0 = 2 ;
1881:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap1 = 1 ; //set ch2 = video2
1882:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap2 = 3 ; //set ch3 = video3
1883:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap3 = 4 ; //set ch4 = video4
1884:Src/main.c    **** 	#else
1885:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap0 = 1 ; //set ch1 = video1
1886:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap1 = 2 ; //set ch2 = video2
1887:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap2 = 3 ; //set ch3 = video3
1888:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap3 = 4 ; //set ch4 = video4
1889:Src/main.c    **** 	#endif
1890:Src/main.c    **** #if 1
1891:Src/main.c    **** //Extern OSD 20200110-01
1892:Src/main.c    **** VXOSD_UseFont_init(EXTERNOSDNUMBER ,&UserDefineFont1[0] ) ;
1893:Src/main.c    **** 
1894:Src/main.c    **** main_init();
1895:Src/main.c    **** #endif
1896:Src/main.c    **** 
1897:Src/main.c    **** #ifdef  _SUPPORT_EDID_RAM_
1898:Src/main.c    **** //interval EDID ryan@20200917
1899:Src/main.c    **** //SETIT66021EDID();
1900:Src/main.c    **** #endif
1901:Src/main.c    **** 
1902:Src/main.c    ****    Init_TP280x_RegSet();
1903:Src/main.c    **** 
1904:Src/main.c    ****    //test@start
1905:Src/main.c    **** #ifdef VICTOR_DEBUG
1906:Src/main.c    ****    val = VXISI2CRead(0x00) ;
1907:Src/main.c    ****    dbg_Printf("VS4210 chip ID = 0x%02x\r\n",(int)val) ;
1908:Src/main.c    ****    dbg_Printf("VS4210 Init. (Startting...)\r\n") ;
1909:Src/main.c    **** #endif
1910:Src/main.c    **** 
1911:Src/main.c    ****  pVS4210_MutiWindows1.DrawOSDFlg = 0x03 ;  //Enable OSD, bit1=Title, bit0 = bar
1912:Src/main.c    ****   //pVS4210_MutiWindows1.DrawOSDFlg = 0x00 ;  //Enable OSD, bit1=Title, bit0 = bar
1913:Src/main.c    ****   //pVS4210_MutiWindows1.OutputMode = VS4210_1080P_MODE1 ;  // 4windows
1914:Src/main.c    ****   //pVS4210_MutiWindows1.OutputMode = VS4210_1080P_MODE6 ;  // 1_3 windows
1915:Src/main.c    ****   //pVS4210_MutiWindows1.OutputMode = VS4210_1080P_MODE12 ;  // 4windows
ARM GAS  /tmp/cc8epWVM.s 			page 35


1916:Src/main.c    **** //  pVS4210_MutiWindows1.WindowMap.WMap0 = 1 ; //set ch1 = video1
1917:Src/main.c    **** //  pVS4210_MutiWindows1.WindowMap.WMap1 = 2 ; //set ch2 = video2
1918:Src/main.c    **** //  pVS4210_MutiWindows1.WindowMap.WMap2 = 3 ; //set ch3 = video3
1919:Src/main.c    **** //  pVS4210_MutiWindows1.WindowMap.WMap3 = 4 ; //set ch4 = video4
1920:Src/main.c    ****   //pVS4210_MutiWindows1.AudioChannel = HDMI_AUDIO_1 ;
1921:Src/main.c    ****   pVS4210_MutiWindows1.OutputSize = _OUTPUT_1080P60 ;
1922:Src/main.c    ****   //pVS4210_MutiWindows1.OutputSize = _OUTPUT_720P60 ;
1923:Src/main.c    ****   //pVS4210_MutiWindows1.DrawBoxFlg =1 ;
1924:Src/main.c    ****   pVS4210_MutiWindows1.DrawBoxFlg =0 ;
1925:Src/main.c    ****   pVS4210_MutiWindows1.DrawBoxColor= _EN_DRAWBOX_COLOR_White ;
1926:Src/main.c    ****   VXIS_fSetOsdx2(0) ;
1927:Src/main.c    **** 
1928:Src/main.c    ****   VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;
1929:Src/main.c    **** 
1930:Src/main.c    ****   if (pVS4210_MutiWindows1.DrawOSDFlg != 0)
1931:Src/main.c    ****   {
1932:Src/main.c    ****         OSD_Show_Flg = 1 ;
1933:Src/main.c    ****         Tim1_count = 0 ;
1934:Src/main.c    ****         OSDStateFlg = 1 ;
1935:Src/main.c    ****         OSDSecCount = 0 ;
1936:Src/main.c    ****   }  
1937:Src/main.c    **** 
1938:Src/main.c    **** ExOsdContent[0] = 3*  ((EXTERNOSDNUMBER *2) +1) ;
1939:Src/main.c    **** memset(&ExOsdContent[1] ,_spc , (EXTERNOSDNUMBER+1) *2 ) ;
1940:Src/main.c    **** exosdLen = 4*EXTERNOSDNUMBER + 4  ;
1941:Src/main.c    **** exosdStart = (EXTERNOSDNUMBER +1) *2 +1 ;
1942:Src/main.c    **** j = 1 ;
1943:Src/main.c    **** for (i = exosdStart ; i <= exosdLen ;i = i+2 )
1944:Src/main.c    **** {
1945:Src/main.c    **** 	ExOsdContent[i] = 0x7F + j ;
1946:Src/main.c    **** 	ExOsdContent[i+1] = _spc ;
1947:Src/main.c    **** 	j++ ;
1948:Src/main.c    **** }
1949:Src/main.c    **** memset(&ExOsdContent[4*EXTERNOSDNUMBER +3] ,_spc ,EXTERNOSDNUMBER *2 +1   ) ;
1950:Src/main.c    ****   exosdLen = EXTERNOSDNUMBER *2  ;
1951:Src/main.c    **** 
1952:Src/main.c    **** Audio_Sel(HDMI_AUDIO_1) ;
1953:Src/main.c    **** //test@end
1954:Src/main.c    **** 
1955:Src/main.c    **** /*
1956:Src/main.c    **** //xxxxx 2013-0801
1957:Src/main.c    **** IT6602HPDCtrl(1,0);	// HDMI port , set HPD = 0
1958:Src/main.c    **** //xxxxx
1959:Src/main.c    **** 
1960:Src/main.c    ****     delay1ms(1000);	//for power sequence
1961:Src/main.c    **** 
1962:Src/main.c    **** IT6602_fsm_init();
1963:Src/main.c    **** */
1964:Src/main.c    **** 
1965:Src/main.c    **** 
1966:Src/main.c    **** #if 0
1967:Src/main.c    **** //PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON);
1968:Src/main.c    **** 
1969:Src/main.c    **** //load eeprom data
1970:Src/main.c    **** //LoadEEPROM();
1971:Src/main.c    **** 
1972:Src/main.c    **** //RX
ARM GAS  /tmp/cc8epWVM.s 			page 36


1973:Src/main.c    ****   ManVidRes = RES1920X1080 ; //0x01
1974:Src/main.c    **** //Init_TP280x_RegSet();
1975:Src/main.c    **** 
1976:Src/main.c    **** //TX
1977:Src/main.c    ****   //VS9988_Set_Format(gbVXIS_InputMode, gbVXIS_OuputModeflg, gbVXIS_OuputChannel  )	;
1978:Src/main.c    ****   //gbVXIS_InputMode = _OSD_NO_SINGLE ;
1979:Src/main.c    ****   //VS9988_BlueScreen() ;
1980:Src/main.c    ****   //VXOSD_SetOnOff(0) ;
1981:Src/main.c    **** 
1982:Src/main.c    ****   //HDMI_Tx_Init() ;
1983:Src/main.c    **** 
1984:Src/main.c    ****   //VS4210 SW Reset@start
1985:Src/main.c    ****     VXISI2CWrite( 0x01 , 0x5A); //Reset
1986:Src/main.c    **** 
1987:Src/main.c    **** 
1988:Src/main.c    ****   //VS4210 SW Reset@end
1989:Src/main.c    ****   //VS4210_SwitchChip(0x40, 0 ) ;c8 cc8
1990:Src/main.c    ****   pVS4210_JointKind1.AudioChannel = HDMI_AUDIO_NONE ;
1991:Src/main.c    ****   pVS4210_JointKind1.DrawBoxFlg =1 ;
1992:Src/main.c    ****   pVS4210_JointKind1.DrawOSDFlg =0x03 ; //bits 0 ,1
1993:Src/main.c    ****   //pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w0 ;
1994:Src/main.c    ****  // pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE1 ;
1995:Src/main.c    **** pVS4210_JointKind1.OutputMode =VS4210_1080P_MODE0_w0;/* VS4210_1080P_MODE1 ;*/
1996:Src/main.c    ****   pVS4210_JointKind1.OutputSize = _OUTPUT_1080P60 ;///*_OUTPUT_800x480;*/
1997:Src/main.c    **** 
1998:Src/main.c    **** //LCDPowerON();
1999:Src/main.c    **** 
2000:Src/main.c    **** //VS4210_Rx_NoSignal(3) ;
2001:Src/main.c    **** 
2002:Src/main.c    ****  setloopoutmode(0) ;
2003:Src/main.c    **** // SetNowMode();	
2004:Src/main.c    **** 
2005:Src/main.c    ****     VS4210_Rx_NoSignal(0) ;
2006:Src/main.c    ****   VS4210_Rx_NoSignal(1) ;
2007:Src/main.c    ****   VS4210_Rx_NoSignal(2) ;
2008:Src/main.c    ****   VS4210_Rx_NoSignal(3) ;
2009:Src/main.c    ****   
2010:Src/main.c    ****   #endif
2011:Src/main.c    **** // LCDPowerON();
2012:Src/main.c    **** // SetNowMode();  
2013:Src/main.c    ****   //void VS4210_Rx_NoSignal(tByte ch )
2014:Src/main.c    **** 
2015:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim3) ;
2016:Src/main.c    ****   /* USER CODE END 2 */
2017:Src/main.c    ****  
2018:Src/main.c    ****   /* Infinite loop */
2019:Src/main.c    ****   /* USER CODE BEGIN WHILE */
2020:Src/main.c    **** 
2021:Src/main.c    **** //SetNowMode();  
2022:Src/main.c    **** 
2023:Src/main.c    ****  // 	LoadVideoData();
2024:Src/main.c    **** 
2025:Src/main.c    **** //	  AudioMute(OFF);
2026:Src/main.c    **** 	//  LCDPowerON();
2027:Src/main.c    **** 
2028:Src/main.c    **** //	SET_VX8812_SD_Video_Out(_NTSC);
2029:Src/main.c    **** //	SET_VX8812_SD_Video_Out(_PAL);
ARM GAS  /tmp/cc8epWVM.s 			page 37


2030:Src/main.c    **** 
2031:Src/main.c    **** //  Printf("\r\nMain Loop...");
2032:Src/main.c    ****   printf("\r\nMain Loop...");
2033:Src/main.c    **** 
2034:Src/main.c    ****   //VXISI2CWrite(0x08,0x21);
2035:Src/main.c    ****   //VXISI2CWrite(0x0A,0x21);
2036:Src/main.c    ****   //VXISI2CWrite(0x74,0x02);
2037:Src/main.c    ****   //VXISI2CWrite(0x82,0x40);
2038:Src/main.c    **** //  VS4210_FULL88init2(VS4210_hdmi1080P_1080P_mode0_w0_88param);
2039:Src/main.c    **** 
2040:Src/main.c    ****   while (1)
2041:Src/main.c    ****   {
2042:Src/main.c    ****     /* USER CODE END WHILE */
2043:Src/main.c    **** 
2044:Src/main.c    **** //	if(PowerFlag==ON)///power offf
2045:Src/main.c    **** 	 main_loop();
2046:Src/main.c    **** 	
2047:Src/main.c    **** //	WaitPowerOn();
2048:Src/main.c    **** 
2049:Src/main.c    **** 	//user_pwm_setvalue(500);
2050:Src/main.c    **** 
2051:Src/main.c    ****     /* USER CODE BEGIN 3 */
2052:Src/main.c    **** 
2053:Src/main.c    **** 
2054:Src/main.c    **** 
2055:Src/main.c    **** 
2056:Src/main.c    ****   }
2057:Src/main.c    ****   /* USER CODE END 3 */
2058:Src/main.c    **** }
2059:Src/main.c    **** 
2060:Src/main.c    **** void main_loop(void)
2061:Src/main.c    **** {
2062:Src/main.c    **** 
2063:Src/main.c    **** //BYTE val;
2064:Src/main.c    **** //USHORT loopinterval;
2065:Src/main.c    **** 
2066:Src/main.c    **** //VXISI2CWrite(0xf0,0xb5);
2067:Src/main.c    **** 
2068:Src/main.c    **** while(1)
2069:Src/main.c    **** {
2070:Src/main.c    **** 
2071:Src/main.c    **** #if (_DEBUG_MESSAGE_Monitor==ON)
2072:Src/main.c    **** 	if(AccessEnable==1)
2073:Src/main.c    **** 	#endif
2074:Src/main.c    **** {
2075:Src/main.c    **** 	HDMI_VideoModeDetect() ;
2076:Src/main.c    **** 	HDMI_AudioModeDetect() ;
2077:Src/main.c    **** 
2078:Src/main.c    **** 	TxCount++ ;
2079:Src/main.c    **** 	if (TxCount > 10 )
2080:Src/main.c    **** 	{
2081:Src/main.c    **** 		TxCount = 0 ;
2082:Src/main.c    **** 		HDMITX_DevLoopProc() ;
2083:Src/main.c    **** 	}
2084:Src/main.c    **** 	
2085:Src/main.c    **** //	GetRS232_CMD();
2086:Src/main.c    **** 	//getmcukeystate() ;
ARM GAS  /tmp/cc8epWVM.s 			page 38


2087:Src/main.c    **** 	/*
2088:Src/main.c    **** 	if (IR_END_Flg ==1 )
2089:Src/main.c    **** 	{
2090:Src/main.c    **** 		IR_END_Flg = 0 ;
2091:Src/main.c    **** 		if (u8IRcode == u8IRCheckcode )
2092:Src/main.c    **** 		{
2093:Src/main.c    **** 			dbg_Printf("Vendor=0x%04x,IR=0x%02x\r\n",(int) u16Vendor,(int) u8IRcode) ;
2094:Src/main.c    **** 			if (u16Vendor == IR_Vendor_Code_)
2095:Src/main.c    **** 			{
2096:Src/main.c    **** 				ir_process(u8IRcode) ;
2097:Src/main.c    **** 				u16Vendor =0 ;
2098:Src/main.c    **** 			}
2099:Src/main.c    **** 		}
2100:Src/main.c    **** 	}
2101:Src/main.c    **** 	*/
2102:Src/main.c    **** 
2103:Src/main.c    **** 	msleep(10) ;
2104:Src/main.c    **** 
2105:Src/main.c    **** 	   gMode0LoopCount++ ;
2106:Src/main.c    **** 	   if (gMode0LoopCount > 100 )
2107:Src/main.c    **** 	   {
2108:Src/main.c    **** 		   gMode0LoopCount = 0 ;
2109:Src/main.c    **** 		   OSDSecCount = OSDSecCount +1 ;
2110:Src/main.c    **** 	   }
2111:Src/main.c    **** 	
2112:Src/main.c    **** 	   if (OSDPreSecCount != OSDSecCount)
2113:Src/main.c    **** 	   {
2114:Src/main.c    **** 		   OSDPreSecCount = OSDSecCount ;
2115:Src/main.c    **** 		   if (gMode0LoopFlg == 1)
2116:Src/main.c    **** 		   {
2117:Src/main.c    **** 			   gMode0LoopSecCount ++ ;
2118:Src/main.c    **** 			   if (gMode0LoopSecCount > gMode0LoopSecCmpVal)
2119:Src/main.c    **** 			   {
2120:Src/main.c    **** 				   gMode0LoopSecCount = 0 ;
2121:Src/main.c    **** 				   pVS4210_MutiWindows1.OutputMode = VS4210_FULL_MODE0 ;
2122:Src/main.c    **** 				   if (pVS4210_MutiWindows1.WindowMap.WMap0 < 4)
2123:Src/main.c    **** 				   {
2124:Src/main.c    **** 					   pVS4210_MutiWindows1.WindowMap.WMap0 = pVS4210_MutiWindows1.WindowMap.WMap0 +1 ;
2125:Src/main.c    **** 				   }
2126:Src/main.c    **** 				   else {
2127:Src/main.c    **** 					   pVS4210_MutiWindows1.WindowMap.WMap0 = 1 ;
2128:Src/main.c    **** 				   }
2129:Src/main.c    **** 				   dbg_Printf("LOOP CH=%d,SMP Sec=%d\r\n",pVS4210_MutiWindows1.WindowMap.WMap0, gMode0LoopSecCm
2130:Src/main.c    **** 				   VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;
2131:Src/main.c    **** 				   OSDSecCount = 0 ;
2132:Src/main.c    **** 			   }
2133:Src/main.c    **** 		   }
2134:Src/main.c    **** 	
2135:Src/main.c    **** 		   if (gMode0LoopFlg == 1)
2136:Src/main.c    **** 		   {
2137:Src/main.c    **** 		    dbg_Printf("Loop CH=%d,SecCount=%d\r\n",pVS4210_MutiWindows1.WindowMap.WMap0, OSDSecCount)  ;
2138:Src/main.c    **** 		   }
2139:Src/main.c    **** 		   else
2140:Src/main.c    **** 		   {
2141:Src/main.c    **** 		  //dbg_Printf("OSDSecCount=%d\r\n", OSDSecCount)  ;
2142:Src/main.c    **** 		   }
2143:Src/main.c    **** 	
ARM GAS  /tmp/cc8epWVM.s 			page 39


2144:Src/main.c    **** 		   if (OSDStateFlg == 1 )
2145:Src/main.c    **** 		   {
2146:Src/main.c    **** 			   if (OSDSecCount >= OSD_OFF_SEC )
2147:Src/main.c    **** 			   {
2148:Src/main.c    **** 				   OSDSecCount = 0 ;
2149:Src/main.c    **** 				   OSDStateFlg = 0 ;
2150:Src/main.c    **** 				   OSD_Clear_All();
2151:Src/main.c    **** 				   ////VXIS_fSetContentOsdOnOff(0) ;
2152:Src/main.c    **** 			   }
2153:Src/main.c    **** 		   }
2154:Src/main.c    **** 
2155:Src/main.c    **** 		if(VXISI2CRead(0x32)==0 )///CONTRAST
2156:Src/main.c    **** 			VXISI2CWrite(0x32,0x80);
2157:Src/main.c    **** 		   
2158:Src/main.c    **** 	   }
2159:Src/main.c    **** 
2160:Src/main.c    **** 
2161:Src/main.c    **** 	EQ_Detect();
2162:Src/main.c    **** 	
2163:Src/main.c    **** #if (_Source_Switch==ON)
2164:Src/main.c    **** 
2165:Src/main.c    **** 	#if (_Only_AHD_Mode==ON)
2166:Src/main.c    **** 		if((SelectInputMode!=1))
2167:Src/main.c    **** 		{
2168:Src/main.c    **** 			msleep(50) ;
2169:Src/main.c    **** 
2170:Src/main.c    **** 			if((SelectInputMode!=1))
2171:Src/main.c    **** 				{
2172:Src/main.c    **** 				SelectInputMode=1;
2173:Src/main.c    **** 
2174:Src/main.c    **** 					HS_Select_Win(1);
2175:Src/main.c    **** 				}
2176:Src/main.c    **** 		}	
2177:Src/main.c    **** 
2178:Src/main.c    **** 	#else
2179:Src/main.c    **** 	CheckSelectInputMode=HDMI_SELECT_GET();
2180:Src/main.c    **** 		if((CheckSelectInputMode!=SelectInputMode)/*&&(BOOT_ISSUE==0)*/)
2181:Src/main.c    **** 		{
2182:Src/main.c    **** 			msleep(50) ;
2183:Src/main.c    **** 			CheckSelectInputMode=HDMI_SELECT_GET();
2184:Src/main.c    **** 
2185:Src/main.c    **** 			if((CheckSelectInputMode!=SelectInputMode)/*&&(BOOT_ISSUE==0)*/)
2186:Src/main.c    **** 				{
2187:Src/main.c    **** 				SelectInputMode=CheckSelectInputMode;
2188:Src/main.c    **** 
2189:Src/main.c    **** 			//	HS_Select_Win(HDMI_SELECT_GET());
2190:Src/main.c    **** 
2191:Src/main.c    **** 				if(SelectInputMode==1)
2192:Src/main.c    **** 					HS_Select_Win(1);
2193:Src/main.c    **** 				else
2194:Src/main.c    **** 				HS_Select_Win(0);
2195:Src/main.c    **** 				}
2196:Src/main.c    **** 		}	
2197:Src/main.c    **** 
2198:Src/main.c    **** 		
2199:Src/main.c    **** 	#endif
2200:Src/main.c    **** 
ARM GAS  /tmp/cc8epWVM.s 			page 40


2201:Src/main.c    **** #endif
2202:Src/main.c    **** }
2203:Src/main.c    **** 
2204:Src/main.c    **** 	#if (_DEBUG_MESSAGE_Monitor==ON)
2205:Src/main.c    **** 	do {	//20201211-04
2206:Src/main.c    **** 	while( RS_ready())	Monitor();	
2207:Src/main.c    **** 	}while(AccessEnable == 0);
2208:Src/main.c    **** 	#endif
2209:Src/main.c    **** 
2210:Src/main.c    **** while( RS2_ready())     TOAReceivePaser();
2211:Src/main.c    **** 		
2212:Src/main.c    **** 	      SysTimerHandler();
2213:Src/main.c    **** 
2214:Src/main.c    **** 		Get_2824cIrq();//check tp2824 COC
2215:Src/main.c    **** 
2216:Src/main.c    **** 
2217:Src/main.c    **** 
2218:Src/main.c    **** #if 0
2219:Src/main.c    **** 		  loopinterval += getloopTicCount();
2220:Src/main.c    **** 		  
2221:Src/main.c    **** 					  ///////////////////////////
2222:Src/main.c    **** 					  // sys main flow
2223:Src/main.c    **** 					  ///////////////////////////
2224:Src/main.c    **** 					  if( loopinterval >=MS_LOOP) //execute once each 50m second
2225:Src/main.c    **** 					  {
2226:Src/main.c    **** 				    //printf("loopinterval\n");
2227:Src/main.c    **** 		  
2228:Src/main.c    **** 					   loopinterval =0;
2229:Src/main.c    **** 				//	 IT6602_fsm();
2230:Src/main.c    **** 					 }
2231:Src/main.c    **** #endif	
2232:Src/main.c    **** 	/*
2233:Src/main.c    **** 		CheckKeyIn();
2234:Src/main.c    **** 
2235:Src/main.c    **** 	CheckTouchP();
2236:Src/main.c    **** 	
2237:Src/main.c    **** 	  EQ_Detect();	 
2238:Src/main.c    **** 
2239:Src/main.c    **** 	if( GT9147_Scan(1)==_TOUCH_COUNT_4 ) break;		
2240:Src/main.c    **** 	
2241:Src/main.c    **** 		  val=CheckTrigger();
2242:Src/main.c    **** 		  TriggerHandler(val);
2243:Src/main.c    **** 
2244:Src/main.c    **** 	if( !CheckKeyIn() ) break;			// POWEROFF
2245:Src/main.c    **** 	*/
2246:Src/main.c    **** 	
2247:Src/main.c    **** 	}
2248:Src/main.c    **** 
2249:Src/main.c    **** }
2250:Src/main.c    **** 
2251:Src/main.c    **** /* static*/ void VS4210_FULL88init2( tcByte *Valn )
2252:Src/main.c    ****  {
2253:Src/main.c    **** 	 tByte i ;
2254:Src/main.c    **** 	 tByte addr ;
2255:Src/main.c    **** 	 tByte i2cVal ;
2256:Src/main.c    **** 	 tcByte *Addrn ; 
2257:Src/main.c    **** 	 Addrn = &VS4210_Addr_88param[0] ; 
ARM GAS  /tmp/cc8epWVM.s 			page 41


2258:Src/main.c    ****  
2259:Src/main.c    **** 	 for (i=0 ; i< VS4210_INIT_NUMBER ; i++)
2260:Src/main.c    **** 	 {
2261:Src/main.c    **** 		 addr	= Addrn[i] ;
2262:Src/main.c    **** 		 i2cVal = Valn[i];
2263:Src/main.c    **** 		 VXISI2CWrite( addr,i2cVal);
2264:Src/main.c    **** 	 }
2265:Src/main.c    ****  }
2266:Src/main.c    **** 
2267:Src/main.c    **** void TP_bt1120_1080P_1080P_mode0_w0(void)
2268:Src/main.c    **** {
2269:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table 1080P... ");
2270:Src/main.c    **** #if 1
2271:Src/main.c    **** 
2272:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_1080P_1080P_mode0_w0_88param);
2273:Src/main.c    **** #else
2274:Src/main.c    **** 
2275:Src/main.c    **** VXISI2CWrite(0x00,0x42); 
2276:Src/main.c    **** VXISI2CWrite(0x01,0x00); 
2277:Src/main.c    **** VXISI2CWrite(0x02,0x00); 
2278:Src/main.c    **** VXISI2CWrite(0x03,0x75); 
2279:Src/main.c    **** VXISI2CWrite(0x04,0x18); 
2280:Src/main.c    **** VXISI2CWrite(0x05,0x80); 
2281:Src/main.c    **** VXISI2CWrite(0x06,0x20); 
2282:Src/main.c    **** VXISI2CWrite(0x07,0x0C); 
2283:Src/main.c    **** VXISI2CWrite(0x08,0x40); 
2284:Src/main.c    **** VXISI2CWrite(0x09,0x0A); 
2285:Src/main.c    **** VXISI2CWrite(0x0A,0x40); 
2286:Src/main.c    **** VXISI2CWrite(0x0B,0x0A); 
2287:Src/main.c    **** VXISI2CWrite(0x0C,0x00); 
2288:Src/main.c    **** VXISI2CWrite(0x0D,0x20); 
2289:Src/main.c    **** VXISI2CWrite(0x0E,0x10); 
2290:Src/main.c    **** VXISI2CWrite(0x0F,0x00); 
2291:Src/main.c    **** VXISI2CWrite(0x10,0x81); 
2292:Src/main.c    **** VXISI2CWrite(0x11,0x82); 
2293:Src/main.c    **** VXISI2CWrite(0x12,0x74); 
2294:Src/main.c    **** VXISI2CWrite(0x13,0x80); 
2295:Src/main.c    **** VXISI2CWrite(0x14,0x38); 
2296:Src/main.c    **** VXISI2CWrite(0x15,0x78); 
2297:Src/main.c    **** VXISI2CWrite(0x16,0xFE); 
2298:Src/main.c    **** VXISI2CWrite(0x17,0x00); 
2299:Src/main.c    **** VXISI2CWrite(0x18,0xC0); 
2300:Src/main.c    **** VXISI2CWrite(0x19,0x01); 
2301:Src/main.c    **** VXISI2CWrite(0x1A,0x20); 
2302:Src/main.c    **** VXISI2CWrite(0x1B,0x30); 
2303:Src/main.c    **** VXISI2CWrite(0x1C,0x00); 
2304:Src/main.c    **** VXISI2CWrite(0x1D,0x00); 
2305:Src/main.c    **** VXISI2CWrite(0x1E,0x20); 
2306:Src/main.c    **** VXISI2CWrite(0x1F,0xA4); 
2307:Src/main.c    **** VXISI2CWrite(0x20,0x50); 
2308:Src/main.c    **** VXISI2CWrite(0x21,0xE2); 
2309:Src/main.c    **** VXISI2CWrite(0x22,0x87); 
2310:Src/main.c    **** VXISI2CWrite(0x23,0x98); 
2311:Src/main.c    **** VXISI2CWrite(0x24,0x80); 
2312:Src/main.c    **** VXISI2CWrite(0x25,0x44); 
2313:Src/main.c    **** VXISI2CWrite(0x26,0x65); 
2314:Src/main.c    **** VXISI2CWrite(0x27,0x38); 
ARM GAS  /tmp/cc8epWVM.s 			page 42


2315:Src/main.c    **** VXISI2CWrite(0x28,0xF0); 
2316:Src/main.c    **** VXISI2CWrite(0x29,0x00); 
2317:Src/main.c    **** VXISI2CWrite(0x2A,0x00); 
2318:Src/main.c    **** VXISI2CWrite(0x2B,0x11); 
2319:Src/main.c    **** VXISI2CWrite(0x2C,0x00); 
2320:Src/main.c    **** VXISI2CWrite(0x2D,0x00); 
2321:Src/main.c    **** VXISI2CWrite(0x2E,0x47); 
2322:Src/main.c    **** VXISI2CWrite(0x2F,0x80); 
2323:Src/main.c    **** VXISI2CWrite(0x30,0x38); 
2324:Src/main.c    **** VXISI2CWrite(0x31,0x80); 
2325:Src/main.c    **** VXISI2CWrite(0x32,0x80); 
2326:Src/main.c    **** VXISI2CWrite(0x33,0x80); 
2327:Src/main.c    **** VXISI2CWrite(0x34,0xA0); 
2328:Src/main.c    **** VXISI2CWrite(0x35,0x18); 
2329:Src/main.c    **** VXISI2CWrite(0x36,0x46); 
2330:Src/main.c    **** VXISI2CWrite(0x37,0x64); 
2331:Src/main.c    **** VXISI2CWrite(0x38,0x00); 
2332:Src/main.c    **** VXISI2CWrite(0x39,0xFF); 
2333:Src/main.c    **** VXISI2CWrite(0x3A,0x00); 
2334:Src/main.c    **** VXISI2CWrite(0x3B,0x80); 
2335:Src/main.c    **** VXISI2CWrite(0x3C,0x80); 
2336:Src/main.c    **** VXISI2CWrite(0x3D,0x80); 
2337:Src/main.c    **** VXISI2CWrite(0x3E,0x80); 
2338:Src/main.c    **** VXISI2CWrite(0x3F,0x80); 
2339:Src/main.c    **** //VXISI2CWrite(0xVXISI2C)
2340:Src/main.c    **** VXISI2CWrite(0x41,0x60); 
2341:Src/main.c    **** VXISI2CWrite(0x42,0x5F); 
2342:Src/main.c    **** VXISI2CWrite(0x43,0x37); 
2343:Src/main.c    **** VXISI2CWrite(0x44,0x14); 
2344:Src/main.c    **** VXISI2CWrite(0x45,0x00); 
2345:Src/main.c    **** VXISI2CWrite(0x46,0x00); 
2346:Src/main.c    **** VXISI2CWrite(0x47,0x00); 
2347:Src/main.c    **** VXISI2CWrite(0x48,0x00); 
2348:Src/main.c    **** VXISI2CWrite(0x49,0x00); 
2349:Src/main.c    **** VXISI2CWrite(0x4A,0x00); 
2350:Src/main.c    **** VXISI2CWrite(0x4B,0x20); 
2351:Src/main.c    **** VXISI2CWrite(0x4C,0x00); 
2352:Src/main.c    **** VXISI2CWrite(0x4D,0x00); 
2353:Src/main.c    **** VXISI2CWrite(0x4E,0x00); 
2354:Src/main.c    **** VXISI2CWrite(0x4F,0x7F); 
2355:Src/main.c    **** VXISI2CWrite(0x50,0x20); 
2356:Src/main.c    **** VXISI2CWrite(0x51,0x05); 
2357:Src/main.c    **** VXISI2CWrite(0x52,0x00); 
2358:Src/main.c    **** VXISI2CWrite(0x53,0x06); 
2359:Src/main.c    **** VXISI2CWrite(0x54,0x00); 
2360:Src/main.c    **** VXISI2CWrite(0x55,0xB4); 
2361:Src/main.c    **** VXISI2CWrite(0x56,0x3D); 
2362:Src/main.c    **** VXISI2CWrite(0x57,0x04); 
2363:Src/main.c    **** VXISI2CWrite(0x58,0x00); 
2364:Src/main.c    **** VXISI2CWrite(0x59,0x08); 
2365:Src/main.c    **** VXISI2CWrite(0x5A,0x10); 
2366:Src/main.c    **** VXISI2CWrite(0x5B,0x00); 
2367:Src/main.c    **** VXISI2CWrite(0x5C,0x68); 
2368:Src/main.c    **** VXISI2CWrite(0x5D,0x40); 
2369:Src/main.c    **** VXISI2CWrite(0x5E,0x0A); 
2370:Src/main.c    **** VXISI2CWrite(0x5F,0x00); 
2371:Src/main.c    **** VXISI2CWrite(0x60,0xB4); 
ARM GAS  /tmp/cc8epWVM.s 			page 43


2372:Src/main.c    **** VXISI2CWrite(0x61,0x51); 
2373:Src/main.c    **** VXISI2CWrite(0x62,0x33); 
2374:Src/main.c    **** VXISI2CWrite(0x63,0x01); 
2375:Src/main.c    **** VXISI2CWrite(0x64,0xFF); 
2376:Src/main.c    **** VXISI2CWrite(0x65,0x01); 
2377:Src/main.c    **** VXISI2CWrite(0x66,0xFF); 
2378:Src/main.c    **** VXISI2CWrite(0x67,0x89); 
2379:Src/main.c    **** VXISI2CWrite(0x68,0xAB); 
2380:Src/main.c    **** VXISI2CWrite(0x69,0x88); 
2381:Src/main.c    **** VXISI2CWrite(0x6A,0x6E); 
2382:Src/main.c    **** VXISI2CWrite(0x6B,0x6E); 
2383:Src/main.c    **** VXISI2CWrite(0x6C,0x6E); 
2384:Src/main.c    **** VXISI2CWrite(0x6D,0x00); 
2385:Src/main.c    **** VXISI2CWrite(0x6E,0x00); 
2386:Src/main.c    **** VXISI2CWrite(0x6F,0x00); 
2387:Src/main.c    **** VXISI2CWrite(0x70,0x00); 
2388:Src/main.c    **** VXISI2CWrite(0x71,0x00); 
2389:Src/main.c    **** VXISI2CWrite(0x72,0x00); 
2390:Src/main.c    **** VXISI2CWrite(0x73,0x00); 
2391:Src/main.c    **** VXISI2CWrite(0x74,0x06); 
2392:Src/main.c    **** VXISI2CWrite(0x75,0xFF); 
2393:Src/main.c    **** VXISI2CWrite(0x76,0xFF); 
2394:Src/main.c    **** VXISI2CWrite(0x77,0xFF); 
2395:Src/main.c    **** VXISI2CWrite(0x78,0xFF); 
2396:Src/main.c    **** VXISI2CWrite(0x79,0xFF); 
2397:Src/main.c    **** VXISI2CWrite(0x7A,0xFF); 
2398:Src/main.c    **** VXISI2CWrite(0x7B,0xFF); 
2399:Src/main.c    **** VXISI2CWrite(0x7C,0xFF); 
2400:Src/main.c    **** VXISI2CWrite(0x7D,0xF0); 
2401:Src/main.c    **** VXISI2CWrite(0x7E,0x80); 
2402:Src/main.c    **** VXISI2CWrite(0x7F,0x00); 
2403:Src/main.c    **** VXISI2CWrite(0x80,0x01); 
2404:Src/main.c    **** VXISI2CWrite(0x81,0x15); 
2405:Src/main.c    **** VXISI2CWrite(0x82,0x40); 
2406:Src/main.c    **** VXISI2CWrite(0x83,0x2D); 
2407:Src/main.c    **** VXISI2CWrite(0x84,0x57); 
2408:Src/main.c    **** VXISI2CWrite(0x85,0xFD); 
2409:Src/main.c    **** VXISI2CWrite(0x86,0x00); 
2410:Src/main.c    **** VXISI2CWrite(0x87,0x00); 
2411:Src/main.c    **** VXISI2CWrite(0x88,0x00); 
2412:Src/main.c    **** VXISI2CWrite(0x89,0x00); 
2413:Src/main.c    **** VXISI2CWrite(0x8A,0x00); 
2414:Src/main.c    **** VXISI2CWrite(0x8B,0x7E); 
2415:Src/main.c    **** VXISI2CWrite(0x8C,0x03); 
2416:Src/main.c    **** VXISI2CWrite(0x8D,0x17); 
2417:Src/main.c    **** VXISI2CWrite(0x8E,0x8C); 
2418:Src/main.c    **** VXISI2CWrite(0x8F,0x00); 
2419:Src/main.c    **** VXISI2CWrite(0x90,0xCC); 
2420:Src/main.c    **** VXISI2CWrite(0x91,0x41); 
2421:Src/main.c    **** VXISI2CWrite(0x92,0xC4); 
2422:Src/main.c    **** VXISI2CWrite(0x93,0x84); 
2423:Src/main.c    **** VXISI2CWrite(0x94,0x98); 
2424:Src/main.c    **** VXISI2CWrite(0x95,0x80); 
2425:Src/main.c    **** VXISI2CWrite(0x96,0x65); 
2426:Src/main.c    **** VXISI2CWrite(0x97,0x70); 
2427:Src/main.c    **** VXISI2CWrite(0x98,0x29); 
2428:Src/main.c    **** VXISI2CWrite(0x99,0x90); 
ARM GAS  /tmp/cc8epWVM.s 			page 44


2429:Src/main.c    **** VXISI2CWrite(0x9A,0x80); 
2430:Src/main.c    **** VXISI2CWrite(0x9B,0x04); 
2431:Src/main.c    **** VXISI2CWrite(0x9C,0x00); 
2432:Src/main.c    **** VXISI2CWrite(0x9D,0x00); 
2433:Src/main.c    **** VXISI2CWrite(0x9E,0x04); 
2434:Src/main.c    **** VXISI2CWrite(0x9F,0x65); 
2435:Src/main.c    **** VXISI2CWrite(0xA0,0x80); 
2436:Src/main.c    **** VXISI2CWrite(0xA1,0xD8); 
2437:Src/main.c    **** VXISI2CWrite(0xA2,0x98); 
2438:Src/main.c    **** VXISI2CWrite(0xA3,0x87); 
2439:Src/main.c    **** VXISI2CWrite(0xA4,0x00); 
2440:Src/main.c    **** VXISI2CWrite(0xA5,0x80); 
2441:Src/main.c    **** VXISI2CWrite(0xA6,0x00); 
2442:Src/main.c    **** VXISI2CWrite(0xA7,0x70); 
2443:Src/main.c    **** VXISI2CWrite(0xA8,0x40); 
2444:Src/main.c    **** VXISI2CWrite(0xA9,0x1E); 
2445:Src/main.c    **** VXISI2CWrite(0xAA,0x2C); 
2446:Src/main.c    **** VXISI2CWrite(0xAB,0x00); 
2447:Src/main.c    **** VXISI2CWrite(0xAC,0x90); 
2448:Src/main.c    **** VXISI2CWrite(0xAD,0x65); 
2449:Src/main.c    **** VXISI2CWrite(0xAE,0x65); 
2450:Src/main.c    **** VXISI2CWrite(0xAF,0x99); 
2451:Src/main.c    **** VXISI2CWrite(0xB0,0x00); 
2452:Src/main.c    **** VXISI2CWrite(0xB1,0x00); 
2453:Src/main.c    **** VXISI2CWrite(0xB2,0x00); 
2454:Src/main.c    **** VXISI2CWrite(0xB3,0x00); 
2455:Src/main.c    **** VXISI2CWrite(0xB4,0x00); 
2456:Src/main.c    **** VXISI2CWrite(0xB5,0x00); 
2457:Src/main.c    **** VXISI2CWrite(0xB6,0x00); 
2458:Src/main.c    **** VXISI2CWrite(0xB7,0x00); 
2459:Src/main.c    **** VXISI2CWrite(0xB8,0x80); 
2460:Src/main.c    **** VXISI2CWrite(0xB9,0x00); 
2461:Src/main.c    **** VXISI2CWrite(0xBA,0x01); 
2462:Src/main.c    **** VXISI2CWrite(0xBB,0x00); 
2463:Src/main.c    **** VXISI2CWrite(0xBC,0x90); 
2464:Src/main.c    **** VXISI2CWrite(0xBD,0x01); 
2465:Src/main.c    **** VXISI2CWrite(0xBE,0x2C); 
2466:Src/main.c    **** VXISI2CWrite(0xBF,0x00); 
2467:Src/main.c    **** VXISI2CWrite(0xC0,0x00); 
2468:Src/main.c    **** VXISI2CWrite(0xC1,0x20); 
2469:Src/main.c    **** VXISI2CWrite(0xC2,0x20); 
2470:Src/main.c    **** VXISI2CWrite(0xC3,0x20); 
2471:Src/main.c    **** VXISI2CWrite(0xC4,0x20); 
2472:Src/main.c    **** VXISI2CWrite(0xC5,0x20); 
2473:Src/main.c    **** VXISI2CWrite(0xC6,0x00); 
2474:Src/main.c    **** VXISI2CWrite(0xC7,0x00); 
2475:Src/main.c    **** VXISI2CWrite(0xC8,0x00); 
2476:Src/main.c    **** VXISI2CWrite(0xC9,0x00); 
2477:Src/main.c    **** VXISI2CWrite(0xCA,0x00); 
2478:Src/main.c    **** VXISI2CWrite(0xCB,0x00); 
2479:Src/main.c    **** VXISI2CWrite(0xCC,0x00); 
2480:Src/main.c    **** VXISI2CWrite(0xCD,0x00); 
2481:Src/main.c    **** VXISI2CWrite(0xCE,0x00); 
2482:Src/main.c    **** VXISI2CWrite(0xCF,0x00); 
2483:Src/main.c    **** VXISI2CWrite(0xD0,0xFF); 
2484:Src/main.c    **** VXISI2CWrite(0xD1,0x3F); 
2485:Src/main.c    **** VXISI2CWrite(0xD2,0xC2); 
ARM GAS  /tmp/cc8epWVM.s 			page 45


2486:Src/main.c    **** VXISI2CWrite(0xD3,0x3F); 
2487:Src/main.c    **** VXISI2CWrite(0xD4,0x00); 
2488:Src/main.c    **** VXISI2CWrite(0xD5,0x00); 
2489:Src/main.c    **** VXISI2CWrite(0xD6,0x00); 
2490:Src/main.c    **** VXISI2CWrite(0xD7,0x0F); 
2491:Src/main.c    **** VXISI2CWrite(0xD8,0x00); 
2492:Src/main.c    **** VXISI2CWrite(0xD9,0x00); 
2493:Src/main.c    **** VXISI2CWrite(0xDA,0x00); 
2494:Src/main.c    **** VXISI2CWrite(0xDB,0x00); 
2495:Src/main.c    **** VXISI2CWrite(0xDC,0x77); 
2496:Src/main.c    **** VXISI2CWrite(0xDD,0x01); 
2497:Src/main.c    **** VXISI2CWrite(0xDE,0x5F); 
2498:Src/main.c    **** VXISI2CWrite(0xDF,0x96); 
2499:Src/main.c    **** VXISI2CWrite(0xE0,0x00); 
2500:Src/main.c    **** VXISI2CWrite(0xE1,0x00); 
2501:Src/main.c    **** VXISI2CWrite(0xE2,0x00); 
2502:Src/main.c    **** VXISI2CWrite(0xE3,0x47); 
2503:Src/main.c    **** VXISI2CWrite(0xE4,0x3C); 
2504:Src/main.c    **** VXISI2CWrite(0xE5,0x80); 
2505:Src/main.c    **** VXISI2CWrite(0xE6,0x00); 
2506:Src/main.c    **** VXISI2CWrite(0xE7,0x00); 
2507:Src/main.c    **** VXISI2CWrite(0xE8,0x00); 
2508:Src/main.c    **** VXISI2CWrite(0xE9,0x00); 
2509:Src/main.c    **** VXISI2CWrite(0xEA,0x00); 
2510:Src/main.c    **** VXISI2CWrite(0xEB,0x00); 
2511:Src/main.c    **** VXISI2CWrite(0xEC,0x88); 
2512:Src/main.c    **** VXISI2CWrite(0xED,0x00); 
2513:Src/main.c    **** VXISI2CWrite(0xEE,0x00); 
2514:Src/main.c    **** VXISI2CWrite(0xEF,0x00); 
2515:Src/main.c    **** VXISI2CWrite(0xF0,0x30); 
2516:Src/main.c    **** VXISI2CWrite(0xF1,0x43); 
2517:Src/main.c    **** VXISI2CWrite(0xF2,0x1F); 
2518:Src/main.c    **** VXISI2CWrite(0xF3,0x1F); 
2519:Src/main.c    **** VXISI2CWrite(0xF4,0x22); 
2520:Src/main.c    **** VXISI2CWrite(0xF5,0x73); 
2521:Src/main.c    **** VXISI2CWrite(0xF6,0x53); 
2522:Src/main.c    **** VXISI2CWrite(0xF7,0x80); 
2523:Src/main.c    **** VXISI2CWrite(0xF8,0x01); 
2524:Src/main.c    **** VXISI2CWrite(0xF9,0x01); 
2525:Src/main.c    **** VXISI2CWrite(0xFA,0x00); 
2526:Src/main.c    **** VXISI2CWrite(0xFB,0x00); 
2527:Src/main.c    **** VXISI2CWrite(0xFC,0x00); 
2528:Src/main.c    **** VXISI2CWrite(0xFD,0x70); 
2529:Src/main.c    **** VXISI2CWrite(0xFE,0x18); 
2530:Src/main.c    **** VXISI2CWrite(0xFF,0x07); 
2531:Src/main.c    **** 
2532:Src/main.c    **** 
2533:Src/main.c    **** /*
2534:Src/main.c    **** VXISI2CWrite(0x01,0x00);
2535:Src/main.c    **** VXISI2CWrite(0x02,0x00);
2536:Src/main.c    **** VXISI2CWrite(0x03,0x75);
2537:Src/main.c    **** VXISI2CWrite(0x04,0x18);
2538:Src/main.c    **** VXISI2CWrite(0x05,0x80);
2539:Src/main.c    **** VXISI2CWrite(0x06,0x20);
2540:Src/main.c    **** VXISI2CWrite(0x07,0x0C);
2541:Src/main.c    **** VXISI2CWrite(0x08,0x21);
2542:Src/main.c    **** VXISI2CWrite(0x09,0x0A);
ARM GAS  /tmp/cc8epWVM.s 			page 46


2543:Src/main.c    **** VXISI2CWrite(0x0A,0x21);
2544:Src/main.c    **** VXISI2CWrite(0x0B,0x0A);
2545:Src/main.c    **** VXISI2CWrite(0x0C,0x00);
2546:Src/main.c    **** VXISI2CWrite(0x0D,0x20);
2547:Src/main.c    **** VXISI2CWrite(0x0E,0x10);
2548:Src/main.c    **** VXISI2CWrite(0x0F,0x00);
2549:Src/main.c    **** VXISI2CWrite(0x10,0x81);
2550:Src/main.c    **** VXISI2CWrite(0x11,0x82);
2551:Src/main.c    **** VXISI2CWrite(0x12,0x00);
2552:Src/main.c    **** VXISI2CWrite(0x13,0x00);
2553:Src/main.c    **** VXISI2CWrite(0x14,0x00);
2554:Src/main.c    **** VXISI2CWrite(0x15,0x78);
2555:Src/main.c    **** VXISI2CWrite(0x16,0xFE);
2556:Src/main.c    **** VXISI2CWrite(0x17,0x00);
2557:Src/main.c    **** VXISI2CWrite(0x18,0xC0);
2558:Src/main.c    **** VXISI2CWrite(0x19,0x01);
2559:Src/main.c    **** VXISI2CWrite(0x1A,0x36);
2560:Src/main.c    **** VXISI2CWrite(0x1B,0x30);
2561:Src/main.c    **** VXISI2CWrite(0x1C,0x00);
2562:Src/main.c    **** VXISI2CWrite(0x1D,0x00);
2563:Src/main.c    **** VXISI2CWrite(0x1E,0x20);
2564:Src/main.c    **** VXISI2CWrite(0x1F,0x00);
2565:Src/main.c    **** VXISI2CWrite(0x20,0x00);
2566:Src/main.c    **** VXISI2CWrite(0x21,0x00);
2567:Src/main.c    **** VXISI2CWrite(0x22,0xA7);
2568:Src/main.c    **** VXISI2CWrite(0x23,0x50);
2569:Src/main.c    **** VXISI2CWrite(0x24,0x80);
2570:Src/main.c    **** VXISI2CWrite(0x25,0x44);
2571:Src/main.c    **** VXISI2CWrite(0x26,0x65);
2572:Src/main.c    **** VXISI2CWrite(0x27,0x38);
2573:Src/main.c    **** VXISI2CWrite(0x28,0xF0);
2574:Src/main.c    **** VXISI2CWrite(0x29,0x00);
2575:Src/main.c    **** VXISI2CWrite(0x2A,0x00);
2576:Src/main.c    **** VXISI2CWrite(0x2B,0x11);
2577:Src/main.c    **** VXISI2CWrite(0x2C,0x00);
2578:Src/main.c    **** VXISI2CWrite(0x2D,0x00);
2579:Src/main.c    **** VXISI2CWrite(0x2E,0x47);
2580:Src/main.c    **** VXISI2CWrite(0x2F,0x80);
2581:Src/main.c    **** VXISI2CWrite(0x30,0x38);
2582:Src/main.c    **** VXISI2CWrite(0x31,0x80);
2583:Src/main.c    **** //VXISI2CWrite(0x32,0x80);
2584:Src/main.c    **** VXISI2CWrite(0x33,0x80);
2585:Src/main.c    **** VXISI2CWrite(0x34,0xA0);
2586:Src/main.c    **** VXISI2CWrite(0x35,0x18);
2587:Src/main.c    **** VXISI2CWrite(0x36,0x46);
2588:Src/main.c    **** VXISI2CWrite(0x37,0x64);
2589:Src/main.c    **** VXISI2CWrite(0x38,0x00);
2590:Src/main.c    **** VXISI2CWrite(0x39,0xFF);
2591:Src/main.c    **** VXISI2CWrite(0x3A,0x1B);
2592:Src/main.c    **** VXISI2CWrite(0x3B,0x80);
2593:Src/main.c    **** VXISI2CWrite(0x3C,0x80);
2594:Src/main.c    **** VXISI2CWrite(0x3D,0x80);
2595:Src/main.c    **** VXISI2CWrite(0x3E,0x80);
2596:Src/main.c    **** VXISI2CWrite(0x3F,0x80);
2597:Src/main.c    **** VXISI2CWrite(0x40,0x80);
2598:Src/main.c    **** VXISI2CWrite(0x41,0x60);
2599:Src/main.c    **** VXISI2CWrite(0x42,0x5F);
ARM GAS  /tmp/cc8epWVM.s 			page 47


2600:Src/main.c    **** VXISI2CWrite(0x43,0x37);
2601:Src/main.c    **** VXISI2CWrite(0x44,0x14);
2602:Src/main.c    **** VXISI2CWrite(0x45,0x06);
2603:Src/main.c    **** VXISI2CWrite(0x46,0x00);
2604:Src/main.c    **** VXISI2CWrite(0x47,0x00);
2605:Src/main.c    **** VXISI2CWrite(0x48,0x00);
2606:Src/main.c    **** VXISI2CWrite(0x49,0x00);
2607:Src/main.c    **** VXISI2CWrite(0x4B,0x20);
2608:Src/main.c    **** VXISI2CWrite(0x4C,0x00);
2609:Src/main.c    **** VXISI2CWrite(0x4D,0x00);
2610:Src/main.c    **** VXISI2CWrite(0x4E,0x00);
2611:Src/main.c    **** VXISI2CWrite(0x4F,0x7F);
2612:Src/main.c    **** VXISI2CWrite(0x50,0x20);
2613:Src/main.c    **** VXISI2CWrite(0x51,0x20);
2614:Src/main.c    **** VXISI2CWrite(0x52,0x00);
2615:Src/main.c    **** VXISI2CWrite(0x53,0x04);
2616:Src/main.c    **** VXISI2CWrite(0x54,0x00);
2617:Src/main.c    **** VXISI2CWrite(0x55,0xA0);
2618:Src/main.c    **** VXISI2CWrite(0x56,0x40);
2619:Src/main.c    **** VXISI2CWrite(0x57,0x04);
2620:Src/main.c    **** VXISI2CWrite(0x58,0x10);
2621:Src/main.c    **** VXISI2CWrite(0x59,0x08);
2622:Src/main.c    **** VXISI2CWrite(0x5A,0x10);
2623:Src/main.c    **** VXISI2CWrite(0x5B,0x00);
2624:Src/main.c    **** VXISI2CWrite(0x5C,0x68);
2625:Src/main.c    **** VXISI2CWrite(0x5D,0x84);
2626:Src/main.c    **** VXISI2CWrite(0x5E,0x08);
2627:Src/main.c    **** VXISI2CWrite(0x5F,0x21);
2628:Src/main.c    **** VXISI2CWrite(0x60,0x20);
2629:Src/main.c    **** VXISI2CWrite(0x61,0xB0);
2630:Src/main.c    **** VXISI2CWrite(0x62,0x33);
2631:Src/main.c    **** VXISI2CWrite(0x63,0x01);
2632:Src/main.c    **** VXISI2CWrite(0x64,0xFF);
2633:Src/main.c    **** VXISI2CWrite(0x65,0x01);
2634:Src/main.c    **** VXISI2CWrite(0x66,0xFF);
2635:Src/main.c    **** VXISI2CWrite(0x67,0x89);
2636:Src/main.c    **** VXISI2CWrite(0x68,0xAB);
2637:Src/main.c    **** VXISI2CWrite(0x69,0x28);
2638:Src/main.c    **** VXISI2CWrite(0x6A,0x6E);
2639:Src/main.c    **** VXISI2CWrite(0x6B,0x6E);
2640:Src/main.c    **** VXISI2CWrite(0x6C,0x6E);
2641:Src/main.c    **** VXISI2CWrite(0x6D,0x00);
2642:Src/main.c    **** VXISI2CWrite(0x6E,0x00);
2643:Src/main.c    **** VXISI2CWrite(0x6F,0x00);
2644:Src/main.c    **** VXISI2CWrite(0x70,0x00);
2645:Src/main.c    **** VXISI2CWrite(0x71,0x00);
2646:Src/main.c    **** VXISI2CWrite(0x72,0x00);
2647:Src/main.c    **** VXISI2CWrite(0x73,0x00);
2648:Src/main.c    **** VXISI2CWrite(0x74,0x00);
2649:Src/main.c    **** VXISI2CWrite(0x75,0xFF);
2650:Src/main.c    **** VXISI2CWrite(0x76,0xFF);
2651:Src/main.c    **** VXISI2CWrite(0x77,0xFF);
2652:Src/main.c    **** VXISI2CWrite(0x78,0xFF);
2653:Src/main.c    **** VXISI2CWrite(0x79,0xFF);
2654:Src/main.c    **** VXISI2CWrite(0x7A,0xFF);
2655:Src/main.c    **** VXISI2CWrite(0x7B,0xFF);
2656:Src/main.c    **** VXISI2CWrite(0x7C,0xFF);
ARM GAS  /tmp/cc8epWVM.s 			page 48


2657:Src/main.c    **** VXISI2CWrite(0x7D,0xF0);
2658:Src/main.c    **** VXISI2CWrite(0x7E,0x80);
2659:Src/main.c    **** VXISI2CWrite(0x7F,0x00);
2660:Src/main.c    **** VXISI2CWrite(0x80,0x00);
2661:Src/main.c    **** VXISI2CWrite(0x81,0x34);
2662:Src/main.c    **** VXISI2CWrite(0x82,0x40);
2663:Src/main.c    **** VXISI2CWrite(0x83,0x05);
2664:Src/main.c    **** VXISI2CWrite(0x84,0x57);
2665:Src/main.c    **** VXISI2CWrite(0x85,0xFD);
2666:Src/main.c    **** VXISI2CWrite(0x86,0x04);
2667:Src/main.c    **** VXISI2CWrite(0x87,0x24);
2668:Src/main.c    **** VXISI2CWrite(0x88,0x94);
2669:Src/main.c    **** VXISI2CWrite(0x89,0x58);
2670:Src/main.c    **** VXISI2CWrite(0x8A,0x00);
2671:Src/main.c    **** VXISI2CWrite(0x8B,0x7E);
2672:Src/main.c    **** VXISI2CWrite(0x8C,0x03);
2673:Src/main.c    **** VXISI2CWrite(0x8D,0x2C);
2674:Src/main.c    **** VXISI2CWrite(0x8E,0x8C);
2675:Src/main.c    **** VXISI2CWrite(0x8F,0x00);
2676:Src/main.c    **** VXISI2CWrite(0x90,0xCC);
2677:Src/main.c    **** VXISI2CWrite(0x91,0x41);
2678:Src/main.c    **** VXISI2CWrite(0x92,0xC4);
2679:Src/main.c    **** VXISI2CWrite(0x93,0x84);
2680:Src/main.c    **** VXISI2CWrite(0x94,0x98);
2681:Src/main.c    **** VXISI2CWrite(0x95,0x80);
2682:Src/main.c    **** VXISI2CWrite(0x96,0x65);
2683:Src/main.c    **** VXISI2CWrite(0x97,0x70);
2684:Src/main.c    **** VXISI2CWrite(0x98,0x29);
2685:Src/main.c    **** VXISI2CWrite(0x99,0x90);
2686:Src/main.c    **** VXISI2CWrite(0x9A,0x00);
2687:Src/main.c    **** VXISI2CWrite(0x9B,0x04);
2688:Src/main.c    **** //VXISI2CWrite(0x9C,0x0A);
2689:Src/main.c    **** VXISI2CWrite(0x9D,0x00);
2690:Src/main.c    **** VXISI2CWrite(0x9E,0x04);
2691:Src/main.c    **** VXISI2CWrite(0x9F,0x65);
2692:Src/main.c    **** VXISI2CWrite(0xA0,0x80);
2693:Src/main.c    **** VXISI2CWrite(0xA1,0xD8);
2694:Src/main.c    **** VXISI2CWrite(0xA2,0x98);
2695:Src/main.c    **** VXISI2CWrite(0xA3,0x87);
2696:Src/main.c    **** VXISI2CWrite(0xA4,0x00);
2697:Src/main.c    **** VXISI2CWrite(0xA5,0x80);
2698:Src/main.c    **** VXISI2CWrite(0xA6,0x00);
2699:Src/main.c    **** VXISI2CWrite(0xA7,0x70);
2700:Src/main.c    **** VXISI2CWrite(0xA8,0x40);
2701:Src/main.c    **** VXISI2CWrite(0xA9,0x1E);
2702:Src/main.c    **** VXISI2CWrite(0xAA,0x2C);
2703:Src/main.c    **** VXISI2CWrite(0xAB,0x00);
2704:Src/main.c    **** VXISI2CWrite(0xAC,0x90);
2705:Src/main.c    **** VXISI2CWrite(0xAD,0x65);
2706:Src/main.c    **** VXISI2CWrite(0xAE,0x65);
2707:Src/main.c    **** VXISI2CWrite(0xAF,0x99);
2708:Src/main.c    **** VXISI2CWrite(0xB0,0x00);
2709:Src/main.c    **** VXISI2CWrite(0xB1,0x00);
2710:Src/main.c    **** VXISI2CWrite(0xB2,0x00);
2711:Src/main.c    **** VXISI2CWrite(0xB3,0x00);
2712:Src/main.c    **** VXISI2CWrite(0xB4,0x00);
2713:Src/main.c    **** VXISI2CWrite(0xB5,0x00);
ARM GAS  /tmp/cc8epWVM.s 			page 49


2714:Src/main.c    **** VXISI2CWrite(0xB6,0x00);
2715:Src/main.c    **** VXISI2CWrite(0xB8,0x00);
2716:Src/main.c    **** VXISI2CWrite(0xB9,0x00);
2717:Src/main.c    **** VXISI2CWrite(0xBA,0x00);
2718:Src/main.c    **** VXISI2CWrite(0xBB,0x00);
2719:Src/main.c    **** VXISI2CWrite(0xBC,0x90);
2720:Src/main.c    **** VXISI2CWrite(0xBD,0x01);
2721:Src/main.c    **** VXISI2CWrite(0xBE,0xA5);
2722:Src/main.c    **** VXISI2CWrite(0xC0,0x00);
2723:Src/main.c    **** VXISI2CWrite(0xC1,0x20);
2724:Src/main.c    **** VXISI2CWrite(0xC2,0x20);
2725:Src/main.c    **** VXISI2CWrite(0xC3,0x20);
2726:Src/main.c    **** VXISI2CWrite(0xC4,0x20);
2727:Src/main.c    **** VXISI2CWrite(0xC5,0x20);
2728:Src/main.c    **** VXISI2CWrite(0xD0,0xFF);
2729:Src/main.c    **** VXISI2CWrite(0xD1,0x3F);
2730:Src/main.c    **** VXISI2CWrite(0xD2,0xC2);
2731:Src/main.c    **** VXISI2CWrite(0xD3,0x3F);
2732:Src/main.c    **** VXISI2CWrite(0xD4,0x00);
2733:Src/main.c    **** VXISI2CWrite(0xD5,0x00);
2734:Src/main.c    **** VXISI2CWrite(0xD6,0x00);
2735:Src/main.c    **** VXISI2CWrite(0xD7,0x00);
2736:Src/main.c    **** VXISI2CWrite(0xD8,0x00);
2737:Src/main.c    **** VXISI2CWrite(0xDC,0x77);
2738:Src/main.c    **** VXISI2CWrite(0xDD,0x01);
2739:Src/main.c    **** VXISI2CWrite(0xDE,0xA5);
2740:Src/main.c    **** VXISI2CWrite(0xDF,0xE5);
2741:Src/main.c    **** VXISI2CWrite(0xE0,0x00);
2742:Src/main.c    **** VXISI2CWrite(0xE1,0x00);
2743:Src/main.c    **** VXISI2CWrite(0xE2,0x00);
2744:Src/main.c    **** VXISI2CWrite(0xE3,0x47);
2745:Src/main.c    **** VXISI2CWrite(0xE4,0x3C);
2746:Src/main.c    **** VXISI2CWrite(0xE5,0x80);
2747:Src/main.c    **** VXISI2CWrite(0xE6,0x00);
2748:Src/main.c    **** VXISI2CWrite(0xE7,0x00);
2749:Src/main.c    **** VXISI2CWrite(0xE8,0x00);
2750:Src/main.c    **** VXISI2CWrite(0xE9,0x00);
2751:Src/main.c    **** VXISI2CWrite(0xEA,0x00);
2752:Src/main.c    **** VXISI2CWrite(0xEB,0x00);
2753:Src/main.c    **** VXISI2CWrite(0xEC,0x88);
2754:Src/main.c    **** VXISI2CWrite(0xED,0x00);
2755:Src/main.c    **** VXISI2CWrite(0xEE,0x00);
2756:Src/main.c    **** VXISI2CWrite(0xEF,0x00);
2757:Src/main.c    **** VXISI2CWrite(0xF0,0x35);
2758:Src/main.c    **** VXISI2CWrite(0xF1,0x43);
2759:Src/main.c    **** VXISI2CWrite(0xF2,0x1F);
2760:Src/main.c    **** VXISI2CWrite(0xF3,0x1F);
2761:Src/main.c    **** VXISI2CWrite(0xF4,0x22);
2762:Src/main.c    **** VXISI2CWrite(0xF5,0x73);
2763:Src/main.c    **** VXISI2CWrite(0xF6,0x53);
2764:Src/main.c    **** VXISI2CWrite(0xF7,0x80);
2765:Src/main.c    **** VXISI2CWrite(0xF8,0x01);
2766:Src/main.c    **** VXISI2CWrite(0xF9,0x01);
2767:Src/main.c    **** VXISI2CWrite(0xFA,0x00);
2768:Src/main.c    **** VXISI2CWrite(0xFB,0x00);
2769:Src/main.c    **** VXISI2CWrite(0xFC,0x00);
2770:Src/main.c    **** VXISI2CWrite(0xFD,0x00);
ARM GAS  /tmp/cc8epWVM.s 			page 50


2771:Src/main.c    **** VXISI2CWrite(0xFE,0x00);
2772:Src/main.c    **** VXISI2CWrite(0xFF,0x00);
2773:Src/main.c    **** */
2774:Src/main.c    **** #endif
2775:Src/main.c    **** 
2776:Src/main.c    **** }
2777:Src/main.c    **** 
2778:Src/main.c    **** void TP_bt1120_720P_1080P_mode0_w0(void)
2779:Src/main.c    **** {
2780:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table 720P... ");
2781:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_720P_1080P_mode0_w0_88param);
2782:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
2783:Src/main.c    **** 
2784:Src/main.c    **** }
2785:Src/main.c    **** 
2786:Src/main.c    **** void TP_bt1120_NTSC_1080P_mode0_w0(void)
2787:Src/main.c    **** {
2788:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table NTSC... ");
2789:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param);
2790:Src/main.c    **** }
2791:Src/main.c    **** 
2792:Src/main.c    **** void TP_bt1120_PAL_1080P_mode0_w0(void)
2793:Src/main.c    **** {
2794:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table PAL... ");
2795:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param);
2796:Src/main.c    **** 	#if 0
2797:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);	
2798:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);	
2799:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);	
2800:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);	
2801:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);	
2802:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);	
2803:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);	
2804:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);	
2805:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);	
2806:Src/main.c    **** 	VXISI2CWrite(0x0A,0x40);	
2807:Src/main.c    **** 	VXISI2CWrite(0x0B,0x09);	
2808:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);	
2809:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);	
2810:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);	
2811:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);	
2812:Src/main.c    **** 	VXISI2CWrite(0x10,0xA1);	
2813:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);	
2814:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);	
2815:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);	
2816:Src/main.c    **** 	VXISI2CWrite(0x14,0x20);	
2817:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);	
2818:Src/main.c    **** 	VXISI2CWrite(0x16,0xFF);	
2819:Src/main.c    **** 	VXISI2CWrite(0x17,0x01);	
2820:Src/main.c    **** 	VXISI2CWrite(0x18,0xC0);	
2821:Src/main.c    **** 	VXISI2CWrite(0x19,0x01);	
2822:Src/main.c    **** 	VXISI2CWrite(0x1A,0x26);	
2823:Src/main.c    **** 	VXISI2CWrite(0x1B,0x14);	
2824:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);	
2825:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);	
2826:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);	
2827:Src/main.c    **** 	VXISI2CWrite(0x1F,0x31);	
ARM GAS  /tmp/cc8epWVM.s 			page 51


2828:Src/main.c    **** 	VXISI2CWrite(0x20,0x60);	
2829:Src/main.c    **** 	VXISI2CWrite(0x21,0x39);	
2830:Src/main.c    **** 	VXISI2CWrite(0x22,0x97);	
2831:Src/main.c    **** 	VXISI2CWrite(0x23,0x48);	
2832:Src/main.c    **** 	VXISI2CWrite(0x24,0xBC);	
2833:Src/main.c    **** 	VXISI2CWrite(0x25,0x11);	
2834:Src/main.c    **** 	VXISI2CWrite(0x26,0x38);	
2835:Src/main.c    **** 	VXISI2CWrite(0x27,0x20);	
2836:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);	
2837:Src/main.c    **** 	VXISI2CWrite(0x29,0x40);	
2838:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);	
2839:Src/main.c    **** 	VXISI2CWrite(0x2B,0x00);	
2840:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);	
2841:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);	
2842:Src/main.c    **** 	VXISI2CWrite(0x2E,0x17);	
2843:Src/main.c    **** 	VXISI2CWrite(0x2F,0xBC);	
2844:Src/main.c    **** 	VXISI2CWrite(0x30,0x20);	
2845:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);	
2846:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);	
2847:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);	
2848:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);	
2849:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);	
2850:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);	
2851:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);	
2852:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);	
2853:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);	
2854:Src/main.c    **** 	VXISI2CWrite(0x3A,0x15);	
2855:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);	
2856:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);	
2857:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);	
2858:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);	
2859:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);	
2860:Src/main.c    **** 	//VXISI2CWrite(0xVXI);SI2CWr
2861:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);	
2862:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);	
2863:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);	
2864:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);	
2865:Src/main.c    **** 	VXISI2CWrite(0x45,0x05);	
2866:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);	
2867:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);	
2868:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);	
2869:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);	
2870:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);	
2871:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);	
2872:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);	
2873:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);	
2874:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);	
2875:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);	
2876:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);	
2877:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);	
2878:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);	
2879:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);	
2880:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);	
2881:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);	
2882:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);	
2883:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);	
2884:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);	
ARM GAS  /tmp/cc8epWVM.s 			page 52


2885:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);	
2886:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);	
2887:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);	
2888:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);	
2889:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);	
2890:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);	
2891:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);	
2892:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);	
2893:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);	
2894:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);	
2895:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);	
2896:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);	
2897:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);	
2898:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);	
2899:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);	
2900:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);	
2901:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);	
2902:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);	
2903:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);	
2904:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);	
2905:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);	
2906:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);	
2907:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);	
2908:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);	
2909:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);	
2910:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);	
2911:Src/main.c    **** 	VXISI2CWrite(0x74,0x06);	
2912:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);	
2913:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);	
2914:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);	
2915:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);	
2916:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);	
2917:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);	
2918:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);	
2919:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);	
2920:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);	
2921:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);	
2922:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);	
2923:Src/main.c    **** 	VXISI2CWrite(0x80,0x01);	
2924:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);	
2925:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);	
2926:Src/main.c    **** 	VXISI2CWrite(0x83,0x2D);	
2927:Src/main.c    **** 	VXISI2CWrite(0x84,0x6F);	
2928:Src/main.c    **** 	VXISI2CWrite(0x85,0x00);	
2929:Src/main.c    **** 	VXISI2CWrite(0x86,0x00);	
2930:Src/main.c    **** 	VXISI2CWrite(0x87,0x00);	
2931:Src/main.c    **** 	VXISI2CWrite(0x88,0x13);	
2932:Src/main.c    **** 	VXISI2CWrite(0x89,0x1B);	
2933:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);	
2934:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);	
2935:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);	
2936:Src/main.c    **** 	VXISI2CWrite(0x8D,0x17);	
2937:Src/main.c    **** 	VXISI2CWrite(0x8E,0xB0);	
2938:Src/main.c    **** 	VXISI2CWrite(0x8F,0x14);	
2939:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);	
2940:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);	
2941:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);	
ARM GAS  /tmp/cc8epWVM.s 			page 53


2942:Src/main.c    **** 	VXISI2CWrite(0x93,0x81);	
2943:Src/main.c    **** 	VXISI2CWrite(0x94,0xC9);	
2944:Src/main.c    **** 	VXISI2CWrite(0x95,0xBC);	
2945:Src/main.c    **** 	VXISI2CWrite(0x96,0xF5);	
2946:Src/main.c    **** 	VXISI2CWrite(0x97,0x70);	
2947:Src/main.c    **** 	VXISI2CWrite(0x98,0x15);	
2948:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);	
2949:Src/main.c    **** 	VXISI2CWrite(0x9A,0x80);	
2950:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);	
2951:Src/main.c    **** 	VXISI2CWrite(0x9C,0x00);	
2952:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);	
2953:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);	
2954:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);	
2955:Src/main.c    **** 	VXISI2CWrite(0xA0,0x3B);	
2956:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD0);	
2957:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);	
2958:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);	
2959:Src/main.c    **** 	VXISI2CWrite(0xA4,0x20);	
2960:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);	
2961:Src/main.c    **** 	VXISI2CWrite(0xA6,0xFD);	
2962:Src/main.c    **** 	VXISI2CWrite(0xA7,0x50);	
2963:Src/main.c    **** 	VXISI2CWrite(0xA8,0x40);	
2964:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);	
2965:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);	
2966:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);	
2967:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);	
2968:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF5);	
2969:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);	
2970:Src/main.c    **** 	VXISI2CWrite(0xAF,0x9B);	
2971:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);	
2972:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);	
2973:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);	
2974:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);	
2975:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);	
2976:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);	
2977:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);	
2978:Src/main.c    **** 	VXISI2CWrite(0xB8,0x01);	
2979:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);	
2980:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);	
2981:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);	
2982:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);	
2983:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);	
2984:Src/main.c    **** 	VXISI2CWrite(0xBE,0x1D);	
2985:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);	
2986:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);	
2987:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);	
2988:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);	
2989:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);	
2990:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);	
2991:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);	
2992:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);	
2993:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);	
2994:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);	
2995:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);	
2996:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);	
2997:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);	
2998:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);	
ARM GAS  /tmp/cc8epWVM.s 			page 54


2999:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);	
3000:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);	
3001:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);	
3002:Src/main.c    **** 	VXISI2CWrite(0xDE,0xD3);	
3003:Src/main.c    **** 	VXISI2CWrite(0xDF,0x49);	
3004:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);	
3005:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);	
3006:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);	
3007:Src/main.c    **** 	VXISI2CWrite(0xE3,0x17);	
3008:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE0);	
3009:Src/main.c    **** 	VXISI2CWrite(0xE5,0xBC);	
3010:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);	
3011:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);	
3012:Src/main.c    **** 	VXISI2CWrite(0xE8,0x00);	
3013:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);	
3014:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);	
3015:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);	
3016:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);	
3017:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);	
3018:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);	
3019:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);	
3020:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);	
3021:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);	
3022:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);	
3023:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);	
3024:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);	
3025:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);	
3026:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);	
3027:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);	
3028:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);	
3029:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);	
3030:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);	
3031:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);	
3032:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);	
3033:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);	
3034:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);	
3035:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);	
3036:Src/main.c    **** #endif
3037:Src/main.c    **** 
3038:Src/main.c    **** }
3039:Src/main.c    **** void SET_VS4210_720_480_out(void)
3040:Src/main.c    **** {
3041:Src/main.c    **** 	Printf("\r\nSET_VS4210_720_480_out ");
3042:Src/main.c    **** 
3043:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);
3044:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
3045:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
3046:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
3047:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
3048:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
3049:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);
3050:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
3051:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
3052:Src/main.c    **** 	VXISI2CWrite(0x0A,0x41);
3053:Src/main.c    **** 	VXISI2CWrite(0x0B,0x07);
3054:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
3055:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
ARM GAS  /tmp/cc8epWVM.s 			page 55


3056:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
3057:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
3058:Src/main.c    **** 	VXISI2CWrite(0x10,0x80);
3059:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
3060:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);
3061:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);
3062:Src/main.c    **** 	VXISI2CWrite(0x14,0xE0);
3063:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
3064:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
3065:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
3066:Src/main.c    **** 	VXISI2CWrite(0x18,0xC8);
3067:Src/main.c    **** 	VXISI2CWrite(0x19,0x00);
3068:Src/main.c    **** 	VXISI2CWrite(0x1A,0x23);
3069:Src/main.c    **** 	VXISI2CWrite(0x1B,0x00);
3070:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
3071:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
3072:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
3073:Src/main.c    **** 	VXISI2CWrite(0x1F,0x32);
3074:Src/main.c    **** 	VXISI2CWrite(0x20,0x5A);
3075:Src/main.c    **** 	VXISI2CWrite(0x21,0x0D);
3076:Src/main.c    **** 	VXISI2CWrite(0x22,0x32);
3077:Src/main.c    **** 	VXISI2CWrite(0x23,0x5A);
3078:Src/main.c    **** 	VXISI2CWrite(0x24,0xD0);
3079:Src/main.c    **** 	VXISI2CWrite(0x25,0x21);
3080:Src/main.c    **** 	VXISI2CWrite(0x26,0x0D);
3081:Src/main.c    **** 	VXISI2CWrite(0x27,0xE0);
3082:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
3083:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
3084:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
3085:Src/main.c    **** 	VXISI2CWrite(0x2B,0x01);
3086:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);
3087:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
3088:Src/main.c    **** 	VXISI2CWrite(0x2E,0x12);
3089:Src/main.c    **** 	VXISI2CWrite(0x2F,0xD0);
3090:Src/main.c    **** 	VXISI2CWrite(0x30,0xE0);
3091:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
3092:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
3093:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
3094:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
3095:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
3096:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
3097:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
3098:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
3099:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
3100:Src/main.c    **** 	VXISI2CWrite(0x3A,0x03);
3101:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
3102:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
3103:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
3104:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
3105:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
3106:Src/main.c    **** 	//VXISI2CWrite(0xVXISI);2CWrite(0x80
3107:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);
3108:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
3109:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
3110:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
3111:Src/main.c    **** 	VXISI2CWrite(0x45,0x04);
3112:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
ARM GAS  /tmp/cc8epWVM.s 			page 56


3113:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
3114:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
3115:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
3116:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
3117:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
3118:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
3119:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
3120:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
3121:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
3122:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
3123:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);
3124:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);
3125:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);
3126:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);
3127:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);
3128:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
3129:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
3130:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
3131:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
3132:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
3133:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
3134:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);
3135:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);
3136:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);
3137:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
3138:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);
3139:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
3140:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
3141:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
3142:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
3143:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
3144:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
3145:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
3146:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
3147:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
3148:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
3149:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
3150:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
3151:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
3152:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
3153:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
3154:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
3155:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
3156:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
3157:Src/main.c    **** 	VXISI2CWrite(0x74,0x00);
3158:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
3159:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
3160:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
3161:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
3162:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
3163:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
3164:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
3165:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
3166:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
3167:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
3168:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
3169:Src/main.c    **** 	VXISI2CWrite(0x80,0x00);
ARM GAS  /tmp/cc8epWVM.s 			page 57


3170:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);
3171:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
3172:Src/main.c    **** 	VXISI2CWrite(0x83,0x05);
3173:Src/main.c    **** 	VXISI2CWrite(0x84,0x59);
3174:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
3175:Src/main.c    **** 	VXISI2CWrite(0x86,0x04);
3176:Src/main.c    **** 	VXISI2CWrite(0x87,0x24);
3177:Src/main.c    **** 	VXISI2CWrite(0x88,0x94);
3178:Src/main.c    **** 	VXISI2CWrite(0x89,0x58);
3179:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
3180:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
3181:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
3182:Src/main.c    **** 	VXISI2CWrite(0x8D,0x2C);
3183:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
3184:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
3185:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
3186:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
3187:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
3188:Src/main.c    **** 	VXISI2CWrite(0x93,0x31);
3189:Src/main.c    **** 	VXISI2CWrite(0x94,0x87);
3190:Src/main.c    **** 	VXISI2CWrite(0x95,0xD0);
3191:Src/main.c    **** 	VXISI2CWrite(0x96,0xF3);
3192:Src/main.c    **** 	VXISI2CWrite(0x97,0x20);
3193:Src/main.c    **** 	VXISI2CWrite(0x98,0x11);
3194:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
3195:Src/main.c    **** 	VXISI2CWrite(0x9A,0xFF);
3196:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
3197:Src/main.c    **** 	VXISI2CWrite(0x9C,0x0A);
3198:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
3199:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
3200:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
3201:Src/main.c    **** 	VXISI2CWrite(0xA0,0x2F);
3202:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD9);
3203:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
3204:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
3205:Src/main.c    **** 	VXISI2CWrite(0xA4,0xE1);
3206:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);
3207:Src/main.c    **** 	VXISI2CWrite(0xA6,0xC2);
3208:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
3209:Src/main.c    **** 	VXISI2CWrite(0xA8,0x00);
3210:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
3211:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);
3212:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
3213:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);
3214:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF3);
3215:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
3216:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
3217:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
3218:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
3219:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
3220:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
3221:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
3222:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
3223:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
3224:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
3225:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
3226:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
ARM GAS  /tmp/cc8epWVM.s 			page 58


3227:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
3228:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
3229:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
3230:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
3231:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
3232:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
3233:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
3234:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
3235:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
3236:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
3237:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
3238:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
3239:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
3240:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
3241:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
3242:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
3243:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
3244:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
3245:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
3246:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
3247:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);
3248:Src/main.c    **** 	VXISI2CWrite(0xDE,0xAF);
3249:Src/main.c    **** 	VXISI2CWrite(0xDF,0xEF);
3250:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
3251:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
3252:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
3253:Src/main.c    **** 	VXISI2CWrite(0xE3,0x12);
3254:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE2);
3255:Src/main.c    **** 	VXISI2CWrite(0xE5,0xD0);
3256:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
3257:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
3258:Src/main.c    **** 	VXISI2CWrite(0xE8,0x0F);
3259:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
3260:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
3261:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
3262:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
3263:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
3264:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
3265:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
3266:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
3267:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
3268:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
3269:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
3270:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
3271:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
3272:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
3273:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
3274:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
3275:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
3276:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
3277:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
3278:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
3279:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
3280:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
3281:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
3282:Src/main.c    **** 					 
3283:Src/main.c    **** 
ARM GAS  /tmp/cc8epWVM.s 			page 59


3284:Src/main.c    **** 
3285:Src/main.c    **** }
3286:Src/main.c    **** 
3287:Src/main.c    **** void SET_VS4210_1280_720_out(void)
3288:Src/main.c    **** {
3289:Src/main.c    **** 	Printf("\r\nSET_VS4210_1280_720_out");
3290:Src/main.c    **** 
3291:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);
3292:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
3293:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
3294:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
3295:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
3296:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
3297:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);
3298:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
3299:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
3300:Src/main.c    **** 	VXISI2CWrite(0x0A,0x41);
3301:Src/main.c    **** 	VXISI2CWrite(0x0B,0x07);
3302:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
3303:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
3304:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
3305:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
3306:Src/main.c    **** 	VXISI2CWrite(0x10,0x80);
3307:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
3308:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);
3309:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);
3310:Src/main.c    **** 	VXISI2CWrite(0x14,0xE0);
3311:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
3312:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
3313:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
3314:Src/main.c    **** 	VXISI2CWrite(0x18,0xC8);
3315:Src/main.c    **** 	VXISI2CWrite(0x19,0x00);
3316:Src/main.c    **** 	VXISI2CWrite(0x1A,0x23);
3317:Src/main.c    **** 	VXISI2CWrite(0x1B,0x00);
3318:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
3319:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
3320:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
3321:Src/main.c    **** 	VXISI2CWrite(0x1F,0x32);
3322:Src/main.c    **** 	VXISI2CWrite(0x20,0x5A);
3323:Src/main.c    **** 	VXISI2CWrite(0x21,0x0D);
3324:Src/main.c    **** 	VXISI2CWrite(0x22,0x32);
3325:Src/main.c    **** 	VXISI2CWrite(0x23,0x5A);
3326:Src/main.c    **** 	VXISI2CWrite(0x24,0xD0);
3327:Src/main.c    **** 	VXISI2CWrite(0x25,0x21);
3328:Src/main.c    **** 	VXISI2CWrite(0x26,0x0D);
3329:Src/main.c    **** 	VXISI2CWrite(0x27,0xE0);
3330:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
3331:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
3332:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
3333:Src/main.c    **** 	VXISI2CWrite(0x2B,0x01);
3334:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);
3335:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
3336:Src/main.c    **** 	VXISI2CWrite(0x2E,0x12);
3337:Src/main.c    **** 	VXISI2CWrite(0x2F,0xD0);
3338:Src/main.c    **** 	VXISI2CWrite(0x30,0xE0);
3339:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
3340:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
ARM GAS  /tmp/cc8epWVM.s 			page 60


3341:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
3342:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
3343:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
3344:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
3345:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
3346:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
3347:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
3348:Src/main.c    **** 	VXISI2CWrite(0x3A,0x03);
3349:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
3350:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
3351:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
3352:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
3353:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
3354:Src/main.c    **** 	//VXISI2CWrite(0xVXISI);2CWrite(0x80
3355:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);
3356:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
3357:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
3358:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
3359:Src/main.c    **** 	VXISI2CWrite(0x45,0x04);
3360:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
3361:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
3362:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
3363:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
3364:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
3365:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
3366:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
3367:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
3368:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
3369:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
3370:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
3371:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);
3372:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);
3373:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);
3374:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);
3375:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);
3376:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
3377:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
3378:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
3379:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
3380:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
3381:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
3382:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);
3383:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);
3384:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);
3385:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
3386:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);
3387:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
3388:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
3389:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
3390:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
3391:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
3392:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
3393:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
3394:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
3395:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
3396:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
3397:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
ARM GAS  /tmp/cc8epWVM.s 			page 61


3398:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
3399:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
3400:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
3401:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
3402:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
3403:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
3404:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
3405:Src/main.c    **** 	VXISI2CWrite(0x74,0x00);
3406:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
3407:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
3408:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
3409:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
3410:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
3411:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
3412:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
3413:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
3414:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
3415:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
3416:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
3417:Src/main.c    **** 	VXISI2CWrite(0x80,0x00);
3418:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);
3419:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
3420:Src/main.c    **** 	VXISI2CWrite(0x83,0x05);
3421:Src/main.c    **** 	VXISI2CWrite(0x84,0x59);
3422:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
3423:Src/main.c    **** 	VXISI2CWrite(0x86,0x04);
3424:Src/main.c    **** 	VXISI2CWrite(0x87,0x24);
3425:Src/main.c    **** 	VXISI2CWrite(0x88,0x94);
3426:Src/main.c    **** 	VXISI2CWrite(0x89,0x58);
3427:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
3428:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
3429:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
3430:Src/main.c    **** 	VXISI2CWrite(0x8D,0x2C);
3431:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
3432:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
3433:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
3434:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
3435:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
3436:Src/main.c    **** 	VXISI2CWrite(0x93,0x31);
3437:Src/main.c    **** 	VXISI2CWrite(0x94,0x87);
3438:Src/main.c    **** 	VXISI2CWrite(0x95,0xD0);
3439:Src/main.c    **** 	VXISI2CWrite(0x96,0xF3);
3440:Src/main.c    **** 	VXISI2CWrite(0x97,0x20);
3441:Src/main.c    **** 	VXISI2CWrite(0x98,0x11);
3442:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
3443:Src/main.c    **** 	VXISI2CWrite(0x9A,0xFF);
3444:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
3445:Src/main.c    **** 	VXISI2CWrite(0x9C,0x0A);
3446:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
3447:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
3448:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
3449:Src/main.c    **** 	VXISI2CWrite(0xA0,0x2F);
3450:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD9);
3451:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
3452:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
3453:Src/main.c    **** 	VXISI2CWrite(0xA4,0xE1);
3454:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);
ARM GAS  /tmp/cc8epWVM.s 			page 62


3455:Src/main.c    **** 	VXISI2CWrite(0xA6,0xC2);
3456:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
3457:Src/main.c    **** 	VXISI2CWrite(0xA8,0x00);
3458:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
3459:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);
3460:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
3461:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);
3462:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF3);
3463:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
3464:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
3465:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
3466:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
3467:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
3468:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
3469:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
3470:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
3471:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
3472:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
3473:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
3474:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
3475:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
3476:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
3477:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
3478:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
3479:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
3480:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
3481:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
3482:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
3483:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
3484:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
3485:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
3486:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
3487:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
3488:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
3489:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
3490:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
3491:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
3492:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
3493:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
3494:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
3495:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);
3496:Src/main.c    **** 	VXISI2CWrite(0xDE,0xAF);
3497:Src/main.c    **** 	VXISI2CWrite(0xDF,0xEF);
3498:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
3499:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
3500:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
3501:Src/main.c    **** 	VXISI2CWrite(0xE3,0x12);
3502:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE2);
3503:Src/main.c    **** 	VXISI2CWrite(0xE5,0xD0);
3504:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
3505:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
3506:Src/main.c    **** 	VXISI2CWrite(0xE8,0x0F);
3507:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
3508:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
3509:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
3510:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
3511:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
ARM GAS  /tmp/cc8epWVM.s 			page 63


3512:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
3513:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
3514:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
3515:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
3516:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
3517:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
3518:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
3519:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
3520:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
3521:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
3522:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
3523:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
3524:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
3525:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
3526:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
3527:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
3528:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
3529:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
3530:Src/main.c    **** 			 
3531:Src/main.c    **** }
3532:Src/main.c    **** 
3533:Src/main.c    **** void SET_AHD_MDOE(void)
3534:Src/main.c    **** {
3535:Src/main.c    **** 	Printf("\r\nSET_AHD_MDOE...");
3536:Src/main.c    **** 
3537:Src/main.c    **** 	VXISI2CWrite(0x00,0x42);
3538:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);
3539:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
3540:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
3541:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
3542:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
3543:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
3544:Src/main.c    **** 	VXISI2CWrite(0x07,0x0C);
3545:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
3546:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
3547:Src/main.c    **** 	VXISI2CWrite(0x0A,0x40);
3548:Src/main.c    **** 	VXISI2CWrite(0x0B,0x0A);
3549:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
3550:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
3551:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
3552:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
3553:Src/main.c    **** 	VXISI2CWrite(0x10,0x81);
3554:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
3555:Src/main.c    **** 	VXISI2CWrite(0x12,0x74);
3556:Src/main.c    **** 	VXISI2CWrite(0x13,0x80);
3557:Src/main.c    **** 	VXISI2CWrite(0x14,0x38);
3558:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
3559:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
3560:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
3561:Src/main.c    **** 	VXISI2CWrite(0x18,0xC0);
3562:Src/main.c    **** 	VXISI2CWrite(0x19,0x01);
3563:Src/main.c    **** 	VXISI2CWrite(0x1A,0x20);
3564:Src/main.c    **** 	VXISI2CWrite(0x1B,0x30);
3565:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
3566:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
3567:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
3568:Src/main.c    **** 	VXISI2CWrite(0x1F,0xA4);
ARM GAS  /tmp/cc8epWVM.s 			page 64


3569:Src/main.c    **** 	VXISI2CWrite(0x20,0x50);
3570:Src/main.c    **** 	VXISI2CWrite(0x21,0xE2);
3571:Src/main.c    **** 	VXISI2CWrite(0x22,0x87);
3572:Src/main.c    **** 	VXISI2CWrite(0x23,0x98);
3573:Src/main.c    **** 	VXISI2CWrite(0x24,0x80);
3574:Src/main.c    **** 	VXISI2CWrite(0x25,0x44);
3575:Src/main.c    **** 	VXISI2CWrite(0x26,0x65);
3576:Src/main.c    **** 	VXISI2CWrite(0x27,0x38);
3577:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
3578:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
3579:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
3580:Src/main.c    **** 	VXISI2CWrite(0x2B,0x11);
3581:Src/main.c    **** 	VXISI2CWrite(0x2C,0x00);
3582:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
3583:Src/main.c    **** 	VXISI2CWrite(0x2E,0x47);
3584:Src/main.c    **** 	VXISI2CWrite(0x2F,0x80);
3585:Src/main.c    **** 	VXISI2CWrite(0x30,0x38);
3586:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
3587:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
3588:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
3589:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
3590:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
3591:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
3592:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
3593:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
3594:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
3595:Src/main.c    **** 	VXISI2CWrite(0x3A,0x73);
3596:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
3597:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
3598:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
3599:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
3600:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
3601:Src/main.c    **** 	VXISI2CWrite(0x40,0x80);
3602:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);
3603:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
3604:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
3605:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
3606:Src/main.c    **** 	VXISI2CWrite(0x45,0x00);
3607:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
3608:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
3609:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
3610:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
3611:Src/main.c    **** 	VXISI2CWrite(0x4A,0x00);
3612:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
3613:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
3614:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
3615:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
3616:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
3617:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
3618:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
3619:Src/main.c    **** 	VXISI2CWrite(0x52,0xA4);
3620:Src/main.c    **** 	VXISI2CWrite(0x53,0xC0);
3621:Src/main.c    **** 	VXISI2CWrite(0x54,0x42);
3622:Src/main.c    **** 	VXISI2CWrite(0x55,0x60);
3623:Src/main.c    **** 	VXISI2CWrite(0x56,0x5C);
3624:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
3625:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
ARM GAS  /tmp/cc8epWVM.s 			page 65


3626:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
3627:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
3628:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
3629:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
3630:Src/main.c    **** 	VXISI2CWrite(0x5D,0xA8);
3631:Src/main.c    **** 	VXISI2CWrite(0x5E,0xC0);
3632:Src/main.c    **** 	VXISI2CWrite(0x5F,0x53);
3633:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
3634:Src/main.c    **** 	VXISI2CWrite(0x61,0xCC);
3635:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
3636:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
3637:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
3638:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
3639:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
3640:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
3641:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
3642:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
3643:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
3644:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
3645:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
3646:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
3647:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
3648:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
3649:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
3650:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
3651:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
3652:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
3653:Src/main.c    **** 	VXISI2CWrite(0x74,0x06);
3654:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
3655:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
3656:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
3657:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
3658:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
3659:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
3660:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
3661:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
3662:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
3663:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
3664:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
3665:Src/main.c    **** 	VXISI2CWrite(0x80,0x01);
3666:Src/main.c    **** 	VXISI2CWrite(0x81,0x15);
3667:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
3668:Src/main.c    **** 	VXISI2CWrite(0x83,0x2D);
3669:Src/main.c    **** 	VXISI2CWrite(0x84,0x57);
3670:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
3671:Src/main.c    **** 	VXISI2CWrite(0x86,0x00);
3672:Src/main.c    **** 	VXISI2CWrite(0x87,0x00);
3673:Src/main.c    **** 	VXISI2CWrite(0x88,0x00);
3674:Src/main.c    **** 	VXISI2CWrite(0x89,0x00);
3675:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
3676:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
3677:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
3678:Src/main.c    **** 	VXISI2CWrite(0x8D,0x17);
3679:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
3680:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
3681:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
3682:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
ARM GAS  /tmp/cc8epWVM.s 			page 66


3683:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
3684:Src/main.c    **** 	VXISI2CWrite(0x93,0x84);
3685:Src/main.c    **** 	VXISI2CWrite(0x94,0x98);
3686:Src/main.c    **** 	VXISI2CWrite(0x95,0x80);
3687:Src/main.c    **** 	VXISI2CWrite(0x96,0x65);
3688:Src/main.c    **** 	VXISI2CWrite(0x97,0x70);
3689:Src/main.c    **** 	VXISI2CWrite(0x98,0x29);
3690:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
3691:Src/main.c    **** 	VXISI2CWrite(0x9A,0x00);
3692:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
3693:Src/main.c    **** 	VXISI2CWrite(0x9C,0x00);
3694:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
3695:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
3696:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
3697:Src/main.c    **** 	VXISI2CWrite(0xA0,0x80);
3698:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD8);
3699:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
3700:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
3701:Src/main.c    **** 	VXISI2CWrite(0xA4,0x00);
3702:Src/main.c    **** 	VXISI2CWrite(0xA5,0x80);
3703:Src/main.c    **** 	VXISI2CWrite(0xA6,0x00);
3704:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
3705:Src/main.c    **** 	VXISI2CWrite(0xA8,0x40);
3706:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
3707:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2C);
3708:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
3709:Src/main.c    **** 	VXISI2CWrite(0xAC,0x90);
3710:Src/main.c    **** 	VXISI2CWrite(0xAD,0x65);
3711:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
3712:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
3713:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
3714:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
3715:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
3716:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
3717:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
3718:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
3719:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
3720:Src/main.c    **** 	VXISI2CWrite(0xB7,0x00);
3721:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
3722:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
3723:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
3724:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
3725:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
3726:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
3727:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
3728:Src/main.c    **** 	VXISI2CWrite(0xBF,0x00);
3729:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
3730:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
3731:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
3732:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
3733:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
3734:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
3735:Src/main.c    **** 	VXISI2CWrite(0xC6,0x00);
3736:Src/main.c    **** 	VXISI2CWrite(0xC7,0x00);
3737:Src/main.c    **** 	VXISI2CWrite(0xC8,0x00);
3738:Src/main.c    **** 	VXISI2CWrite(0xC9,0x00);
3739:Src/main.c    **** 	VXISI2CWrite(0xCA,0x00);
ARM GAS  /tmp/cc8epWVM.s 			page 67


3740:Src/main.c    **** 	VXISI2CWrite(0xCB,0x00);
3741:Src/main.c    **** 	VXISI2CWrite(0xCC,0x00);
3742:Src/main.c    **** 	VXISI2CWrite(0xCD,0x00);
3743:Src/main.c    **** 	VXISI2CWrite(0xCE,0x00);
3744:Src/main.c    **** 	VXISI2CWrite(0xCF,0x00);
3745:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
3746:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
3747:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
3748:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
3749:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
3750:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
3751:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
3752:Src/main.c    **** 	VXISI2CWrite(0xD7,0x0F);
3753:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
3754:Src/main.c    **** 	VXISI2CWrite(0xD9,0x00);
3755:Src/main.c    **** 	VXISI2CWrite(0xDA,0x00);
3756:Src/main.c    **** 	VXISI2CWrite(0xDB,0x00);
3757:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
3758:Src/main.c    **** 	VXISI2CWrite(0xDD,0x01);
3759:Src/main.c    **** 	VXISI2CWrite(0xDE,0x5F);
3760:Src/main.c    **** 	VXISI2CWrite(0xDF,0x96);
3761:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
3762:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
3763:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
3764:Src/main.c    **** 	VXISI2CWrite(0xE3,0x47);
3765:Src/main.c    **** 	VXISI2CWrite(0xE4,0x3C);
3766:Src/main.c    **** 	VXISI2CWrite(0xE5,0x80);
3767:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
3768:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
3769:Src/main.c    **** 	VXISI2CWrite(0xE8,0x00);
3770:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
3771:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
3772:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
3773:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
3774:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
3775:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
3776:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
3777:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
3778:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
3779:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
3780:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
3781:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
3782:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
3783:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
3784:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
3785:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
3786:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
3787:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
3788:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
3789:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
3790:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
3791:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
3792:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
3793:Src/main.c    **** 
3794:Src/main.c    **** }
3795:Src/main.c    **** /**
3796:Src/main.c    ****   * @brief System Clock Configuration
ARM GAS  /tmp/cc8epWVM.s 			page 68


3797:Src/main.c    ****   * @retval None
3798:Src/main.c    ****   */
3799:Src/main.c    ****   #if 0//crystal
3800:Src/main.c    **** 
3801:Src/main.c    ****   void SystemClock_Config(void)
3802:Src/main.c    ****   {
3803:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
3804:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
3805:Src/main.c    ****   
3806:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks 
3807:Src/main.c    **** 	*/
3808:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
3809:Src/main.c    **** 	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
3810:Src/main.c    **** 	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
3811:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
3812:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
3813:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
3814:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
3815:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3816:Src/main.c    **** 	{
3817:Src/main.c    **** 	  Error_Handler();
3818:Src/main.c    **** 	}
3819:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks 
3820:Src/main.c    **** 	*/
3821:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
3822:Src/main.c    **** 								|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
3823:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
3824:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
3825:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
3826:Src/main.c    **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
3827:Src/main.c    ****   
3828:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
3829:Src/main.c    **** 	{
3830:Src/main.c    **** 	  Error_Handler();
3831:Src/main.c    **** 	}
3832:Src/main.c    ****   }
3833:Src/main.c    **** 
3834:Src/main.c    ****   #else
3835:Src/main.c    **** void SystemClock_Config(void)
3836:Src/main.c    **** {
3837:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
3838:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
3839:Src/main.c    **** 
3840:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
3841:Src/main.c    ****   */
3842:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
3843:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
3844:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
3845:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
3846:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
3847:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
3848:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3849:Src/main.c    ****   {
3850:Src/main.c    ****     Error_Handler();
3851:Src/main.c    ****   }
3852:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
3853:Src/main.c    ****   */
ARM GAS  /tmp/cc8epWVM.s 			page 69


3854:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
3855:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
3856:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
3857:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
3858:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
3859:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
3860:Src/main.c    **** 
3861:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
3862:Src/main.c    ****   {
3863:Src/main.c    ****     Error_Handler();
3864:Src/main.c    ****   }
3865:Src/main.c    **** }
3866:Src/main.c    **** #endif
3867:Src/main.c    **** /**
3868:Src/main.c    ****   * @brief ADC1 Initialization Function.
3869:Src/main.c    ****   * @param None
3870:Src/main.c    ****   * @retval None
3871:Src/main.c    ****   */
3872:Src/main.c    ****   #if 0
3873:Src/main.c    **** static void MX_ADC1_Init(void)
3874:Src/main.c    **** {
3875:Src/main.c    **** 
3876:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
3877:Src/main.c    **** 
3878:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
3879:Src/main.c    **** 
3880:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
3881:Src/main.c    **** 
3882:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
3883:Src/main.c    **** 
3884:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
3885:Src/main.c    ****   /** Common config 
3886:Src/main.c    ****   */
3887:Src/main.c    ****   hadc1.Instance = ADC1;
3888:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
3889:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
3890:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
3891:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
3892:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
3893:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
3894:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
3895:Src/main.c    ****   {
3896:Src/main.c    ****     Error_Handler();
3897:Src/main.c    ****   }
3898:Src/main.c    ****   /** Configure Regular Channel 
3899:Src/main.c    ****   */
3900:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_13;
3901:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
3902:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
3903:Src/main.c    ****   /*
3904:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
3905:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
3906:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
3907:Src/main.c    ****   sConfig.Offset = 0;
3908:Src/main.c    ****   */
3909:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
3910:Src/main.c    ****   {
ARM GAS  /tmp/cc8epWVM.s 			page 70


3911:Src/main.c    ****     Error_Handler();
3912:Src/main.c    ****   }
3913:Src/main.c    **** 
3914:Src/main.c    **** 
3915:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
3916:Src/main.c    **** HAL_ADC_MspInit(&hadc1);
3917:Src/main.c    **** 
3918:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
3919:Src/main.c    **** 
3920:Src/main.c    **** }
3921:Src/main.c    **** #endif
3922:Src/main.c    **** /**
3923:Src/main.c    ****   * @brief TIM2 Initialization Function
3924:Src/main.c    ****   * @param None
3925:Src/main.c    ****   * @retval None
3926:Src/main.c    ****   */
3927:Src/main.c    ****   #if 0
3928:Src/main.c    **** static void MX_TIM2_Init(void)
3929:Src/main.c    **** {
3930:Src/main.c    **** 
3931:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
3932:Src/main.c    **** 
3933:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
3934:Src/main.c    ****   ///TIM_ClockConfigTypeDef sClockSourceConfig = {0};
3935:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
3936:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
3937:Src/main.c    **** 
3938:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
3939:Src/main.c    **** 
3940:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
3941:Src/main.c    ****   htim2.Instance = TIM2;
3942:Src/main.c    ****   htim2.Init.Prescaler = (35/4);
3943:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
3944:Src/main.c    ****   htim2.Init.Period = 4000;
3945:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
3946:Src/main.c    ****  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE; 
3947:Src/main.c    **** /*
3948:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
3949:Src/main.c    **** 	{
3950:Src/main.c    **** 	  Error_Handler();
3951:Src/main.c    **** 	}
3952:Src/main.c    **** 	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
3953:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
3954:Src/main.c    **** 	{
3955:Src/main.c    **** 	  Error_Handler();
3956:Src/main.c    **** 	}
3957:Src/main.c    **** */
3958:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
3959:Src/main.c    ****   {
3960:Src/main.c    ****    Error_Handler();
3961:Src/main.c    ****   }
3962:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
3963:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
3964:Src/main.c    **** 
3965:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
3966:Src/main.c    ****   {
3967:Src/main.c    ****    Error_Handler();
ARM GAS  /tmp/cc8epWVM.s 			page 71


3968:Src/main.c    ****   }
3969:Src/main.c    ****   
3970:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
3971:Src/main.c    **** //  sConfigOC.Pulse = 4000;
3972:Src/main.c    ****   sConfigOC.Pulse = 0;
3973:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
3974:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
3975:Src/main.c    **** 
3976:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
3977:Src/main.c    ****   {
3978:Src/main.c    ****    Error_Handler();
3979:Src/main.c    ****   }
3980:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
3981:Src/main.c    **** 
3982:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
3983:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
3984:Src/main.c    **** 
3985:Src/main.c    **** //TIMOCInitStructure.TIM_Pulse =(period); 						   
3986:Src/main.c    **** 
3987:Src/main.c    **** //TIMOCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;	   
3988:Src/main.c    **** //TIMOCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
3989:Src/main.c    **** //TIM_OC3Init(TIM3, &TIMOCInitStructure); 				   
3990:Src/main.c    **** 				   
3991:Src/main.c    **** 
3992:Src/main.c    **** //TIM_Cmd(TIM3, ENABLE);
3993:Src/main.c    **** 
3994:Src/main.c    **** }
3995:Src/main.c    **** #endif
3996:Src/main.c    **** /**
3997:Src/main.c    ****   * @brief TIM3 Initialization Function
3998:Src/main.c    ****   * @param None
3999:Src/main.c    ****   * @retval None
4000:Src/main.c    ****   */
4001:Src/main.c    **** static void MX_TIM3_Init(void)
4002:Src/main.c    **** {
4003:Src/main.c    **** 
4004:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
4005:Src/main.c    **** 
4006:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
4007:Src/main.c    **** 
4008:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
4009:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
4010:Src/main.c    **** 
4011:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
4012:Src/main.c    **** 
4013:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
4014:Src/main.c    ****   htim3.Instance = TIM3;
4015:Src/main.c    ****   htim3.Init.Prescaler = 35;
4016:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
4017:Src/main.c    ****   htim3.Init.Period = 9;
4018:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
4019:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
4020:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
4021:Src/main.c    ****   {
4022:Src/main.c    ****     Error_Handler();
4023:Src/main.c    ****   }
4024:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
ARM GAS  /tmp/cc8epWVM.s 			page 72


4025:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
4026:Src/main.c    ****   {
4027:Src/main.c    ****     Error_Handler();
4028:Src/main.c    ****   }
4029:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
4030:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
4031:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
4032:Src/main.c    ****   {
4033:Src/main.c    ****     Error_Handler();
4034:Src/main.c    ****   }
4035:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
4036:Src/main.c    **** 
4037:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
4038:Src/main.c    **** 
4039:Src/main.c    **** }
4040:Src/main.c    **** 
4041:Src/main.c    **** /**
4042:Src/main.c    ****   * @brief USART1 Initialization Function
4043:Src/main.c    ****   * @param None
4044:Src/main.c    ****   * @retval None
4045:Src/main.c    ****   */
4046:Src/main.c    **** static void MX_USART1_UART_Init(void)
4047:Src/main.c    **** {
4048:Src/main.c    **** 
4049:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
4050:Src/main.c    **** 
4051:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
4052:Src/main.c    **** 
4053:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
4054:Src/main.c    **** 
4055:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
4056:Src/main.c    ****   huart1.Instance = USART1;
4057:Src/main.c    **** //  huart1.Init.BaudRate = 9600;
4058:Src/main.c    ****   huart1.Init.BaudRate = 115200;
4059:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
4060:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
4061:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
4062:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
4063:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
4064:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
4065:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
4066:Src/main.c    ****   {
4067:Src/main.c    ****     Error_Handler();
4068:Src/main.c    ****   }
4069:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
4070:Src/main.c    **** 
4071:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
4072:Src/main.c    **** 
4073:Src/main.c    **** }
4074:Src/main.c    **** 
4075:Src/main.c    **** /**
4076:Src/main.c    ****   * @brief USART2 Initialization Function
4077:Src/main.c    ****   * @param None
4078:Src/main.c    ****   * @retval None
4079:Src/main.c    ****   */
4080:Src/main.c    **** static void MX_USART2_UART_Init(void)
4081:Src/main.c    **** {
ARM GAS  /tmp/cc8epWVM.s 			page 73


4082:Src/main.c    **** 
4083:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
4084:Src/main.c    **** 
4085:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
4086:Src/main.c    **** 
4087:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
4088:Src/main.c    **** 
4089:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
4090:Src/main.c    ****   huart2.Instance = USART2;
4091:Src/main.c    ****   huart2.Init.BaudRate = 38400;
4092:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
4093:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
4094:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
4095:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
4096:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
4097:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
4098:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
4099:Src/main.c    ****   {
4100:Src/main.c    ****     Error_Handler();
4101:Src/main.c    ****   }
4102:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
4103:Src/main.c    **** 
4104:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
4105:Src/main.c    **** 
4106:Src/main.c    **** }
4107:Src/main.c    **** 
4108:Src/main.c    **** /**
4109:Src/main.c    ****   * @brief GPIO Initialization Function
4110:Src/main.c    ****   * @param None
4111:Src/main.c    ****   * @retval None
4112:Src/main.c    ****   */
4113:Src/main.c    **** static void MX_GPIO_Init(void)
4114:Src/main.c    **** {
  25              		.loc 1 4114 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 89B0     		sub	sp, sp, #36
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 56
4115:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 4115 0
  41 0004 0025     		movs	r5, #0
  42 0006 0495     		str	r5, [sp, #16]
  43 0008 0595     		str	r5, [sp, #20]
  44 000a 0695     		str	r5, [sp, #24]
  45 000c 0795     		str	r5, [sp, #28]
  46              	.LBB2:
4116:Src/main.c    **** 
ARM GAS  /tmp/cc8epWVM.s 			page 74


4117:Src/main.c    ****   /* GPIO Ports Clock Enable */
4118:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  47              		.loc 1 4118 0
  48 000e 2E4B     		ldr	r3, .L3
  49 0010 9A69     		ldr	r2, [r3, #24]
  50 0012 42F00402 		orr	r2, r2, #4
  51 0016 9A61     		str	r2, [r3, #24]
  52 0018 9A69     		ldr	r2, [r3, #24]
  53 001a 02F00402 		and	r2, r2, #4
  54 001e 0092     		str	r2, [sp]
  55 0020 009A     		ldr	r2, [sp]
  56              	.LBE2:
  57              	.LBB3:
4119:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  58              		.loc 1 4119 0
  59 0022 9A69     		ldr	r2, [r3, #24]
  60 0024 42F00802 		orr	r2, r2, #8
  61 0028 9A61     		str	r2, [r3, #24]
  62 002a 9A69     		ldr	r2, [r3, #24]
  63 002c 02F00802 		and	r2, r2, #8
  64 0030 0192     		str	r2, [sp, #4]
  65 0032 019A     		ldr	r2, [sp, #4]
  66              	.LBE3:
  67              	.LBB4:
4120:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  68              		.loc 1 4120 0
  69 0034 9A69     		ldr	r2, [r3, #24]
  70 0036 42F01002 		orr	r2, r2, #16
  71 003a 9A61     		str	r2, [r3, #24]
  72 003c 9A69     		ldr	r2, [r3, #24]
  73 003e 02F01002 		and	r2, r2, #16
  74 0042 0292     		str	r2, [sp, #8]
  75 0044 029A     		ldr	r2, [sp, #8]
  76              	.LBE4:
  77              	.LBB5:
4121:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  78              		.loc 1 4121 0
  79 0046 9A69     		ldr	r2, [r3, #24]
  80 0048 42F02002 		orr	r2, r2, #32
  81 004c 9A61     		str	r2, [r3, #24]
  82 004e 9B69     		ldr	r3, [r3, #24]
  83 0050 03F02003 		and	r3, r3, #32
  84 0054 0393     		str	r3, [sp, #12]
  85 0056 039B     		ldr	r3, [sp, #12]
  86              	.LBE5:
4122:Src/main.c    **** 
4123:Src/main.c    ****   /*Configure GPIO pin Output Level */
4124:Src/main.c    **** HAL_GPIO_WritePin(GPIOA, /*TX_RST_Pin|TP2824_RST_Pin|*/VS_RST_Pin, GPIO_PIN_SET);
  87              		.loc 1 4124 0
  88 0058 1C4F     		ldr	r7, .L3+4
  89 005a 0122     		movs	r2, #1
  90 005c 4FF48051 		mov	r1, #4096
  91 0060 3846     		mov	r0, r7
  92 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
  93              	.LVL0:
4125:Src/main.c    **** 
4126:Src/main.c    ****   /*Configure GPIO pins : TX_RST_Pin TP2824_RST_Pin VS_RST_Pin */
ARM GAS  /tmp/cc8epWVM.s 			page 75


4127:Src/main.c    ****   GPIO_InitStruct.Pin = VIDEO_LOSS;
  94              		.loc 1 4127 0
  95 0066 2023     		movs	r3, #32
  96 0068 0493     		str	r3, [sp, #16]
4128:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  97              		.loc 1 4128 0
  98 006a 0124     		movs	r4, #1
  99 006c 0594     		str	r4, [sp, #20]
4129:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 100              		.loc 1 4129 0
 101 006e 0694     		str	r4, [sp, #24]
4130:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 102              		.loc 1 4130 0
 103 0070 0226     		movs	r6, #2
 104 0072 0796     		str	r6, [sp, #28]
4131:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 105              		.loc 1 4131 0
 106 0074 04A9     		add	r1, sp, #16
 107 0076 3846     		mov	r0, r7
 108 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 109              	.LVL1:
4132:Src/main.c    **** 
4133:Src/main.c    ****   GPIO_InitStruct.Pin = HDMI_SELECT;
 110              		.loc 1 4133 0
 111 007c 1023     		movs	r3, #16
 112 007e 0493     		str	r3, [sp, #16]
4134:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 113              		.loc 1 4134 0
 114 0080 0595     		str	r5, [sp, #20]
4135:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 115              		.loc 1 4135 0
 116 0082 0694     		str	r4, [sp, #24]
4136:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 117              		.loc 1 4136 0
 118 0084 0DEB0301 		add	r1, sp, r3
 119 0088 3846     		mov	r0, r7
 120 008a FFF7FEFF 		bl	HAL_GPIO_Init
 121              	.LVL2:
4137:Src/main.c    **** 
4138:Src/main.c    **** 
4139:Src/main.c    ****   /*Configure GPIO pin : IR_IN_Pin */
4140:Src/main.c    **** /*
4141:Src/main.c    ****   GPIO_InitStruct.Pin = IR_IN_Pin;
4142:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
4143:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
4144:Src/main.c    ****   HAL_GPIO_Init(IR_IN_GPIO_Port, &GPIO_InitStruct);
4145:Src/main.c    **** */
4146:Src/main.c    ****   /*Configure GPIO pin : RX1_Pin */
4147:Src/main.c    ****   /*
4148:Src/main.c    ****   GPIO_InitStruct.Pin = RX1_Pin;
4149:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
4150:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
4151:Src/main.c    ****   HAL_GPIO_Init(RX1_GPIO_Port, &GPIO_InitStruct);
4152:Src/main.c    **** */
4153:Src/main.c    **** #if 0
4154:Src/main.c    ****    GPIO_InitStruct.Pin =DOWN_KEY_Pin|UP_KEY_Pin|MENU_KEY_Pin|POWER_KEY_Pin/*|TOUCH_INT*/;
4155:Src/main.c    ****   // GPIO_InitStruct.Pin =MENU_KEY_Pin|POWER_KEY_Pin;
ARM GAS  /tmp/cc8epWVM.s 			page 76


4156:Src/main.c    ****    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
4157:Src/main.c    ****    GPIO_InitStruct.Pull = GPIO_PULLUP;
4158:Src/main.c    ****    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
4159:Src/main.c    **** #endif
4160:Src/main.c    **** 
4161:Src/main.c    ****   GPIO_InitStruct.Pin =(/*PANEL_EN_Pin|*//*TOUCH_RESET|*/VS_RST_Pin|STM_SCL_Pin|STM_SDA_Pin);
 122              		.loc 1 4161 0
 123 008e 4FF4E053 		mov	r3, #7168
 124 0092 0493     		str	r3, [sp, #16]
4162:Src/main.c    **** //  GPIO_InitStruct.Pin =(PANEL_EN_Pin|TOUCH_RESET);
4163:Src/main.c    **** //  GPIO_InitStruct.Pin =(PANEL_EN_Pin|BL_PWM_Pin);
4164:Src/main.c    ****    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;//GPIO_MODE_OUTPUT_PP;///GPIO_MODE_OUTPUT_OD;
 125              		.loc 1 4164 0
 126 0094 0594     		str	r4, [sp, #20]
4165:Src/main.c    ****    GPIO_InitStruct.Pull =GPIO_PULLUP;// GPIO_PULLUP;
 127              		.loc 1 4165 0
 128 0096 0694     		str	r4, [sp, #24]
4166:Src/main.c    ****    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 129              		.loc 1 4166 0
 130 0098 0796     		str	r6, [sp, #28]
4167:Src/main.c    ****    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 131              		.loc 1 4167 0
 132 009a 04A9     		add	r1, sp, #16
 133 009c 0C48     		ldr	r0, .L3+8
 134 009e FFF7FEFF 		bl	HAL_GPIO_Init
 135              	.LVL3:
4168:Src/main.c    ****   /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin 
4169:Src/main.c    ****                            SW5_Pin SW6_Pin SW7_Pin */
4170:Src/main.c    **** //  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin 
4171:Src/main.c    ****    //                      |SW5_Pin|SW6_Pin|SW7_Pin|DOWN_KEY_Pin|UP_KEY_Pin|MENU_KEY_Pin|POWER_KEY_
4172:Src/main.c    ****   /*
4173:Src/main.c    **** 
4174:Src/main.c    ****   GPIO_InitStruct.Pin =DOWN_KEY_Pin|UP_KEY_Pin|MENU_KEY_Pin|POWER_KEY_Pin|TOUCH_INT;
4175:Src/main.c    ****  // GPIO_InitStruct.Pin =MENU_KEY_Pin|POWER_KEY_Pin;
4176:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
4177:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
4178:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
4179:Src/main.c    **** */
4180:Src/main.c    **** /*
4181:Src/main.c    ****   GPIO_InitStruct.Pin =DOWN_KEY_Pin|UP_KEY_Pin;
4182:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
4183:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
4184:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
4185:Src/main.c    **** */
4186:Src/main.c    ****   GPIO_InitStruct.Pin =TP2824_REST/*LCD_PWR_Pin|TTLI1_RES_Pin|AUD_SEL2_Pin|GREEN_LED_Pin |RED_LED_P
 136              		.loc 1 4186 0
 137 00a2 0496     		str	r6, [sp, #16]
4187:Src/main.c    **** //  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
4188:Src/main.c    **** //   GPIO_InitStruct.Pull = GPIO_PULLUP;
4189:Src/main.c    ****    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 138              		.loc 1 4189 0
 139 00a4 0594     		str	r4, [sp, #20]
4190:Src/main.c    ****    GPIO_InitStruct.Pull = GPIO_PULLUP;
 140              		.loc 1 4190 0
 141 00a6 0694     		str	r4, [sp, #24]
4191:Src/main.c    **** 
4192:Src/main.c    ****    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  /tmp/cc8epWVM.s 			page 77


 142              		.loc 1 4192 0
 143 00a8 0796     		str	r6, [sp, #28]
4193:Src/main.c    ****    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 144              		.loc 1 4193 0
 145 00aa 0A4E     		ldr	r6, .L3+12
 146 00ac 04A9     		add	r1, sp, #16
 147 00ae 3046     		mov	r0, r6
 148 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 149              	.LVL4:
4194:Src/main.c    **** 
4195:Src/main.c    **** 
4196:Src/main.c    **** //  GPIO_InitStruct.Pin =GREEN_LED_Pin|RED_LED_Pin;
4197:Src/main.c    ****   // GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
4198:Src/main.c    ****    //GPIO_InitStruct.Pull = GPIO_NOPULL;
4199:Src/main.c    ****    //GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
4200:Src/main.c    ****    //HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
4201:Src/main.c    **** 
4202:Src/main.c    ****   GPIO_InitStruct.Pin = TP2824_IRQ|MCU_WAKEUP|AUD_I2C_MUTE_Pin/*| JUMP_KEY_Pin*/;
 150              		.loc 1 4202 0
 151 00b4 4923     		movs	r3, #73
 152 00b6 0493     		str	r3, [sp, #16]
4203:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 153              		.loc 1 4203 0
 154 00b8 0595     		str	r5, [sp, #20]
4204:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 155              		.loc 1 4204 0
 156 00ba 0694     		str	r4, [sp, #24]
4205:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 157              		.loc 1 4205 0
 158 00bc 04A9     		add	r1, sp, #16
 159 00be 3046     		mov	r0, r6
 160 00c0 FFF7FEFF 		bl	HAL_GPIO_Init
 161              	.LVL5:
4206:Src/main.c    **** 
4207:Src/main.c    **** /*
4208:Src/main.c    ****   GPIO_InitStruct.Pin =AUD_SEL1_Pin;
4209:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
4210:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
4211:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
4212:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
4213:Src/main.c    ****   */
4214:Src/main.c    **** 
4215:Src/main.c    **** 
4216:Src/main.c    **** 	
4217:Src/main.c    **** 
4218:Src/main.c    ****   /* EXTI interrupt init*/
4219:Src/main.c    **** /*
4220:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
4221:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI2_IRQn);
4222:Src/main.c    **** */
4223:Src/main.c    **** }
 162              		.loc 1 4223 0
 163 00c4 09B0     		add	sp, sp, #36
 164              	.LCFI2:
 165              		.cfi_def_cfa_offset 20
 166              		@ sp needed
 167 00c6 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/cc8epWVM.s 			page 78


 168              	.L4:
 169              		.align	2
 170              	.L3:
 171 00c8 00100240 		.word	1073876992
 172 00cc 00080140 		.word	1073809408
 173 00d0 000C0140 		.word	1073810432
 174 00d4 00100140 		.word	1073811456
 175              		.cfi_endproc
 176              	.LFE99:
 178              		.section	.text.MX_TIM3_Init,"ax",%progbits
 179              		.align	1
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 183              		.fpu softvfp
 185              	MX_TIM3_Init:
 186              	.LFB96:
4002:Src/main.c    **** 
 187              		.loc 1 4002 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 24
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191 0000 30B5     		push	{r4, r5, lr}
 192              	.LCFI3:
 193              		.cfi_def_cfa_offset 12
 194              		.cfi_offset 4, -12
 195              		.cfi_offset 5, -8
 196              		.cfi_offset 14, -4
 197 0002 87B0     		sub	sp, sp, #28
 198              	.LCFI4:
 199              		.cfi_def_cfa_offset 40
4008:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 200              		.loc 1 4008 0
 201 0004 0024     		movs	r4, #0
 202 0006 0294     		str	r4, [sp, #8]
 203 0008 0394     		str	r4, [sp, #12]
 204 000a 0494     		str	r4, [sp, #16]
 205 000c 0594     		str	r4, [sp, #20]
4009:Src/main.c    **** 
 206              		.loc 1 4009 0
 207 000e 0094     		str	r4, [sp]
 208 0010 0194     		str	r4, [sp, #4]
4014:Src/main.c    ****   htim3.Init.Prescaler = 35;
 209              		.loc 1 4014 0
 210 0012 0E4D     		ldr	r5, .L7
 211 0014 0E4B     		ldr	r3, .L7+4
 212 0016 2B60     		str	r3, [r5]
4015:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 213              		.loc 1 4015 0
 214 0018 2323     		movs	r3, #35
 215 001a 6B60     		str	r3, [r5, #4]
4016:Src/main.c    ****   htim3.Init.Period = 9;
 216              		.loc 1 4016 0
 217 001c AC60     		str	r4, [r5, #8]
4017:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 218              		.loc 1 4017 0
 219 001e 0923     		movs	r3, #9
ARM GAS  /tmp/cc8epWVM.s 			page 79


 220 0020 EB60     		str	r3, [r5, #12]
4018:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 221              		.loc 1 4018 0
 222 0022 2C61     		str	r4, [r5, #16]
4019:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 223              		.loc 1 4019 0
 224 0024 8023     		movs	r3, #128
 225 0026 AB61     		str	r3, [r5, #24]
4020:Src/main.c    ****   {
 226              		.loc 1 4020 0
 227 0028 2846     		mov	r0, r5
 228 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 229              	.LVL6:
4024:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 230              		.loc 1 4024 0
 231 002e 4FF48053 		mov	r3, #4096
 232 0032 0293     		str	r3, [sp, #8]
4025:Src/main.c    ****   {
 233              		.loc 1 4025 0
 234 0034 02A9     		add	r1, sp, #8
 235 0036 2846     		mov	r0, r5
 236 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 237              	.LVL7:
4029:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 238              		.loc 1 4029 0
 239 003c 0094     		str	r4, [sp]
4030:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 240              		.loc 1 4030 0
 241 003e 0194     		str	r4, [sp, #4]
4031:Src/main.c    ****   {
 242              		.loc 1 4031 0
 243 0040 6946     		mov	r1, sp
 244 0042 2846     		mov	r0, r5
 245 0044 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 246              	.LVL8:
4039:Src/main.c    **** 
 247              		.loc 1 4039 0
 248 0048 07B0     		add	sp, sp, #28
 249              	.LCFI5:
 250              		.cfi_def_cfa_offset 12
 251              		@ sp needed
 252 004a 30BD     		pop	{r4, r5, pc}
 253              	.L8:
 254              		.align	2
 255              	.L7:
 256 004c 00000000 		.word	htim3
 257 0050 00040040 		.word	1073742848
 258              		.cfi_endproc
 259              	.LFE96:
 261              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 262              		.align	1
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 266              		.fpu softvfp
 268              	MX_USART1_UART_Init:
 269              	.LFB97:
ARM GAS  /tmp/cc8epWVM.s 			page 80


4047:Src/main.c    **** 
 270              		.loc 1 4047 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274 0000 08B5     		push	{r3, lr}
 275              	.LCFI6:
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 3, -8
 278              		.cfi_offset 14, -4
4056:Src/main.c    **** //  huart1.Init.BaudRate = 9600;
 279              		.loc 1 4056 0
 280 0002 0848     		ldr	r0, .L11
 281 0004 084B     		ldr	r3, .L11+4
 282 0006 0360     		str	r3, [r0]
4058:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 283              		.loc 1 4058 0
 284 0008 4FF4E133 		mov	r3, #115200
 285 000c 4360     		str	r3, [r0, #4]
4059:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 286              		.loc 1 4059 0
 287 000e 0023     		movs	r3, #0
 288 0010 8360     		str	r3, [r0, #8]
4060:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 289              		.loc 1 4060 0
 290 0012 C360     		str	r3, [r0, #12]
4061:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 291              		.loc 1 4061 0
 292 0014 0361     		str	r3, [r0, #16]
4062:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 293              		.loc 1 4062 0
 294 0016 0C22     		movs	r2, #12
 295 0018 4261     		str	r2, [r0, #20]
4063:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 296              		.loc 1 4063 0
 297 001a 8361     		str	r3, [r0, #24]
4064:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 298              		.loc 1 4064 0
 299 001c C361     		str	r3, [r0, #28]
4065:Src/main.c    ****   {
 300              		.loc 1 4065 0
 301 001e FFF7FEFF 		bl	HAL_UART_Init
 302              	.LVL9:
4073:Src/main.c    **** 
 303              		.loc 1 4073 0
 304 0022 08BD     		pop	{r3, pc}
 305              	.L12:
 306              		.align	2
 307              	.L11:
 308 0024 00000000 		.word	huart1
 309 0028 00380140 		.word	1073821696
 310              		.cfi_endproc
 311              	.LFE97:
 313              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 314              		.align	1
 315              		.syntax unified
 316              		.thumb
ARM GAS  /tmp/cc8epWVM.s 			page 81


 317              		.thumb_func
 318              		.fpu softvfp
 320              	MX_USART2_UART_Init:
 321              	.LFB98:
4081:Src/main.c    **** 
 322              		.loc 1 4081 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326 0000 08B5     		push	{r3, lr}
 327              	.LCFI7:
 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 3, -8
 330              		.cfi_offset 14, -4
4090:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 331              		.loc 1 4090 0
 332 0002 0848     		ldr	r0, .L15
 333 0004 084B     		ldr	r3, .L15+4
 334 0006 0360     		str	r3, [r0]
4091:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 335              		.loc 1 4091 0
 336 0008 4FF41643 		mov	r3, #38400
 337 000c 4360     		str	r3, [r0, #4]
4092:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 338              		.loc 1 4092 0
 339 000e 0023     		movs	r3, #0
 340 0010 8360     		str	r3, [r0, #8]
4093:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 341              		.loc 1 4093 0
 342 0012 C360     		str	r3, [r0, #12]
4094:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 343              		.loc 1 4094 0
 344 0014 0361     		str	r3, [r0, #16]
4095:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 345              		.loc 1 4095 0
 346 0016 0C22     		movs	r2, #12
 347 0018 4261     		str	r2, [r0, #20]
4096:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 348              		.loc 1 4096 0
 349 001a 8361     		str	r3, [r0, #24]
4097:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 350              		.loc 1 4097 0
 351 001c C361     		str	r3, [r0, #28]
4098:Src/main.c    ****   {
 352              		.loc 1 4098 0
 353 001e FFF7FEFF 		bl	HAL_UART_Init
 354              	.LVL10:
4106:Src/main.c    **** 
 355              		.loc 1 4106 0
 356 0022 08BD     		pop	{r3, pc}
 357              	.L16:
 358              		.align	2
 359              	.L15:
 360 0024 00000000 		.word	huart2
 361 0028 00440040 		.word	1073759232
 362              		.cfi_endproc
 363              	.LFE98:
ARM GAS  /tmp/cc8epWVM.s 			page 82


 365              		.section	.text.HDMI_AudioModeDetect,"ax",%progbits
 366              		.align	1
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 370              		.fpu softvfp
 372              	HDMI_AudioModeDetect:
 373              	.LFB76:
1310:Src/main.c    ****     tByte pbAudioSampleFreq, pbValidCh ;
 374              		.loc 1 1310 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 8
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378 0000 00B5     		push	{lr}
 379              	.LCFI8:
 380              		.cfi_def_cfa_offset 4
 381              		.cfi_offset 14, -4
 382 0002 83B0     		sub	sp, sp, #12
 383              	.LCFI9:
 384              		.cfi_def_cfa_offset 16
1312:Src/main.c    **** 
 385              		.loc 1 1312 0
 386 0004 0023     		movs	r3, #0
 387 0006 8DF80730 		strb	r3, [sp, #7]
1314:Src/main.c    **** 
 388              		.loc 1 1314 0
 389 000a 0DF10601 		add	r1, sp, #6
 390 000e 0DF10700 		add	r0, sp, #7
 391 0012 FFF7FEFF 		bl	getHDMIRXAudioInfo
 392              	.LVL11:
1316:Src/main.c    ****     {
 393              		.loc 1 1316 0
 394 0016 0E4B     		ldr	r3, .L21
 395 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 396 001a 042B     		cmp	r3, #4
 397 001c 03D0     		beq	.L18
1318:Src/main.c    ****         {
 398              		.loc 1 1318 0
 399 001e 0D4A     		ldr	r2, .L21+4
 400 0020 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 401 0022 9342     		cmp	r3, r2
 402 0024 08D0     		beq	.L20
 403              	.L18:
1327:Src/main.c    **** }
 404              		.loc 1 1327 0
 405 0026 0B4B     		ldr	r3, .L21+4
 406 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 407 002a 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 408 002e 0A4A     		ldr	r2, .L21+8
 409 0030 D154     		strb	r1, [r2, r3]
1328:Src/main.c    **** 
 410              		.loc 1 1328 0
 411 0032 03B0     		add	sp, sp, #12
 412              	.LCFI10:
 413              		.cfi_remember_state
 414              		.cfi_def_cfa_offset 4
 415              		@ sp needed
ARM GAS  /tmp/cc8epWVM.s 			page 83


 416 0034 5DF804FB 		ldr	pc, [sp], #4
 417              	.L20:
 418              	.LCFI11:
 419              		.cfi_restore_state
1320:Src/main.c    ****             {
 420              		.loc 1 1320 0
 421 0038 084B     		ldr	r3, .L21+12
 422 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 423 003c 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 424 0040 8342     		cmp	r3, r0
 425 0042 F0D0     		beq	.L18
1322:Src/main.c    ****                 HDMI_Tx_SetAudioFs(gPreAudioSampleFreq )  ;
 426              		.loc 1 1322 0
 427 0044 054B     		ldr	r3, .L21+12
 428 0046 1870     		strb	r0, [r3]
1323:Src/main.c    ****             }
 429              		.loc 1 1323 0
 430 0048 FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 431              	.LVL12:
 432 004c EBE7     		b	.L18
 433              	.L22:
 434 004e 00BF     		.align	2
 435              	.L21:
 436 0050 00000000 		.word	.LANCHOR0
 437 0054 00000000 		.word	gHDMI_Index
 438 0058 00000000 		.word	.LANCHOR1
 439 005c 00000000 		.word	gPreAudioSampleFreq
 440              		.cfi_endproc
 441              	.LFE76:
 443              		.section	.text._write,"ax",%progbits
 444              		.align	1
 445              		.global	_write
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu softvfp
 451              	_write:
 452              	.LFB68:
 256:Src/main.c    ****     if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 453              		.loc 1 256 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              	.LVL13:
 458 0000 10B5     		push	{r4, lr}
 459              	.LCFI12:
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 4, -8
 462              		.cfi_offset 14, -4
 257:Src/main.c    ****     {
 463              		.loc 1 257 0
 464 0002 0138     		subs	r0, r0, #1
 465              	.LVL14:
 466 0004 0128     		cmp	r0, #1
 467 0006 09D8     		bhi	.L28
 468 0008 1446     		mov	r4, r2
 263:Src/main.c    ****         HAL_UART_Transmit(&huart1, (uint8_t*)data, (uint16_t)len, 1000);
ARM GAS  /tmp/cc8epWVM.s 			page 84


 469              		.loc 1 263 0
 470 000a 4FF47A73 		mov	r3, #1000
 471 000e 92B2     		uxth	r2, r2
 472              	.LVL15:
 473 0010 0748     		ldr	r0, .L30
 474              	.LVL16:
 475 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 476              	.LVL17:
 266:Src/main.c    **** }
 477              		.loc 1 266 0
 478 0016 40B1     		cbz	r0, .L29
 479 0018 0020     		movs	r0, #0
 480              	.LVL18:
 481              	.L23:
 267:Src/main.c    **** #else
 482              		.loc 1 267 0
 483 001a 10BD     		pop	{r4, pc}
 484              	.LVL19:
 485              	.L28:
 259:Src/main.c    ****         return -1;
 486              		.loc 1 259 0
 487 001c FFF7FEFF 		bl	__errno
 488              	.LVL20:
 489 0020 0923     		movs	r3, #9
 490 0022 0360     		str	r3, [r0]
 260:Src/main.c    ****     }
 491              		.loc 1 260 0
 492 0024 4FF0FF30 		mov	r0, #-1
 493 0028 F7E7     		b	.L23
 494              	.LVL21:
 495              	.L29:
 266:Src/main.c    **** }
 496              		.loc 1 266 0
 497 002a 2046     		mov	r0, r4
 498              	.LVL22:
 499 002c F5E7     		b	.L23
 500              	.L31:
 501 002e 00BF     		.align	2
 502              	.L30:
 503 0030 00000000 		.word	huart1
 504              		.cfi_endproc
 505              	.LFE68:
 507              		.section	.text.Audio_Sel,"ax",%progbits
 508              		.align	1
 509              		.global	Audio_Sel
 510              		.syntax unified
 511              		.thumb
 512              		.thumb_func
 513              		.fpu softvfp
 515              	Audio_Sel:
 516              	.LFB69:
 279:Src/main.c    ****     gbAUDO_INDEX = mode ;
 517              		.loc 1 279 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              	.LVL23:
ARM GAS  /tmp/cc8epWVM.s 			page 85


 522 0000 38B5     		push	{r3, r4, r5, lr}
 523              	.LCFI13:
 524              		.cfi_def_cfa_offset 16
 525              		.cfi_offset 3, -16
 526              		.cfi_offset 4, -12
 527              		.cfi_offset 5, -8
 528              		.cfi_offset 14, -4
 280:Src/main.c    ****     switch(mode)
 529              		.loc 1 280 0
 530 0002 5B4B     		ldr	r3, .L41
 531 0004 1870     		strb	r0, [r3]
 281:Src/main.c    ****     {
 532              		.loc 1 281 0
 533 0006 0428     		cmp	r0, #4
 534 0008 20D8     		bhi	.L32
 535 000a DFE800F0 		tbb	[pc, r0]
 536              	.L35:
 537 000e 20       		.byte	(.L34-.L35)/2
 538 000f 44       		.byte	(.L36-.L35)/2
 539 0010 68       		.byte	(.L37-.L35)/2
 540 0011 8C       		.byte	(.L38-.L35)/2
 541 0012 03       		.byte	(.L39-.L35)/2
 542 0013 00       		.p2align 1
 543              	.L39:
 291:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 544              		.loc 1 291 0
 545 0014 574D     		ldr	r5, .L41+4
 546 0016 0122     		movs	r2, #1
 547 0018 4021     		movs	r1, #64
 548 001a 2846     		mov	r0, r5
 549              	.LVL24:
 550 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 551              	.LVL25:
 292:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 552              		.loc 1 292 0
 553 0020 554C     		ldr	r4, .L41+8
 554 0022 0122     		movs	r2, #1
 555 0024 2021     		movs	r1, #32
 556 0026 2046     		mov	r0, r4
 557 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 558              	.LVL26:
 293:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 559              		.loc 1 293 0
 560 002c 0122     		movs	r2, #1
 561 002e 1021     		movs	r1, #16
 562 0030 2046     		mov	r0, r4
 563 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 564              	.LVL27:
 294:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 565              		.loc 1 294 0
 566 0036 0122     		movs	r2, #1
 567 0038 0821     		movs	r1, #8
 568 003a 2046     		mov	r0, r4
 569 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 570              	.LVL28:
 295:Src/main.c    ****         break ;
 571              		.loc 1 295 0
ARM GAS  /tmp/cc8epWVM.s 			page 86


 572 0040 0122     		movs	r2, #1
 573 0042 4FF40041 		mov	r1, #32768
 574 0046 2846     		mov	r0, r5
 575 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 576              	.LVL29:
 577              	.L32:
 372:Src/main.c    **** 
 578              		.loc 1 372 0
 579 004c 38BD     		pop	{r3, r4, r5, pc}
 580              	.LVL30:
 581              	.L34:
 307:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_RESET);
 582              		.loc 1 307 0
 583 004e 494D     		ldr	r5, .L41+4
 584 0050 0122     		movs	r2, #1
 585 0052 4021     		movs	r1, #64
 586 0054 2846     		mov	r0, r5
 587              	.LVL31:
 588 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 589              	.LVL32:
 308:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 590              		.loc 1 308 0
 591 005a 474C     		ldr	r4, .L41+8
 592 005c 0022     		movs	r2, #0
 593 005e 2021     		movs	r1, #32
 594 0060 2046     		mov	r0, r4
 595 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 596              	.LVL33:
 309:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 597              		.loc 1 309 0
 598 0066 0122     		movs	r2, #1
 599 0068 1021     		movs	r1, #16
 600 006a 2046     		mov	r0, r4
 601 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 602              	.LVL34:
 310:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 603              		.loc 1 310 0
 604 0070 0122     		movs	r2, #1
 605 0072 0821     		movs	r1, #8
 606 0074 2046     		mov	r0, r4
 607 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 608              	.LVL35:
 311:Src/main.c    **** 
 609              		.loc 1 311 0
 610 007a 0122     		movs	r2, #1
 611 007c 4FF40041 		mov	r1, #32768
 612 0080 2846     		mov	r0, r5
 613 0082 FFF7FEFF 		bl	HAL_GPIO_WritePin
 614              	.LVL36:
 313:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[0] ;
 615              		.loc 1 313 0
 616 0086 3D4C     		ldr	r4, .L41+12
 617 0088 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 618 008a FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 619              	.LVL37:
 314:Src/main.c    ****         break ;
 620              		.loc 1 314 0
ARM GAS  /tmp/cc8epWVM.s 			page 87


 621 008e 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 622 0090 3B4B     		ldr	r3, .L41+16
 623 0092 1A70     		strb	r2, [r3]
 315:Src/main.c    **** 
 624              		.loc 1 315 0
 625 0094 DAE7     		b	.L32
 626              	.LVL38:
 627              	.L36:
 326:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 628              		.loc 1 326 0
 629 0096 374D     		ldr	r5, .L41+4
 630 0098 0122     		movs	r2, #1
 631 009a 4021     		movs	r1, #64
 632 009c 2846     		mov	r0, r5
 633              	.LVL39:
 634 009e FFF7FEFF 		bl	HAL_GPIO_WritePin
 635              	.LVL40:
 327:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_RESET);
 636              		.loc 1 327 0
 637 00a2 354C     		ldr	r4, .L41+8
 638 00a4 0122     		movs	r2, #1
 639 00a6 2021     		movs	r1, #32
 640 00a8 2046     		mov	r0, r4
 641 00aa FFF7FEFF 		bl	HAL_GPIO_WritePin
 642              	.LVL41:
 328:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 643              		.loc 1 328 0
 644 00ae 0022     		movs	r2, #0
 645 00b0 1021     		movs	r1, #16
 646 00b2 2046     		mov	r0, r4
 647 00b4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 648              	.LVL42:
 329:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 649              		.loc 1 329 0
 650 00b8 0122     		movs	r2, #1
 651 00ba 0821     		movs	r1, #8
 652 00bc 2046     		mov	r0, r4
 653 00be FFF7FEFF 		bl	HAL_GPIO_WritePin
 654              	.LVL43:
 330:Src/main.c    **** 
 655              		.loc 1 330 0
 656 00c2 0122     		movs	r2, #1
 657 00c4 4FF40041 		mov	r1, #32768
 658 00c8 2846     		mov	r0, r5
 659 00ca FFF7FEFF 		bl	HAL_GPIO_WritePin
 660              	.LVL44:
 332:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[1] ;
 661              		.loc 1 332 0
 662 00ce 2B4C     		ldr	r4, .L41+12
 663 00d0 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 664 00d2 FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 665              	.LVL45:
 333:Src/main.c    ****         break ;
 666              		.loc 1 333 0
 667 00d6 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 668 00d8 294B     		ldr	r3, .L41+16
 669 00da 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cc8epWVM.s 			page 88


 334:Src/main.c    **** 
 670              		.loc 1 334 0
 671 00dc B6E7     		b	.L32
 672              	.LVL46:
 673              	.L37:
 344:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 674              		.loc 1 344 0
 675 00de 254D     		ldr	r5, .L41+4
 676 00e0 0022     		movs	r2, #0
 677 00e2 4021     		movs	r1, #64
 678 00e4 2846     		mov	r0, r5
 679              	.LVL47:
 680 00e6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 681              	.LVL48:
 345:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 682              		.loc 1 345 0
 683 00ea 234C     		ldr	r4, .L41+8
 684 00ec 0122     		movs	r2, #1
 685 00ee 2021     		movs	r1, #32
 686 00f0 2046     		mov	r0, r4
 687 00f2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 688              	.LVL49:
 346:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_RESET);
 689              		.loc 1 346 0
 690 00f6 0122     		movs	r2, #1
 691 00f8 1021     		movs	r1, #16
 692 00fa 2046     		mov	r0, r4
 693 00fc FFF7FEFF 		bl	HAL_GPIO_WritePin
 694              	.LVL50:
 347:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 695              		.loc 1 347 0
 696 0100 0022     		movs	r2, #0
 697 0102 0821     		movs	r1, #8
 698 0104 2046     		mov	r0, r4
 699 0106 FFF7FEFF 		bl	HAL_GPIO_WritePin
 700              	.LVL51:
 348:Src/main.c    **** 
 701              		.loc 1 348 0
 702 010a 0122     		movs	r2, #1
 703 010c 4FF40041 		mov	r1, #32768
 704 0110 2846     		mov	r0, r5
 705 0112 FFF7FEFF 		bl	HAL_GPIO_WritePin
 706              	.LVL52:
 350:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[2] ;
 707              		.loc 1 350 0
 708 0116 194C     		ldr	r4, .L41+12
 709 0118 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 710 011a FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 711              	.LVL53:
 351:Src/main.c    ****         break ;
 712              		.loc 1 351 0
 713 011e A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 714 0120 174B     		ldr	r3, .L41+16
 715 0122 1A70     		strb	r2, [r3]
 352:Src/main.c    **** 
 716              		.loc 1 352 0
 717 0124 92E7     		b	.L32
ARM GAS  /tmp/cc8epWVM.s 			page 89


 718              	.LVL54:
 719              	.L38:
 362:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 720              		.loc 1 362 0
 721 0126 134D     		ldr	r5, .L41+4
 722 0128 0022     		movs	r2, #0
 723 012a 4021     		movs	r1, #64
 724 012c 2846     		mov	r0, r5
 725              	.LVL55:
 726 012e FFF7FEFF 		bl	HAL_GPIO_WritePin
 727              	.LVL56:
 363:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 728              		.loc 1 363 0
 729 0132 114C     		ldr	r4, .L41+8
 730 0134 0122     		movs	r2, #1
 731 0136 2021     		movs	r1, #32
 732 0138 2046     		mov	r0, r4
 733 013a FFF7FEFF 		bl	HAL_GPIO_WritePin
 734              	.LVL57:
 364:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 735              		.loc 1 364 0
 736 013e 0122     		movs	r2, #1
 737 0140 1021     		movs	r1, #16
 738 0142 2046     		mov	r0, r4
 739 0144 FFF7FEFF 		bl	HAL_GPIO_WritePin
 740              	.LVL58:
 365:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_RESET);
 741              		.loc 1 365 0
 742 0148 0122     		movs	r2, #1
 743 014a 0821     		movs	r1, #8
 744 014c 2046     		mov	r0, r4
 745 014e FFF7FEFF 		bl	HAL_GPIO_WritePin
 746              	.LVL59:
 366:Src/main.c    **** 
 747              		.loc 1 366 0
 748 0152 0022     		movs	r2, #0
 749 0154 4FF40041 		mov	r1, #32768
 750 0158 2846     		mov	r0, r5
 751 015a FFF7FEFF 		bl	HAL_GPIO_WritePin
 752              	.LVL60:
 368:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[3] ;
 753              		.loc 1 368 0
 754 015e 074C     		ldr	r4, .L41+12
 755 0160 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 756 0162 FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 757              	.LVL61:
 369:Src/main.c    ****         break ;
 758              		.loc 1 369 0
 759 0166 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 760 0168 054B     		ldr	r3, .L41+16
 761 016a 1A70     		strb	r2, [r3]
 372:Src/main.c    **** 
 762              		.loc 1 372 0
 763 016c 6EE7     		b	.L32
 764              	.L42:
 765 016e 00BF     		.align	2
 766              	.L41:
ARM GAS  /tmp/cc8epWVM.s 			page 90


 767 0170 00000000 		.word	.LANCHOR0
 768 0174 00080140 		.word	1073809408
 769 0178 000C0140 		.word	1073810432
 770 017c 00000000 		.word	.LANCHOR1
 771 0180 00000000 		.word	gPreAudioSampleFreq
 772              		.cfi_endproc
 773              	.LFE69:
 775              		.section	.text.SET_Audio_Mute,"ax",%progbits
 776              		.align	1
 777              		.global	SET_Audio_Mute
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu softvfp
 783              	SET_Audio_Mute:
 784              	.LFB70:
 375:Src/main.c    **** 
 785              		.loc 1 375 0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              	.LVL62:
 790 0000 10B5     		push	{r4, lr}
 791              	.LCFI14:
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 4, -8
 794              		.cfi_offset 14, -4
 795 0002 0446     		mov	r4, r0
 377:Src/main.c    **** 	HAL_GPIO_WritePin(AUD_I2C_MUTE_Port,AUD_I2C_MUTE_Pin, GPIO_PIN_RESET);
 796              		.loc 1 377 0
 797 0004 0128     		cmp	r0, #1
 798 0006 09D0     		beq	.L47
 380:Src/main.c    **** 
 799              		.loc 1 380 0
 800 0008 0122     		movs	r2, #1
 801 000a 0821     		movs	r1, #8
 802 000c 0648     		ldr	r0, .L48
 803              	.LVL63:
 804 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 805              	.LVL64:
 806              	.L45:
 382:Src/main.c    **** 
 807              		.loc 1 382 0
 808 0012 2146     		mov	r1, r4
 809 0014 0548     		ldr	r0, .L48+4
 810 0016 FFF7FEFF 		bl	Printf
 811              	.LVL65:
 384:Src/main.c    **** 
 812              		.loc 1 384 0
 813 001a 10BD     		pop	{r4, pc}
 814              	.LVL66:
 815              	.L47:
 378:Src/main.c    **** else
 816              		.loc 1 378 0
 817 001c 0022     		movs	r2, #0
 818 001e 0821     		movs	r1, #8
 819 0020 0148     		ldr	r0, .L48
ARM GAS  /tmp/cc8epWVM.s 			page 91


 820              	.LVL67:
 821 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 822              	.LVL68:
 823 0026 F4E7     		b	.L45
 824              	.L49:
 825              		.align	2
 826              	.L48:
 827 0028 00100140 		.word	1073811456
 828 002c 00000000 		.word	.LC0
 829              		.cfi_endproc
 830              	.LFE70:
 832              		.section	.text.InitialTimerEvent,"ax",%progbits
 833              		.align	1
 834              		.global	InitialTimerEvent
 835              		.syntax unified
 836              		.thumb
 837              		.thumb_func
 838              		.fpu softvfp
 840              	InitialTimerEvent:
 841              	.LFB71:
 400:Src/main.c    **** 	MCUTimerInitialTimerEvent();  //clear all of timer event	
 842              		.loc 1 400 0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 0
 845              		@ frame_needed = 0, uses_anonymous_args = 0
 846 0000 08B5     		push	{r3, lr}
 847              	.LCFI15:
 848              		.cfi_def_cfa_offset 8
 849              		.cfi_offset 3, -8
 850              		.cfi_offset 14, -4
 401:Src/main.c    **** 
 851              		.loc 1 401 0
 852 0002 FFF7FEFF 		bl	MCUTimerInitialTimerEvent
 853              	.LVL69:
 421:Src/main.c    **** 
 854              		.loc 1 421 0
 855 0006 08BD     		pop	{r3, pc}
 856              		.cfi_endproc
 857              	.LFE71:
 859              		.section	.text.GetRS232_CMD,"ax",%progbits
 860              		.align	1
 861              		.global	GetRS232_CMD
 862              		.syntax unified
 863              		.thumb
 864              		.thumb_func
 865              		.fpu softvfp
 867              	GetRS232_CMD:
 868              	.LFB72:
 424:Src/main.c    ****     char achstr[3] ;
 869              		.loc 1 424 0
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 8
 872              		@ frame_needed = 0, uses_anonymous_args = 0
 428:Src/main.c    ****     {
 873              		.loc 1 428 0
 874 0000 174B     		ldr	r3, .L60
 875 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/cc8epWVM.s 			page 92


 876 0004 012B     		cmp	r3, #1
 877 0006 00D0     		beq	.L58
 878 0008 7047     		bx	lr
 879              	.L58:
 424:Src/main.c    ****     char achstr[3] ;
 880              		.loc 1 424 0
 881 000a 10B5     		push	{r4, lr}
 882              	.LCFI16:
 883              		.cfi_def_cfa_offset 8
 884              		.cfi_offset 4, -8
 885              		.cfi_offset 14, -4
 886 000c 82B0     		sub	sp, sp, #8
 887              	.LCFI17:
 888              		.cfi_def_cfa_offset 16
 430:Src/main.c    ****         printf("RxBufIndex=%d,str=%s\r\n",RxBufIndex, gRxbuf);
 889              		.loc 1 430 0
 890 000e 144B     		ldr	r3, .L60
 891 0010 0022     		movs	r2, #0
 892 0012 1A70     		strb	r2, [r3]
 431:Src/main.c    ****         if ( RxBufIndex >= 4 )
 893              		.loc 1 431 0
 894 0014 134C     		ldr	r4, .L60+4
 895 0016 2168     		ldr	r1, [r4]
 896 0018 134A     		ldr	r2, .L60+8
 897 001a 1448     		ldr	r0, .L60+12
 898 001c FFF7FEFF 		bl	printf
 899              	.LVL70:
 432:Src/main.c    ****         {
 900              		.loc 1 432 0
 901 0020 2368     		ldr	r3, [r4]
 902 0022 032B     		cmp	r3, #3
 903 0024 03DD     		ble	.L52
 434:Src/main.c    ****             {
 904              		.loc 1 434 0
 905 0026 104B     		ldr	r3, .L60+8
 906 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 907 002a 472B     		cmp	r3, #71
 908 002c 01D0     		beq	.L59
 909              	.L52:
 446:Src/main.c    **** 
 910              		.loc 1 446 0
 911 002e 02B0     		add	sp, sp, #8
 912              	.LCFI18:
 913              		.cfi_remember_state
 914              		.cfi_def_cfa_offset 8
 915              		@ sp needed
 916 0030 10BD     		pop	{r4, pc}
 917              	.L59:
 918              	.LCFI19:
 919              		.cfi_restore_state
 434:Src/main.c    ****             {
 920              		.loc 1 434 0 discriminator 1
 921 0032 0D4B     		ldr	r3, .L60+8
 922 0034 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 923 0036 672B     		cmp	r3, #103
 924 0038 F9D1     		bne	.L52
 436:Src/main.c    ****                 memcpy(&achstr[0], &gRxbuf[1], 2 ) ;
ARM GAS  /tmp/cc8epWVM.s 			page 93


 925              		.loc 1 436 0
 926 003a 0023     		movs	r3, #0
 927 003c 8DF80630 		strb	r3, [sp, #6]
 437:Src/main.c    ****                 IrNum = strtol(achstr, &endptr, 16) ;
 928              		.loc 1 437 0
 929 0040 094B     		ldr	r3, .L60+8
 930 0042 B3F80130 		ldrh	r3, [r3, #1]	@ unaligned
 931 0046 ADF80430 		strh	r3, [sp, #4]	@ movhi
 438:Src/main.c    ****                 printf("IrNum=0x%02x\r\n",(int)IrNum);
 932              		.loc 1 438 0
 933 004a 1022     		movs	r2, #16
 934 004c 6946     		mov	r1, sp
 935 004e 01A8     		add	r0, sp, #4
 936 0050 FFF7FEFF 		bl	strtol
 937              	.LVL71:
 439:Src/main.c    ****             }
 938              		.loc 1 439 0
 939 0054 0146     		mov	r1, r0
 940 0056 0648     		ldr	r0, .L60+16
 941              	.LVL72:
 942 0058 FFF7FEFF 		bl	printf
 943              	.LVL73:
 446:Src/main.c    **** 
 944              		.loc 1 446 0
 945 005c E7E7     		b	.L52
 946              	.L61:
 947 005e 00BF     		.align	2
 948              	.L60:
 949 0060 00000000 		.word	.LANCHOR2
 950 0064 00000000 		.word	.LANCHOR3
 951 0068 00000000 		.word	.LANCHOR4
 952 006c 00000000 		.word	.LC1
 953 0070 18000000 		.word	.LC2
 954              		.cfi_endproc
 955              	.LFE72:
 957              		.section	.text.setloopoutmode,"ax",%progbits
 958              		.align	1
 959              		.global	setloopoutmode
 960              		.syntax unified
 961              		.thumb
 962              		.thumb_func
 963              		.fpu softvfp
 965              	setloopoutmode:
 966              	.LFB73:
 450:Src/main.c    **** /*
 967              		.loc 1 450 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971              	.LVL74:
 972 0000 70B5     		push	{r4, r5, r6, lr}
 973              	.LCFI20:
 974              		.cfi_def_cfa_offset 16
 975              		.cfi_offset 4, -16
 976              		.cfi_offset 5, -12
 977              		.cfi_offset 6, -8
 978              		.cfi_offset 14, -4
ARM GAS  /tmp/cc8epWVM.s 			page 94


 979 0002 0446     		mov	r4, r0
 458:Src/main.c    ****     {
 980              		.loc 1 458 0
 981 0004 1328     		cmp	r0, #19
 982 0006 25D8     		bhi	.L63
 983 0008 DFE810F0 		tbh	[pc, r0, lsl #1]
 984              	.L65:
 985 000c 1400     		.2byte	(.L64-.L65)/2
 986 000e 3900     		.2byte	(.L66-.L65)/2
 987 0010 4A00     		.2byte	(.L67-.L65)/2
 988 0012 5C00     		.2byte	(.L68-.L65)/2
 989 0014 6E00     		.2byte	(.L69-.L65)/2
 990 0016 9500     		.2byte	(.L70-.L65)/2
 991 0018 2400     		.2byte	(.L63-.L65)/2
 992 001a 2400     		.2byte	(.L63-.L65)/2
 993 001c 2400     		.2byte	(.L63-.L65)/2
 994 001e A400     		.2byte	(.L71-.L65)/2
 995 0020 BA01     		.2byte	(.L72-.L65)/2
 996 0022 BD00     		.2byte	(.L73-.L65)/2
 997 0024 D600     		.2byte	(.L74-.L65)/2
 998 0026 F000     		.2byte	(.L75-.L65)/2
 999 0028 0A01     		.2byte	(.L76-.L65)/2
 1000 002a 2501     		.2byte	(.L77-.L65)/2
 1001 002c 3F01     		.2byte	(.L78-.L65)/2
 1002 002e 5901     		.2byte	(.L79-.L65)/2
 1003 0030 D401     		.2byte	(.L80-.L65)/2
 1004 0032 A001     		.2byte	(.L81-.L65)/2
 1005              		.p2align 1
 1006              	.L64:
 462:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1007              		.loc 1 462 0
 1008 0034 AE4B     		ldr	r3, .L83
 1009 0036 0022     		movs	r2, #0
 1010 0038 1A70     		strb	r2, [r3]
 463:Src/main.c    **** 	 OSD_MIRROR[0]=CAMA_M;
 1011              		.loc 1 463 0
 1012 003a 0125     		movs	r5, #1
 1013 003c 5D70     		strb	r5, [r3, #1]
 464:Src/main.c    **** 	 gabVXIS_Input_mirrorH[0]=CAMA_M;
 1014              		.loc 1 464 0
 1015 003e AD4B     		ldr	r3, .L83+4
 1016 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1017 0042 AD4A     		ldr	r2, .L83+8
 1018 0044 1370     		strb	r3, [r2]
 465:Src/main.c    ****         printf("VS4210_MODE0_w0\r\n") ;
 1019              		.loc 1 465 0
 1020 0046 AD4A     		ldr	r2, .L83+12
 1021 0048 1370     		strb	r3, [r2]
 466:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1022              		.loc 1 466 0
 1023 004a AD48     		ldr	r0, .L83+16
 1024              	.LVL75:
 1025 004c FFF7FEFF 		bl	puts
 1026              	.LVL76:
 467:Src/main.c    ****         break ;
 1027              		.loc 1 467 0
 1028 0050 AC4B     		ldr	r3, .L83+20
ARM GAS  /tmp/cc8epWVM.s 			page 95


 1029 0052 1D70     		strb	r5, [r3]
 1030              	.L63:
1100:Src/main.c    **** 
 1031              		.loc 1 1100 0
 1032 0054 A648     		ldr	r0, .L83
 1033 0056 FFF7FEFF 		bl	VS4210_SetMutiWindows
 1034              	.LVL77:
1103:Src/main.c    **** 
 1035              		.loc 1 1103 0
 1036 005a 0120     		movs	r0, #1
 1037 005c FFF7FEFF 		bl	AudioMute
 1038              	.LVL78:
1105:Src/main.c    **** MCUTimerActiveTimerEvent(SEC(1),  _SYSTEM_TIMER_EVENT_AUDIO_CHANNEL_SELECT);
 1039              		.loc 1 1105 0
 1040 0060 3B20     		movs	r0, #59
 1041 0062 FFF7FEFF 		bl	MCUTimerCancelTimerEvent
 1042              	.LVL79:
1106:Src/main.c    **** AUDIO_SELECT(index);
 1043              		.loc 1 1106 0
 1044 0066 3B21     		movs	r1, #59
 1045 0068 4FF47A70 		mov	r0, #1000
 1046 006c FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 1047              	.LVL80:
1107:Src/main.c    **** 
 1048              		.loc 1 1107 0
 1049 0070 E4B2     		uxtb	r4, r4
 1050              	.LVL81:
 1051 0072 2046     		mov	r0, r4
 1052 0074 FFF7FEFF 		bl	AUDIO_SELECT
 1053              	.LVL82:
1109:Src/main.c    **** 
 1054              		.loc 1 1109 0
 1055 0078 A34B     		ldr	r3, .L83+24
 1056 007a 1C70     		strb	r4, [r3]
1113:Src/main.c    **** 
 1057              		.loc 1 1113 0
 1058 007c 70BD     		pop	{r4, r5, r6, pc}
 1059              	.LVL83:
 1060              	.L66:
 472:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 1061              		.loc 1 472 0
 1062 007e 9C4A     		ldr	r2, .L83
 1063 0080 0123     		movs	r3, #1
 1064 0082 1370     		strb	r3, [r2]
 473:Src/main.c    ****    	 OSD_MIRROR[0]=CAMB_M;
 1065              		.loc 1 473 0
 1066 0084 0221     		movs	r1, #2
 1067 0086 5170     		strb	r1, [r2, #1]
 474:Src/main.c    **** 	 gabVXIS_Input_mirrorH[1]=CAMB_M; 
 1068              		.loc 1 474 0
 1069 0088 A04A     		ldr	r2, .L83+28
 1070 008a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1071 008c 9A49     		ldr	r1, .L83+8
 1072 008e 0A70     		strb	r2, [r1]
 475:Src/main.c    **** 	 OSD_SPEAKER[0]=ON;
 1073              		.loc 1 475 0
 1074 0090 9A49     		ldr	r1, .L83+12
ARM GAS  /tmp/cc8epWVM.s 			page 96


 1075 0092 4A70     		strb	r2, [r1, #1]
 476:Src/main.c    ****         printf("VS4210_MODE0_w1\r\n") ;
 1076              		.loc 1 476 0
 1077 0094 9B4A     		ldr	r2, .L83+20
 1078 0096 1370     		strb	r3, [r2]
 477:Src/main.c    ****         break ;
 1079              		.loc 1 477 0
 1080 0098 9D48     		ldr	r0, .L83+32
 1081              	.LVL84:
 1082 009a FFF7FEFF 		bl	puts
 1083              	.LVL85:
 478:Src/main.c    ****     }
 1084              		.loc 1 478 0
 1085 009e D9E7     		b	.L63
 1086              	.LVL86:
 1087              	.L67:
 482:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 1088              		.loc 1 482 0
 1089 00a0 934B     		ldr	r3, .L83
 1090 00a2 0222     		movs	r2, #2
 1091 00a4 1A70     		strb	r2, [r3]
 483:Src/main.c    **** 	 OSD_MIRROR[0]=CAMC_M;	
 1092              		.loc 1 483 0
 1093 00a6 0322     		movs	r2, #3
 1094 00a8 5A70     		strb	r2, [r3, #1]
 484:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 	 
 1095              		.loc 1 484 0
 1096 00aa 9A4B     		ldr	r3, .L83+36
 1097 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1098 00ae 924A     		ldr	r2, .L83+8
 1099 00b0 1370     		strb	r3, [r2]
 485:Src/main.c    **** 	 OSD_SPEAKER[0]=ON;
 1100              		.loc 1 485 0
 1101 00b2 924A     		ldr	r2, .L83+12
 1102 00b4 9370     		strb	r3, [r2, #2]
 486:Src/main.c    ****         printf("VS4210_MODE0_w2\r\n") ;
 1103              		.loc 1 486 0
 1104 00b6 934B     		ldr	r3, .L83+20
 1105 00b8 0122     		movs	r2, #1
 1106 00ba 1A70     		strb	r2, [r3]
 487:Src/main.c    ****         break ;
 1107              		.loc 1 487 0
 1108 00bc 9648     		ldr	r0, .L83+40
 1109              	.LVL87:
 1110 00be FFF7FEFF 		bl	puts
 1111              	.LVL88:
 488:Src/main.c    ****     }
 1112              		.loc 1 488 0
 1113 00c2 C7E7     		b	.L63
 1114              	.LVL89:
 1115              	.L68:
 492:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 1116              		.loc 1 492 0
 1117 00c4 8A4B     		ldr	r3, .L83
 1118 00c6 0322     		movs	r2, #3
 1119 00c8 1A70     		strb	r2, [r3]
 493:Src/main.c    ****    	OSD_MIRROR[0]=CAMR_M;	
ARM GAS  /tmp/cc8epWVM.s 			page 97


 1120              		.loc 1 493 0
 1121 00ca 0422     		movs	r2, #4
 1122 00cc 5A70     		strb	r2, [r3, #1]
 494:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 		
 1123              		.loc 1 494 0
 1124 00ce 934B     		ldr	r3, .L83+44
 1125 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1126 00d2 894A     		ldr	r2, .L83+8
 1127 00d4 1370     		strb	r3, [r2]
 495:Src/main.c    ****   	OSD_SPEAKER[0]=ON;
 1128              		.loc 1 495 0
 1129 00d6 894A     		ldr	r2, .L83+12
 1130 00d8 D370     		strb	r3, [r2, #3]
 496:Src/main.c    ****         printf("VS4210_MODE0_w3\r\n") ;
 1131              		.loc 1 496 0
 1132 00da 8A4B     		ldr	r3, .L83+20
 1133 00dc 0122     		movs	r2, #1
 1134 00de 1A70     		strb	r2, [r3]
 497:Src/main.c    ****         break ;
 1135              		.loc 1 497 0
 1136 00e0 8F48     		ldr	r0, .L83+48
 1137              	.LVL90:
 1138 00e2 FFF7FEFF 		bl	puts
 1139              	.LVL91:
 498:Src/main.c    ****     }
 1140              		.loc 1 498 0
 1141 00e6 B5E7     		b	.L63
 1142              	.LVL92:
 1143              	.L69:
 502:Src/main.c    **** 	
 1144              		.loc 1 502 0
 1145 00e8 814B     		ldr	r3, .L83
 1146 00ea 1022     		movs	r2, #16
 1147 00ec 1A70     		strb	r2, [r3]
 504:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1148              		.loc 1 504 0
 1149 00ee 0121     		movs	r1, #1
 1150 00f0 5970     		strb	r1, [r3, #1]
 505:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 1151              		.loc 1 505 0
 1152 00f2 0222     		movs	r2, #2
 1153 00f4 9A70     		strb	r2, [r3, #2]
 506:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 1154              		.loc 1 506 0
 1155 00f6 0322     		movs	r2, #3
 1156 00f8 DA70     		strb	r2, [r3, #3]
 507:Src/main.c    ****    	  OSD_MIRROR[0]=CAMA_M;	
 1157              		.loc 1 507 0
 1158 00fa 0422     		movs	r2, #4
 1159 00fc 1A71     		strb	r2, [r3, #4]
 508:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 1160              		.loc 1 508 0
 1161 00fe 7D4B     		ldr	r3, .L83+4
 1162 0100 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 1163 0102 7D4B     		ldr	r3, .L83+8
 1164 0104 1E70     		strb	r6, [r3]
 509:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
ARM GAS  /tmp/cc8epWVM.s 			page 98


 1165              		.loc 1 509 0
 1166 0106 814A     		ldr	r2, .L83+28
 1167 0108 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 1168 010a 5D70     		strb	r5, [r3, #1]
 510:Src/main.c    ****    	  OSD_MIRROR[3]=CAMR_M;	
 1169              		.loc 1 510 0
 1170 010c 814A     		ldr	r2, .L83+36
 1171 010e 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 1172              	.LVL93:
 1173 0110 9870     		strb	r0, [r3, #2]
 511:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 1174              		.loc 1 511 0
 1175 0112 824A     		ldr	r2, .L83+44
 1176 0114 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1177 0116 DA70     		strb	r2, [r3, #3]
 512:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 1178              		.loc 1 512 0
 1179 0118 784B     		ldr	r3, .L83+12
 1180 011a 1E70     		strb	r6, [r3]
 513:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		  
 1181              		.loc 1 513 0
 1182 011c 5D70     		strb	r5, [r3, #1]
 514:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 		  
 1183              		.loc 1 514 0
 1184 011e 9870     		strb	r0, [r3, #2]
 515:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 1185              		.loc 1 515 0
 1186 0120 DA70     		strb	r2, [r3, #3]
 516:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 1187              		.loc 1 516 0
 1188 0122 784B     		ldr	r3, .L83+20
 1189 0124 0022     		movs	r2, #0
 1190 0126 1A70     		strb	r2, [r3]
 517:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 1191              		.loc 1 517 0
 1192 0128 5A70     		strb	r2, [r3, #1]
 518:Src/main.c    **** 	  OSD_SPEAKER[3]=ON;
 1193              		.loc 1 518 0
 1194 012a 9A70     		strb	r2, [r3, #2]
 519:Src/main.c    **** 
 1195              		.loc 1 519 0
 1196 012c D970     		strb	r1, [r3, #3]
 521:Src/main.c    ****         break ;
 1197              		.loc 1 521 0
 1198 012e 7D48     		ldr	r0, .L83+52
 1199 0130 FFF7FEFF 		bl	puts
 1200              	.LVL94:
 522:Src/main.c    ****     }
 1201              		.loc 1 522 0
 1202 0134 8EE7     		b	.L63
 1203              	.LVL95:
 1204              	.L70:
 527:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1205              		.loc 1 527 0
 1206 0136 6E4B     		ldr	r3, .L83
 1207 0138 2022     		movs	r2, #32
 1208 013a 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cc8epWVM.s 			page 99


 528:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1209              		.loc 1 528 0
 1210 013c 0122     		movs	r2, #1
 1211 013e 5A70     		strb	r2, [r3, #1]
 529:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 1212              		.loc 1 529 0
 1213 0140 0222     		movs	r2, #2
 1214 0142 9A70     		strb	r2, [r3, #2]
 530:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 1215              		.loc 1 530 0
 1216 0144 0322     		movs	r2, #3
 1217 0146 DA70     		strb	r2, [r3, #3]
 531:Src/main.c    ****         printf("VS4210_MODE2\r\n") ;
 1218              		.loc 1 531 0
 1219 0148 0422     		movs	r2, #4
 1220 014a 1A71     		strb	r2, [r3, #4]
 532:Src/main.c    ****         break ;
 1221              		.loc 1 532 0
 1222 014c 7648     		ldr	r0, .L83+56
 1223              	.LVL96:
 1224 014e FFF7FEFF 		bl	puts
 1225              	.LVL97:
 533:Src/main.c    ****     }
 1226              		.loc 1 533 0
 1227 0152 7FE7     		b	.L63
 1228              	.LVL98:
 1229              	.L71:
 912:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1230              		.loc 1 912 0
 1231 0154 664B     		ldr	r3, .L83
 1232 0156 4022     		movs	r2, #64
 1233 0158 1A70     		strb	r2, [r3]
 913:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1234              		.loc 1 913 0
 1235 015a 0122     		movs	r2, #1
 1236 015c 5A70     		strb	r2, [r3, #1]
 914:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 1237              		.loc 1 914 0
 1238 015e 0221     		movs	r1, #2
 1239 0160 9970     		strb	r1, [r3, #2]
 915:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 1240              		.loc 1 915 0
 1241 0162 644B     		ldr	r3, .L83+4
 1242 0164 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1243              	.LVL99:
 1244 0166 644B     		ldr	r3, .L83+8
 1245 0168 1870     		strb	r0, [r3]
 916:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 1246              		.loc 1 916 0
 1247 016a 6849     		ldr	r1, .L83+28
 1248 016c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1249 016e 5970     		strb	r1, [r3, #1]
 917:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
 1250              		.loc 1 917 0
 1251 0170 624B     		ldr	r3, .L83+12
 1252 0172 1870     		strb	r0, [r3]
 918:Src/main.c    ****   	OSD_SPEAKER[0]=ON;
ARM GAS  /tmp/cc8epWVM.s 			page 100


 1253              		.loc 1 918 0
 1254 0174 5970     		strb	r1, [r3, #1]
 919:Src/main.c    ****   	OSD_SPEAKER[1]=OFF;
 1255              		.loc 1 919 0
 1256 0176 634B     		ldr	r3, .L83+20
 1257 0178 1A70     		strb	r2, [r3]
 920:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch2\r\n") ;
 1258              		.loc 1 920 0
 1259 017a 0022     		movs	r2, #0
 1260 017c 5A70     		strb	r2, [r3, #1]
 921:Src/main.c    ****         break ;
 1261              		.loc 1 921 0
 1262 017e 6B48     		ldr	r0, .L83+60
 1263 0180 FFF7FEFF 		bl	puts
 1264              	.LVL100:
 922:Src/main.c    ****     }
 1265              		.loc 1 922 0
 1266 0184 66E7     		b	.L63
 1267              	.LVL101:
 1268              	.L73:
 926:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1269              		.loc 1 926 0
 1270 0186 5A4B     		ldr	r3, .L83
 1271 0188 4022     		movs	r2, #64
 1272 018a 1A70     		strb	r2, [r3]
 927:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
 1273              		.loc 1 927 0
 1274 018c 0122     		movs	r2, #1
 1275 018e 5A70     		strb	r2, [r3, #1]
 928:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 1276              		.loc 1 928 0
 1277 0190 0421     		movs	r1, #4
 1278 0192 9970     		strb	r1, [r3, #2]
 929:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;
 1279              		.loc 1 929 0
 1280 0194 574B     		ldr	r3, .L83+4
 1281 0196 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1282              	.LVL102:
 1283 0198 574B     		ldr	r3, .L83+8
 1284 019a 1870     		strb	r0, [r3]
 930:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 1285              		.loc 1 930 0
 1286 019c 5F49     		ldr	r1, .L83+44
 1287 019e 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1288 01a0 5970     		strb	r1, [r3, #1]
 931:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 1289              		.loc 1 931 0
 1290 01a2 564B     		ldr	r3, .L83+12
 1291 01a4 1870     		strb	r0, [r3]
 932:Src/main.c    ****   	OSD_SPEAKER[0]=OFF;
 1292              		.loc 1 932 0
 1293 01a6 5970     		strb	r1, [r3, #1]
 933:Src/main.c    ****   	OSD_SPEAKER[1]=ON;	  
 1294              		.loc 1 933 0
 1295 01a8 564B     		ldr	r3, .L83+20
 1296 01aa 0021     		movs	r1, #0
 1297 01ac 1970     		strb	r1, [r3]
ARM GAS  /tmp/cc8epWVM.s 			page 101


 934:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch4\r\n") ;	
 1298              		.loc 1 934 0
 1299 01ae 5A70     		strb	r2, [r3, #1]
 935:Src/main.c    **** 	break;
 1300              		.loc 1 935 0
 1301 01b0 5F48     		ldr	r0, .L83+64
 1302 01b2 FFF7FEFF 		bl	puts
 1303              	.LVL103:
 936:Src/main.c    ****     	}
 1304              		.loc 1 936 0
 1305 01b6 4DE7     		b	.L63
 1306              	.LVL104:
 1307              	.L74:
 940:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 1308              		.loc 1 940 0
 1309 01b8 4D4B     		ldr	r3, .L83
 1310 01ba 4022     		movs	r2, #64
 1311 01bc 1A70     		strb	r2, [r3]
 941:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1312              		.loc 1 941 0
 1313 01be 0422     		movs	r2, #4
 1314 01c0 5A70     		strb	r2, [r3, #1]
 942:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 1315              		.loc 1 942 0
 1316 01c2 0222     		movs	r2, #2
 1317 01c4 9A70     		strb	r2, [r3, #2]
 943:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 1318              		.loc 1 943 0
 1319 01c6 554B     		ldr	r3, .L83+44
 1320 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1321 01ca 4B4B     		ldr	r3, .L83+8
 1322 01cc 1970     		strb	r1, [r3]
 944:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMR_M;			  
 1323              		.loc 1 944 0
 1324 01ce 4F4A     		ldr	r2, .L83+28
 1325 01d0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1326 01d2 5A70     		strb	r2, [r3, #1]
 945:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
 1327              		.loc 1 945 0
 1328 01d4 494B     		ldr	r3, .L83+12
 1329 01d6 1970     		strb	r1, [r3]
 946:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1330              		.loc 1 946 0
 1331 01d8 5A70     		strb	r2, [r3, #1]
 947:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 1332              		.loc 1 947 0
 1333 01da 4A4B     		ldr	r3, .L83+20
 1334 01dc 0122     		movs	r2, #1
 1335 01de 1A70     		strb	r2, [r3]
 948:Src/main.c    ****         printf("VS4210_MODE12 ch4 ch2\r\n") ;	
 1336              		.loc 1 948 0
 1337 01e0 0022     		movs	r2, #0
 1338 01e2 5A70     		strb	r2, [r3, #1]
 949:Src/main.c    **** 	break;
 1339              		.loc 1 949 0
 1340 01e4 5348     		ldr	r0, .L83+68
 1341              	.LVL105:
ARM GAS  /tmp/cc8epWVM.s 			page 102


 1342 01e6 FFF7FEFF 		bl	puts
 1343              	.LVL106:
 950:Src/main.c    ****     	}
 1344              		.loc 1 950 0
 1345 01ea 33E7     		b	.L63
 1346              	.LVL107:
 1347              	.L75:
 954:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 1348              		.loc 1 954 0
 1349 01ec 404B     		ldr	r3, .L83
 1350 01ee 4022     		movs	r2, #64
 1351 01f0 1A70     		strb	r2, [r3]
 955:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 1352              		.loc 1 955 0
 1353 01f2 0422     		movs	r2, #4
 1354 01f4 5A70     		strb	r2, [r3, #1]
 956:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 1355              		.loc 1 956 0
 1356 01f6 0322     		movs	r2, #3
 1357 01f8 9A70     		strb	r2, [r3, #2]
 957:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 1358              		.loc 1 957 0
 1359 01fa 484B     		ldr	r3, .L83+44
 1360 01fc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1361 01fe 3E4B     		ldr	r3, .L83+8
 1362 0200 1970     		strb	r1, [r3]
 958:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMR_M;			  
 1363              		.loc 1 958 0
 1364 0202 444A     		ldr	r2, .L83+36
 1365 0204 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1366 0206 5A70     		strb	r2, [r3, #1]
 959:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 1367              		.loc 1 959 0
 1368 0208 3C4B     		ldr	r3, .L83+12
 1369 020a 1970     		strb	r1, [r3]
 960:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1370              		.loc 1 960 0
 1371 020c 5A70     		strb	r2, [r3, #1]
 961:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 1372              		.loc 1 961 0
 1373 020e 3D4B     		ldr	r3, .L83+20
 1374 0210 0122     		movs	r2, #1
 1375 0212 1A70     		strb	r2, [r3]
 962:Src/main.c    ****         printf("VS4210_MODE12 ch4 ch3\r\n") ;	
 1376              		.loc 1 962 0
 1377 0214 0022     		movs	r2, #0
 1378 0216 5A70     		strb	r2, [r3, #1]
 963:Src/main.c    **** 	break;
 1379              		.loc 1 963 0
 1380 0218 4748     		ldr	r0, .L83+72
 1381              	.LVL108:
 1382 021a FFF7FEFF 		bl	puts
 1383              	.LVL109:
 964:Src/main.c    ****     	}
 1384              		.loc 1 964 0
 1385 021e 19E7     		b	.L63
 1386              	.LVL110:
ARM GAS  /tmp/cc8epWVM.s 			page 103


 1387              	.L76:
 969:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 1388              		.loc 1 969 0
 1389 0220 334B     		ldr	r3, .L83
 1390 0222 4022     		movs	r2, #64
 1391 0224 1A70     		strb	r2, [r3]
 970:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 1392              		.loc 1 970 0
 1393 0226 0222     		movs	r2, #2
 1394 0228 5A70     		strb	r2, [r3, #1]
 971:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 1395              		.loc 1 971 0
 1396 022a 0122     		movs	r2, #1
 1397 022c 9A70     		strb	r2, [r3, #2]
 972:Src/main.c    ****    	  OSD_MIRROR[1]=CAMA_M;	
 1398              		.loc 1 972 0
 1399 022e 374B     		ldr	r3, .L83+28
 1400 0230 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1401 0232 314B     		ldr	r3, .L83+8
 1402 0234 1970     		strb	r1, [r3]
 973:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 1403              		.loc 1 973 0
 1404 0236 2F48     		ldr	r0, .L83+4
 1405              	.LVL111:
 1406 0238 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1407 023a 5870     		strb	r0, [r3, #1]
 974:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 1408              		.loc 1 974 0
 1409 023c 2F4B     		ldr	r3, .L83+12
 1410 023e 1970     		strb	r1, [r3]
 975:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1411              		.loc 1 975 0
 1412 0240 3649     		ldr	r1, .L83+44
 1413 0242 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1414 0244 5970     		strb	r1, [r3, #1]
 976:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 1415              		.loc 1 976 0
 1416 0246 2F4B     		ldr	r3, .L83+20
 1417 0248 1A70     		strb	r2, [r3]
 977:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch1\r\n") ;	
 1418              		.loc 1 977 0
 1419 024a 0022     		movs	r2, #0
 1420 024c 5A70     		strb	r2, [r3, #1]
 978:Src/main.c    **** 	break;
 1421              		.loc 1 978 0
 1422 024e 3B48     		ldr	r0, .L83+76
 1423 0250 FFF7FEFF 		bl	puts
 1424              	.LVL112:
 979:Src/main.c    ****     	}
 1425              		.loc 1 979 0
 1426 0254 FEE6     		b	.L63
 1427              	.LVL113:
 1428              	.L77:
 983:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 1429              		.loc 1 983 0
 1430 0256 264B     		ldr	r3, .L83
 1431 0258 4022     		movs	r2, #64
ARM GAS  /tmp/cc8epWVM.s 			page 104


 1432 025a 1A70     		strb	r2, [r3]
 984:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 1433              		.loc 1 984 0
 1434 025c 0222     		movs	r2, #2
 1435 025e 5A70     		strb	r2, [r3, #1]
 985:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 1436              		.loc 1 985 0
 1437 0260 0322     		movs	r2, #3
 1438 0262 9A70     		strb	r2, [r3, #2]
 986:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 1439              		.loc 1 986 0
 1440 0264 294B     		ldr	r3, .L83+28
 1441 0266 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1442 0268 234B     		ldr	r3, .L83+8
 1443 026a 1970     		strb	r1, [r3]
 987:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 1444              		.loc 1 987 0
 1445 026c 294A     		ldr	r2, .L83+36
 1446 026e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1447 0270 5A70     		strb	r2, [r3, #1]
 988:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 1448              		.loc 1 988 0
 1449 0272 224B     		ldr	r3, .L83+12
 1450 0274 1970     		strb	r1, [r3]
 989:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1451              		.loc 1 989 0
 1452 0276 5A70     		strb	r2, [r3, #1]
 990:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 1453              		.loc 1 990 0
 1454 0278 224B     		ldr	r3, .L83+20
 1455 027a 0122     		movs	r2, #1
 1456 027c 1A70     		strb	r2, [r3]
 991:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch3\r\n") ;	
 1457              		.loc 1 991 0
 1458 027e 0022     		movs	r2, #0
 1459 0280 5A70     		strb	r2, [r3, #1]
 992:Src/main.c    **** 	break;
 1460              		.loc 1 992 0
 1461 0282 2F48     		ldr	r0, .L83+80
 1462              	.LVL114:
 1463 0284 FFF7FEFF 		bl	puts
 1464              	.LVL115:
 993:Src/main.c    ****     	}
 1465              		.loc 1 993 0
 1466 0288 E4E6     		b	.L63
 1467              	.LVL116:
 1468              	.L78:
 997:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2;
 1469              		.loc 1 997 0
 1470 028a 194B     		ldr	r3, .L83
 1471 028c 4022     		movs	r2, #64
 1472 028e 1A70     		strb	r2, [r3]
 998:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
 1473              		.loc 1 998 0
 1474 0290 0222     		movs	r2, #2
 1475 0292 5A70     		strb	r2, [r3, #1]
 999:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
ARM GAS  /tmp/cc8epWVM.s 			page 105


 1476              		.loc 1 999 0
 1477 0294 0422     		movs	r2, #4
 1478 0296 9A70     		strb	r2, [r3, #2]
1000:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;	
 1479              		.loc 1 1000 0
 1480 0298 1C4B     		ldr	r3, .L83+28
 1481 029a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1482 029c 164B     		ldr	r3, .L83+8
 1483 029e 1970     		strb	r1, [r3]
1001:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 1484              		.loc 1 1001 0
 1485 02a0 1E4A     		ldr	r2, .L83+44
 1486 02a2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1487 02a4 5A70     		strb	r2, [r3, #1]
1002:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 1488              		.loc 1 1002 0
 1489 02a6 154B     		ldr	r3, .L83+12
 1490 02a8 1970     		strb	r1, [r3]
1003:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 1491              		.loc 1 1003 0
 1492 02aa 5A70     		strb	r2, [r3, #1]
1004:Src/main.c    **** 	  OSD_SPEAKER[1]=ON;		  
 1493              		.loc 1 1004 0
 1494 02ac 154B     		ldr	r3, .L83+20
 1495 02ae 0022     		movs	r2, #0
 1496 02b0 1A70     		strb	r2, [r3]
1005:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch4\r\n") ;	
 1497              		.loc 1 1005 0
 1498 02b2 0122     		movs	r2, #1
 1499 02b4 5A70     		strb	r2, [r3, #1]
1006:Src/main.c    **** 	break;
 1500              		.loc 1 1006 0
 1501 02b6 2348     		ldr	r0, .L83+84
 1502              	.LVL117:
 1503 02b8 FFF7FEFF 		bl	puts
 1504              	.LVL118:
1007:Src/main.c    ****     	}
 1505              		.loc 1 1007 0
 1506 02bc CAE6     		b	.L63
 1507              	.LVL119:
 1508              	.L79:
1013:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1509              		.loc 1 1013 0
 1510 02be 0C4B     		ldr	r3, .L83
 1511 02c0 4022     		movs	r2, #64
 1512 02c2 1A70     		strb	r2, [r3]
1014:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 1513              		.loc 1 1014 0
 1514 02c4 0122     		movs	r2, #1
 1515 02c6 5A70     		strb	r2, [r3, #1]
1015:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 1516              		.loc 1 1015 0
 1517 02c8 0321     		movs	r1, #3
 1518 02ca 9970     		strb	r1, [r3, #2]
1016:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 1519              		.loc 1 1016 0
 1520 02cc 094B     		ldr	r3, .L83+4
ARM GAS  /tmp/cc8epWVM.s 			page 106


 1521 02ce 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1522              	.LVL120:
 1523 02d0 094B     		ldr	r3, .L83+8
 1524 02d2 1870     		strb	r0, [r3]
1017:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 1525              		.loc 1 1017 0
 1526 02d4 0F49     		ldr	r1, .L83+36
 1527 02d6 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1528 02d8 5970     		strb	r1, [r3, #1]
1018:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 1529              		.loc 1 1018 0
 1530 02da 084B     		ldr	r3, .L83+12
 1531 02dc 1870     		strb	r0, [r3]
1019:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1532              		.loc 1 1019 0
 1533 02de 5970     		strb	r1, [r3, #1]
1020:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
 1534              		.loc 1 1020 0
 1535 02e0 084B     		ldr	r3, .L83+20
 1536 02e2 1A70     		strb	r2, [r3]
1021:Src/main.c    **** 	  
 1537              		.loc 1 1021 0
 1538 02e4 0022     		movs	r2, #0
 1539 02e6 5A70     		strb	r2, [r3, #1]
1023:Src/main.c    **** 	break;
 1540              		.loc 1 1023 0
 1541 02e8 1748     		ldr	r0, .L83+88
 1542 02ea FFF7FEFF 		bl	puts
 1543              	.LVL121:
1024:Src/main.c    ****     	}
 1544              		.loc 1 1024 0
 1545 02ee B1E6     		b	.L63
 1546              	.L84:
 1547              		.align	2
 1548              	.L83:
 1549 02f0 00000000 		.word	pVS4210_JointKind1
 1550 02f4 00000000 		.word	CAMA_M
 1551 02f8 00000000 		.word	.LANCHOR5
 1552 02fc 00000000 		.word	gabVXIS_Input_mirrorH
 1553 0300 00000000 		.word	.LC3
 1554 0304 00000000 		.word	.LANCHOR6
 1555 0308 00000000 		.word	.LANCHOR7
 1556 030c 00000000 		.word	CAMB_M
 1557 0310 14000000 		.word	.LC4
 1558 0314 00000000 		.word	CAMC_M
 1559 0318 28000000 		.word	.LC5
 1560 031c 00000000 		.word	CAMR_M
 1561 0320 3C000000 		.word	.LC6
 1562 0324 50000000 		.word	.LC7
 1563 0328 60000000 		.word	.LC8
 1564 032c 70000000 		.word	.LC9
 1565 0330 88000000 		.word	.LC10
 1566 0334 A0000000 		.word	.LC11
 1567 0338 B8000000 		.word	.LC12
 1568 033c D0000000 		.word	.LC13
 1569 0340 E8000000 		.word	.LC14
 1570 0344 00010000 		.word	.LC15
ARM GAS  /tmp/cc8epWVM.s 			page 107


 1571 0348 18010000 		.word	.LC16
 1572              	.LVL122:
 1573              	.L81:
1028:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 1574              		.loc 1 1028 0
 1575 034c 264B     		ldr	r3, .L85
 1576 034e 4022     		movs	r2, #64
 1577 0350 1A70     		strb	r2, [r3]
1029:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1578              		.loc 1 1029 0
 1579 0352 0322     		movs	r2, #3
 1580 0354 5A70     		strb	r2, [r3, #1]
1030:Src/main.c    **** 	  OSD_MIRROR[0]=CAMC_M;	
 1581              		.loc 1 1030 0
 1582 0356 0222     		movs	r2, #2
 1583 0358 9A70     		strb	r2, [r3, #2]
1031:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 1584              		.loc 1 1031 0
 1585 035a 244B     		ldr	r3, .L85+4
 1586 035c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1587 035e 244B     		ldr	r3, .L85+8
 1588 0360 1970     		strb	r1, [r3]
1032:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
 1589              		.loc 1 1032 0
 1590 0362 244A     		ldr	r2, .L85+12
 1591 0364 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1592 0366 5A70     		strb	r2, [r3, #1]
1033:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
 1593              		.loc 1 1033 0
 1594 0368 234B     		ldr	r3, .L85+16
 1595 036a 1970     		strb	r1, [r3]
1034:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1596              		.loc 1 1034 0
 1597 036c 5A70     		strb	r2, [r3, #1]
1035:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
 1598              		.loc 1 1035 0
 1599 036e 234B     		ldr	r3, .L85+20
 1600 0370 0122     		movs	r2, #1
 1601 0372 1A70     		strb	r2, [r3]
1036:Src/main.c    **** 	  
 1602              		.loc 1 1036 0
 1603 0374 0022     		movs	r2, #0
 1604 0376 5A70     		strb	r2, [r3, #1]
1038:Src/main.c    **** 	break;
 1605              		.loc 1 1038 0
 1606 0378 2148     		ldr	r0, .L85+24
 1607              	.LVL123:
 1608 037a FFF7FEFF 		bl	puts
 1609              	.LVL124:
1039:Src/main.c    ****     	}
 1610              		.loc 1 1039 0
 1611 037e 69E6     		b	.L63
 1612              	.LVL125:
 1613              	.L72:
1044:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 1614              		.loc 1 1044 0
 1615 0380 194B     		ldr	r3, .L85
ARM GAS  /tmp/cc8epWVM.s 			page 108


 1616 0382 4022     		movs	r2, #64
 1617 0384 1A70     		strb	r2, [r3]
1045:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
 1618              		.loc 1 1045 0
 1619 0386 0322     		movs	r2, #3
 1620 0388 5A70     		strb	r2, [r3, #1]
1046:Src/main.c    **** 	  OSD_MIRROR[0]=CAMC_M;	
 1621              		.loc 1 1046 0
 1622 038a 0422     		movs	r2, #4
 1623 038c 9A70     		strb	r2, [r3, #2]
1047:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;	
 1624              		.loc 1 1047 0
 1625 038e 174B     		ldr	r3, .L85+4
 1626 0390 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1627 0392 174B     		ldr	r3, .L85+8
 1628 0394 1970     		strb	r1, [r3]
1048:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
 1629              		.loc 1 1048 0
 1630 0396 1B4A     		ldr	r2, .L85+28
 1631 0398 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1632 039a 5A70     		strb	r2, [r3, #1]
1049:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 1633              		.loc 1 1049 0
 1634 039c 164B     		ldr	r3, .L85+16
 1635 039e 1970     		strb	r1, [r3]
1050:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 1636              		.loc 1 1050 0
 1637 03a0 5A70     		strb	r2, [r3, #1]
1051:Src/main.c    **** 	  OSD_SPEAKER[1]=ON;	
 1638              		.loc 1 1051 0
 1639 03a2 164B     		ldr	r3, .L85+20
 1640 03a4 0022     		movs	r2, #0
 1641 03a6 1A70     		strb	r2, [r3]
1052:Src/main.c    **** 	  
 1642              		.loc 1 1052 0
 1643 03a8 0122     		movs	r2, #1
 1644 03aa 5A70     		strb	r2, [r3, #1]
1054:Src/main.c    ****         break ;
 1645              		.loc 1 1054 0
 1646 03ac 1648     		ldr	r0, .L85+32
 1647              	.LVL126:
 1648 03ae FFF7FEFF 		bl	puts
 1649              	.LVL127:
1055:Src/main.c    ****     }
 1650              		.loc 1 1055 0
 1651 03b2 4FE6     		b	.L63
 1652              	.LVL128:
 1653              	.L80:
1061:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 1654              		.loc 1 1061 0
 1655 03b4 0C4B     		ldr	r3, .L85
 1656 03b6 4022     		movs	r2, #64
 1657 03b8 1A70     		strb	r2, [r3]
1062:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 1658              		.loc 1 1062 0
 1659 03ba 0322     		movs	r2, #3
 1660 03bc 5A70     		strb	r2, [r3, #1]
ARM GAS  /tmp/cc8epWVM.s 			page 109


1063:Src/main.c    ****   OSD_MIRROR[0]=CAMC_M; 
 1661              		.loc 1 1063 0
 1662 03be 0122     		movs	r2, #1
 1663 03c0 9A70     		strb	r2, [r3, #2]
1064:Src/main.c    ****   OSD_MIRROR[1]=CAMA_M; 
 1664              		.loc 1 1064 0
 1665 03c2 0A4B     		ldr	r3, .L85+4
 1666 03c4 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1667              	.LVL129:
 1668 03c6 0A4B     		ldr	r3, .L85+8
 1669 03c8 1870     		strb	r0, [r3]
1065:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
 1670              		.loc 1 1065 0
 1671 03ca 1049     		ldr	r1, .L85+36
 1672 03cc 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1673 03ce 5970     		strb	r1, [r3, #1]
1066:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M;   
 1674              		.loc 1 1066 0
 1675 03d0 094B     		ldr	r3, .L85+16
 1676 03d2 1870     		strb	r0, [r3]
1067:Src/main.c    ****   OSD_SPEAKER[0]=ON;
 1677              		.loc 1 1067 0
 1678 03d4 5970     		strb	r1, [r3, #1]
1068:Src/main.c    ****   OSD_SPEAKER[1]=OFF;	
 1679              		.loc 1 1068 0
 1680 03d6 094B     		ldr	r3, .L85+20
 1681 03d8 1A70     		strb	r2, [r3]
1069:Src/main.c    ****   
 1682              		.loc 1 1069 0
 1683 03da 0022     		movs	r2, #0
 1684 03dc 5A70     		strb	r2, [r3, #1]
1071:Src/main.c    **** break;
 1685              		.loc 1 1071 0
 1686 03de 0C48     		ldr	r0, .L85+40
 1687 03e0 FFF7FEFF 		bl	puts
 1688              	.LVL130:
1072:Src/main.c    **** 	}
 1689              		.loc 1 1072 0
 1690 03e4 36E6     		b	.L63
 1691              	.L86:
 1692 03e6 00BF     		.align	2
 1693              	.L85:
 1694 03e8 00000000 		.word	pVS4210_JointKind1
 1695 03ec 00000000 		.word	CAMC_M
 1696 03f0 00000000 		.word	.LANCHOR5
 1697 03f4 00000000 		.word	CAMB_M
 1698 03f8 00000000 		.word	gabVXIS_Input_mirrorH
 1699 03fc 00000000 		.word	.LANCHOR6
 1700 0400 30010000 		.word	.LC17
 1701 0404 00000000 		.word	CAMR_M
 1702 0408 48010000 		.word	.LC18
 1703 040c 00000000 		.word	CAMA_M
 1704 0410 60010000 		.word	.LC19
 1705              		.cfi_endproc
 1706              	.LFE73:
 1708              		.section	.text.CHECK_HDMI720P50,"ax",%progbits
 1709              		.align	1
ARM GAS  /tmp/cc8epWVM.s 			page 110


 1710              		.global	CHECK_HDMI720P50
 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1714              		.fpu softvfp
 1716              	CHECK_HDMI720P50:
 1717              	.LFB74:
1166:Src/main.c    **** 	tByte REG9C,REG9D,REGA1,REGA2 ;
 1718              		.loc 1 1166 0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 0
 1721              		@ frame_needed = 0, uses_anonymous_args = 0
 1722 0000 70B5     		push	{r4, r5, r6, lr}
 1723              	.LCFI21:
 1724              		.cfi_def_cfa_offset 16
 1725              		.cfi_offset 4, -16
 1726              		.cfi_offset 5, -12
 1727              		.cfi_offset 6, -8
 1728              		.cfi_offset 14, -4
 1729 0002 82B0     		sub	sp, sp, #8
 1730              	.LCFI22:
 1731              		.cfi_def_cfa_offset 24
 1732              	.LVL131:
1169:Src/main.c    **** 				REG9C=HDMIRX_ReadI2C_Byte(0x9c);			
 1733              		.loc 1 1169 0
 1734 0004 184B     		ldr	r3, .L98
 1735 0006 0022     		movs	r2, #0
 1736 0008 1A70     		strb	r2, [r3]
1170:Src/main.c    **** 				REG9D=HDMIRX_ReadI2C_Byte(0x9d);
 1737              		.loc 1 1170 0
 1738 000a 9C20     		movs	r0, #156
 1739 000c FFF7FEFF 		bl	HDMIRX_ReadI2C_Byte
 1740              	.LVL132:
 1741 0010 0446     		mov	r4, r0
 1742              	.LVL133:
1171:Src/main.c    **** 				REGA1=HDMIRX_ReadI2C_Byte(0xa1);
 1743              		.loc 1 1171 0
 1744 0012 9D20     		movs	r0, #157
 1745 0014 FFF7FEFF 		bl	HDMIRX_ReadI2C_Byte
 1746              	.LVL134:
 1747 0018 0546     		mov	r5, r0
 1748              	.LVL135:
1172:Src/main.c    **** 				REGA2=HDMIRX_ReadI2C_Byte(0xa2);
 1749              		.loc 1 1172 0
 1750 001a A120     		movs	r0, #161
 1751 001c FFF7FEFF 		bl	HDMIRX_ReadI2C_Byte
 1752              	.LVL136:
 1753 0020 0646     		mov	r6, r0
 1754              	.LVL137:
1173:Src/main.c    **** 				
 1755              		.loc 1 1173 0
 1756 0022 A220     		movs	r0, #162
 1757 0024 FFF7FEFF 		bl	HDMIRX_ReadI2C_Byte
 1758              	.LVL138:
1175:Src/main.c    **** 					{
 1759              		.loc 1 1175 0
 1760 0028 BC2C     		cmp	r4, #188
ARM GAS  /tmp/cc8epWVM.s 			page 111


 1761 002a 02D0     		beq	.L94
1168:Src/main.c    **** 	gHDMI_Index=0;	
 1762              		.loc 1 1168 0
 1763 002c 0020     		movs	r0, #0
 1764              	.LVL139:
 1765              	.L88:
1187:Src/main.c    **** 	static void HDMI_VideoModeDetect(void)
 1766              		.loc 1 1187 0
 1767 002e 02B0     		add	sp, sp, #8
 1768              	.LCFI23:
 1769              		.cfi_remember_state
 1770              		.cfi_def_cfa_offset 16
 1771              		@ sp needed
 1772 0030 70BD     		pop	{r4, r5, r6, pc}
 1773              	.LVL140:
 1774              	.L94:
 1775              	.LCFI24:
 1776              		.cfi_restore_state
1175:Src/main.c    **** 					{
 1777              		.loc 1 1175 0 discriminator 1
 1778 0032 072D     		cmp	r5, #7
 1779 0034 01D0     		beq	.L95
1168:Src/main.c    **** 	gHDMI_Index=0;	
 1780              		.loc 1 1168 0
 1781 0036 0020     		movs	r0, #0
 1782              	.LVL141:
 1783 0038 F9E7     		b	.L88
 1784              	.LVL142:
 1785              	.L95:
1175:Src/main.c    **** 					{
 1786              		.loc 1 1175 0 discriminator 2
 1787 003a 102E     		cmp	r6, #16
 1788 003c 01D0     		beq	.L96
1168:Src/main.c    **** 	gHDMI_Index=0;	
 1789              		.loc 1 1168 0
 1790 003e 0020     		movs	r0, #0
 1791              	.LVL143:
 1792 0040 F5E7     		b	.L88
 1793              	.LVL144:
 1794              	.L96:
1175:Src/main.c    **** 					{
 1795              		.loc 1 1175 0 discriminator 3
 1796 0042 B828     		cmp	r0, #184
 1797 0044 01D0     		beq	.L97
1168:Src/main.c    **** 	gHDMI_Index=0;	
 1798              		.loc 1 1168 0
 1799 0046 0020     		movs	r0, #0
 1800              	.LVL145:
 1801 0048 F1E7     		b	.L88
 1802              	.LVL146:
 1803              	.L97:
1177:Src/main.c    **** 					//dbg_Printf("ch%d, REG 0xA2=%x \r\n", (int)(i+1),(int) HDMIRX_ReadI2C_Byte(0xa2) ) ;
 1804              		.loc 1 1177 0
 1805 004a 084B     		ldr	r3, .L98+4
 1806 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1807 004e 0193     		str	r3, [sp, #4]
 1808 0050 0124     		movs	r4, #1
ARM GAS  /tmp/cc8epWVM.s 			page 112


 1809              	.LVL147:
 1810 0052 0094     		str	r4, [sp]
 1811 0054 40F29943 		movw	r3, #1177
 1812 0058 054A     		ldr	r2, .L98+8
 1813 005a 0649     		ldr	r1, .L98+12
 1814 005c 0648     		ldr	r0, .L98+16
 1815              	.LVL148:
 1816 005e FFF7FEFF 		bl	printf
 1817              	.LVL149:
1183:Src/main.c    **** 					}
 1818              		.loc 1 1183 0
 1819 0062 2046     		mov	r0, r4
 1820 0064 E3E7     		b	.L88
 1821              	.L99:
 1822 0066 00BF     		.align	2
 1823              	.L98:
 1824 0068 00000000 		.word	gHDMI_Index
 1825 006c 00000000 		.word	gbVXIS_InputMode
 1826 0070 00000000 		.word	.LANCHOR8
 1827 0074 00000000 		.word	.LC20
 1828 0078 0C000000 		.word	.LC21
 1829              		.cfi_endproc
 1830              	.LFE74:
 1832              		.section	.text.HDMI_VideoModeDetect,"ax",%progbits
 1833              		.align	1
 1834              		.syntax unified
 1835              		.thumb
 1836              		.thumb_func
 1837              		.fpu softvfp
 1839              	HDMI_VideoModeDetect:
 1840              	.LFB75:
1189:Src/main.c    **** 		tByte i  ;
 1841              		.loc 1 1189 0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 0
 1844              		@ frame_needed = 0, uses_anonymous_args = 0
 1845 0000 30B5     		push	{r4, r5, lr}
 1846              	.LCFI25:
 1847              		.cfi_def_cfa_offset 12
 1848              		.cfi_offset 4, -12
 1849              		.cfi_offset 5, -8
 1850              		.cfi_offset 14, -4
 1851 0002 83B0     		sub	sp, sp, #12
 1852              	.LCFI26:
 1853              		.cfi_def_cfa_offset 24
 1854              	.LVL150:
1192:Src/main.c    **** 		{
 1855              		.loc 1 1192 0
 1856 0004 0024     		movs	r4, #0
 1857 0006 1DE0     		b	.L101
 1858              	.LVL151:
 1859              	.L124:
1198:Src/main.c    **** 					bSignal[gHDMI_Index] = 0;
 1860              		.loc 1 1198 0
 1861 0008 794B     		ldr	r3, .L130
 1862 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1863 000c 142B     		cmp	r3, #20
ARM GAS  /tmp/cc8epWVM.s 			page 113


 1864 000e 03D0     		beq	.L119
1201:Src/main.c    **** 			}
 1865              		.loc 1 1201 0
 1866 0010 784B     		ldr	r3, .L130+4
 1867 0012 0122     		movs	r2, #1
 1868 0014 1A55     		strb	r2, [r3, r4]
 1869 0016 22E0     		b	.L104
 1870              	.L119:
1199:Src/main.c    **** 				else
 1871              		.loc 1 1199 0
 1872 0018 764B     		ldr	r3, .L130+4
 1873 001a 0022     		movs	r2, #0
 1874 001c 1A55     		strb	r2, [r3, r4]
 1875 001e 1EE0     		b	.L104
 1876              	.L108:
1239:Src/main.c    **** 						SET_Audio_Mute(ON);
 1877              		.loc 1 1239 0
 1878 0020 002C     		cmp	r4, #0
 1879 0022 5BD0     		beq	.L120
 1880              	.L106:
1244:Src/main.c    **** 			{
 1881              		.loc 1 1244 0
 1882 0024 744B     		ldr	r3, .L130+8
 1883 0026 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 1884 0028 724B     		ldr	r3, .L130+4
 1885 002a 5B5D     		ldrb	r3, [r3, r5]	@ zero_extendqisi2
 1886 002c 012B     		cmp	r3, #1
 1887 002e 59D0     		beq	.L121
 1888              	.L109:
1255:Src/main.c    **** 			{
 1889              		.loc 1 1255 0
 1890 0030 714B     		ldr	r3, .L130+8
 1891 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1892 0034 714A     		ldr	r2, .L130+12
 1893 0036 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1894 0038 7149     		ldr	r1, .L130+16
 1895 003a C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 1896 003c 8A42     		cmp	r2, r1
 1897 003e 5ED1     		bne	.L122
 1898              	.L111:
1192:Src/main.c    **** 		{
 1899              		.loc 1 1192 0 discriminator 2
 1900 0040 0134     		adds	r4, r4, #1
 1901              	.LVL152:
 1902 0042 E4B2     		uxtb	r4, r4
 1903              	.LVL153:
 1904              	.L101:
1192:Src/main.c    **** 		{
 1905              		.loc 1 1192 0 is_stmt 0 discriminator 1
 1906 0044 012C     		cmp	r4, #1
 1907 0046 00F2D080 		bhi	.L123
1194:Src/main.c    **** 			//--- Start --- 20201214-01
 1908              		.loc 1 1194 0 is_stmt 1
 1909 004a 6B4B     		ldr	r3, .L130+8
 1910 004c 1C70     		strb	r4, [r3]
1196:Src/main.c    **** 			{
 1911              		.loc 1 1196 0
ARM GAS  /tmp/cc8epWVM.s 			page 114


 1912 004e 012C     		cmp	r4, #1
 1913 0050 DAD0     		beq	.L124
1205:Src/main.c    **** 
 1914              		.loc 1 1205 0
 1915 0052 FFF7FEFF 		bl	CheckHDMIRX
 1916              	.LVL154:
 1917 0056 684B     		ldr	r3, .L130+8
 1918 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1919 005a 664A     		ldr	r2, .L130+4
 1920 005c D054     		strb	r0, [r2, r3]
 1921              	.L104:
1212:Src/main.c    **** 			{
 1922              		.loc 1 1212 0
 1923 005e 664B     		ldr	r3, .L130+8
 1924 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1925 0062 684A     		ldr	r2, .L130+20
 1926 0064 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1927 0066 684A     		ldr	r2, .L130+24
 1928 0068 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1929 006a 9142     		cmp	r1, r2
 1930 006c 01D0     		beq	.L105
1214:Src/main.c    **** 			}
 1931              		.loc 1 1214 0
 1932 006e 6549     		ldr	r1, .L130+20
 1933 0070 CA54     		strb	r2, [r1, r3]
 1934              	.L105:
1217:Src/main.c    **** 			{
 1935              		.loc 1 1217 0
 1936 0072 604A     		ldr	r2, .L130+4
 1937 0074 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1938 0076 6549     		ldr	r1, .L130+28
 1939 0078 C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 1940 007a 8A42     		cmp	r2, r1
 1941 007c D2D0     		beq	.L106
1219:Src/main.c    **** 	
 1942              		.loc 1 1219 0
 1943 007e 6349     		ldr	r1, .L130+28
 1944 0080 CA54     		strb	r2, [r1, r3]
1221:Src/main.c    **** 				{
 1945              		.loc 1 1221 0
 1946 0082 002A     		cmp	r2, #0
 1947 0084 CED1     		bne	.L106
1223:Src/main.c    **** 					dbg_Printf("##ch%d, VS4210_Rx_NoSignal\r\n", (int)(i+1) ) ;
 1948              		.loc 1 1223 0
 1949 0086 2046     		mov	r0, r4
 1950 0088 FFF7FEFF 		bl	VS4210_Rx_NoSignal
 1951              	.LVL155:
1224:Src/main.c    **** 					if (pVS4210_MutiWindows1.DrawOSDFlg != 0)
 1952              		.loc 1 1224 0
 1953 008c 631C     		adds	r3, r4, #1
 1954 008e 0093     		str	r3, [sp]
 1955 0090 4FF49963 		mov	r3, #1224
 1956 0094 5E4A     		ldr	r2, .L130+32
 1957 0096 5F49     		ldr	r1, .L130+36
 1958 0098 5F48     		ldr	r0, .L130+40
 1959 009a FFF7FEFF 		bl	printf
 1960              	.LVL156:
ARM GAS  /tmp/cc8epWVM.s 			page 115


1225:Src/main.c    **** 					{
 1961              		.loc 1 1225 0
 1962 009e 5F4B     		ldr	r3, .L130+44
 1963 00a0 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1964 00a2 4BB1     		cbz	r3, .L107
1227:Src/main.c    **** 						Tim1_count = 0 ;
 1965              		.loc 1 1227 0
 1966 00a4 0122     		movs	r2, #1
 1967 00a6 5E4B     		ldr	r3, .L130+48
 1968 00a8 1A60     		str	r2, [r3]
1228:Src/main.c    **** 						OSDStateFlg = 1 ;
 1969              		.loc 1 1228 0
 1970 00aa 0023     		movs	r3, #0
 1971 00ac 5D49     		ldr	r1, .L130+52
 1972 00ae 0B60     		str	r3, [r1]
1229:Src/main.c    **** 						OSDSecCount = 0 ;
 1973              		.loc 1 1229 0
 1974 00b0 5D49     		ldr	r1, .L130+56
 1975 00b2 0A70     		strb	r2, [r1]
1230:Src/main.c    **** 					}
 1976              		.loc 1 1230 0
 1977 00b4 5D4A     		ldr	r2, .L130+60
 1978 00b6 1370     		strb	r3, [r2]
 1979              	.L107:
1232:Src/main.c    **** 					PrebVXIS_InputMode[gHDMI_Index] = _OSD_No_Signal ;
 1980              		.loc 1 1232 0
 1981 00b8 4F4B     		ldr	r3, .L130+8
 1982 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1983 00bc 1422     		movs	r2, #20
 1984 00be 4F49     		ldr	r1, .L130+12
 1985 00c0 CA54     		strb	r2, [r1, r3]
1233:Src/main.c    **** 
 1986              		.loc 1 1233 0
 1987 00c2 4F49     		ldr	r1, .L130+16
 1988 00c4 CA54     		strb	r2, [r1, r3]
1235:Src/main.c    **** 						Set_Video_Loss_OSD(0,ON);
 1989              		.loc 1 1235 0
 1990 00c6 5A4A     		ldr	r2, .L130+64
 1991 00c8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1992 00ca 002A     		cmp	r2, #0
 1993 00cc A8D1     		bne	.L108
1235:Src/main.c    **** 						Set_Video_Loss_OSD(0,ON);
 1994              		.loc 1 1235 0 is_stmt 0 discriminator 1
 1995 00ce 002B     		cmp	r3, #0
 1996 00d0 A6D1     		bne	.L108
1236:Src/main.c    **** 					//MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);	
 1997              		.loc 1 1236 0 is_stmt 1
 1998 00d2 0121     		movs	r1, #1
 1999 00d4 0020     		movs	r0, #0
 2000 00d6 FFF7FEFF 		bl	Set_Video_Loss_OSD
 2001              	.LVL157:
 2002 00da A1E7     		b	.L108
 2003              	.L120:
1240:Src/main.c    **** 				}
 2004              		.loc 1 1240 0
 2005 00dc 0120     		movs	r0, #1
 2006 00de FFF7FEFF 		bl	SET_Audio_Mute
ARM GAS  /tmp/cc8epWVM.s 			page 116


 2007              	.LVL158:
 2008 00e2 9FE7     		b	.L106
 2009              	.L121:
1247:Src/main.c    **** 					gbVXIS_InputMode[gHDMI_Index] = newInRes[0];
 2010              		.loc 1 1247 0
 2011 00e4 012C     		cmp	r4, #1
 2012 00e6 05D0     		beq	.L125
1251:Src/main.c    **** 
 2013              		.loc 1 1251 0
 2014 00e8 2846     		mov	r0, r5
 2015 00ea FFF7FEFF 		bl	GetHDMI_InputMode
 2016              	.LVL159:
 2017 00ee 434B     		ldr	r3, .L130+12
 2018 00f0 5855     		strb	r0, [r3, r5]
 2019 00f2 9DE7     		b	.L109
 2020              	.L125:
1248:Src/main.c    **** 				else
 2021              		.loc 1 1248 0
 2022 00f4 3E4B     		ldr	r3, .L130
 2023 00f6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2024 00f8 404B     		ldr	r3, .L130+12
 2025 00fa 5A55     		strb	r2, [r3, r5]
 2026 00fc 98E7     		b	.L109
 2027              	.L122:
1257:Src/main.c    **** 
 2028              		.loc 1 1257 0
 2029 00fe 4049     		ldr	r1, .L130+16
 2030 0100 CA54     		strb	r2, [r1, r3]
1259:Src/main.c    **** 					{
 2031              		.loc 1 1259 0
 2032 0102 FFF7FEFF 		bl	CHECK_HDMI720P50
 2033              	.LVL160:
 2034 0106 0028     		cmp	r0, #0
 2035 0108 4DD1     		bne	.L126
1263:Src/main.c    **** 				{
 2036              		.loc 1 1263 0
 2037 010a 3B4B     		ldr	r3, .L130+8
 2038 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2039 010e 3B4A     		ldr	r2, .L130+12
 2040 0110 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2041 0112 142B     		cmp	r3, #20
 2042 0114 94D0     		beq	.L111
1265:Src/main.c    **** 
 2043              		.loc 1 1265 0
 2044 0116 2546     		mov	r5, r4
 2045 0118 404B     		ldr	r3, .L130+44
 2046 011a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2047 011c 374B     		ldr	r3, .L130+12
 2048 011e 195D     		ldrb	r1, [r3, r4]	@ zero_extendqisi2
 2049 0120 2046     		mov	r0, r4
 2050 0122 FFF7FEFF 		bl	VS4210_SetInModeOutMode
 2051              	.LVL161:
1267:Src/main.c    **** 					VXISI2CWrite( 0x19, 0x01 );
 2052              		.loc 1 1267 0
 2053 0126 424B     		ldr	r3, .L130+64
 2054 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2055 012a 012B     		cmp	r3, #1
ARM GAS  /tmp/cc8epWVM.s 			page 117


 2056 012c 45D0     		beq	.L127
 2057              	.L113:
1271:Src/main.c    **** 
 2058              		.loc 1 1271 0
 2059 012e 414B     		ldr	r3, .L130+68
 2060 0130 33F81530 		ldrh	r3, [r3, r5, lsl #1]
 2061 0134 404A     		ldr	r2, .L130+72
 2062 0136 32F81520 		ldrh	r2, [r2, r5, lsl #1]
 2063 013a 4049     		ldr	r1, .L130+76
 2064 013c 31F81510 		ldrh	r1, [r1, r5, lsl #1]
 2065 0140 3F48     		ldr	r0, .L130+80
 2066 0142 30F81500 		ldrh	r0, [r0, r5, lsl #1]
 2067 0146 0090     		str	r0, [sp]
 2068 0148 2046     		mov	r0, r4
 2069 014a FFF7FEFF 		bl	VS4210_SetInputSizeHV
 2070              	.LVL162:
1273:Src/main.c    **** 
 2071              		.loc 1 1273 0
 2072 014e 2B4B     		ldr	r3, .L130+12
 2073 0150 5B5D     		ldrb	r3, [r3, r5]	@ zero_extendqisi2
 2074 0152 0193     		str	r3, [sp, #4]
 2075 0154 0135     		adds	r5, r5, #1
 2076 0156 0095     		str	r5, [sp]
 2077 0158 40F2F943 		movw	r3, #1273
 2078 015c 2C4A     		ldr	r2, .L130+32
 2079 015e 2D49     		ldr	r1, .L130+36
 2080 0160 3848     		ldr	r0, .L130+84
 2081 0162 FFF7FEFF 		bl	printf
 2082              	.LVL163:
1285:Src/main.c    **** 					{
 2083              		.loc 1 1285 0
 2084 0166 2D4B     		ldr	r3, .L130+44
 2085 0168 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2086 016a 4BB1     		cbz	r3, .L114
1287:Src/main.c    **** 						Tim1_count = 0 ;
 2087              		.loc 1 1287 0
 2088 016c 0122     		movs	r2, #1
 2089 016e 2C4B     		ldr	r3, .L130+48
 2090 0170 1A60     		str	r2, [r3]
1288:Src/main.c    **** 						OSDStateFlg = 1 ;
 2091              		.loc 1 1288 0
 2092 0172 0023     		movs	r3, #0
 2093 0174 2B49     		ldr	r1, .L130+52
 2094 0176 0B60     		str	r3, [r1]
1289:Src/main.c    **** 						OSDSecCount = 0 ;
 2095              		.loc 1 1289 0
 2096 0178 2B49     		ldr	r1, .L130+56
 2097 017a 0A70     		strb	r2, [r1]
1290:Src/main.c    **** 					}
 2098              		.loc 1 1290 0
 2099 017c 2B4A     		ldr	r2, .L130+60
 2100 017e 1370     		strb	r3, [r2]
 2101              	.L114:
1293:Src/main.c    **** 						Set_Video_Loss_OSD(0,OFF);	
 2102              		.loc 1 1293 0
 2103 0180 2B4B     		ldr	r3, .L130+64
 2104 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/cc8epWVM.s 			page 118


 2105 0184 13B9     		cbnz	r3, .L115
1293:Src/main.c    **** 						Set_Video_Loss_OSD(0,OFF);	
 2106              		.loc 1 1293 0 is_stmt 0 discriminator 1
 2107 0186 1C4B     		ldr	r3, .L130+8
 2108 0188 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2109 018a FBB1     		cbz	r3, .L128
 2110              	.L115:
1296:Src/main.c    **** 							{
 2111              		.loc 1 1296 0 is_stmt 1
 2112 018c 284B     		ldr	r3, .L130+64
 2113 018e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2114 0190 012B     		cmp	r3, #1
 2115 0192 20D0     		beq	.L129
 2116              	.L116:
1301:Src/main.c    **** 						SET_Audio_Mute(OFF);	
 2117              		.loc 1 1301 0
 2118 0194 184B     		ldr	r3, .L130+8
 2119 0196 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2120 0198 002B     		cmp	r3, #0
 2121 019a 7FF451AF 		bne	.L111
1302:Src/main.c    **** 						//MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);
 2122              		.loc 1 1302 0
 2123 019e 0020     		movs	r0, #0
 2124 01a0 FFF7FEFF 		bl	SET_Audio_Mute
 2125              	.LVL164:
 2126 01a4 4CE7     		b	.L111
 2127              	.L126:
1261:Src/main.c    **** 					}
 2128              		.loc 1 1261 0
 2129 01a6 631C     		adds	r3, r4, #1
 2130 01a8 0093     		str	r3, [sp]
 2131 01aa 40F2ED43 		movw	r3, #1261
 2132 01ae 184A     		ldr	r2, .L130+32
 2133 01b0 1849     		ldr	r1, .L130+36
 2134 01b2 2548     		ldr	r0, .L130+88
 2135 01b4 FFF7FEFF 		bl	printf
 2136              	.LVL165:
 2137 01b8 42E7     		b	.L111
 2138              	.L127:
1267:Src/main.c    **** 					VXISI2CWrite( 0x19, 0x01 );
 2139              		.loc 1 1267 0 discriminator 1
 2140 01ba 0F4B     		ldr	r3, .L130+8
 2141 01bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2142 01be 012B     		cmp	r3, #1
 2143 01c0 B5D1     		bne	.L113
1268:Src/main.c    **** 							
 2144              		.loc 1 1268 0
 2145 01c2 0121     		movs	r1, #1
 2146 01c4 1920     		movs	r0, #25
 2147 01c6 FFF7FEFF 		bl	VXISI2CWrite
 2148              	.LVL166:
 2149 01ca B0E7     		b	.L113
 2150              	.L128:
1294:Src/main.c    **** 
 2151              		.loc 1 1294 0
 2152 01cc 0021     		movs	r1, #0
 2153 01ce 0846     		mov	r0, r1
ARM GAS  /tmp/cc8epWVM.s 			page 119


 2154 01d0 FFF7FEFF 		bl	Set_Video_Loss_OSD
 2155              	.LVL167:
 2156 01d4 DAE7     		b	.L115
 2157              	.L129:
1296:Src/main.c    **** 							{
 2158              		.loc 1 1296 0 discriminator 1
 2159 01d6 084B     		ldr	r3, .L130+8
 2160 01d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2161 01da 012B     		cmp	r3, #1
 2162 01dc DAD1     		bne	.L116
1298:Src/main.c    **** 							}
 2163              		.loc 1 1298 0
 2164 01de 4021     		movs	r1, #64
 2165 01e0 4FF47A70 		mov	r0, #1000
 2166 01e4 FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 2167              	.LVL168:
 2168 01e8 D4E7     		b	.L116
 2169              	.L123:
1307:Src/main.c    **** 
 2170              		.loc 1 1307 0
 2171 01ea 03B0     		add	sp, sp, #12
 2172              	.LCFI27:
 2173              		.cfi_def_cfa_offset 12
 2174              		@ sp needed
 2175 01ec 30BD     		pop	{r4, r5, pc}
 2176              	.LVL169:
 2177              	.L131:
 2178 01ee 00BF     		.align	2
 2179              	.L130:
 2180 01f0 00000000 		.word	newInRes
 2181 01f4 00000000 		.word	.LANCHOR9
 2182 01f8 00000000 		.word	gHDMI_Index
 2183 01fc 00000000 		.word	gbVXIS_InputMode
 2184 0200 00000000 		.word	.LANCHOR16
 2185 0204 00000000 		.word	PreVState
 2186 0208 00000000 		.word	VState
 2187 020c 00000000 		.word	.LANCHOR10
 2188 0210 00000000 		.word	.LANCHOR11
 2189 0214 00000000 		.word	.LC20
 2190 0218 00000000 		.word	.LC22
 2191 021c 00000000 		.word	pVS4210_MutiWindows1
 2192 0220 00000000 		.word	.LANCHOR12
 2193 0224 00000000 		.word	.LANCHOR13
 2194 0228 00000000 		.word	.LANCHOR14
 2195 022c 00000000 		.word	.LANCHOR15
 2196 0230 00000000 		.word	.LANCHOR17
 2197 0234 00000000 		.word	gHTotal
 2198 0238 00000000 		.word	gVActive
 2199 023c 00000000 		.word	gHActive
 2200 0240 00000000 		.word	gVTotal
 2201 0244 0C000000 		.word	.LC21
 2202 0248 28000000 		.word	.LC23
 2203              		.cfi_endproc
 2204              	.LFE75:
 2206              		.section	.text.main_init,"ax",%progbits
 2207              		.align	1
 2208              		.global	main_init
ARM GAS  /tmp/cc8epWVM.s 			page 120


 2209              		.syntax unified
 2210              		.thumb
 2211              		.thumb_func
 2212              		.fpu softvfp
 2214              	main_init:
 2215              	.LFB77:
1334:Src/main.c    **** 
 2216              		.loc 1 1334 0
 2217              		.cfi_startproc
 2218              		@ args = 0, pretend = 0, frame = 0
 2219              		@ frame_needed = 0, uses_anonymous_args = 0
 2220 0000 38B5     		push	{r3, r4, r5, lr}
 2221              	.LCFI28:
 2222              		.cfi_def_cfa_offset 16
 2223              		.cfi_offset 3, -16
 2224              		.cfi_offset 4, -12
 2225              		.cfi_offset 5, -8
 2226              		.cfi_offset 14, -4
1338:Src/main.c    **** 		Printf("\r\nPrev.FW:%04x\r\n", rev);
 2227              		.loc 1 1338 0
 2228 0002 FFF7FEFF 		bl	GetFWRevEE
 2229              	.LVL170:
 2230 0006 0446     		mov	r4, r0
 2231              	.LVL171:
1339:Src/main.c    **** 		
 2232              		.loc 1 1339 0
 2233 0008 0146     		mov	r1, r0
 2234 000a 1A48     		ldr	r0, .L140
 2235              	.LVL172:
 2236 000c FFF7FEFF 		bl	Printf
 2237              	.LVL173:
1341:Src/main.c    **** 		{					
 2238              		.loc 1 1341 0
 2239 0010 FFF7FEFF 		bl	GetFWRevEE
 2240              	.LVL174:
 2241 0014 B0F5885F 		cmp	r0, #4352
 2242 0018 0BD1     		bne	.L138
 2243              	.L133:
1348:Src/main.c    **** 		{					// exist EEPROM
 2244              		.loc 1 1348 0
 2245 001a FFF7FEFF 		bl	GetFWRevEE
 2246              	.LVL175:
 2247 001e B0F5885F 		cmp	r0, #4352
 2248 0022 1DD1     		bne	.L134
1350:Src/main.c    **** 				{
 2249              		.loc 1 1350 0
 2250 0024 B4F5885F 		cmp	r4, #4352
 2251 0028 14D1     		bne	.L139
 2252              	.L135:
1371:Src/main.c    **** 	
 2253              		.loc 1 1371 0
 2254 002a 6420     		movs	r0, #100
 2255 002c FFF7FEFF 		bl	delay
 2256              	.LVL176:
 2257              	.L132:
1377:Src/main.c    **** 
 2258              		.loc 1 1377 0
ARM GAS  /tmp/cc8epWVM.s 			page 121


 2259 0030 38BD     		pop	{r3, r4, r5, pc}
 2260              	.LVL177:
 2261              	.L138:
1343:Src/main.c    **** 			SaveFWRevEE(FWVER);
 2262              		.loc 1 1343 0
 2263 0032 114D     		ldr	r5, .L140+4
 2264 0034 4FF48851 		mov	r1, #4352
 2265 0038 2846     		mov	r0, r5
 2266 003a FFF7FEFF 		bl	Printf
 2267              	.LVL178:
1344:Src/main.c    **** 			Printf("\r\nCurr.FW:%04x", (WORD)GetFWRevEE());
 2268              		.loc 1 1344 0
 2269 003e 4FF48850 		mov	r0, #4352
 2270 0042 FFF7FEFF 		bl	SaveFWRevEE
 2271              	.LVL179:
1345:Src/main.c    **** 		}
 2272              		.loc 1 1345 0
 2273 0046 FFF7FEFF 		bl	GetFWRevEE
 2274              	.LVL180:
 2275 004a 0146     		mov	r1, r0
 2276 004c 2846     		mov	r0, r5
 2277 004e FFF7FEFF 		bl	Printf
 2278              	.LVL181:
 2279 0052 E2E7     		b	.L133
 2280              	.L139:
1352:Src/main.c    **** 			
 2281              		.loc 1 1352 0
 2282 0054 FFF7FEFF 		bl	ClearBasicEE
 2283              	.LVL182:
1354:Src/main.c    **** 				}
 2284              		.loc 1 1354 0
 2285 0058 0848     		ldr	r0, .L140+8
 2286 005a FFF7FEFF 		bl	Printf
 2287              	.LVL183:
 2288 005e E4E7     		b	.L135
 2289              	.L134:
1364:Src/main.c    **** 			Printf("\r\nNo initialize");
 2290              		.loc 1 1364 0
 2291 0060 0748     		ldr	r0, .L140+12
 2292 0062 FFF7FEFF 		bl	Printf
 2293              	.LVL184:
1365:Src/main.c    **** 			DebugLevel = 0xff;
 2294              		.loc 1 1365 0
 2295 0066 0748     		ldr	r0, .L140+16
 2296 0068 FFF7FEFF 		bl	Printf
 2297              	.LVL185:
1366:Src/main.c    **** 			return;
 2298              		.loc 1 1366 0
 2299 006c 064B     		ldr	r3, .L140+20
 2300 006e FF22     		movs	r2, #255
 2301 0070 1A70     		strb	r2, [r3]
1367:Src/main.c    **** 		}
 2302              		.loc 1 1367 0
 2303 0072 DDE7     		b	.L132
 2304              	.L141:
 2305              		.align	2
 2306              	.L140:
ARM GAS  /tmp/cc8epWVM.s 			page 122


 2307 0074 00000000 		.word	.LC24
 2308 0078 14000000 		.word	.LC25
 2309 007c 24000000 		.word	.LC26
 2310 0080 60000000 		.word	.LC27
 2311 0084 7C000000 		.word	.LC28
 2312 0088 00000000 		.word	DebugLevel
 2313              		.cfi_endproc
 2314              	.LFE77:
 2316              		.section	.text.LCDPowerON,"ax",%progbits
 2317              		.align	1
 2318              		.global	LCDPowerON
 2319              		.syntax unified
 2320              		.thumb
 2321              		.thumb_func
 2322              		.fpu softvfp
 2324              	LCDPowerON:
 2325              	.LFB79:
1476:Src/main.c    **** /*
 2326              		.loc 1 1476 0
 2327              		.cfi_startproc
 2328              		@ args = 0, pretend = 0, frame = 0
 2329              		@ frame_needed = 0, uses_anonymous_args = 0
 2330              		@ link register save eliminated.
1498:Src/main.c    **** 
 2331              		.loc 1 1498 0
 2332 0000 7047     		bx	lr
 2333              		.cfi_endproc
 2334              	.LFE79:
 2336              		.section	.text.LCDPowerOFF,"ax",%progbits
 2337              		.align	1
 2338              		.global	LCDPowerOFF
 2339              		.syntax unified
 2340              		.thumb
 2341              		.thumb_func
 2342              		.fpu softvfp
 2344              	LCDPowerOFF:
 2345              	.LFB80:
1501:Src/main.c    **** /*
 2346              		.loc 1 1501 0
 2347              		.cfi_startproc
 2348              		@ args = 0, pretend = 0, frame = 0
 2349              		@ frame_needed = 0, uses_anonymous_args = 0
 2350              		@ link register save eliminated.
1536:Src/main.c    **** 
 2351              		.loc 1 1536 0
 2352 0000 7047     		bx	lr
 2353              		.cfi_endproc
 2354              	.LFE80:
 2356              		.section	.text.uComOnChipInitial,"ax",%progbits
 2357              		.align	1
 2358              		.global	uComOnChipInitial
 2359              		.syntax unified
 2360              		.thumb
 2361              		.thumb_func
 2362              		.fpu softvfp
 2364              	uComOnChipInitial:
 2365              	.LFB81:
ARM GAS  /tmp/cc8epWVM.s 			page 123


1547:Src/main.c    **** 
 2366              		.loc 1 1547 0
 2367              		.cfi_startproc
 2368              		@ args = 0, pretend = 0, frame = 0
 2369              		@ frame_needed = 0, uses_anonymous_args = 0
 2370 0000 10B5     		push	{r4, lr}
 2371              	.LCFI29:
 2372              		.cfi_def_cfa_offset 8
 2373              		.cfi_offset 4, -8
 2374              		.cfi_offset 14, -4
1552:Src/main.c    **** PCON1V2_TP(ON);      
 2375              		.loc 1 1552 0
 2376 0002 084C     		ldr	r4, .L146
 2377 0004 0022     		movs	r2, #0
 2378 0006 4021     		movs	r1, #64
 2379 0008 2046     		mov	r0, r4
 2380 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 2381              	.LVL186:
1553:Src/main.c    **** 
 2382              		.loc 1 1553 0
 2383 000e 0022     		movs	r2, #0
 2384 0010 2021     		movs	r1, #32
 2385 0012 2046     		mov	r0, r4
 2386 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2387              	.LVL187:
1555:Src/main.c    **** 
 2388              		.loc 1 1555 0
 2389 0018 0122     		movs	r2, #1
 2390 001a 1021     		movs	r1, #16
 2391 001c 2046     		mov	r0, r4
 2392 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 2393              	.LVL188:
1614:Src/main.c    **** 
 2394              		.loc 1 1614 0
 2395 0022 10BD     		pop	{r4, pc}
 2396              	.L147:
 2397              		.align	2
 2398              	.L146:
 2399 0024 00080140 		.word	1073809408
 2400              		.cfi_endproc
 2401              	.LFE81:
 2403              		.section	.text.user_pwm_setvalue,"ax",%progbits
 2404              		.align	1
 2405              		.global	user_pwm_setvalue
 2406              		.syntax unified
 2407              		.thumb
 2408              		.thumb_func
 2409              		.fpu softvfp
 2411              	user_pwm_setvalue:
 2412              	.LFB82:
1617:Src/main.c    ****     TIM_OC_InitTypeDef sConfigOC;
 2413              		.loc 1 1617 0
 2414              		.cfi_startproc
 2415              		@ args = 0, pretend = 0, frame = 32
 2416              		@ frame_needed = 0, uses_anonymous_args = 0
 2417              	.LVL189:
 2418 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cc8epWVM.s 			page 124


 2419              	.LCFI30:
 2420              		.cfi_def_cfa_offset 8
 2421              		.cfi_offset 4, -8
 2422              		.cfi_offset 14, -4
 2423 0002 88B0     		sub	sp, sp, #32
 2424              	.LCFI31:
 2425              		.cfi_def_cfa_offset 40
1620:Src/main.c    ****     sConfigOC.Pulse = value;
 2426              		.loc 1 1620 0
 2427 0004 6023     		movs	r3, #96
 2428 0006 0193     		str	r3, [sp, #4]
1621:Src/main.c    ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2429              		.loc 1 1621 0
 2430 0008 0290     		str	r0, [sp, #8]
1622:Src/main.c    ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2431              		.loc 1 1622 0
 2432 000a 0023     		movs	r3, #0
 2433 000c 0393     		str	r3, [sp, #12]
1623:Src/main.c    ****     HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 2434              		.loc 1 1623 0
 2435 000e 0593     		str	r3, [sp, #20]
1624:Src/main.c    ****     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  
 2436              		.loc 1 1624 0
 2437 0010 054C     		ldr	r4, .L150
 2438 0012 0822     		movs	r2, #8
 2439 0014 01A9     		add	r1, sp, #4
 2440 0016 2046     		mov	r0, r4
 2441              	.LVL190:
 2442 0018 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2443              	.LVL191:
1625:Src/main.c    **** }
 2444              		.loc 1 1625 0
 2445 001c 0821     		movs	r1, #8
 2446 001e 2046     		mov	r0, r4
 2447 0020 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2448              	.LVL192:
1626:Src/main.c    **** 
 2449              		.loc 1 1626 0
 2450 0024 08B0     		add	sp, sp, #32
 2451              	.LCFI32:
 2452              		.cfi_def_cfa_offset 8
 2453              		@ sp needed
 2454 0026 10BD     		pop	{r4, pc}
 2455              	.L151:
 2456              		.align	2
 2457              	.L150:
 2458 0028 00000000 		.word	htim2
 2459              		.cfi_endproc
 2460              	.LFE82:
 2462              		.section	.text.AdjustAutoDayNight,"ax",%progbits
 2463              		.align	1
 2464              		.global	AdjustAutoDayNight
 2465              		.syntax unified
 2466              		.thumb
 2467              		.thumb_func
 2468              		.fpu softvfp
 2470              	AdjustAutoDayNight:
ARM GAS  /tmp/cc8epWVM.s 			page 125


 2471              	.LFB78:
1381:Src/main.c    **** //	BYTE page;
 2472              		.loc 1 1381 0
 2473              		.cfi_startproc
 2474              		@ args = 0, pretend = 0, frame = 0
 2475              		@ frame_needed = 0, uses_anonymous_args = 0
 2476              	.LVL193:
 2477 0000 08B5     		push	{r3, lr}
 2478              	.LCFI33:
 2479              		.cfi_def_cfa_offset 8
 2480              		.cfi_offset 3, -8
 2481              		.cfi_offset 14, -4
 2482              	.LVL194:
1384:Src/main.c    **** 
 2483              		.loc 1 1384 0
 2484 0002 C043     		mvns	r0, r0
 2485              	.LVL195:
 2486 0004 C0B2     		uxtb	r0, r0
 2487              	.LVL196:
1387:Src/main.c    **** 		PWMLevelTemp=0+70;
 2488              		.loc 1 1387 0
 2489 0006 6328     		cmp	r0, #99
 2490 0008 12D9     		bls	.L158
1389:Src/main.c    **** 		PWMLevelTemp=20+70;//20;
 2491              		.loc 1 1389 0
 2492 000a A0F16403 		sub	r3, r0, #100
 2493 000e DBB2     		uxtb	r3, r3
 2494 0010 272B     		cmp	r3, #39
 2495 0012 24D9     		bls	.L159
1391:Src/main.c    **** 		PWMLevelTemp=40+70;//50;
 2496              		.loc 1 1391 0
 2497 0014 00F17403 		add	r3, r0, #116
 2498 0018 DBB2     		uxtb	r3, r3
 2499 001a 272B     		cmp	r3, #39
 2500 001c 21D9     		bls	.L160
1393:Src/main.c    **** 		PWMLevelTemp=60+70;//65;
 2501              		.loc 1 1393 0
 2502 001e 00F14C03 		add	r3, r0, #76
 2503 0022 DBB2     		uxtb	r3, r3
 2504 0024 272B     		cmp	r3, #39
 2505 0026 1ED9     		bls	.L161
1395:Src/main.c    **** 	{
 2506              		.loc 1 1395 0
 2507 0028 DB28     		cmp	r0, #219
 2508 002a 1ED8     		bhi	.L162
1383:Src/main.c    **** 	val=0xff-val;
 2509              		.loc 1 1383 0
 2510 002c 0022     		movs	r2, #0
 2511 002e 00E0     		b	.L153
 2512              	.L158:
1388:Src/main.c    **** 	else if(val>=100&&val<140)
 2513              		.loc 1 1388 0
 2514 0030 4622     		movs	r2, #70
 2515              	.L153:
 2516              	.LVL197:
1427:Src/main.c    **** 	{
 2517              		.loc 1 1427 0
ARM GAS  /tmp/cc8epWVM.s 			page 126


 2518 0032 164B     		ldr	r3, .L164
 2519 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2520 0036 012B     		cmp	r3, #1
 2521 0038 1FD1     		bne	.L154
1433:Src/main.c    **** 				PWMLevel-=1;
 2522              		.loc 1 1433 0
 2523 003a 154B     		ldr	r3, .L164+4
 2524 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2525 003e 9342     		cmp	r3, r2
 2526 0040 15D9     		bls	.L155
1434:Src/main.c    **** 			else if(PWMLevel < PWMLevelTemp)
 2527              		.loc 1 1434 0
 2528 0042 013B     		subs	r3, r3, #1
 2529 0044 124A     		ldr	r2, .L164+4
 2530              	.LVL198:
 2531 0046 1370     		strb	r3, [r2]
 2532              	.L156:
1438:Src/main.c    **** 		}
 2533              		.loc 1 1438 0
 2534 0048 124B     		ldr	r3, .L164+8
 2535 004a 0022     		movs	r2, #0
 2536 004c 1A70     		strb	r2, [r3]
1446:Src/main.c    **** 
 2537              		.loc 1 1446 0
 2538 004e 104B     		ldr	r3, .L164+4
 2539 0050 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2540              	.LVL199:
 2541 0052 C0EB0010 		rsb	r0, r0, r0, lsl #4
 2542 0056 80B2     		uxth	r0, r0
 2543 0058 FFF7FEFF 		bl	user_pwm_setvalue
 2544              	.LVL200:
 2545              	.L152:
1474:Src/main.c    **** void LCDPowerON(void)
 2546              		.loc 1 1474 0
 2547 005c 08BD     		pop	{r3, pc}
 2548              	.LVL201:
 2549              	.L159:
1390:Src/main.c    **** 	else if(val>=140&&val<180)
 2550              		.loc 1 1390 0
 2551 005e 5A22     		movs	r2, #90
 2552 0060 E7E7     		b	.L153
 2553              	.L160:
1392:Src/main.c    **** 	else if(val>=180&&val<220)
 2554              		.loc 1 1392 0
 2555 0062 6E22     		movs	r2, #110
 2556 0064 E5E7     		b	.L153
 2557              	.L161:
1394:Src/main.c    **** 	else if(val>=220&&val<=255)//andy 20110414
 2558              		.loc 1 1394 0
 2559 0066 8222     		movs	r2, #130
 2560 0068 E3E7     		b	.L153
 2561              	.L162:
1398:Src/main.c    **** 		//#else
 2562              		.loc 1 1398 0
 2563 006a 9122     		movs	r2, #145
 2564 006c E1E7     		b	.L153
 2565              	.LVL202:
ARM GAS  /tmp/cc8epWVM.s 			page 127


 2566              	.L155:
1435:Src/main.c    **** 				PWMLevel+=1;
 2567              		.loc 1 1435 0
 2568 006e 9342     		cmp	r3, r2
 2569 0070 EAD2     		bcs	.L156
1436:Src/main.c    **** 
 2570              		.loc 1 1436 0
 2571 0072 0133     		adds	r3, r3, #1
 2572 0074 064A     		ldr	r2, .L164+4
 2573              	.LVL203:
 2574 0076 1370     		strb	r3, [r2]
 2575 0078 E6E7     		b	.L156
 2576              	.LVL204:
 2577              	.L154:
1452:Src/main.c    **** 	//		Printf("(PWMLevel2=%02x)",(WORD)PWMLevel);
 2578              		.loc 1 1452 0
 2579 007a 054B     		ldr	r3, .L164+4
 2580 007c FF22     		movs	r2, #255
 2581              	.LVL205:
 2582 007e 1A70     		strb	r2, [r3]
1454:Src/main.c    **** 	}
 2583              		.loc 1 1454 0
 2584 0080 4FF47A60 		mov	r0, #4000
 2585              	.LVL206:
 2586 0084 FFF7FEFF 		bl	user_pwm_setvalue
 2587              	.LVL207:
1474:Src/main.c    **** void LCDPowerON(void)
 2588              		.loc 1 1474 0
 2589 0088 E8E7     		b	.L152
 2590              	.L165:
 2591 008a 00BF     		.align	2
 2592              	.L164:
 2593 008c 00000000 		.word	.LANCHOR18
 2594 0090 00000000 		.word	.LANCHOR19
 2595 0094 00000000 		.word	.LANCHOR20
 2596              		.cfi_endproc
 2597              	.LFE78:
 2599              		.section	.text.LoadEEPROM,"ax",%progbits
 2600              		.align	1
 2601              		.global	LoadEEPROM
 2602              		.syntax unified
 2603              		.thumb
 2604              		.thumb_func
 2605              		.fpu softvfp
 2607              	LoadEEPROM:
 2608              	.LFB83:
1629:Src/main.c    **** #if 0
 2609              		.loc 1 1629 0
 2610              		.cfi_startproc
 2611              		@ args = 0, pretend = 0, frame = 0
 2612              		@ frame_needed = 0, uses_anonymous_args = 0
 2613              		@ link register save eliminated.
1651:Src/main.c    **** 
 2614              		.loc 1 1651 0
 2615 0000 7047     		bx	lr
 2616              		.cfi_endproc
 2617              	.LFE83:
ARM GAS  /tmp/cc8epWVM.s 			page 128


 2619              		.section	.text.WaitPowerOn,"ax",%progbits
 2620              		.align	1
 2621              		.global	WaitPowerOn
 2622              		.syntax unified
 2623              		.thumb
 2624              		.thumb_func
 2625              		.fpu softvfp
 2627              	WaitPowerOn:
 2628              	.LFB84:
1654:Src/main.c    **** BYTE val;
 2629              		.loc 1 1654 0
 2630              		.cfi_startproc
 2631              		@ args = 0, pretend = 0, frame = 0
 2632              		@ frame_needed = 0, uses_anonymous_args = 0
 2633 0000 10B5     		push	{r4, lr}
 2634              	.LCFI34:
 2635              		.cfi_def_cfa_offset 8
 2636              		.cfi_offset 4, -8
 2637              		.cfi_offset 14, -4
1656:Src/main.c    **** 
 2638              		.loc 1 1656 0
 2639 0002 2C20     		movs	r0, #44
 2640 0004 FFF7FEFF 		bl	PowerLED
 2641              	.LVL208:
1660:Src/main.c    **** 
 2642              		.loc 1 1660 0
 2643 0008 1120     		movs	r0, #17
 2644 000a FFF7FEFF 		bl	MCUTimerCancelTimerEvent
 2645              	.LVL209:
1662:Src/main.c    **** 		
 2646              		.loc 1 1662 0
 2647 000e 1D48     		ldr	r0, .L177
 2648 0010 FFF7FEFF 		bl	Printf
 2649              	.LVL210:
 2650 0014 20E0     		b	.L171
 2651              	.L176:
1671:Src/main.c    **** 				break;		//poweron
 2652              		.loc 1 1671 0
 2653 0016 AB20     		movs	r0, #171
 2654 0018 FFF7FEFF 		bl	WriteEEP
 2655              	.LVL211:
1730:Src/main.c    **** //	SHOWOSDINFO();	
 2656              		.loc 1 1730 0
 2657 001c 2A20     		movs	r0, #42
 2658 001e FFF7FEFF 		bl	PowerLED
 2659              	.LVL212:
1736:Src/main.c    **** 	MCUTimerActiveTimerEvent(SEC(2),_USER_TIMER_EVENT_DISPLAY_DISABLE);
 2660              		.loc 1 1736 0
 2661 0022 0F20     		movs	r0, #15
 2662 0024 FFF7FEFF 		bl	MCUTimerCancelTimerEvent
 2663              	.LVL213:
1737:Src/main.c    **** 
 2664              		.loc 1 1737 0
 2665 0028 0F21     		movs	r1, #15
 2666 002a 4FF4FA60 		mov	r0, #2000
 2667 002e FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 2668              	.LVL214:
ARM GAS  /tmp/cc8epWVM.s 			page 129


1741:Src/main.c    **** //LCDPowerON();
 2669              		.loc 1 1741 0
 2670 0032 1121     		movs	r1, #17
 2671 0034 4FF47A70 		mov	r0, #1000
 2672 0038 FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 2673              	.LVL215:
1743:Src/main.c    **** 
 2674              		.loc 1 1743 0
 2675 003c 1248     		ldr	r0, .L177+4
 2676 003e FFF7FEFF 		bl	Printf
 2677              	.LVL216:
1746:Src/main.c    **** 
 2678              		.loc 1 1746 0
 2679 0042 10BD     		pop	{r4, pc}
 2680              	.LVL217:
 2681              	.L169:
1698:Src/main.c    **** 
 2682              		.loc 1 1698 0
 2683 0044 FFF7FEFF 		bl	TriggerHandler
 2684              	.LVL218:
 2685              	.L170:
1720:Src/main.c    **** 		   	  EQ_Detect();	 
 2686              		.loc 1 1720 0
 2687 0048 FFF7FEFF 		bl	SysTimerHandler
 2688              	.LVL219:
1721:Src/main.c    **** 			  
 2689              		.loc 1 1721 0
 2690 004c FFF7FEFF 		bl	EQ_Detect
 2691              	.LVL220:
1724:Src/main.c    **** 
 2692              		.loc 1 1724 0
 2693 0050 0120     		movs	r0, #1
 2694 0052 FFF7FEFF 		bl	GT9147_Scan
 2695              	.LVL221:
 2696 0056 88B9     		cbnz	r0, .L175
 2697              	.L171:
1667:Src/main.c    **** 			if(PowerFlag==ON)
 2698              		.loc 1 1667 0
 2699 0058 FFF7FEFF 		bl	CheckKeyIn
 2700              	.LVL222:
1668:Src/main.c    **** 			{
 2701              		.loc 1 1668 0
 2702 005c 0B4B     		ldr	r3, .L177+8
 2703 005e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2704 0060 0129     		cmp	r1, #1
 2705 0062 D8D0     		beq	.L176
1675:Src/main.c    **** 		 
 2706              		.loc 1 1675 0
 2707 0064 FFF7FEFF 		bl	CheckTrigger
 2708              	.LVL223:
1679:Src/main.c    **** 		{	
 2709              		.loc 1 1679 0
 2710 0068 0446     		mov	r4, r0
 2711 006a 0028     		cmp	r0, #0
 2712 006c EAD0     		beq	.L169
1681:Src/main.c    **** 			TriggerHandler(val);
 2713              		.loc 1 1681 0
ARM GAS  /tmp/cc8epWVM.s 			page 130


 2714 006e 2A20     		movs	r0, #42
 2715              	.LVL224:
 2716 0070 FFF7FEFF 		bl	PowerLED
 2717              	.LVL225:
1682:Src/main.c    **** 			//	AudioMute(OFF);
 2718              		.loc 1 1682 0
 2719 0074 2046     		mov	r0, r4
 2720 0076 FFF7FEFF 		bl	TriggerHandler
 2721              	.LVL226:
 2722 007a E5E7     		b	.L170
 2723              	.L175:
1726:Src/main.c    **** 					
 2724              		.loc 1 1726 0
 2725 007c 034B     		ldr	r3, .L177+8
 2726 007e 0122     		movs	r2, #1
 2727 0080 1A70     		strb	r2, [r3]
 2728 0082 E9E7     		b	.L171
 2729              	.L178:
 2730              		.align	2
 2731              	.L177:
 2732 0084 00000000 		.word	.LC29
 2733 0088 10000000 		.word	.LC30
 2734 008c 00000000 		.word	.LANCHOR21
 2735              		.cfi_endproc
 2736              	.LFE84:
 2738              		.section	.text.VS4210_FULL88init2,"ax",%progbits
 2739              		.align	1
 2740              		.global	VS4210_FULL88init2
 2741              		.syntax unified
 2742              		.thumb
 2743              		.thumb_func
 2744              		.fpu softvfp
 2746              	VS4210_FULL88init2:
 2747              	.LFB87:
2252:Src/main.c    **** 	 tByte i ;
 2748              		.loc 1 2252 0
 2749              		.cfi_startproc
 2750              		@ args = 0, pretend = 0, frame = 0
 2751              		@ frame_needed = 0, uses_anonymous_args = 0
 2752              	.LVL227:
 2753 0000 38B5     		push	{r3, r4, r5, lr}
 2754              	.LCFI35:
 2755              		.cfi_def_cfa_offset 16
 2756              		.cfi_offset 3, -16
 2757              		.cfi_offset 4, -12
 2758              		.cfi_offset 5, -8
 2759              		.cfi_offset 14, -4
 2760 0002 0546     		mov	r5, r0
 2761              	.LVL228:
2259:Src/main.c    **** 	 {
 2762              		.loc 1 2259 0
 2763 0004 0024     		movs	r4, #0
 2764 0006 06E0     		b	.L180
 2765              	.LVL229:
 2766              	.L181:
2263:Src/main.c    **** 	 }
 2767              		.loc 1 2263 0 discriminator 3
ARM GAS  /tmp/cc8epWVM.s 			page 131


 2768 0008 295D     		ldrb	r1, [r5, r4]	@ zero_extendqisi2
 2769              	.LVL230:
 2770 000a 044B     		ldr	r3, .L183
 2771 000c 185D     		ldrb	r0, [r3, r4]	@ zero_extendqisi2
 2772              	.LVL231:
 2773 000e FFF7FEFF 		bl	VXISI2CWrite
 2774              	.LVL232:
2259:Src/main.c    **** 	 {
 2775              		.loc 1 2259 0 discriminator 3
 2776 0012 0134     		adds	r4, r4, #1
 2777              	.LVL233:
 2778 0014 E4B2     		uxtb	r4, r4
 2779              	.LVL234:
 2780              	.L180:
2259:Src/main.c    **** 	 {
 2781              		.loc 1 2259 0 is_stmt 0 discriminator 1
 2782 0016 572C     		cmp	r4, #87
 2783 0018 F6D9     		bls	.L181
2265:Src/main.c    **** 
 2784              		.loc 1 2265 0 is_stmt 1
 2785 001a 38BD     		pop	{r3, r4, r5, pc}
 2786              	.LVL235:
 2787              	.L184:
 2788              		.align	2
 2789              	.L183:
 2790 001c 00000000 		.word	VS4210_Addr_88param
 2791              		.cfi_endproc
 2792              	.LFE87:
 2794              		.section	.text.TP_bt1120_1080P_1080P_mode0_w0,"ax",%progbits
 2795              		.align	1
 2796              		.global	TP_bt1120_1080P_1080P_mode0_w0
 2797              		.syntax unified
 2798              		.thumb
 2799              		.thumb_func
 2800              		.fpu softvfp
 2802              	TP_bt1120_1080P_1080P_mode0_w0:
 2803              	.LFB88:
2268:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table 1080P... ");
 2804              		.loc 1 2268 0
 2805              		.cfi_startproc
 2806              		@ args = 0, pretend = 0, frame = 0
 2807              		@ frame_needed = 0, uses_anonymous_args = 0
 2808 0000 08B5     		push	{r3, lr}
 2809              	.LCFI36:
 2810              		.cfi_def_cfa_offset 8
 2811              		.cfi_offset 3, -8
 2812              		.cfi_offset 14, -4
2269:Src/main.c    **** #if 1
 2813              		.loc 1 2269 0
 2814 0002 0348     		ldr	r0, .L187
 2815 0004 FFF7FEFF 		bl	Printf
 2816              	.LVL236:
2272:Src/main.c    **** #else
 2817              		.loc 1 2272 0
 2818 0008 0248     		ldr	r0, .L187+4
 2819 000a FFF7FEFF 		bl	VS4210_FULL88init2
 2820              	.LVL237:
ARM GAS  /tmp/cc8epWVM.s 			page 132


2776:Src/main.c    **** 
 2821              		.loc 1 2776 0
 2822 000e 08BD     		pop	{r3, pc}
 2823              	.L188:
 2824              		.align	2
 2825              	.L187:
 2826 0010 00000000 		.word	.LC31
 2827 0014 00000000 		.word	VS4210_TP_bt1120_1080P_1080P_mode0_w0_88param
 2828              		.cfi_endproc
 2829              	.LFE88:
 2831              		.section	.text.TP_bt1120_720P_1080P_mode0_w0,"ax",%progbits
 2832              		.align	1
 2833              		.global	TP_bt1120_720P_1080P_mode0_w0
 2834              		.syntax unified
 2835              		.thumb
 2836              		.thumb_func
 2837              		.fpu softvfp
 2839              	TP_bt1120_720P_1080P_mode0_w0:
 2840              	.LFB89:
2779:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table 720P... ");
 2841              		.loc 1 2779 0
 2842              		.cfi_startproc
 2843              		@ args = 0, pretend = 0, frame = 0
 2844              		@ frame_needed = 0, uses_anonymous_args = 0
 2845 0000 08B5     		push	{r3, lr}
 2846              	.LCFI37:
 2847              		.cfi_def_cfa_offset 8
 2848              		.cfi_offset 3, -8
 2849              		.cfi_offset 14, -4
2780:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_720P_1080P_mode0_w0_88param);
 2850              		.loc 1 2780 0
 2851 0002 0548     		ldr	r0, .L191
 2852 0004 FFF7FEFF 		bl	Printf
 2853              	.LVL238:
2781:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
 2854              		.loc 1 2781 0
 2855 0008 0448     		ldr	r0, .L191+4
 2856 000a FFF7FEFF 		bl	VS4210_FULL88init2
 2857              	.LVL239:
2782:Src/main.c    **** 
 2858              		.loc 1 2782 0
 2859 000e 1021     		movs	r1, #16
 2860 0010 D720     		movs	r0, #215
 2861 0012 FFF7FEFF 		bl	VXISI2CWrite
 2862              	.LVL240:
2784:Src/main.c    **** 
 2863              		.loc 1 2784 0
 2864 0016 08BD     		pop	{r3, pc}
 2865              	.L192:
 2866              		.align	2
 2867              	.L191:
 2868 0018 00000000 		.word	.LC32
 2869 001c 00000000 		.word	VS4210_TP_bt1120_720P_1080P_mode0_w0_88param
 2870              		.cfi_endproc
 2871              	.LFE89:
 2873              		.section	.text.TP_bt1120_NTSC_1080P_mode0_w0,"ax",%progbits
 2874              		.align	1
ARM GAS  /tmp/cc8epWVM.s 			page 133


 2875              		.global	TP_bt1120_NTSC_1080P_mode0_w0
 2876              		.syntax unified
 2877              		.thumb
 2878              		.thumb_func
 2879              		.fpu softvfp
 2881              	TP_bt1120_NTSC_1080P_mode0_w0:
 2882              	.LFB90:
2787:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table NTSC... ");
 2883              		.loc 1 2787 0
 2884              		.cfi_startproc
 2885              		@ args = 0, pretend = 0, frame = 0
 2886              		@ frame_needed = 0, uses_anonymous_args = 0
 2887 0000 08B5     		push	{r3, lr}
 2888              	.LCFI38:
 2889              		.cfi_def_cfa_offset 8
 2890              		.cfi_offset 3, -8
 2891              		.cfi_offset 14, -4
2788:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param);
 2892              		.loc 1 2788 0
 2893 0002 0348     		ldr	r0, .L195
 2894 0004 FFF7FEFF 		bl	Printf
 2895              	.LVL241:
2789:Src/main.c    **** }
 2896              		.loc 1 2789 0
 2897 0008 0248     		ldr	r0, .L195+4
 2898 000a FFF7FEFF 		bl	VS4210_FULL88init2
 2899              	.LVL242:
2790:Src/main.c    **** 
 2900              		.loc 1 2790 0
 2901 000e 08BD     		pop	{r3, pc}
 2902              	.L196:
 2903              		.align	2
 2904              	.L195:
 2905 0010 00000000 		.word	.LC33
 2906 0014 00000000 		.word	VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param
 2907              		.cfi_endproc
 2908              	.LFE90:
 2910              		.section	.text.TP_bt1120_PAL_1080P_mode0_w0,"ax",%progbits
 2911              		.align	1
 2912              		.global	TP_bt1120_PAL_1080P_mode0_w0
 2913              		.syntax unified
 2914              		.thumb
 2915              		.thumb_func
 2916              		.fpu softvfp
 2918              	TP_bt1120_PAL_1080P_mode0_w0:
 2919              	.LFB91:
2793:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table PAL... ");
 2920              		.loc 1 2793 0
 2921              		.cfi_startproc
 2922              		@ args = 0, pretend = 0, frame = 0
 2923              		@ frame_needed = 0, uses_anonymous_args = 0
 2924 0000 08B5     		push	{r3, lr}
 2925              	.LCFI39:
 2926              		.cfi_def_cfa_offset 8
 2927              		.cfi_offset 3, -8
 2928              		.cfi_offset 14, -4
2794:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param);
ARM GAS  /tmp/cc8epWVM.s 			page 134


 2929              		.loc 1 2794 0
 2930 0002 0348     		ldr	r0, .L199
 2931 0004 FFF7FEFF 		bl	Printf
 2932              	.LVL243:
2795:Src/main.c    **** 	#if 0
 2933              		.loc 1 2795 0
 2934 0008 0248     		ldr	r0, .L199+4
 2935 000a FFF7FEFF 		bl	VS4210_FULL88init2
 2936              	.LVL244:
3038:Src/main.c    **** void SET_VS4210_720_480_out(void)
 2937              		.loc 1 3038 0
 2938 000e 08BD     		pop	{r3, pc}
 2939              	.L200:
 2940              		.align	2
 2941              	.L199:
 2942 0010 00000000 		.word	.LC34
 2943 0014 00000000 		.word	VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param
 2944              		.cfi_endproc
 2945              	.LFE91:
 2947              		.section	.text.SET_VS4210_720_480_out,"ax",%progbits
 2948              		.align	1
 2949              		.global	SET_VS4210_720_480_out
 2950              		.syntax unified
 2951              		.thumb
 2952              		.thumb_func
 2953              		.fpu softvfp
 2955              	SET_VS4210_720_480_out:
 2956              	.LFB92:
3040:Src/main.c    **** 	Printf("\r\nSET_VS4210_720_480_out ");
 2957              		.loc 1 3040 0
 2958              		.cfi_startproc
 2959              		@ args = 0, pretend = 0, frame = 0
 2960              		@ frame_needed = 0, uses_anonymous_args = 0
 2961 0000 08B5     		push	{r3, lr}
 2962              	.LCFI40:
 2963              		.cfi_def_cfa_offset 8
 2964              		.cfi_offset 3, -8
 2965              		.cfi_offset 14, -4
3041:Src/main.c    **** 
 2966              		.loc 1 3041 0
 2967 0002 FE48     		ldr	r0, .L203
 2968 0004 FFF7FEFF 		bl	Printf
 2969              	.LVL245:
3043:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
 2970              		.loc 1 3043 0
 2971 0008 0021     		movs	r1, #0
 2972 000a 0120     		movs	r0, #1
 2973 000c FFF7FEFF 		bl	VXISI2CWrite
 2974              	.LVL246:
3044:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
 2975              		.loc 1 3044 0
 2976 0010 0021     		movs	r1, #0
 2977 0012 0220     		movs	r0, #2
 2978 0014 FFF7FEFF 		bl	VXISI2CWrite
 2979              	.LVL247:
3045:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
 2980              		.loc 1 3045 0
ARM GAS  /tmp/cc8epWVM.s 			page 135


 2981 0018 7521     		movs	r1, #117
 2982 001a 0320     		movs	r0, #3
 2983 001c FFF7FEFF 		bl	VXISI2CWrite
 2984              	.LVL248:
3046:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
 2985              		.loc 1 3046 0
 2986 0020 1821     		movs	r1, #24
 2987 0022 0420     		movs	r0, #4
 2988 0024 FFF7FEFF 		bl	VXISI2CWrite
 2989              	.LVL249:
3047:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
 2990              		.loc 1 3047 0
 2991 0028 8021     		movs	r1, #128
 2992 002a 0520     		movs	r0, #5
 2993 002c FFF7FEFF 		bl	VXISI2CWrite
 2994              	.LVL250:
3048:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);
 2995              		.loc 1 3048 0
 2996 0030 2021     		movs	r1, #32
 2997 0032 0620     		movs	r0, #6
 2998 0034 FFF7FEFF 		bl	VXISI2CWrite
 2999              	.LVL251:
3049:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
 3000              		.loc 1 3049 0
 3001 0038 0821     		movs	r1, #8
 3002 003a 0720     		movs	r0, #7
 3003 003c FFF7FEFF 		bl	VXISI2CWrite
 3004              	.LVL252:
3050:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
 3005              		.loc 1 3050 0
 3006 0040 4021     		movs	r1, #64
 3007 0042 0820     		movs	r0, #8
 3008 0044 FFF7FEFF 		bl	VXISI2CWrite
 3009              	.LVL253:
3051:Src/main.c    **** 	VXISI2CWrite(0x0A,0x41);
 3010              		.loc 1 3051 0
 3011 0048 0A21     		movs	r1, #10
 3012 004a 0920     		movs	r0, #9
 3013 004c FFF7FEFF 		bl	VXISI2CWrite
 3014              	.LVL254:
3052:Src/main.c    **** 	VXISI2CWrite(0x0B,0x07);
 3015              		.loc 1 3052 0
 3016 0050 4121     		movs	r1, #65
 3017 0052 0A20     		movs	r0, #10
 3018 0054 FFF7FEFF 		bl	VXISI2CWrite
 3019              	.LVL255:
3053:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
 3020              		.loc 1 3053 0
 3021 0058 0721     		movs	r1, #7
 3022 005a 0B20     		movs	r0, #11
 3023 005c FFF7FEFF 		bl	VXISI2CWrite
 3024              	.LVL256:
3054:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
 3025              		.loc 1 3054 0
 3026 0060 0021     		movs	r1, #0
 3027 0062 0C20     		movs	r0, #12
 3028 0064 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cc8epWVM.s 			page 136


 3029              	.LVL257:
3055:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
 3030              		.loc 1 3055 0
 3031 0068 2021     		movs	r1, #32
 3032 006a 0D20     		movs	r0, #13
 3033 006c FFF7FEFF 		bl	VXISI2CWrite
 3034              	.LVL258:
3056:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
 3035              		.loc 1 3056 0
 3036 0070 1021     		movs	r1, #16
 3037 0072 0E20     		movs	r0, #14
 3038 0074 FFF7FEFF 		bl	VXISI2CWrite
 3039              	.LVL259:
3057:Src/main.c    **** 	VXISI2CWrite(0x10,0x80);
 3040              		.loc 1 3057 0
 3041 0078 0021     		movs	r1, #0
 3042 007a 0F20     		movs	r0, #15
 3043 007c FFF7FEFF 		bl	VXISI2CWrite
 3044              	.LVL260:
3058:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
 3045              		.loc 1 3058 0
 3046 0080 8021     		movs	r1, #128
 3047 0082 1020     		movs	r0, #16
 3048 0084 FFF7FEFF 		bl	VXISI2CWrite
 3049              	.LVL261:
3059:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);
 3050              		.loc 1 3059 0
 3051 0088 8221     		movs	r1, #130
 3052 008a 1120     		movs	r0, #17
 3053 008c FFF7FEFF 		bl	VXISI2CWrite
 3054              	.LVL262:
3060:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);
 3055              		.loc 1 3060 0
 3056 0090 2121     		movs	r1, #33
 3057 0092 1220     		movs	r0, #18
 3058 0094 FFF7FEFF 		bl	VXISI2CWrite
 3059              	.LVL263:
3061:Src/main.c    **** 	VXISI2CWrite(0x14,0xE0);
 3060              		.loc 1 3061 0
 3061 0098 D021     		movs	r1, #208
 3062 009a 1320     		movs	r0, #19
 3063 009c FFF7FEFF 		bl	VXISI2CWrite
 3064              	.LVL264:
3062:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
 3065              		.loc 1 3062 0
 3066 00a0 E021     		movs	r1, #224
 3067 00a2 1420     		movs	r0, #20
 3068 00a4 FFF7FEFF 		bl	VXISI2CWrite
 3069              	.LVL265:
3063:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
 3070              		.loc 1 3063 0
 3071 00a8 7821     		movs	r1, #120
 3072 00aa 1520     		movs	r0, #21
 3073 00ac FFF7FEFF 		bl	VXISI2CWrite
 3074              	.LVL266:
3064:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
 3075              		.loc 1 3064 0
ARM GAS  /tmp/cc8epWVM.s 			page 137


 3076 00b0 FE21     		movs	r1, #254
 3077 00b2 1620     		movs	r0, #22
 3078 00b4 FFF7FEFF 		bl	VXISI2CWrite
 3079              	.LVL267:
3065:Src/main.c    **** 	VXISI2CWrite(0x18,0xC8);
 3080              		.loc 1 3065 0
 3081 00b8 0021     		movs	r1, #0
 3082 00ba 1720     		movs	r0, #23
 3083 00bc FFF7FEFF 		bl	VXISI2CWrite
 3084              	.LVL268:
3066:Src/main.c    **** 	VXISI2CWrite(0x19,0x00);
 3085              		.loc 1 3066 0
 3086 00c0 C821     		movs	r1, #200
 3087 00c2 1820     		movs	r0, #24
 3088 00c4 FFF7FEFF 		bl	VXISI2CWrite
 3089              	.LVL269:
3067:Src/main.c    **** 	VXISI2CWrite(0x1A,0x23);
 3090              		.loc 1 3067 0
 3091 00c8 0021     		movs	r1, #0
 3092 00ca 1920     		movs	r0, #25
 3093 00cc FFF7FEFF 		bl	VXISI2CWrite
 3094              	.LVL270:
3068:Src/main.c    **** 	VXISI2CWrite(0x1B,0x00);
 3095              		.loc 1 3068 0
 3096 00d0 2321     		movs	r1, #35
 3097 00d2 1A20     		movs	r0, #26
 3098 00d4 FFF7FEFF 		bl	VXISI2CWrite
 3099              	.LVL271:
3069:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
 3100              		.loc 1 3069 0
 3101 00d8 0021     		movs	r1, #0
 3102 00da 1B20     		movs	r0, #27
 3103 00dc FFF7FEFF 		bl	VXISI2CWrite
 3104              	.LVL272:
3070:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
 3105              		.loc 1 3070 0
 3106 00e0 0021     		movs	r1, #0
 3107 00e2 1C20     		movs	r0, #28
 3108 00e4 FFF7FEFF 		bl	VXISI2CWrite
 3109              	.LVL273:
3071:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
 3110              		.loc 1 3071 0
 3111 00e8 0021     		movs	r1, #0
 3112 00ea 1D20     		movs	r0, #29
 3113 00ec FFF7FEFF 		bl	VXISI2CWrite
 3114              	.LVL274:
3072:Src/main.c    **** 	VXISI2CWrite(0x1F,0x32);
 3115              		.loc 1 3072 0
 3116 00f0 2021     		movs	r1, #32
 3117 00f2 1E20     		movs	r0, #30
 3118 00f4 FFF7FEFF 		bl	VXISI2CWrite
 3119              	.LVL275:
3073:Src/main.c    **** 	VXISI2CWrite(0x20,0x5A);
 3120              		.loc 1 3073 0
 3121 00f8 3221     		movs	r1, #50
 3122 00fa 1F20     		movs	r0, #31
 3123 00fc FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cc8epWVM.s 			page 138


 3124              	.LVL276:
3074:Src/main.c    **** 	VXISI2CWrite(0x21,0x0D);
 3125              		.loc 1 3074 0
 3126 0100 5A21     		movs	r1, #90
 3127 0102 2020     		movs	r0, #32
 3128 0104 FFF7FEFF 		bl	VXISI2CWrite
 3129              	.LVL277:
3075:Src/main.c    **** 	VXISI2CWrite(0x22,0x32);
 3130              		.loc 1 3075 0
 3131 0108 0D21     		movs	r1, #13
 3132 010a 2120     		movs	r0, #33
 3133 010c FFF7FEFF 		bl	VXISI2CWrite
 3134              	.LVL278:
3076:Src/main.c    **** 	VXISI2CWrite(0x23,0x5A);
 3135              		.loc 1 3076 0
 3136 0110 3221     		movs	r1, #50
 3137 0112 2220     		movs	r0, #34
 3138 0114 FFF7FEFF 		bl	VXISI2CWrite
 3139              	.LVL279:
3077:Src/main.c    **** 	VXISI2CWrite(0x24,0xD0);
 3140              		.loc 1 3077 0
 3141 0118 5A21     		movs	r1, #90
 3142 011a 2320     		movs	r0, #35
 3143 011c FFF7FEFF 		bl	VXISI2CWrite
 3144              	.LVL280:
3078:Src/main.c    **** 	VXISI2CWrite(0x25,0x21);
 3145              		.loc 1 3078 0
 3146 0120 D021     		movs	r1, #208
 3147 0122 2420     		movs	r0, #36
 3148 0124 FFF7FEFF 		bl	VXISI2CWrite
 3149              	.LVL281:
3079:Src/main.c    **** 	VXISI2CWrite(0x26,0x0D);
 3150              		.loc 1 3079 0
 3151 0128 2121     		movs	r1, #33
 3152 012a 2520     		movs	r0, #37
 3153 012c FFF7FEFF 		bl	VXISI2CWrite
 3154              	.LVL282:
3080:Src/main.c    **** 	VXISI2CWrite(0x27,0xE0);
 3155              		.loc 1 3080 0
 3156 0130 0D21     		movs	r1, #13
 3157 0132 2620     		movs	r0, #38
 3158 0134 FFF7FEFF 		bl	VXISI2CWrite
 3159              	.LVL283:
3081:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
 3160              		.loc 1 3081 0
 3161 0138 E021     		movs	r1, #224
 3162 013a 2720     		movs	r0, #39
 3163 013c FFF7FEFF 		bl	VXISI2CWrite
 3164              	.LVL284:
3082:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
 3165              		.loc 1 3082 0
 3166 0140 F021     		movs	r1, #240
 3167 0142 2820     		movs	r0, #40
 3168 0144 FFF7FEFF 		bl	VXISI2CWrite
 3169              	.LVL285:
3083:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
 3170              		.loc 1 3083 0
ARM GAS  /tmp/cc8epWVM.s 			page 139


 3171 0148 0021     		movs	r1, #0
 3172 014a 2920     		movs	r0, #41
 3173 014c FFF7FEFF 		bl	VXISI2CWrite
 3174              	.LVL286:
3084:Src/main.c    **** 	VXISI2CWrite(0x2B,0x01);
 3175              		.loc 1 3084 0
 3176 0150 0021     		movs	r1, #0
 3177 0152 2A20     		movs	r0, #42
 3178 0154 FFF7FEFF 		bl	VXISI2CWrite
 3179              	.LVL287:
3085:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);
 3180              		.loc 1 3085 0
 3181 0158 0121     		movs	r1, #1
 3182 015a 2B20     		movs	r0, #43
 3183 015c FFF7FEFF 		bl	VXISI2CWrite
 3184              	.LVL288:
3086:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
 3185              		.loc 1 3086 0
 3186 0160 FF21     		movs	r1, #255
 3187 0162 2C20     		movs	r0, #44
 3188 0164 FFF7FEFF 		bl	VXISI2CWrite
 3189              	.LVL289:
3087:Src/main.c    **** 	VXISI2CWrite(0x2E,0x12);
 3190              		.loc 1 3087 0
 3191 0168 0021     		movs	r1, #0
 3192 016a 2D20     		movs	r0, #45
 3193 016c FFF7FEFF 		bl	VXISI2CWrite
 3194              	.LVL290:
3088:Src/main.c    **** 	VXISI2CWrite(0x2F,0xD0);
 3195              		.loc 1 3088 0
 3196 0170 1221     		movs	r1, #18
 3197 0172 2E20     		movs	r0, #46
 3198 0174 FFF7FEFF 		bl	VXISI2CWrite
 3199              	.LVL291:
3089:Src/main.c    **** 	VXISI2CWrite(0x30,0xE0);
 3200              		.loc 1 3089 0
 3201 0178 D021     		movs	r1, #208
 3202 017a 2F20     		movs	r0, #47
 3203 017c FFF7FEFF 		bl	VXISI2CWrite
 3204              	.LVL292:
3090:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
 3205              		.loc 1 3090 0
 3206 0180 E021     		movs	r1, #224
 3207 0182 3020     		movs	r0, #48
 3208 0184 FFF7FEFF 		bl	VXISI2CWrite
 3209              	.LVL293:
3091:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
 3210              		.loc 1 3091 0
 3211 0188 8021     		movs	r1, #128
 3212 018a 3120     		movs	r0, #49
 3213 018c FFF7FEFF 		bl	VXISI2CWrite
 3214              	.LVL294:
3092:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
 3215              		.loc 1 3092 0
 3216 0190 8021     		movs	r1, #128
 3217 0192 3220     		movs	r0, #50
 3218 0194 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cc8epWVM.s 			page 140


 3219              	.LVL295:
3093:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
 3220              		.loc 1 3093 0
 3221 0198 8021     		movs	r1, #128
 3222 019a 3320     		movs	r0, #51
 3223 019c FFF7FEFF 		bl	VXISI2CWrite
 3224              	.LVL296:
3094:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
 3225              		.loc 1 3094 0
 3226 01a0 A021     		movs	r1, #160
 3227 01a2 3420     		movs	r0, #52
 3228 01a4 FFF7FEFF 		bl	VXISI2CWrite
 3229              	.LVL297:
3095:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
 3230              		.loc 1 3095 0
 3231 01a8 1821     		movs	r1, #24
 3232 01aa 3520     		movs	r0, #53
 3233 01ac FFF7FEFF 		bl	VXISI2CWrite
 3234              	.LVL298:
3096:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
 3235              		.loc 1 3096 0
 3236 01b0 4621     		movs	r1, #70
 3237 01b2 3620     		movs	r0, #54
 3238 01b4 FFF7FEFF 		bl	VXISI2CWrite
 3239              	.LVL299:
3097:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
 3240              		.loc 1 3097 0
 3241 01b8 6421     		movs	r1, #100
 3242 01ba 3720     		movs	r0, #55
 3243 01bc FFF7FEFF 		bl	VXISI2CWrite
 3244              	.LVL300:
3098:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
 3245              		.loc 1 3098 0
 3246 01c0 0021     		movs	r1, #0
 3247 01c2 3820     		movs	r0, #56
 3248 01c4 FFF7FEFF 		bl	VXISI2CWrite
 3249              	.LVL301:
3099:Src/main.c    **** 	VXISI2CWrite(0x3A,0x03);
 3250              		.loc 1 3099 0
 3251 01c8 FF21     		movs	r1, #255
 3252 01ca 3920     		movs	r0, #57
 3253 01cc FFF7FEFF 		bl	VXISI2CWrite
 3254              	.LVL302:
3100:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
 3255              		.loc 1 3100 0
 3256 01d0 0321     		movs	r1, #3
 3257 01d2 3A20     		movs	r0, #58
 3258 01d4 FFF7FEFF 		bl	VXISI2CWrite
 3259              	.LVL303:
3101:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
 3260              		.loc 1 3101 0
 3261 01d8 8021     		movs	r1, #128
 3262 01da 3B20     		movs	r0, #59
 3263 01dc FFF7FEFF 		bl	VXISI2CWrite
 3264              	.LVL304:
3102:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
 3265              		.loc 1 3102 0
ARM GAS  /tmp/cc8epWVM.s 			page 141


 3266 01e0 8021     		movs	r1, #128
 3267 01e2 3C20     		movs	r0, #60
 3268 01e4 FFF7FEFF 		bl	VXISI2CWrite
 3269              	.LVL305:
3103:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
 3270              		.loc 1 3103 0
 3271 01e8 8021     		movs	r1, #128
 3272 01ea 3D20     		movs	r0, #61
 3273 01ec FFF7FEFF 		bl	VXISI2CWrite
 3274              	.LVL306:
3104:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
 3275              		.loc 1 3104 0
 3276 01f0 8021     		movs	r1, #128
 3277 01f2 3E20     		movs	r0, #62
 3278 01f4 FFF7FEFF 		bl	VXISI2CWrite
 3279              	.LVL307:
3105:Src/main.c    **** 	//VXISI2CWrite(0xVXISI);2CWrite(0x80
 3280              		.loc 1 3105 0
 3281 01f8 8021     		movs	r1, #128
 3282 01fa 3F20     		movs	r0, #63
 3283 01fc FFF7FEFF 		bl	VXISI2CWrite
 3284              	.LVL308:
3107:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
 3285              		.loc 1 3107 0
 3286 0200 6021     		movs	r1, #96
 3287 0202 4120     		movs	r0, #65
 3288 0204 FFF7FEFF 		bl	VXISI2CWrite
 3289              	.LVL309:
3108:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
 3290              		.loc 1 3108 0
 3291 0208 5F21     		movs	r1, #95
 3292 020a 4220     		movs	r0, #66
 3293 020c FFF7FEFF 		bl	VXISI2CWrite
 3294              	.LVL310:
3109:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
 3295              		.loc 1 3109 0
 3296 0210 3721     		movs	r1, #55
 3297 0212 4320     		movs	r0, #67
 3298 0214 FFF7FEFF 		bl	VXISI2CWrite
 3299              	.LVL311:
3110:Src/main.c    **** 	VXISI2CWrite(0x45,0x04);
 3300              		.loc 1 3110 0
 3301 0218 1421     		movs	r1, #20
 3302 021a 4420     		movs	r0, #68
 3303 021c FFF7FEFF 		bl	VXISI2CWrite
 3304              	.LVL312:
3111:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
 3305              		.loc 1 3111 0
 3306 0220 0421     		movs	r1, #4
 3307 0222 4520     		movs	r0, #69
 3308 0224 FFF7FEFF 		bl	VXISI2CWrite
 3309              	.LVL313:
3112:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
 3310              		.loc 1 3112 0
 3311 0228 0021     		movs	r1, #0
 3312 022a 4620     		movs	r0, #70
 3313 022c FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cc8epWVM.s 			page 142


 3314              	.LVL314:
3113:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
 3315              		.loc 1 3113 0
 3316 0230 0021     		movs	r1, #0
 3317 0232 4720     		movs	r0, #71
 3318 0234 FFF7FEFF 		bl	VXISI2CWrite
 3319              	.LVL315:
3114:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
 3320              		.loc 1 3114 0
 3321 0238 0021     		movs	r1, #0
 3322 023a 4820     		movs	r0, #72
 3323 023c FFF7FEFF 		bl	VXISI2CWrite
 3324              	.LVL316:
3115:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
 3325              		.loc 1 3115 0
 3326 0240 0021     		movs	r1, #0
 3327 0242 4920     		movs	r0, #73
 3328 0244 FFF7FEFF 		bl	VXISI2CWrite
 3329              	.LVL317:
3116:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
 3330              		.loc 1 3116 0
 3331 0248 2021     		movs	r1, #32
 3332 024a 4B20     		movs	r0, #75
 3333 024c FFF7FEFF 		bl	VXISI2CWrite
 3334              	.LVL318:
3117:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
 3335              		.loc 1 3117 0
 3336 0250 0021     		movs	r1, #0
 3337 0252 4C20     		movs	r0, #76
 3338 0254 FFF7FEFF 		bl	VXISI2CWrite
 3339              	.LVL319:
3118:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
 3340              		.loc 1 3118 0
 3341 0258 0021     		movs	r1, #0
 3342 025a 4D20     		movs	r0, #77
 3343 025c FFF7FEFF 		bl	VXISI2CWrite
 3344              	.LVL320:
3119:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
 3345              		.loc 1 3119 0
 3346 0260 0021     		movs	r1, #0
 3347 0262 4E20     		movs	r0, #78
 3348 0264 FFF7FEFF 		bl	VXISI2CWrite
 3349              	.LVL321:
3120:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
 3350              		.loc 1 3120 0
 3351 0268 7F21     		movs	r1, #127
 3352 026a 4F20     		movs	r0, #79
 3353 026c FFF7FEFF 		bl	VXISI2CWrite
 3354              	.LVL322:
3121:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
 3355              		.loc 1 3121 0
 3356 0270 2021     		movs	r1, #32
 3357 0272 5020     		movs	r0, #80
 3358 0274 FFF7FEFF 		bl	VXISI2CWrite
 3359              	.LVL323:
3122:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);
 3360              		.loc 1 3122 0
ARM GAS  /tmp/cc8epWVM.s 			page 143


 3361 0278 0021     		movs	r1, #0
 3362 027a 5120     		movs	r0, #81
 3363 027c FFF7FEFF 		bl	VXISI2CWrite
 3364              	.LVL324:
3123:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);
 3365              		.loc 1 3123 0
 3366 0280 0021     		movs	r1, #0
 3367 0282 5220     		movs	r0, #82
 3368 0284 FFF7FEFF 		bl	VXISI2CWrite
 3369              	.LVL325:
3124:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);
 3370              		.loc 1 3124 0
 3371 0288 0421     		movs	r1, #4
 3372 028a 5320     		movs	r0, #83
 3373 028c FFF7FEFF 		bl	VXISI2CWrite
 3374              	.LVL326:
3125:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);
 3375              		.loc 1 3125 0
 3376 0290 0021     		movs	r1, #0
 3377 0292 5420     		movs	r0, #84
 3378 0294 FFF7FEFF 		bl	VXISI2CWrite
 3379              	.LVL327:
3126:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);
 3380              		.loc 1 3126 0
 3381 0298 E021     		movs	r1, #224
 3382 029a 5520     		movs	r0, #85
 3383 029c FFF7FEFF 		bl	VXISI2CWrite
 3384              	.LVL328:
3127:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
 3385              		.loc 1 3127 0
 3386 02a0 4021     		movs	r1, #64
 3387 02a2 5620     		movs	r0, #86
 3388 02a4 FFF7FEFF 		bl	VXISI2CWrite
 3389              	.LVL329:
3128:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
 3390              		.loc 1 3128 0
 3391 02a8 0421     		movs	r1, #4
 3392 02aa 5720     		movs	r0, #87
 3393 02ac FFF7FEFF 		bl	VXISI2CWrite
 3394              	.LVL330:
3129:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
 3395              		.loc 1 3129 0
 3396 02b0 0021     		movs	r1, #0
 3397 02b2 5820     		movs	r0, #88
 3398 02b4 FFF7FEFF 		bl	VXISI2CWrite
 3399              	.LVL331:
3130:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
 3400              		.loc 1 3130 0
 3401 02b8 0821     		movs	r1, #8
 3402 02ba 5920     		movs	r0, #89
 3403 02bc FFF7FEFF 		bl	VXISI2CWrite
 3404              	.LVL332:
3131:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
 3405              		.loc 1 3131 0
 3406 02c0 1021     		movs	r1, #16
 3407 02c2 5A20     		movs	r0, #90
 3408 02c4 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cc8epWVM.s 			page 144


 3409              	.LVL333:
3132:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
 3410              		.loc 1 3132 0
 3411 02c8 0021     		movs	r1, #0
 3412 02ca 5B20     		movs	r0, #91
 3413 02cc FFF7FEFF 		bl	VXISI2CWrite
 3414              	.LVL334:
3133:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);
 3415              		.loc 1 3133 0
 3416 02d0 6821     		movs	r1, #104
 3417 02d2 5C20     		movs	r0, #92
 3418 02d4 FFF7FEFF 		bl	VXISI2CWrite
 3419              	.LVL335:
3134:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);
 3420              		.loc 1 3134 0
 3421 02d8 4021     		movs	r1, #64
 3422 02da 5D20     		movs	r0, #93
 3423 02dc FFF7FEFF 		bl	VXISI2CWrite
 3424              	.LVL336:
3135:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);
 3425              		.loc 1 3135 0
 3426 02e0 0821     		movs	r1, #8
 3427 02e2 5E20     		movs	r0, #94
 3428 02e4 FFF7FEFF 		bl	VXISI2CWrite
 3429              	.LVL337:
3136:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
 3430              		.loc 1 3136 0
 3431 02e8 0021     		movs	r1, #0
 3432 02ea 5F20     		movs	r0, #95
 3433 02ec FFF7FEFF 		bl	VXISI2CWrite
 3434              	.LVL338:
3137:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);
 3435              		.loc 1 3137 0
 3436 02f0 E021     		movs	r1, #224
 3437 02f2 6020     		movs	r0, #96
 3438 02f4 FFF7FEFF 		bl	VXISI2CWrite
 3439              	.LVL339:
3138:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
 3440              		.loc 1 3138 0
 3441 02f8 5421     		movs	r1, #84
 3442 02fa 6120     		movs	r0, #97
 3443 02fc FFF7FEFF 		bl	VXISI2CWrite
 3444              	.LVL340:
3139:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
 3445              		.loc 1 3139 0
 3446 0300 3321     		movs	r1, #51
 3447 0302 6220     		movs	r0, #98
 3448 0304 FFF7FEFF 		bl	VXISI2CWrite
 3449              	.LVL341:
3140:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
 3450              		.loc 1 3140 0
 3451 0308 0121     		movs	r1, #1
 3452 030a 6320     		movs	r0, #99
 3453 030c FFF7FEFF 		bl	VXISI2CWrite
 3454              	.LVL342:
3141:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
 3455              		.loc 1 3141 0
ARM GAS  /tmp/cc8epWVM.s 			page 145


 3456 0310 FF21     		movs	r1, #255
 3457 0312 6420     		movs	r0, #100
 3458 0314 FFF7FEFF 		bl	VXISI2CWrite
 3459              	.LVL343:
3142:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
 3460              		.loc 1 3142 0
 3461 0318 0121     		movs	r1, #1
 3462 031a 6520     		movs	r0, #101
 3463 031c FFF7FEFF 		bl	VXISI2CWrite
 3464              	.LVL344:
3143:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
 3465              		.loc 1 3143 0
 3466 0320 FF21     		movs	r1, #255
 3467 0322 6620     		movs	r0, #102
 3468 0324 FFF7FEFF 		bl	VXISI2CWrite
 3469              	.LVL345:
3144:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
 3470              		.loc 1 3144 0
 3471 0328 8921     		movs	r1, #137
 3472 032a 6720     		movs	r0, #103
 3473 032c FFF7FEFF 		bl	VXISI2CWrite
 3474              	.LVL346:
3145:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
 3475              		.loc 1 3145 0
 3476 0330 AB21     		movs	r1, #171
 3477 0332 6820     		movs	r0, #104
 3478 0334 FFF7FEFF 		bl	VXISI2CWrite
 3479              	.LVL347:
3146:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
 3480              		.loc 1 3146 0
 3481 0338 8821     		movs	r1, #136
 3482 033a 6920     		movs	r0, #105
 3483 033c FFF7FEFF 		bl	VXISI2CWrite
 3484              	.LVL348:
3147:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
 3485              		.loc 1 3147 0
 3486 0340 6E21     		movs	r1, #110
 3487 0342 6A20     		movs	r0, #106
 3488 0344 FFF7FEFF 		bl	VXISI2CWrite
 3489              	.LVL349:
3148:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
 3490              		.loc 1 3148 0
 3491 0348 6E21     		movs	r1, #110
 3492 034a 6B20     		movs	r0, #107
 3493 034c FFF7FEFF 		bl	VXISI2CWrite
 3494              	.LVL350:
3149:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
 3495              		.loc 1 3149 0
 3496 0350 6E21     		movs	r1, #110
 3497 0352 6C20     		movs	r0, #108
 3498 0354 FFF7FEFF 		bl	VXISI2CWrite
 3499              	.LVL351:
3150:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
 3500              		.loc 1 3150 0
 3501 0358 0021     		movs	r1, #0
 3502 035a 6D20     		movs	r0, #109
 3503 035c FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cc8epWVM.s 			page 146


 3504              	.LVL352:
3151:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
 3505              		.loc 1 3151 0
 3506 0360 0021     		movs	r1, #0
 3507 0362 6E20     		movs	r0, #110
 3508 0364 FFF7FEFF 		bl	VXISI2CWrite
 3509              	.LVL353:
3152:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
 3510              		.loc 1 3152 0
 3511 0368 0021     		movs	r1, #0
 3512 036a 6F20     		movs	r0, #111
 3513 036c FFF7FEFF 		bl	VXISI2CWrite
 3514              	.LVL354:
3153:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
 3515              		.loc 1 3153 0
 3516 0370 0021     		movs	r1, #0
 3517 0372 7020     		movs	r0, #112
 3518 0374 FFF7FEFF 		bl	VXISI2CWrite
 3519              	.LVL355:
3154:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
 3520              		.loc 1 3154 0
 3521 0378 0021     		movs	r1, #0
 3522 037a 7120     		movs	r0, #113
 3523 037c FFF7FEFF 		bl	VXISI2CWrite
 3524              	.LVL356:
3155:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
 3525              		.loc 1 3155 0
 3526 0380 0021     		movs	r1, #0
 3527 0382 7220     		movs	r0, #114
 3528 0384 FFF7FEFF 		bl	VXISI2CWrite
 3529              	.LVL357:
3156:Src/main.c    **** 	VXISI2CWrite(0x74,0x00);
 3530              		.loc 1 3156 0
 3531 0388 0021     		movs	r1, #0
 3532 038a 7320     		movs	r0, #115
 3533 038c FFF7FEFF 		bl	VXISI2CWrite
 3534              	.LVL358:
3157:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
 3535              		.loc 1 3157 0
 3536 0390 0021     		movs	r1, #0
 3537 0392 7420     		movs	r0, #116
 3538 0394 FFF7FEFF 		bl	VXISI2CWrite
 3539              	.LVL359:
3158:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
 3540              		.loc 1 3158 0
 3541 0398 FF21     		movs	r1, #255
 3542 039a 7520     		movs	r0, #117
 3543 039c FFF7FEFF 		bl	VXISI2CWrite
 3544              	.LVL360:
3159:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
 3545              		.loc 1 3159 0
 3546 03a0 FF21     		movs	r1, #255
 3547 03a2 7620     		movs	r0, #118
 3548 03a4 FFF7FEFF 		bl	VXISI2CWrite
 3549              	.LVL361:
3160:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
 3550              		.loc 1 3160 0
ARM GAS  /tmp/cc8epWVM.s 			page 147


 3551 03a8 FF21     		movs	r1, #255
 3552 03aa 7720     		movs	r0, #119
 3553 03ac FFF7FEFF 		bl	VXISI2CWrite
 3554              	.LVL362:
3161:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
 3555              		.loc 1 3161 0
 3556 03b0 FF21     		movs	r1, #255
 3557 03b2 7820     		movs	r0, #120
 3558 03b4 FFF7FEFF 		bl	VXISI2CWrite
 3559              	.LVL363:
3162:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
 3560              		.loc 1 3162 0
 3561 03b8 FF21     		movs	r1, #255
 3562 03ba 7920     		movs	r0, #121
 3563 03bc FFF7FEFF 		bl	VXISI2CWrite
 3564              	.LVL364:
3163:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
 3565              		.loc 1 3163 0
 3566 03c0 FF21     		movs	r1, #255
 3567 03c2 7A20     		movs	r0, #122
 3568 03c4 FFF7FEFF 		bl	VXISI2CWrite
 3569              	.LVL365:
3164:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
 3570              		.loc 1 3164 0
 3571 03c8 FF21     		movs	r1, #255
 3572 03ca 7B20     		movs	r0, #123
 3573 03cc FFF7FEFF 		bl	VXISI2CWrite
 3574              	.LVL366:
3165:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
 3575              		.loc 1 3165 0
 3576 03d0 FF21     		movs	r1, #255
 3577 03d2 7C20     		movs	r0, #124
 3578 03d4 FFF7FEFF 		bl	VXISI2CWrite
 3579              	.LVL367:
3166:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
 3580              		.loc 1 3166 0
 3581 03d8 F021     		movs	r1, #240
 3582 03da 7D20     		movs	r0, #125
 3583 03dc FFF7FEFF 		bl	VXISI2CWrite
 3584              	.LVL368:
3167:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
 3585              		.loc 1 3167 0
 3586 03e0 8021     		movs	r1, #128
 3587 03e2 7E20     		movs	r0, #126
 3588 03e4 FFF7FEFF 		bl	VXISI2CWrite
 3589              	.LVL369:
3168:Src/main.c    **** 	VXISI2CWrite(0x80,0x00);
 3590              		.loc 1 3168 0
 3591 03e8 0021     		movs	r1, #0
 3592 03ea 7F20     		movs	r0, #127
 3593 03ec FFF7FEFF 		bl	VXISI2CWrite
 3594              	.LVL370:
3169:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);
 3595              		.loc 1 3169 0
 3596 03f0 0021     		movs	r1, #0
 3597 03f2 8020     		movs	r0, #128
 3598 03f4 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cc8epWVM.s 			page 148


 3599              	.LVL371:
 3600 03f8 02E0     		b	.L204
 3601              	.L205:
 3602 03fa 00BF     		.align	2
 3603              	.L203:
 3604 03fc 00000000 		.word	.LC35
 3605              	.L204:
3170:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
 3606              		.loc 1 3170 0
 3607 0400 3421     		movs	r1, #52
 3608 0402 8120     		movs	r0, #129
 3609 0404 FFF7FEFF 		bl	VXISI2CWrite
 3610              	.LVL372:
3171:Src/main.c    **** 	VXISI2CWrite(0x83,0x05);
 3611              		.loc 1 3171 0
 3612 0408 4021     		movs	r1, #64
 3613 040a 8220     		movs	r0, #130
 3614 040c FFF7FEFF 		bl	VXISI2CWrite
 3615              	.LVL373:
3172:Src/main.c    **** 	VXISI2CWrite(0x84,0x59);
 3616              		.loc 1 3172 0
 3617 0410 0521     		movs	r1, #5
 3618 0412 8320     		movs	r0, #131
 3619 0414 FFF7FEFF 		bl	VXISI2CWrite
 3620              	.LVL374:
3173:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
 3621              		.loc 1 3173 0
 3622 0418 5921     		movs	r1, #89
 3623 041a 8420     		movs	r0, #132
 3624 041c FFF7FEFF 		bl	VXISI2CWrite
 3625              	.LVL375:
3174:Src/main.c    **** 	VXISI2CWrite(0x86,0x04);
 3626              		.loc 1 3174 0
 3627 0420 FD21     		movs	r1, #253
 3628 0422 8520     		movs	r0, #133
 3629 0424 FFF7FEFF 		bl	VXISI2CWrite
 3630              	.LVL376:
3175:Src/main.c    **** 	VXISI2CWrite(0x87,0x24);
 3631              		.loc 1 3175 0
 3632 0428 0421     		movs	r1, #4
 3633 042a 8620     		movs	r0, #134
 3634 042c FFF7FEFF 		bl	VXISI2CWrite
 3635              	.LVL377:
3176:Src/main.c    **** 	VXISI2CWrite(0x88,0x94);
 3636              		.loc 1 3176 0
 3637 0430 2421     		movs	r1, #36
 3638 0432 8720     		movs	r0, #135
 3639 0434 FFF7FEFF 		bl	VXISI2CWrite
 3640              	.LVL378:
3177:Src/main.c    **** 	VXISI2CWrite(0x89,0x58);
 3641              		.loc 1 3177 0
 3642 0438 9421     		movs	r1, #148
 3643 043a 8820     		movs	r0, #136
 3644 043c FFF7FEFF 		bl	VXISI2CWrite
 3645              	.LVL379:
3178:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
 3646              		.loc 1 3178 0
ARM GAS  /tmp/cc8epWVM.s 			page 149


 3647 0440 5821     		movs	r1, #88
 3648 0442 8920     		movs	r0, #137
 3649 0444 FFF7FEFF 		bl	VXISI2CWrite
 3650              	.LVL380:
3179:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
 3651              		.loc 1 3179 0
 3652 0448 0021     		movs	r1, #0
 3653 044a 8A20     		movs	r0, #138
 3654 044c FFF7FEFF 		bl	VXISI2CWrite
 3655              	.LVL381:
3180:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
 3656              		.loc 1 3180 0
 3657 0450 7E21     		movs	r1, #126
 3658 0452 8B20     		movs	r0, #139
 3659 0454 FFF7FEFF 		bl	VXISI2CWrite
 3660              	.LVL382:
3181:Src/main.c    **** 	VXISI2CWrite(0x8D,0x2C);
 3661              		.loc 1 3181 0
 3662 0458 0321     		movs	r1, #3
 3663 045a 8C20     		movs	r0, #140
 3664 045c FFF7FEFF 		bl	VXISI2CWrite
 3665              	.LVL383:
3182:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
 3666              		.loc 1 3182 0
 3667 0460 2C21     		movs	r1, #44
 3668 0462 8D20     		movs	r0, #141
 3669 0464 FFF7FEFF 		bl	VXISI2CWrite
 3670              	.LVL384:
3183:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
 3671              		.loc 1 3183 0
 3672 0468 8C21     		movs	r1, #140
 3673 046a 8E20     		movs	r0, #142
 3674 046c FFF7FEFF 		bl	VXISI2CWrite
 3675              	.LVL385:
3184:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
 3676              		.loc 1 3184 0
 3677 0470 0021     		movs	r1, #0
 3678 0472 8F20     		movs	r0, #143
 3679 0474 FFF7FEFF 		bl	VXISI2CWrite
 3680              	.LVL386:
3185:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
 3681              		.loc 1 3185 0
 3682 0478 CC21     		movs	r1, #204
 3683 047a 9020     		movs	r0, #144
 3684 047c FFF7FEFF 		bl	VXISI2CWrite
 3685              	.LVL387:
3186:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
 3686              		.loc 1 3186 0
 3687 0480 4121     		movs	r1, #65
 3688 0482 9120     		movs	r0, #145
 3689 0484 FFF7FEFF 		bl	VXISI2CWrite
 3690              	.LVL388:
3187:Src/main.c    **** 	VXISI2CWrite(0x93,0x31);
 3691              		.loc 1 3187 0
 3692 0488 C421     		movs	r1, #196
 3693 048a 9220     		movs	r0, #146
 3694 048c FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cc8epWVM.s 			page 150


 3695              	.LVL389:
3188:Src/main.c    **** 	VXISI2CWrite(0x94,0x87);
 3696              		.loc 1 3188 0
 3697 0490 3121     		movs	r1, #49
 3698 0492 9320     		movs	r0, #147
 3699 0494 FFF7FEFF 		bl	VXISI2CWrite
 3700              	.LVL390:
3189:Src/main.c    **** 	VXISI2CWrite(0x95,0xD0);
 3701              		.loc 1 3189 0
 3702 0498 8721     		movs	r1, #135
 3703 049a 9420     		movs	r0, #148
 3704 049c FFF7FEFF 		bl	VXISI2CWrite
 3705              	.LVL391:
3190:Src/main.c    **** 	VXISI2CWrite(0x96,0xF3);
 3706              		.loc 1 3190 0
 3707 04a0 D021     		movs	r1, #208
 3708 04a2 9520     		movs	r0, #149
 3709 04a4 FFF7FEFF 		bl	VXISI2CWrite
 3710              	.LVL392:
3191:Src/main.c    **** 	VXISI2CWrite(0x97,0x20);
 3711              		.loc 1 3191 0
 3712 04a8 F321     		movs	r1, #243
 3713 04aa 9620     		movs	r0, #150
 3714 04ac FFF7FEFF 		bl	VXISI2CWrite
 3715              	.LVL393:
3192:Src/main.c    **** 	VXISI2CWrite(0x98,0x11);
 3716              		.loc 1 3192 0
 3717 04b0 2021     		movs	r1, #32
 3718 04b2 9720     		movs	r0, #151
 3719 04b4 FFF7FEFF 		bl	VXISI2CWrite
 3720              	.LVL394:
3193:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
 3721              		.loc 1 3193 0
 3722 04b8 1121     		movs	r1, #17
 3723 04ba 9820     		movs	r0, #152
 3724 04bc FFF7FEFF 		bl	VXISI2CWrite
 3725              	.LVL395:
3194:Src/main.c    **** 	VXISI2CWrite(0x9A,0xFF);
 3726              		.loc 1 3194 0
 3727 04c0 9021     		movs	r1, #144
 3728 04c2 9920     		movs	r0, #153
 3729 04c4 FFF7FEFF 		bl	VXISI2CWrite
 3730              	.LVL396:
3195:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
 3731              		.loc 1 3195 0
 3732 04c8 FF21     		movs	r1, #255
 3733 04ca 9A20     		movs	r0, #154
 3734 04cc FFF7FEFF 		bl	VXISI2CWrite
 3735              	.LVL397:
3196:Src/main.c    **** 	VXISI2CWrite(0x9C,0x0A);
 3736              		.loc 1 3196 0
 3737 04d0 0421     		movs	r1, #4
 3738 04d2 9B20     		movs	r0, #155
 3739 04d4 FFF7FEFF 		bl	VXISI2CWrite
 3740              	.LVL398:
3197:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
 3741              		.loc 1 3197 0
ARM GAS  /tmp/cc8epWVM.s 			page 151


 3742 04d8 0A21     		movs	r1, #10
 3743 04da 9C20     		movs	r0, #156
 3744 04dc FFF7FEFF 		bl	VXISI2CWrite
 3745              	.LVL399:
3198:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
 3746              		.loc 1 3198 0
 3747 04e0 0021     		movs	r1, #0
 3748 04e2 9D20     		movs	r0, #157
 3749 04e4 FFF7FEFF 		bl	VXISI2CWrite
 3750              	.LVL400:
3199:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
 3751              		.loc 1 3199 0
 3752 04e8 0421     		movs	r1, #4
 3753 04ea 9E20     		movs	r0, #158
 3754 04ec FFF7FEFF 		bl	VXISI2CWrite
 3755              	.LVL401:
3200:Src/main.c    **** 	VXISI2CWrite(0xA0,0x2F);
 3756              		.loc 1 3200 0
 3757 04f0 6521     		movs	r1, #101
 3758 04f2 9F20     		movs	r0, #159
 3759 04f4 FFF7FEFF 		bl	VXISI2CWrite
 3760              	.LVL402:
3201:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD9);
 3761              		.loc 1 3201 0
 3762 04f8 2F21     		movs	r1, #47
 3763 04fa A020     		movs	r0, #160
 3764 04fc FFF7FEFF 		bl	VXISI2CWrite
 3765              	.LVL403:
3202:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
 3766              		.loc 1 3202 0
 3767 0500 D921     		movs	r1, #217
 3768 0502 A120     		movs	r0, #161
 3769 0504 FFF7FEFF 		bl	VXISI2CWrite
 3770              	.LVL404:
3203:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
 3771              		.loc 1 3203 0
 3772 0508 9821     		movs	r1, #152
 3773 050a A220     		movs	r0, #162
 3774 050c FFF7FEFF 		bl	VXISI2CWrite
 3775              	.LVL405:
3204:Src/main.c    **** 	VXISI2CWrite(0xA4,0xE1);
 3776              		.loc 1 3204 0
 3777 0510 8721     		movs	r1, #135
 3778 0512 A320     		movs	r0, #163
 3779 0514 FFF7FEFF 		bl	VXISI2CWrite
 3780              	.LVL406:
3205:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);
 3781              		.loc 1 3205 0
 3782 0518 E121     		movs	r1, #225
 3783 051a A420     		movs	r0, #164
 3784 051c FFF7FEFF 		bl	VXISI2CWrite
 3785              	.LVL407:
3206:Src/main.c    **** 	VXISI2CWrite(0xA6,0xC2);
 3786              		.loc 1 3206 0
 3787 0520 3821     		movs	r1, #56
 3788 0522 A520     		movs	r0, #165
 3789 0524 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cc8epWVM.s 			page 152


 3790              	.LVL408:
3207:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
 3791              		.loc 1 3207 0
 3792 0528 C221     		movs	r1, #194
 3793 052a A620     		movs	r0, #166
 3794 052c FFF7FEFF 		bl	VXISI2CWrite
 3795              	.LVL409:
3208:Src/main.c    **** 	VXISI2CWrite(0xA8,0x00);
 3796              		.loc 1 3208 0
 3797 0530 7021     		movs	r1, #112
 3798 0532 A720     		movs	r0, #167
 3799 0534 FFF7FEFF 		bl	VXISI2CWrite
 3800              	.LVL410:
3209:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
 3801              		.loc 1 3209 0
 3802 0538 0021     		movs	r1, #0
 3803 053a A820     		movs	r0, #168
 3804 053c FFF7FEFF 		bl	VXISI2CWrite
 3805              	.LVL411:
3210:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);
 3806              		.loc 1 3210 0
 3807 0540 1E21     		movs	r1, #30
 3808 0542 A920     		movs	r0, #169
 3809 0544 FFF7FEFF 		bl	VXISI2CWrite
 3810              	.LVL412:
3211:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
 3811              		.loc 1 3211 0
 3812 0548 2E21     		movs	r1, #46
 3813 054a AA20     		movs	r0, #170
 3814 054c FFF7FEFF 		bl	VXISI2CWrite
 3815              	.LVL413:
3212:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);
 3816              		.loc 1 3212 0
 3817 0550 0021     		movs	r1, #0
 3818 0552 AB20     		movs	r0, #171
 3819 0554 FFF7FEFF 		bl	VXISI2CWrite
 3820              	.LVL414:
3213:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF3);
 3821              		.loc 1 3213 0
 3822 0558 8421     		movs	r1, #132
 3823 055a AC20     		movs	r0, #172
 3824 055c FFF7FEFF 		bl	VXISI2CWrite
 3825              	.LVL415:
3214:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
 3826              		.loc 1 3214 0
 3827 0560 F321     		movs	r1, #243
 3828 0562 AD20     		movs	r0, #173
 3829 0564 FFF7FEFF 		bl	VXISI2CWrite
 3830              	.LVL416:
3215:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
 3831              		.loc 1 3215 0
 3832 0568 6521     		movs	r1, #101
 3833 056a AE20     		movs	r0, #174
 3834 056c FFF7FEFF 		bl	VXISI2CWrite
 3835              	.LVL417:
3216:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
 3836              		.loc 1 3216 0
ARM GAS  /tmp/cc8epWVM.s 			page 153


 3837 0570 9921     		movs	r1, #153
 3838 0572 AF20     		movs	r0, #175
 3839 0574 FFF7FEFF 		bl	VXISI2CWrite
 3840              	.LVL418:
3217:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
 3841              		.loc 1 3217 0
 3842 0578 0021     		movs	r1, #0
 3843 057a B020     		movs	r0, #176
 3844 057c FFF7FEFF 		bl	VXISI2CWrite
 3845              	.LVL419:
3218:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
 3846              		.loc 1 3218 0
 3847 0580 0021     		movs	r1, #0
 3848 0582 B120     		movs	r0, #177
 3849 0584 FFF7FEFF 		bl	VXISI2CWrite
 3850              	.LVL420:
3219:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
 3851              		.loc 1 3219 0
 3852 0588 0021     		movs	r1, #0
 3853 058a B220     		movs	r0, #178
 3854 058c FFF7FEFF 		bl	VXISI2CWrite
 3855              	.LVL421:
3220:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
 3856              		.loc 1 3220 0
 3857 0590 0021     		movs	r1, #0
 3858 0592 B320     		movs	r0, #179
 3859 0594 FFF7FEFF 		bl	VXISI2CWrite
 3860              	.LVL422:
3221:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
 3861              		.loc 1 3221 0
 3862 0598 0021     		movs	r1, #0
 3863 059a B420     		movs	r0, #180
 3864 059c FFF7FEFF 		bl	VXISI2CWrite
 3865              	.LVL423:
3222:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
 3866              		.loc 1 3222 0
 3867 05a0 0021     		movs	r1, #0
 3868 05a2 B520     		movs	r0, #181
 3869 05a4 FFF7FEFF 		bl	VXISI2CWrite
 3870              	.LVL424:
3223:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
 3871              		.loc 1 3223 0
 3872 05a8 0021     		movs	r1, #0
 3873 05aa B620     		movs	r0, #182
 3874 05ac FFF7FEFF 		bl	VXISI2CWrite
 3875              	.LVL425:
3224:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
 3876              		.loc 1 3224 0
 3877 05b0 8021     		movs	r1, #128
 3878 05b2 B820     		movs	r0, #184
 3879 05b4 FFF7FEFF 		bl	VXISI2CWrite
 3880              	.LVL426:
3225:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
 3881              		.loc 1 3225 0
 3882 05b8 0021     		movs	r1, #0
 3883 05ba B920     		movs	r0, #185
 3884 05bc FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cc8epWVM.s 			page 154


 3885              	.LVL427:
3226:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
 3886              		.loc 1 3226 0
 3887 05c0 0121     		movs	r1, #1
 3888 05c2 BA20     		movs	r0, #186
 3889 05c4 FFF7FEFF 		bl	VXISI2CWrite
 3890              	.LVL428:
3227:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
 3891              		.loc 1 3227 0
 3892 05c8 0021     		movs	r1, #0
 3893 05ca BB20     		movs	r0, #187
 3894 05cc FFF7FEFF 		bl	VXISI2CWrite
 3895              	.LVL429:
3228:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
 3896              		.loc 1 3228 0
 3897 05d0 9021     		movs	r1, #144
 3898 05d2 BC20     		movs	r0, #188
 3899 05d4 FFF7FEFF 		bl	VXISI2CWrite
 3900              	.LVL430:
3229:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
 3901              		.loc 1 3229 0
 3902 05d8 0121     		movs	r1, #1
 3903 05da BD20     		movs	r0, #189
 3904 05dc FFF7FEFF 		bl	VXISI2CWrite
 3905              	.LVL431:
3230:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
 3906              		.loc 1 3230 0
 3907 05e0 2C21     		movs	r1, #44
 3908 05e2 BE20     		movs	r0, #190
 3909 05e4 FFF7FEFF 		bl	VXISI2CWrite
 3910              	.LVL432:
3231:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
 3911              		.loc 1 3231 0
 3912 05e8 0021     		movs	r1, #0
 3913 05ea C020     		movs	r0, #192
 3914 05ec FFF7FEFF 		bl	VXISI2CWrite
 3915              	.LVL433:
3232:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
 3916              		.loc 1 3232 0
 3917 05f0 2021     		movs	r1, #32
 3918 05f2 C120     		movs	r0, #193
 3919 05f4 FFF7FEFF 		bl	VXISI2CWrite
 3920              	.LVL434:
3233:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
 3921              		.loc 1 3233 0
 3922 05f8 2021     		movs	r1, #32
 3923 05fa C220     		movs	r0, #194
 3924 05fc FFF7FEFF 		bl	VXISI2CWrite
 3925              	.LVL435:
3234:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
 3926              		.loc 1 3234 0
 3927 0600 2021     		movs	r1, #32
 3928 0602 C320     		movs	r0, #195
 3929 0604 FFF7FEFF 		bl	VXISI2CWrite
 3930              	.LVL436:
3235:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
 3931              		.loc 1 3235 0
ARM GAS  /tmp/cc8epWVM.s 			page 155


 3932 0608 2021     		movs	r1, #32
 3933 060a C420     		movs	r0, #196
 3934 060c FFF7FEFF 		bl	VXISI2CWrite
 3935              	.LVL437:
3236:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
 3936              		.loc 1 3236 0
 3937 0610 2021     		movs	r1, #32
 3938 0612 C520     		movs	r0, #197
 3939 0614 FFF7FEFF 		bl	VXISI2CWrite
 3940              	.LVL438:
3237:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
 3941              		.loc 1 3237 0
 3942 0618 FF21     		movs	r1, #255
 3943 061a D020     		movs	r0, #208
 3944 061c FFF7FEFF 		bl	VXISI2CWrite
 3945              	.LVL439:
3238:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
 3946              		.loc 1 3238 0
 3947 0620 3F21     		movs	r1, #63
 3948 0622 D120     		movs	r0, #209
 3949 0624 FFF7FEFF 		bl	VXISI2CWrite
 3950              	.LVL440:
3239:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
 3951              		.loc 1 3239 0
 3952 0628 C221     		movs	r1, #194
 3953 062a D220     		movs	r0, #210
 3954 062c FFF7FEFF 		bl	VXISI2CWrite
 3955              	.LVL441:
3240:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
 3956              		.loc 1 3240 0
 3957 0630 3F21     		movs	r1, #63
 3958 0632 D320     		movs	r0, #211
 3959 0634 FFF7FEFF 		bl	VXISI2CWrite
 3960              	.LVL442:
3241:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
 3961              		.loc 1 3241 0
 3962 0638 0021     		movs	r1, #0
 3963 063a D420     		movs	r0, #212
 3964 063c FFF7FEFF 		bl	VXISI2CWrite
 3965              	.LVL443:
3242:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
 3966              		.loc 1 3242 0
 3967 0640 0021     		movs	r1, #0
 3968 0642 D520     		movs	r0, #213
 3969 0644 FFF7FEFF 		bl	VXISI2CWrite
 3970              	.LVL444:
3243:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
 3971              		.loc 1 3243 0
 3972 0648 0021     		movs	r1, #0
 3973 064a D620     		movs	r0, #214
 3974 064c FFF7FEFF 		bl	VXISI2CWrite
 3975              	.LVL445:
3244:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
 3976              		.loc 1 3244 0
 3977 0650 1021     		movs	r1, #16
 3978 0652 D720     		movs	r0, #215
 3979 0654 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cc8epWVM.s 			page 156


 3980              	.LVL446:
3245:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
 3981              		.loc 1 3245 0
 3982 0658 0021     		movs	r1, #0
 3983 065a D820     		movs	r0, #216
 3984 065c FFF7FEFF 		bl	VXISI2CWrite
 3985              	.LVL447:
3246:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);
 3986              		.loc 1 3246 0
 3987 0660 7721     		movs	r1, #119
 3988 0662 DC20     		movs	r0, #220
 3989 0664 FFF7FEFF 		bl	VXISI2CWrite
 3990              	.LVL448:
3247:Src/main.c    **** 	VXISI2CWrite(0xDE,0xAF);
 3991              		.loc 1 3247 0
 3992 0668 0021     		movs	r1, #0
 3993 066a DD20     		movs	r0, #221
 3994 066c FFF7FEFF 		bl	VXISI2CWrite
 3995              	.LVL449:
3248:Src/main.c    **** 	VXISI2CWrite(0xDF,0xEF);
 3996              		.loc 1 3248 0
 3997 0670 AF21     		movs	r1, #175
 3998 0672 DE20     		movs	r0, #222
 3999 0674 FFF7FEFF 		bl	VXISI2CWrite
 4000              	.LVL450:
3249:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
 4001              		.loc 1 3249 0
 4002 0678 EF21     		movs	r1, #239
 4003 067a DF20     		movs	r0, #223
 4004 067c FFF7FEFF 		bl	VXISI2CWrite
 4005              	.LVL451:
3250:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
 4006              		.loc 1 3250 0
 4007 0680 0021     		movs	r1, #0
 4008 0682 E020     		movs	r0, #224
 4009 0684 FFF7FEFF 		bl	VXISI2CWrite
 4010              	.LVL452:
3251:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
 4011              		.loc 1 3251 0
 4012 0688 0021     		movs	r1, #0
 4013 068a E120     		movs	r0, #225
 4014 068c FFF7FEFF 		bl	VXISI2CWrite
 4015              	.LVL453:
3252:Src/main.c    **** 	VXISI2CWrite(0xE3,0x12);
 4016              		.loc 1 3252 0
 4017 0690 0021     		movs	r1, #0
 4018 0692 E220     		movs	r0, #226
 4019 0694 FFF7FEFF 		bl	VXISI2CWrite
 4020              	.LVL454:
3253:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE2);
 4021              		.loc 1 3253 0
 4022 0698 1221     		movs	r1, #18
 4023 069a E320     		movs	r0, #227
 4024 069c FFF7FEFF 		bl	VXISI2CWrite
 4025              	.LVL455:
3254:Src/main.c    **** 	VXISI2CWrite(0xE5,0xD0);
 4026              		.loc 1 3254 0
ARM GAS  /tmp/cc8epWVM.s 			page 157


 4027 06a0 E221     		movs	r1, #226
 4028 06a2 E420     		movs	r0, #228
 4029 06a4 FFF7FEFF 		bl	VXISI2CWrite
 4030              	.LVL456:
3255:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
 4031              		.loc 1 3255 0
 4032 06a8 D021     		movs	r1, #208
 4033 06aa E520     		movs	r0, #229
 4034 06ac FFF7FEFF 		bl	VXISI2CWrite
 4035              	.LVL457:
3256:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
 4036              		.loc 1 3256 0
 4037 06b0 0021     		movs	r1, #0
 4038 06b2 E620     		movs	r0, #230
 4039 06b4 FFF7FEFF 		bl	VXISI2CWrite
 4040              	.LVL458:
3257:Src/main.c    **** 	VXISI2CWrite(0xE8,0x0F);
 4041              		.loc 1 3257 0
 4042 06b8 0021     		movs	r1, #0
 4043 06ba E720     		movs	r0, #231
 4044 06bc FFF7FEFF 		bl	VXISI2CWrite
 4045              	.LVL459:
3258:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
 4046              		.loc 1 3258 0
 4047 06c0 0F21     		movs	r1, #15
 4048 06c2 E820     		movs	r0, #232
 4049 06c4 FFF7FEFF 		bl	VXISI2CWrite
 4050              	.LVL460:
3259:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
 4051              		.loc 1 3259 0
 4052 06c8 0021     		movs	r1, #0
 4053 06ca E920     		movs	r0, #233
 4054 06cc FFF7FEFF 		bl	VXISI2CWrite
 4055              	.LVL461:
3260:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
 4056              		.loc 1 3260 0
 4057 06d0 0021     		movs	r1, #0
 4058 06d2 EA20     		movs	r0, #234
 4059 06d4 FFF7FEFF 		bl	VXISI2CWrite
 4060              	.LVL462:
3261:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
 4061              		.loc 1 3261 0
 4062 06d8 0021     		movs	r1, #0
 4063 06da EB20     		movs	r0, #235
 4064 06dc FFF7FEFF 		bl	VXISI2CWrite
 4065              	.LVL463:
3262:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
 4066              		.loc 1 3262 0
 4067 06e0 8821     		movs	r1, #136
 4068 06e2 EC20     		movs	r0, #236
 4069 06e4 FFF7FEFF 		bl	VXISI2CWrite
 4070              	.LVL464:
3263:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
 4071              		.loc 1 3263 0
 4072 06e8 0021     		movs	r1, #0
 4073 06ea ED20     		movs	r0, #237
 4074 06ec FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/cc8epWVM.s 			page 158


 4075              	.LVL465:
3264:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
 4076              		.loc 1 3264 0
 4077 06f0 0021     		movs	r1, #0
 4078 06f2 EE20     		movs	r0, #238
 4079 06f4 FFF7FEFF 		bl	VXISI2CWrite
 4080              	.LVL466:
3265:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
 4081              		.loc 1 3265 0
 4082 06f8 0021     		movs	r1, #0
 4083 06fa EF20     		movs	r0, #239
 4084 06fc FFF7FEFF 		bl	VXISI2CWrite
 4085              	.LVL467:
3266:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
 4086              		.loc 1 3266 0
 4087 0700 3021     		movs	r1, #48
 4088 0702 F020     		movs	r0, #240
 4089 0704 FFF7FEFF 		bl	VXISI2CWrite
 4090              	.LVL468:
3267:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
 4091              		.loc 1 3267 0
 4092 0708 4321     		movs	r1, #67
 4093 070a F120     		movs	r0, #241
 4094 070c FFF7FEFF 		bl	VXISI2CWrite
 4095              	.LVL469:
3268:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
 4096              		.loc 1 3268 0
 4097 0710 1F21     		movs	r1, #31
 4098 0712 F220     		movs	r0, #242
 4099 0714 FFF7FEFF 		bl	VXISI2CWrite
 4100              	.LVL470:
3269:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
 4101              		.loc 1 3269 0
 4102 0718 1F21     		movs	r1, #31
 4103 071a F320     		movs	r0, #243
 4104 071c FFF7FEFF 		bl	VXISI2CWrite
 4105              	.LVL471:
3270:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
 4106              		.loc 1 3270 0
 4107 0720 2221     		movs	r1, #34
 4108 0722 F420     		movs	r0, #244
 4109 0724 FFF7FEFF 		bl	VXISI2CWrite
 4110              	.LVL472:
3271:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
 4111              		.loc 1 3271 0
 4112 0728 7321     		movs	r1, #115
 4113 072a F520     		movs	r0, #245
 4114 072c FFF7FEFF 		bl	VXISI2CWrite
 4115              	.LVL473:
3272:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
 4116              		.loc 1 3272 0
 4117 0730 5321     		movs	r1, #83
 4118 0732 F620     		movs	r0, #246
 4119 0734 FFF7FEFF 		bl	VXISI2CWrite
 4120              	.LVL474:
3273:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
 4121              		.loc 1 3273 0
ARM GAS  /tmp/cc8epWVM.s 			page 159


 4122 0738 8021     		movs	r1, #128
 4123 073a F720     		movs	r0, #247
 4124 073c FFF7FEFF 		bl	VXISI2CWrite
 4125              	.LVL475:
3274:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
 4126              		.loc 1 3274 0
 4127 0740 0121     		movs	r1, #1
 4128 0742 F820     		movs	r0, #248
 4129 0744 FFF7FEFF 		bl	VXISI2CWrite
 4130              	.LVL476:
3275:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
 4131              		.loc 1 3275 0
 4132 0748 0121     		movs	r1, #1
 4133 074a F920     		movs	r0, #249
 4134 074c FFF7FEFF 		bl	VXISI2CWrite
 4135              	.LVL477:
3276:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
 4136              		.loc 1 3276 0
 4137 0750 0021     		movs	r1, #0
 4138 0752 FA20     		movs	r0, #250
 4139 0754 FFF7FEFF 		bl	VXISI2CWrite
 4140              	.LVL478:
3277:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
 4141              		.loc 1 3277 0
 4142 0758 0021     		movs	r1, #0
 4143 075a FB20     		movs	r0, #251
 4144 075c FFF7FEFF 		bl	VXISI2CWrite
 4145              	.LVL479:
3278:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
 4146              		.loc 1 3278 0
 4147 0760 0021     		movs	r1, #0
 4148 0762 FC20     		movs	r0, #252
 4149 0764 FFF7FEFF 		bl	VXISI2CWrite
 4150              	.LVL480:
3279:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
 4151              		.loc 1 3279 0
 4152 0768 7021     		movs	r1, #112
 4153 076a FD20     		movs	r0, #253
 4154 076c FFF7FEFF 		bl	VXISI2CWrite
 4155              	.LVL481:
3280:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
 4156              		.loc 1 3280 0
 4157 0770 4021     		movs	r1, #64
 4158 0772 FE20     		movs	r0, #254
 4159 0774 FFF7FEFF 		bl	VXISI2CWrite
 4160              	.LVL482:
3281:Src/main.c    **** 					 
 4161              		.loc 1 3281 0
 4162 0778 0721     		movs	r1, #7
 4163 077a FF20     		movs	r0, #255
 4164 077c FFF7FEFF 		bl	VXISI2CWrite
 4165              	.LVL483:
3285:Src/main.c    **** 
 4166              		.loc 1 3285 0
 4167 0780 08BD     		pop	{r3, pc}
 4168              		.cfi_endproc
 4169              	.LFE92:
ARM GAS  /tmp/cc8epWVM.s 			page 160


 4171 0782 00BF     		.section	.text.SET_VS4210_1280_720_out,"ax",%progbits
 4172              		.align	1
 4173              		.global	SET_VS4210_1280_720_out
 4174              		.syntax unified
 4175              		.thumb
 4176              		.thumb_func
 4177              		.fpu softvfp
 4179              	SET_VS4210_1280_720_out:
 4180              	.LFB93:
3288:Src/main.c    **** 	Printf("\r\nSET_VS4210_1280_720_out");
 4181              		.loc 1 3288 0
 4182              		.cfi_startproc
 4183              		@ args = 0, pretend = 0, frame = 0
 4184              		@ frame_needed = 0, uses_anonymous_args = 0
 4185 0000 08B5     		push	{r3, lr}
 4186              	.LCFI41:
 4187              		.cfi_def_cfa_offset 8
 4188              		.cfi_offset 3, -8
 4189              		.cfi_offset 14, -4
3289:Src/main.c    **** 
 4190              		.loc 1 3289 0
 4191 0002 FE48     		ldr	r0, .L208
 4192 0004 FFF7FEFF 		bl	Printf
 4193              	.LVL484:
3291:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
 4194              		.loc 1 3291 0
 4195 0008 0021     		movs	r1, #0
 4196 000a 0120     		movs	r0, #1
 4197 000c FFF7FEFF 		bl	VXISI2CWrite
 4198              	.LVL485:
3292:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
 4199              		.loc 1 3292 0
 4200 0010 0021     		movs	r1, #0
 4201 0012 0220     		movs	r0, #2
 4202 0014 FFF7FEFF 		bl	VXISI2CWrite
 4203              	.LVL486:
3293:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
 4204              		.loc 1 3293 0
 4205 0018 7521     		movs	r1, #117
 4206 001a 0320     		movs	r0, #3
 4207 001c FFF7FEFF 		bl	VXISI2CWrite
 4208              	.LVL487:
3294:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
 4209              		.loc 1 3294 0
 4210 0020 1821     		movs	r1, #24
 4211 0022 0420     		movs	r0, #4
 4212 0024 FFF7FEFF 		bl	VXISI2CWrite
 4213              	.LVL488:
3295:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
 4214              		.loc 1 3295 0
 4215 0028 8021     		movs	r1, #128
 4216 002a 0520     		movs	r0, #5
 4217 002c FFF7FEFF 		bl	VXISI2CWrite
 4218              	.LVL489:
3296:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);
 4219              		.loc 1 3296 0
 4220 0030 2021     		movs	r1, #32
ARM GAS  /tmp/cc8epWVM.s 			page 161


 4221 0032 0620     		movs	r0, #6
 4222 0034 FFF7FEFF 		bl	VXISI2CWrite
 4223              	.LVL490:
3297:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
 4224              		.loc 1 3297 0
 4225 0038 0821     		movs	r1, #8
 4226 003a 0720     		movs	r0, #7
 4227 003c FFF7FEFF 		bl	VXISI2CWrite
 4228              	.LVL491:
3298:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
 4229              		.loc 1 3298 0
 4230 0040 4021     		movs	r1, #64
 4231 0042 0820     		movs	r0, #8
 4232 0044 FFF7FEFF 		bl	VXISI2CWrite
 4233              	.LVL492:
3299:Src/main.c    **** 	VXISI2CWrite(0x0A,0x41);
 4234              		.loc 1 3299 0
 4235 0048 0A21     		movs	r1, #10
 4236 004a 0920     		movs	r0, #9
 4237 004c FFF7FEFF 		bl	VXISI2CWrite
 4238              	.LVL493:
3300:Src/main.c    **** 	VXISI2CWrite(0x0B,0x07);
 4239              		.loc 1 3300 0
 4240 0050 4121     		movs	r1, #65
 4241 0052 0A20     		movs	r0, #10
 4242 0054 FFF7FEFF 		bl	VXISI2CWrite
 4243              	.LVL494:
3301:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
 4244              		.loc 1 3301 0
 4245 0058 0721     		movs	r1, #7
 4246 005a 0B20     		movs	r0, #11
 4247 005c FFF7FEFF 		bl	VXISI2CWrite
 4248              	.LVL495:
3302:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
 4249              		.loc 1 3302 0
 4250 0060 0021     		movs	r1, #0
 4251 0062 0C20     		movs	r0, #12
 4252 0064 FFF7FEFF 		bl	VXISI2CWrite
 4253              	.LVL496:
3303:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
 4254              		.loc 1 3303 0
 4255 0068 2021     		movs	r1, #32
 4256 006a 0D20     		movs	r0, #13
 4257 006c FFF7FEFF 		bl	VXISI2CWrite
 4258              	.LVL497:
3304:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
 4259              		.loc 1 3304 0
 4260 0070 1021     		movs	r1, #16
 4261 0072 0E20     		movs	r0, #14
 4262 0074 FFF7FEFF 		bl	VXISI2CWrite
 4263              	.LVL498:
3305:Src/main.c    **** 	VXISI2CWrite(0x10,0x80);
 4264              		.loc 1 3305 0
 4265 0078 0021     		movs	r1, #0
 4266 007a 0F20     		movs	r0, #15
 4267 007c FFF7FEFF 		bl	VXISI2CWrite
 4268              	.LVL499:
ARM GAS  /tmp/cc8epWVM.s 			page 162


3306:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
 4269              		.loc 1 3306 0
 4270 0080 8021     		movs	r1, #128
 4271 0082 1020     		movs	r0, #16
 4272 0084 FFF7FEFF 		bl	VXISI2CWrite
 4273              	.LVL500:
3307:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);
 4274              		.loc 1 3307 0
 4275 0088 8221     		movs	r1, #130
 4276 008a 1120     		movs	r0, #17
 4277 008c FFF7FEFF 		bl	VXISI2CWrite
 4278              	.LVL501:
3308:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);
 4279              		.loc 1 3308 0
 4280 0090 2121     		movs	r1, #33
 4281 0092 1220     		movs	r0, #18
 4282 0094 FFF7FEFF 		bl	VXISI2CWrite
 4283              	.LVL502:
3309:Src/main.c    **** 	VXISI2CWrite(0x14,0xE0);
 4284              		.loc 1 3309 0
 4285 0098 D021     		movs	r1, #208
 4286 009a 1320     		movs	r0, #19
 4287 009c FFF7FEFF 		bl	VXISI2CWrite
 4288              	.LVL503:
3310:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
 4289              		.loc 1 3310 0
 4290 00a0 E021     		movs	r1, #224
 4291 00a2 1420     		movs	r0, #20
 4292 00a4 FFF7FEFF 		bl	VXISI2CWrite
 4293              	.LVL504:
3311:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
 4294              		.loc 1 3311 0
 4295 00a8 7821     		movs	r1, #120
 4296 00aa 1520     		movs	r0, #21
 4297 00ac FFF7FEFF 		bl	VXISI2CWrite
 4298              	.LVL505:
3312:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
 4299              		.loc 1 3312 0
 4300 00b0 FE21     		movs	r1, #254
 4301 00b2 1620     		movs	r0, #22
 4302 00b4 FFF7FEFF 		bl	VXISI2CWrite
 4303              	.LVL506:
3313:Src/main.c    **** 	VXISI2CWrite(0x18,0xC8);
 4304              		.loc 1 3313 0
 4305 00b8 0021     		movs	r1, #0
 4306 00ba 1720     		movs	r0, #23
 4307 00bc FFF7FEFF 		bl	VXISI2CWrite
 4308              	.LVL507:
3314:Src/main.c    **** 	VXISI2CWrite(0x19,0x00);
 4309              		.loc 1 3314 0
 4310 00c0 C821     		movs	r1, #200
 4311 00c2 1820     		movs	r0, #24
 4312 00c4 FFF7FEFF 		bl	VXISI2CWrite
 4313              	.LVL508:
3315:Src/main.c    **** 	VXISI2CWrite(0x1A,0x23);
 4314              		.loc 1 3315 0
 4315 00c8 0021     		movs	r1, #0
ARM GAS  /tmp/cc8epWVM.s 			page 163


 4316 00ca 1920     		movs	r0, #25
 4317 00cc FFF7FEFF 		bl	VXISI2CWrite
 4318              	.LVL509:
3316:Src/main.c    **** 	VXISI2CWrite(0x1B,0x00);
 4319              		.loc 1 3316 0
 4320 00d0 2321     		movs	r1, #35
 4321 00d2 1A20     		movs	r0, #26
 4322 00d4 FFF7FEFF 		bl	VXISI2CWrite
 4323              	.LVL510:
3317:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
 4324              		.loc 1 3317 0
 4325 00d8 0021     		movs	r1, #0
 4326 00da 1B20     		movs	r0, #27
 4327 00dc FFF7FEFF 		bl	VXISI2CWrite
 4328              	.LVL511:
3318:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
 4329              		.loc 1 3318 0
 4330 00e0 0021     		movs	r1, #0
 4331 00e2 1C20     		movs	r0, #28
 4332 00e4 FFF7FEFF 		bl	VXISI2CWrite
 4333              	.LVL512:
3319:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
 4334              		.loc 1 3319 0
 4335 00e8 0021     		movs	r1, #0
 4336 00ea 1D20     		movs	r0, #29
 4337 00ec FFF7FEFF 		bl	VXISI2CWrite
 4338              	.LVL513:
3320:Src/main.c    **** 	VXISI2CWrite(0x1F,0x32);
 4339              		.loc 1 3320 0
 4340 00f0 2021     		movs	r1, #32
 4341 00f2 1E20     		movs	r0, #30
 4342 00f4 FFF7FEFF 		bl	VXISI2CWrite
 4343              	.LVL514:
3321:Src/main.c    **** 	VXISI2CWrite(0x20,0x5A);
 4344              		.loc 1 3321 0
 4345 00f8 3221     		movs	r1, #50
 4346 00fa 1F20     		movs	r0, #31
 4347 00fc FFF7FEFF 		bl	VXISI2CWrite
 4348              	.LVL515:
3322:Src/main.c    **** 	VXISI2CWrite(0x21,0x0D);
 4349              		.loc 1 3322 0
 4350 0100 5A21     		movs	r1, #90
 4351 0102 2020     		movs	r0, #32
 4352 0104 FFF7FEFF 		bl	VXISI2CWrite
 4353              	.LVL516:
3323:Src/main.c    **** 	VXISI2CWrite(0x22,0x32);
 4354              		.loc 1 3323 0
 4355 0108 0D21     		movs	r1, #13
 4356 010a 2120     		movs	r0, #33
 4357 010c FFF7FEFF 		bl	VXISI2CWrite
 4358              	.LVL517:
3324:Src/main.c    **** 	VXISI2CWrite(0x23,0x5A);
 4359              		.loc 1 3324 0
 4360 0110 3221     		movs	r1, #50
 4361 0112 2220     		movs	r0, #34
 4362 0114 FFF7FEFF 		bl	VXISI2CWrite
 4363              	.LVL518:
ARM GAS  /tmp/cc8epWVM.s 			page 164


3325:Src/main.c    **** 	VXISI2CWrite(0x24,0xD0);
 4364              		.loc 1 3325 0
 4365 0118 5A21     		movs	r1, #90
 4366 011a 2320     		movs	r0, #35
 4367 011c FFF7FEFF 		bl	VXISI2CWrite
 4368              	.LVL519:
3326:Src/main.c    **** 	VXISI2CWrite(0x25,0x21);
 4369              		.loc 1 3326 0
 4370 0120 D021     		movs	r1, #208
 4371 0122 2420     		movs	r0, #36
 4372 0124 FFF7FEFF 		bl	VXISI2CWrite
 4373              	.LVL520:
3327:Src/main.c    **** 	VXISI2CWrite(0x26,0x0D);
 4374              		.loc 1 3327 0
 4375 0128 2121     		movs	r1, #33
 4376 012a 2520     		movs	r0, #37
 4377 012c FFF7FEFF 		bl	VXISI2CWrite
 4378              	.LVL521:
3328:Src/main.c    **** 	VXISI2CWrite(0x27,0xE0);
 4379              		.loc 1 3328 0
 4380 0130 0D21     		movs	r1, #13
 4381 0132 2620     		movs	r0, #38
 4382 0134 FFF7FEFF 		bl	VXISI2CWrite
 4383              	.LVL522:
3329:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
 4384              		.loc 1 3329 0
 4385 0138 E021     		movs	r1, #224
 4386 013a 2720     		movs	r0, #39
 4387 013c FFF7FEFF 		bl	VXISI2CWrite
 4388              	.LVL523:
3330:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
 4389              		.loc 1 3330 0
 4390 0140 F021     		movs	r1, #240
 4391 0142 2820     		movs	r0, #40
 4392 0144 FFF7FEFF 		bl	VXISI2CWrite
 4393              	.LVL524:
3331:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
 4394              		.loc 1 3331 0
 4395 0148 0021     		movs	r1, #0
 4396 014a 2920     		movs	r0, #41
 4397 014c FFF7FEFF 		bl	VXISI2CWrite
 4398              	.LVL525:
3332:Src/main.c    **** 	VXISI2CWrite(0x2B,0x01);
 4399              		.loc 1 3332 0
 4400 0150 0021     		movs	r1, #0
 4401 0152 2A20     		movs	r0, #42
 4402 0154 FFF7FEFF 		bl	VXISI2CWrite
 4403              	.LVL526:
3333:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);
 4404              		.loc 1 3333 0
 4405 0158 0121     		movs	r1, #1
 4406 015a 2B20     		movs	r0, #43
 4407 015c FFF7FEFF 		bl	VXISI2CWrite
 4408              	.LVL527:
3334:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
 4409              		.loc 1 3334 0
 4410 0160 FF21     		movs	r1, #255
ARM GAS  /tmp/cc8epWVM.s 			page 165


 4411 0162 2C20     		movs	r0, #44
 4412 0164 FFF7FEFF 		bl	VXISI2CWrite
 4413              	.LVL528:
3335:Src/main.c    **** 	VXISI2CWrite(0x2E,0x12);
 4414              		.loc 1 3335 0
 4415 0168 0021     		movs	r1, #0
 4416 016a 2D20     		movs	r0, #45
 4417 016c FFF7FEFF 		bl	VXISI2CWrite
 4418              	.LVL529:
3336:Src/main.c    **** 	VXISI2CWrite(0x2F,0xD0);
 4419              		.loc 1 3336 0
 4420 0170 1221     		movs	r1, #18
 4421 0172 2E20     		movs	r0, #46
 4422 0174 FFF7FEFF 		bl	VXISI2CWrite
 4423              	.LVL530:
3337:Src/main.c    **** 	VXISI2CWrite(0x30,0xE0);
 4424              		.loc 1 3337 0
 4425 0178 D021     		movs	r1, #208
 4426 017a 2F20     		movs	r0, #47
 4427 017c FFF7FEFF 		bl	VXISI2CWrite
 4428              	.LVL531:
3338:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
 4429              		.loc 1 3338 0
 4430 0180 E021     		movs	r1, #224
 4431 0182 3020     		movs	r0, #48
 4432 0184 FFF7FEFF 		bl	VXISI2CWrite
 4433              	.LVL532:
3339:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
 4434              		.loc 1 3339 0
 4435 0188 8021     		movs	r1, #128
 4436 018a 3120     		movs	r0, #49
 4437 018c FFF7FEFF 		bl	VXISI2CWrite
 4438              	.LVL533:
3340:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
 4439              		.loc 1 3340 0
 4440 0190 8021     		movs	r1, #128
 4441 0192 3220     		movs	r0, #50
 4442 0194 FFF7FEFF 		bl	VXISI2CWrite
 4443              	.LVL534:
3341:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
 4444              		.loc 1 3341 0
 4445 0198 8021     		movs	r1, #128
 4446 019a 3320     		movs	r0, #51
 4447 019c FFF7FEFF 		bl	VXISI2CWrite
 4448              	.LVL535:
3342:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
 4449              		.loc 1 3342 0
 4450 01a0 A021     		movs	r1, #160
 4451 01a2 3420     		movs	r0, #52
 4452 01a4 FFF7FEFF 		bl	VXISI2CWrite
 4453              	.LVL536:
3343:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
 4454              		.loc 1 3343 0
 4455 01a8 1821     		movs	r1, #24
 4456 01aa 3520     		movs	r0, #53
 4457 01ac FFF7FEFF 		bl	VXISI2CWrite
 4458              	.LVL537:
ARM GAS  /tmp/cc8epWVM.s 			page 166


3344:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
 4459              		.loc 1 3344 0
 4460 01b0 4621     		movs	r1, #70
 4461 01b2 3620     		movs	r0, #54
 4462 01b4 FFF7FEFF 		bl	VXISI2CWrite
 4463              	.LVL538:
3345:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
 4464              		.loc 1 3345 0
 4465 01b8 6421     		movs	r1, #100
 4466 01ba 3720     		movs	r0, #55
 4467 01bc FFF7FEFF 		bl	VXISI2CWrite
 4468              	.LVL539:
3346:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
 4469              		.loc 1 3346 0
 4470 01c0 0021     		movs	r1, #0
 4471 01c2 3820     		movs	r0, #56
 4472 01c4 FFF7FEFF 		bl	VXISI2CWrite
 4473              	.LVL540:
3347:Src/main.c    **** 	VXISI2CWrite(0x3A,0x03);
 4474              		.loc 1 3347 0
 4475 01c8 FF21     		movs	r1, #255
 4476 01ca 3920     		movs	r0, #57
 4477 01cc FFF7FEFF 		bl	VXISI2CWrite
 4478              	.LVL541:
3348:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
 4479              		.loc 1 3348 0
 4480 01d0 0321     		movs	r1, #3
 4481 01d2 3A20     		movs	r0, #58
 4482 01d4 FFF7FEFF 		bl	VXISI2CWrite
 4483              	.LVL542:
3349:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
 4484              		.loc 1 3349 0
 4485 01d8 8021     		movs	r1, #128
 4486 01da 3B20     		movs	r0, #59
 4487 01dc FFF7FEFF 		bl	VXISI2CWrite
 4488              	.LVL543:
3350:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
 4489              		.loc 1 3350 0
 4490 01e0 8021     		movs	r1, #128
 4491 01e2 3C20     		movs	r0, #60
 4492 01e4 FFF7FEFF 		bl	VXISI2CWrite
 4493              	.LVL544:
3351:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
 4494              		.loc 1 3351 0
 4495 01e8 8021     		movs	r1, #128
 4496 01ea 3D20     		movs	r0, #61
 4497 01ec FFF7FEFF 		bl	VXISI2CWrite
 4498              	.LVL545:
3352:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
 4499              		.loc 1 3352 0
 4500 01f0 8021     		movs	r1, #128
 4501 01f2 3E20     		movs	r0, #62
 4502 01f4 FFF7FEFF 		bl	VXISI2CWrite
 4503              	.LVL546:
3353:Src/main.c    **** 	//VXISI2CWrite(0xVXISI);2CWrite(0x80
 4504              		.loc 1 3353 0
 4505 01f8 8021     		movs	r1, #128
ARM GAS  /tmp/cc8epWVM.s 			page 167


 4506 01fa 3F20     		movs	r0, #63
 4507 01fc FFF7FEFF 		bl	VXISI2CWrite
 4508              	.LVL547:
3355:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
 4509              		.loc 1 3355 0
 4510 0200 6021     		movs	r1, #96
 4511 0202 4120     		movs	r0, #65
 4512 0204 FFF7FEFF 		bl	VXISI2CWrite
 4513              	.LVL548:
3356:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
 4514              		.loc 1 3356 0
 4515 0208 5F21     		movs	r1, #95
 4516 020a 4220     		movs	r0, #66
 4517 020c FFF7FEFF 		bl	VXISI2CWrite
 4518              	.LVL549:
3357:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
 4519              		.loc 1 3357 0
 4520 0210 3721     		movs	r1, #55
 4521 0212 4320     		movs	r0, #67
 4522 0214 FFF7FEFF 		bl	VXISI2CWrite
 4523              	.LVL550:
3358:Src/main.c    **** 	VXISI2CWrite(0x45,0x04);
 4524              		.loc 1 3358 0
 4525 0218 1421     		movs	r1, #20
 4526 021a 4420     		movs	r0, #68
 4527 021c FFF7FEFF 		bl	VXISI2CWrite
 4528              	.LVL551:
3359:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
 4529              		.loc 1 3359 0
 4530 0220 0421     		movs	r1, #4
 4531 0222 4520     		movs	r0, #69
 4532 0224 FFF7FEFF 		bl	VXISI2CWrite
 4533              	.LVL552:
3360:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
 4534              		.loc 1 3360 0
 4535 0228 0021     		movs	r1, #0
 4536 022a 4620     		movs	r0, #70
 4537 022c FFF7FEFF 		bl	VXISI2CWrite
 4538              	.LVL553:
3361:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
 4539              		.loc 1 3361 0
 4540 0230 0021     		movs	r1, #0
 4541 0232 4720     		movs	r0, #71
 4542 0234 FFF7FEFF 		bl	VXISI2CWrite
 4543              	.LVL554:
3362:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
 4544              		.loc 1 3362 0
 4545 0238 0021     		movs	r1, #0
 4546 023a 4820     		movs	r0, #72
 4547 023c FFF7FEFF 		bl	VXISI2CWrite
 4548              	.LVL555:
3363:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
 4549              		.loc 1 3363 0
 4550 0240 0021     		movs	r1, #0
 4551 0242 4920     		movs	r0, #73
 4552 0244 FFF7FEFF 		bl	VXISI2CWrite
 4553              	.LVL556:
ARM GAS  /tmp/cc8epWVM.s 			page 168


3364:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
 4554              		.loc 1 3364 0
 4555 0248 2021     		movs	r1, #32
 4556 024a 4B20     		movs	r0, #75
 4557 024c FFF7FEFF 		bl	VXISI2CWrite
 4558              	.LVL557:
3365:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
 4559              		.loc 1 3365 0
 4560 0250 0021     		movs	r1, #0
 4561 0252 4C20     		movs	r0, #76
 4562 0254 FFF7FEFF 		bl	VXISI2CWrite
 4563              	.LVL558:
3366:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
 4564              		.loc 1 3366 0
 4565 0258 0021     		movs	r1, #0
 4566 025a 4D20     		movs	r0, #77
 4567 025c FFF7FEFF 		bl	VXISI2CWrite
 4568              	.LVL559:
3367:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
 4569              		.loc 1 3367 0
 4570 0260 0021     		movs	r1, #0
 4571 0262 4E20     		movs	r0, #78
 4572 0264 FFF7FEFF 		bl	VXISI2CWrite
 4573              	.LVL560:
3368:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
 4574              		.loc 1 3368 0
 4575 0268 7F21     		movs	r1, #127
 4576 026a 4F20     		movs	r0, #79
 4577 026c FFF7FEFF 		bl	VXISI2CWrite
 4578              	.LVL561:
3369:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
 4579              		.loc 1 3369 0
 4580 0270 2021     		movs	r1, #32
 4581 0272 5020     		movs	r0, #80
 4582 0274 FFF7FEFF 		bl	VXISI2CWrite
 4583              	.LVL562:
3370:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);
 4584              		.loc 1 3370 0
 4585 0278 0021     		movs	r1, #0
 4586 027a 5120     		movs	r0, #81
 4587 027c FFF7FEFF 		bl	VXISI2CWrite
 4588              	.LVL563:
3371:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);
 4589              		.loc 1 3371 0
 4590 0280 0021     		movs	r1, #0
 4591 0282 5220     		movs	r0, #82
 4592 0284 FFF7FEFF 		bl	VXISI2CWrite
 4593              	.LVL564:
3372:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);
 4594              		.loc 1 3372 0
 4595 0288 0421     		movs	r1, #4
 4596 028a 5320     		movs	r0, #83
 4597 028c FFF7FEFF 		bl	VXISI2CWrite
 4598              	.LVL565:
3373:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);
 4599              		.loc 1 3373 0
 4600 0290 0021     		movs	r1, #0
ARM GAS  /tmp/cc8epWVM.s 			page 169


 4601 0292 5420     		movs	r0, #84
 4602 0294 FFF7FEFF 		bl	VXISI2CWrite
 4603              	.LVL566:
3374:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);
 4604              		.loc 1 3374 0
 4605 0298 E021     		movs	r1, #224
 4606 029a 5520     		movs	r0, #85
 4607 029c FFF7FEFF 		bl	VXISI2CWrite
 4608              	.LVL567:
3375:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
 4609              		.loc 1 3375 0
 4610 02a0 4021     		movs	r1, #64
 4611 02a2 5620     		movs	r0, #86
 4612 02a4 FFF7FEFF 		bl	VXISI2CWrite
 4613              	.LVL568:
3376:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
 4614              		.loc 1 3376 0
 4615 02a8 0421     		movs	r1, #4
 4616 02aa 5720     		movs	r0, #87
 4617 02ac FFF7FEFF 		bl	VXISI2CWrite
 4618              	.LVL569:
3377:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
 4619              		.loc 1 3377 0
 4620 02b0 0021     		movs	r1, #0
 4621 02b2 5820     		movs	r0, #88
 4622 02b4 FFF7FEFF 		bl	VXISI2CWrite
 4623              	.LVL570:
3378:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
 4624              		.loc 1 3378 0
 4625 02b8 0821     		movs	r1, #8
 4626 02ba 5920     		movs	r0, #89
 4627 02bc FFF7FEFF 		bl	VXISI2CWrite
 4628              	.LVL571:
3379:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
 4629              		.loc 1 3379 0
 4630 02c0 1021     		movs	r1, #16
 4631 02c2 5A20     		movs	r0, #90
 4632 02c4 FFF7FEFF 		bl	VXISI2CWrite
 4633              	.LVL572:
3380:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
 4634              		.loc 1 3380 0
 4635 02c8 0021     		movs	r1, #0
 4636 02ca 5B20     		movs	r0, #91
 4637 02cc FFF7FEFF 		bl	VXISI2CWrite
 4638              	.LVL573:
3381:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);
 4639              		.loc 1 3381 0
 4640 02d0 6821     		movs	r1, #104
 4641 02d2 5C20     		movs	r0, #92
 4642 02d4 FFF7FEFF 		bl	VXISI2CWrite
 4643              	.LVL574:
3382:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);
 4644              		.loc 1 3382 0
 4645 02d8 4021     		movs	r1, #64
 4646 02da 5D20     		movs	r0, #93
 4647 02dc FFF7FEFF 		bl	VXISI2CWrite
 4648              	.LVL575:
ARM GAS  /tmp/cc8epWVM.s 			page 170


3383:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);
 4649              		.loc 1 3383 0
 4650 02e0 0821     		movs	r1, #8
 4651 02e2 5E20     		movs	r0, #94
 4652 02e4 FFF7FEFF 		bl	VXISI2CWrite
 4653              	.LVL576:
3384:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
 4654              		.loc 1 3384 0
 4655 02e8 0021     		movs	r1, #0
 4656 02ea 5F20     		movs	r0, #95
 4657 02ec FFF7FEFF 		bl	VXISI2CWrite
 4658              	.LVL577:
3385:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);
 4659              		.loc 1 3385 0
 4660 02f0 E021     		movs	r1, #224
 4661 02f2 6020     		movs	r0, #96
 4662 02f4 FFF7FEFF 		bl	VXISI2CWrite
 4663              	.LVL578:
3386:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
 4664              		.loc 1 3386 0
 4665 02f8 5421     		movs	r1, #84
 4666 02fa 6120     		movs	r0, #97
 4667 02fc FFF7FEFF 		bl	VXISI2CWrite
 4668              	.LVL579:
3387:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
 4669              		.loc 1 3387 0
 4670 0300 3321     		movs	r1, #51
 4671 0302 6220     		movs	r0, #98
 4672 0304 FFF7FEFF 		bl	VXISI2CWrite
 4673              	.LVL580:
3388:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
 4674              		.loc 1 3388 0
 4675 0308 0121     		movs	r1, #1
 4676 030a 6320     		movs	r0, #99
 4677 030c FFF7FEFF 		bl	VXISI2CWrite
 4678              	.LVL581:
3389:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
 4679              		.loc 1 3389 0
 4680 0310 FF21     		movs	r1, #255
 4681 0312 6420     		movs	r0, #100
 4682 0314 FFF7FEFF 		bl	VXISI2CWrite
 4683              	.LVL582:
3390:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
 4684              		.loc 1 3390 0
 4685 0318 0121     		movs	r1, #1
 4686 031a 6520     		movs	r0, #101
 4687 031c FFF7FEFF 		bl	VXISI2CWrite
 4688              	.LVL583:
3391:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
 4689              		.loc 1 3391 0
 4690 0320 FF21     		movs	r1, #255
 4691 0322 6620     		movs	r0, #102
 4692 0324 FFF7FEFF 		bl	VXISI2CWrite
 4693              	.LVL584:
3392:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
 4694              		.loc 1 3392 0
 4695 0328 8921     		movs	r1, #137
ARM GAS  /tmp/cc8epWVM.s 			page 171


 4696 032a 6720     		movs	r0, #103
 4697 032c FFF7FEFF 		bl	VXISI2CWrite
 4698              	.LVL585:
3393:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
 4699              		.loc 1 3393 0
 4700 0330 AB21     		movs	r1, #171
 4701 0332 6820     		movs	r0, #104
 4702 0334 FFF7FEFF 		bl	VXISI2CWrite
 4703              	.LVL586:
3394:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
 4704              		.loc 1 3394 0
 4705 0338 8821     		movs	r1, #136
 4706 033a 6920     		movs	r0, #105
 4707 033c FFF7FEFF 		bl	VXISI2CWrite
 4708              	.LVL587:
3395:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
 4709              		.loc 1 3395 0
 4710 0340 6E21     		movs	r1, #110
 4711 0342 6A20     		movs	r0, #106
 4712 0344 FFF7FEFF 		bl	VXISI2CWrite
 4713              	.LVL588:
3396:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
 4714              		.loc 1 3396 0
 4715 0348 6E21     		movs	r1, #110
 4716 034a 6B20     		movs	r0, #107
 4717 034c FFF7FEFF 		bl	VXISI2CWrite
 4718              	.LVL589:
3397:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
 4719              		.loc 1 3397 0
 4720 0350 6E21     		movs	r1, #110
 4721 0352 6C20     		movs	r0, #108
 4722 0354 FFF7FEFF 		bl	VXISI2CWrite
 4723              	.LVL590:
3398:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
 4724              		.loc 1 3398 0
 4725 0358 0021     		movs	r1, #0
 4726 035a 6D20     		movs	r0, #109
 4727 035c FFF7FEFF 		bl	VXISI2CWrite
 4728              	.LVL591:
3399:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
 4729              		.loc 1 3399 0
 4730 0360 0021     		movs	r1, #0
 4731 0362 6E20     		movs	r0, #110
 4732 0364 FFF7FEFF 		bl	VXISI2CWrite
 4733              	.LVL592:
3400:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
 4734              		.loc 1 3400 0
 4735 0368 0021     		movs	r1, #0
 4736 036a 6F20     		movs	r0, #111
 4737 036c FFF7FEFF 		bl	VXISI2CWrite
 4738              	.LVL593:
3401:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
 4739              		.loc 1 3401 0
 4740 0370 0021     		movs	r1, #0
 4741 0372 7020     		movs	r0, #112
 4742 0374 FFF7FEFF 		bl	VXISI2CWrite
 4743              	.LVL594:
ARM GAS  /tmp/cc8epWVM.s 			page 172


3402:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
 4744              		.loc 1 3402 0
 4745 0378 0021     		movs	r1, #0
 4746 037a 7120     		movs	r0, #113
 4747 037c FFF7FEFF 		bl	VXISI2CWrite
 4748              	.LVL595:
3403:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
 4749              		.loc 1 3403 0
 4750 0380 0021     		movs	r1, #0
 4751 0382 7220     		movs	r0, #114
 4752 0384 FFF7FEFF 		bl	VXISI2CWrite
 4753              	.LVL596:
3404:Src/main.c    **** 	VXISI2CWrite(0x74,0x00);
 4754              		.loc 1 3404 0
 4755 0388 0021     		movs	r1, #0
 4756 038a 7320     		movs	r0, #115
 4757 038c FFF7FEFF 		bl	VXISI2CWrite
 4758              	.LVL597:
3405:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
 4759              		.loc 1 3405 0
 4760 0390 0021     		movs	r1, #0
 4761 0392 7420     		movs	r0, #116
 4762 0394 FFF7FEFF 		bl	VXISI2CWrite
 4763              	.LVL598:
3406:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
 4764              		.loc 1 3406 0
 4765 0398 FF21     		movs	r1, #255
 4766 039a 7520     		movs	r0, #117
 4767 039c FFF7FEFF 		bl	VXISI2CWrite
 4768              	.LVL599:
3407:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
 4769              		.loc 1 3407 0
 4770 03a0 FF21     		movs	r1, #255
 4771 03a2 7620     		movs	r0, #118
 4772 03a4 FFF7FEFF 		bl	VXISI2CWrite
 4773              	.LVL600:
3408:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
 4774              		.loc 1 3408 0
 4775 03a8 FF21     		movs	r1, #255
 4776 03aa 7720     		movs	r0, #119
 4777 03ac FFF7FEFF 		bl	VXISI2CWrite
 4778              	.LVL601:
3409:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
 4779              		.loc 1 3409 0
 4780 03b0 FF21     		movs	r1, #255
 4781 03b2 7820     		movs	r0, #120
 4782 03b4 FFF7FEFF 		bl	VXISI2CWrite
 4783              	.LVL602:
3410:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
 4784              		.loc 1 3410 0
 4785 03b8 FF21     		movs	r1, #255
 4786 03ba 7920     		movs	r0, #121
 4787 03bc FFF7FEFF 		bl	VXISI2CWrite
 4788              	.LVL603:
3411:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
 4789              		.loc 1 3411 0
 4790 03c0 FF21     		movs	r1, #255
ARM GAS  /tmp/cc8epWVM.s 			page 173


 4791 03c2 7A20     		movs	r0, #122
 4792 03c4 FFF7FEFF 		bl	VXISI2CWrite
 4793              	.LVL604:
3412:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
 4794              		.loc 1 3412 0
 4795 03c8 FF21     		movs	r1, #255
 4796 03ca 7B20     		movs	r0, #123
 4797 03cc FFF7FEFF 		bl	VXISI2CWrite
 4798              	.LVL605:
3413:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
 4799              		.loc 1 3413 0
 4800 03d0 FF21     		movs	r1, #255
 4801 03d2 7C20     		movs	r0, #124
 4802 03d4 FFF7FEFF 		bl	VXISI2CWrite
 4803              	.LVL606:
3414:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
 4804              		.loc 1 3414 0
 4805 03d8 F021     		movs	r1, #240
 4806 03da 7D20     		movs	r0, #125
 4807 03dc FFF7FEFF 		bl	VXISI2CWrite
 4808              	.LVL607:
3415:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
 4809              		.loc 1 3415 0
 4810 03e0 8021     		movs	r1, #128
 4811 03e2 7E20     		movs	r0, #126
 4812 03e4 FFF7FEFF 		bl	VXISI2CWrite
 4813              	.LVL608:
3416:Src/main.c    **** 	VXISI2CWrite(0x80,0x00);
 4814              		.loc 1 3416 0
 4815 03e8 0021     		movs	r1, #0
 4816 03ea 7F20     		movs	r0, #127
 4817 03ec FFF7FEFF 		bl	VXISI2CWrite
 4818              	.LVL609:
3417:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);
 4819              		.loc 1 3417 0
 4820 03f0 0021     		movs	r1, #0
 4821 03f2 8020     		movs	r0, #128
 4822 03f4 FFF7FEFF 		bl	VXISI2CWrite
 4823              	.LVL610:
 4824 03f8 02E0     		b	.L209
 4825              	.L210:
 4826 03fa 00BF     		.align	2
 4827              	.L208:
 4828 03fc 00000000 		.word	.LC36
 4829              	.L209:
3418:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
 4830              		.loc 1 3418 0
 4831 0400 3421     		movs	r1, #52
 4832 0402 8120     		movs	r0, #129
 4833 0404 FFF7FEFF 		bl	VXISI2CWrite
 4834              	.LVL611:
3419:Src/main.c    **** 	VXISI2CWrite(0x83,0x05);
 4835              		.loc 1 3419 0
 4836 0408 4021     		movs	r1, #64
 4837 040a 8220     		movs	r0, #130
 4838 040c FFF7FEFF 		bl	VXISI2CWrite
 4839              	.LVL612:
ARM GAS  /tmp/cc8epWVM.s 			page 174


3420:Src/main.c    **** 	VXISI2CWrite(0x84,0x59);
 4840              		.loc 1 3420 0
 4841 0410 0521     		movs	r1, #5
 4842 0412 8320     		movs	r0, #131
 4843 0414 FFF7FEFF 		bl	VXISI2CWrite
 4844              	.LVL613:
3421:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
 4845              		.loc 1 3421 0
 4846 0418 5921     		movs	r1, #89
 4847 041a 8420     		movs	r0, #132
 4848 041c FFF7FEFF 		bl	VXISI2CWrite
 4849              	.LVL614:
3422:Src/main.c    **** 	VXISI2CWrite(0x86,0x04);
 4850              		.loc 1 3422 0
 4851 0420 FD21     		movs	r1, #253
 4852 0422 8520     		movs	r0, #133
 4853 0424 FFF7FEFF 		bl	VXISI2CWrite
 4854              	.LVL615:
3423:Src/main.c    **** 	VXISI2CWrite(0x87,0x24);
 4855              		.loc 1 3423 0
 4856 0428 0421     		movs	r1, #4
 4857 042a 8620     		movs	r0, #134
 4858 042c FFF7FEFF 		bl	VXISI2CWrite
 4859              	.LVL616:
3424:Src/main.c    **** 	VXISI2CWrite(0x88,0x94);
 4860              		.loc 1 3424 0
 4861 0430 2421     		movs	r1, #36
 4862 0432 8720     		movs	r0, #135
 4863 0434 FFF7FEFF 		bl	VXISI2CWrite
 4864              	.LVL617:
3425:Src/main.c    **** 	VXISI2CWrite(0x89,0x58);
 4865              		.loc 1 3425 0
 4866 0438 9421     		movs	r1, #148
 4867 043a 8820     		movs	r0, #136
 4868 043c FFF7FEFF 		bl	VXISI2CWrite
 4869              	.LVL618:
3426:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
 4870              		.loc 1 3426 0
 4871 0440 5821     		movs	r1, #88
 4872 0442 8920     		movs	r0, #137
 4873 0444 FFF7FEFF 		bl	VXISI2CWrite
 4874              	.LVL619:
3427:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
 4875              		.loc 1 3427 0
 4876 0448 0021     		movs	r1, #0
 4877 044a 8A20     		movs	r0, #138
 4878 044c FFF7FEFF 		bl	VXISI2CWrite
 4879              	.LVL620:
3428:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
 4880              		.loc 1 3428 0
 4881 0450 7E21     		movs	r1, #126
 4882 0452 8B20     		movs	r0, #139
 4883 0454 FFF7FEFF 		bl	VXISI2CWrite
 4884              	.LVL621:
3429:Src/main.c    **** 	VXISI2CWrite(0x8D,0x2C);
 4885              		.loc 1 3429 0
 4886 0458 0321     		movs	r1, #3
ARM GAS  /tmp/cc8epWVM.s 			page 175


 4887 045a 8C20     		movs	r0, #140
 4888 045c FFF7FEFF 		bl	VXISI2CWrite
 4889              	.LVL622:
3430:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
 4890              		.loc 1 3430 0
 4891 0460 2C21     		movs	r1, #44
 4892 0462 8D20     		movs	r0, #141
 4893 0464 FFF7FEFF 		bl	VXISI2CWrite
 4894              	.LVL623:
3431:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
 4895              		.loc 1 3431 0
 4896 0468 8C21     		movs	r1, #140
 4897 046a 8E20     		movs	r0, #142
 4898 046c FFF7FEFF 		bl	VXISI2CWrite
 4899              	.LVL624:
3432:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
 4900              		.loc 1 3432 0
 4901 0470 0021     		movs	r1, #0
 4902 0472 8F20     		movs	r0, #143
 4903 0474 FFF7FEFF 		bl	VXISI2CWrite
 4904              	.LVL625:
3433:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
 4905              		.loc 1 3433 0
 4906 0478 CC21     		movs	r1, #204
 4907 047a 9020     		movs	r0, #144
 4908 047c FFF7FEFF 		bl	VXISI2CWrite
 4909              	.LVL626:
3434:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
 4910              		.loc 1 3434 0
 4911 0480 4121     		movs	r1, #65
 4912 0482 9120     		movs	r0, #145
 4913 0484 FFF7FEFF 		bl	VXISI2CWrite
 4914              	.LVL627:
3435:Src/main.c    **** 	VXISI2CWrite(0x93,0x31);
 4915              		.loc 1 3435 0
 4916 0488 C421     		movs	r1, #196
 4917 048a 9220     		movs	r0, #146
 4918 048c FFF7FEFF 		bl	VXISI2CWrite
 4919              	.LVL628:
3436:Src/main.c    **** 	VXISI2CWrite(0x94,0x87);
 4920              		.loc 1 3436 0
 4921 0490 3121     		movs	r1, #49
 4922 0492 9320     		movs	r0, #147
 4923 0494 FFF7FEFF 		bl	VXISI2CWrite
 4924              	.LVL629:
3437:Src/main.c    **** 	VXISI2CWrite(0x95,0xD0);
 4925              		.loc 1 3437 0
 4926 0498 8721     		movs	r1, #135
 4927 049a 9420     		movs	r0, #148
 4928 049c FFF7FEFF 		bl	VXISI2CWrite
 4929              	.LVL630:
3438:Src/main.c    **** 	VXISI2CWrite(0x96,0xF3);
 4930              		.loc 1 3438 0
 4931 04a0 D021     		movs	r1, #208
 4932 04a2 9520     		movs	r0, #149
 4933 04a4 FFF7FEFF 		bl	VXISI2CWrite
 4934              	.LVL631:
ARM GAS  /tmp/cc8epWVM.s 			page 176


3439:Src/main.c    **** 	VXISI2CWrite(0x97,0x20);
 4935              		.loc 1 3439 0
 4936 04a8 F321     		movs	r1, #243
 4937 04aa 9620     		movs	r0, #150
 4938 04ac FFF7FEFF 		bl	VXISI2CWrite
 4939              	.LVL632:
3440:Src/main.c    **** 	VXISI2CWrite(0x98,0x11);
 4940              		.loc 1 3440 0
 4941 04b0 2021     		movs	r1, #32
 4942 04b2 9720     		movs	r0, #151
 4943 04b4 FFF7FEFF 		bl	VXISI2CWrite
 4944              	.LVL633:
3441:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
 4945              		.loc 1 3441 0
 4946 04b8 1121     		movs	r1, #17
 4947 04ba 9820     		movs	r0, #152
 4948 04bc FFF7FEFF 		bl	VXISI2CWrite
 4949              	.LVL634:
3442:Src/main.c    **** 	VXISI2CWrite(0x9A,0xFF);
 4950              		.loc 1 3442 0
 4951 04c0 9021     		movs	r1, #144
 4952 04c2 9920     		movs	r0, #153
 4953 04c4 FFF7FEFF 		bl	VXISI2CWrite
 4954              	.LVL635:
3443:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
 4955              		.loc 1 3443 0
 4956 04c8 FF21     		movs	r1, #255
 4957 04ca 9A20     		movs	r0, #154
 4958 04cc FFF7FEFF 		bl	VXISI2CWrite
 4959              	.LVL636:
3444:Src/main.c    **** 	VXISI2CWrite(0x9C,0x0A);
 4960              		.loc 1 3444 0
 4961 04d0 0421     		movs	r1, #4
 4962 04d2 9B20     		movs	r0, #155
 4963 04d4 FFF7FEFF 		bl	VXISI2CWrite
 4964              	.LVL637:
3445:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
 4965              		.loc 1 3445 0
 4966 04d8 0A21     		movs	r1, #10
 4967 04da 9C20     		movs	r0, #156
 4968 04dc FFF7FEFF 		bl	VXISI2CWrite
 4969              	.LVL638:
3446:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
 4970              		.loc 1 3446 0
 4971 04e0 0021     		movs	r1, #0
 4972 04e2 9D20     		movs	r0, #157
 4973 04e4 FFF7FEFF 		bl	VXISI2CWrite
 4974              	.LVL639:
3447:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
 4975              		.loc 1 3447 0
 4976 04e8 0421     		movs	r1, #4
 4977 04ea 9E20     		movs	r0, #158
 4978 04ec FFF7FEFF 		bl	VXISI2CWrite
 4979              	.LVL640:
3448:Src/main.c    **** 	VXISI2CWrite(0xA0,0x2F);
 4980              		.loc 1 3448 0
 4981 04f0 6521     		movs	r1, #101
ARM GAS  /tmp/cc8epWVM.s 			page 177


 4982 04f2 9F20     		movs	r0, #159
 4983 04f4 FFF7FEFF 		bl	VXISI2CWrite
 4984              	.LVL641:
3449:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD9);
 4985              		.loc 1 3449 0
 4986 04f8 2F21     		movs	r1, #47
 4987 04fa A020     		movs	r0, #160
 4988 04fc FFF7FEFF 		bl	VXISI2CWrite
 4989              	.LVL642:
3450:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
 4990              		.loc 1 3450 0
 4991 0500 D921     		movs	r1, #217
 4992 0502 A120     		movs	r0, #161
 4993 0504 FFF7FEFF 		bl	VXISI2CWrite
 4994              	.LVL643:
3451:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
 4995              		.loc 1 3451 0
 4996 0508 9821     		movs	r1, #152
 4997 050a A220     		movs	r0, #162
 4998 050c FFF7FEFF 		bl	VXISI2CWrite
 4999              	.LVL644:
3452:Src/main.c    **** 	VXISI2CWrite(0xA4,0xE1);
 5000              		.loc 1 3452 0
 5001 0510 8721     		movs	r1, #135
 5002 0512 A320     		movs	r0, #163
 5003 0514 FFF7FEFF 		bl	VXISI2CWrite
 5004              	.LVL645:
3453:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);
 5005              		.loc 1 3453 0
 5006 0518 E121     		movs	r1, #225
 5007 051a A420     		movs	r0, #164
 5008 051c FFF7FEFF 		bl	VXISI2CWrite
 5009              	.LVL646:
3454:Src/main.c    **** 	VXISI2CWrite(0xA6,0xC2);
 5010              		.loc 1 3454 0
 5011 0520 3821     		movs	r1, #56
 5012 0522 A520     		movs	r0, #165
 5013 0524 FFF7FEFF 		bl	VXISI2CWrite
 5014              	.LVL647:
3455:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
 5015              		.loc 1 3455 0
 5016 0528 C221     		movs	r1, #194
 5017 052a A620     		movs	r0, #166
 5018 052c FFF7FEFF 		bl	VXISI2CWrite
 5019              	.LVL648:
3456:Src/main.c    **** 	VXISI2CWrite(0xA8,0x00);
 5020              		.loc 1 3456 0
 5021 0530 7021     		movs	r1, #112
 5022 0532 A720     		movs	r0, #167
 5023 0534 FFF7FEFF 		bl	VXISI2CWrite
 5024              	.LVL649:
3457:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
 5025              		.loc 1 3457 0
 5026 0538 0021     		movs	r1, #0
 5027 053a A820     		movs	r0, #168
 5028 053c FFF7FEFF 		bl	VXISI2CWrite
 5029              	.LVL650:
ARM GAS  /tmp/cc8epWVM.s 			page 178


3458:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);
 5030              		.loc 1 3458 0
 5031 0540 1E21     		movs	r1, #30
 5032 0542 A920     		movs	r0, #169
 5033 0544 FFF7FEFF 		bl	VXISI2CWrite
 5034              	.LVL651:
3459:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
 5035              		.loc 1 3459 0
 5036 0548 2E21     		movs	r1, #46
 5037 054a AA20     		movs	r0, #170
 5038 054c FFF7FEFF 		bl	VXISI2CWrite
 5039              	.LVL652:
3460:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);
 5040              		.loc 1 3460 0
 5041 0550 0021     		movs	r1, #0
 5042 0552 AB20     		movs	r0, #171
 5043 0554 FFF7FEFF 		bl	VXISI2CWrite
 5044              	.LVL653:
3461:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF3);
 5045              		.loc 1 3461 0
 5046 0558 8421     		movs	r1, #132
 5047 055a AC20     		movs	r0, #172
 5048 055c FFF7FEFF 		bl	VXISI2CWrite
 5049              	.LVL654:
3462:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
 5050              		.loc 1 3462 0
 5051 0560 F321     		movs	r1, #243
 5052 0562 AD20     		movs	r0, #173
 5053 0564 FFF7FEFF 		bl	VXISI2CWrite
 5054              	.LVL655:
3463:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
 5055              		.loc 1 3463 0
 5056 0568 6521     		movs	r1, #101
 5057 056a AE20     		movs	r0, #174
 5058 056c FFF7FEFF 		bl	VXISI2CWrite
 5059              	.LVL656:
3464:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
 5060              		.loc 1 3464 0
 5061 0570 9921     		movs	r1, #153
 5062 0572 AF20     		movs	r0, #175
 5063 0574 FFF7FEFF 		bl	VXISI2CWrite
 5064              	.LVL657:
3465:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
 5065              		.loc 1 3465 0
 5066 0578 0021     		movs	r1, #0
 5067 057a B020     		movs	r0, #176
 5068 057c FFF7FEFF 		bl	VXISI2CWrite
 5069              	.LVL658:
3466:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
 5070              		.loc 1 3466 0
 5071 0580 0021     		movs	r1, #0
 5072 0582 B120     		movs	r0, #177
 5073 0584 FFF7FEFF 		bl	VXISI2CWrite
 5074              	.LVL659:
3467:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
 5075              		.loc 1 3467 0
 5076 0588 0021     		movs	r1, #0
ARM GAS  /tmp/cc8epWVM.s 			page 179


 5077 058a B220     		movs	r0, #178
 5078 058c FFF7FEFF 		bl	VXISI2CWrite
 5079              	.LVL660:
3468:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
 5080              		.loc 1 3468 0
 5081 0590 0021     		movs	r1, #0
 5082 0592 B320     		movs	r0, #179
 5083 0594 FFF7FEFF 		bl	VXISI2CWrite
 5084              	.LVL661:
3469:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
 5085              		.loc 1 3469 0
 5086 0598 0021     		movs	r1, #0
 5087 059a B420     		movs	r0, #180
 5088 059c FFF7FEFF 		bl	VXISI2CWrite
 5089              	.LVL662:
3470:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
 5090              		.loc 1 3470 0
 5091 05a0 0021     		movs	r1, #0
 5092 05a2 B520     		movs	r0, #181
 5093 05a4 FFF7FEFF 		bl	VXISI2CWrite
 5094              	.LVL663:
3471:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
 5095              		.loc 1 3471 0
 5096 05a8 0021     		movs	r1, #0
 5097 05aa B620     		movs	r0, #182
 5098 05ac FFF7FEFF 		bl	VXISI2CWrite
 5099              	.LVL664:
3472:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
 5100              		.loc 1 3472 0
 5101 05b0 8021     		movs	r1, #128
 5102 05b2 B820     		movs	r0, #184
 5103 05b4 FFF7FEFF 		bl	VXISI2CWrite
 5104              	.LVL665:
3473:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
 5105              		.loc 1 3473 0
 5106 05b8 0021     		movs	r1, #0
 5107 05ba B920     		movs	r0, #185
 5108 05bc FFF7FEFF 		bl	VXISI2CWrite
 5109              	.LVL666:
3474:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
 5110              		.loc 1 3474 0
 5111 05c0 0121     		movs	r1, #1
 5112 05c2 BA20     		movs	r0, #186
 5113 05c4 FFF7FEFF 		bl	VXISI2CWrite
 5114              	.LVL667:
3475:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
 5115              		.loc 1 3475 0
 5116 05c8 0021     		movs	r1, #0
 5117 05ca BB20     		movs	r0, #187
 5118 05cc FFF7FEFF 		bl	VXISI2CWrite
 5119              	.LVL668:
3476:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
 5120              		.loc 1 3476 0
 5121 05d0 9021     		movs	r1, #144
 5122 05d2 BC20     		movs	r0, #188
 5123 05d4 FFF7FEFF 		bl	VXISI2CWrite
 5124              	.LVL669:
ARM GAS  /tmp/cc8epWVM.s 			page 180


3477:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
 5125              		.loc 1 3477 0
 5126 05d8 0121     		movs	r1, #1
 5127 05da BD20     		movs	r0, #189
 5128 05dc FFF7FEFF 		bl	VXISI2CWrite
 5129              	.LVL670:
3478:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
 5130              		.loc 1 3478 0
 5131 05e0 2C21     		movs	r1, #44
 5132 05e2 BE20     		movs	r0, #190
 5133 05e4 FFF7FEFF 		bl	VXISI2CWrite
 5134              	.LVL671:
3479:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
 5135              		.loc 1 3479 0
 5136 05e8 0021     		movs	r1, #0
 5137 05ea C020     		movs	r0, #192
 5138 05ec FFF7FEFF 		bl	VXISI2CWrite
 5139              	.LVL672:
3480:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
 5140              		.loc 1 3480 0
 5141 05f0 2021     		movs	r1, #32
 5142 05f2 C120     		movs	r0, #193
 5143 05f4 FFF7FEFF 		bl	VXISI2CWrite
 5144              	.LVL673:
3481:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
 5145              		.loc 1 3481 0
 5146 05f8 2021     		movs	r1, #32
 5147 05fa C220     		movs	r0, #194
 5148 05fc FFF7FEFF 		bl	VXISI2CWrite
 5149              	.LVL674:
3482:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
 5150              		.loc 1 3482 0
 5151 0600 2021     		movs	r1, #32
 5152 0602 C320     		movs	r0, #195
 5153 0604 FFF7FEFF 		bl	VXISI2CWrite
 5154              	.LVL675:
3483:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
 5155              		.loc 1 3483 0
 5156 0608 2021     		movs	r1, #32
 5157 060a C420     		movs	r0, #196
 5158 060c FFF7FEFF 		bl	VXISI2CWrite
 5159              	.LVL676:
3484:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
 5160              		.loc 1 3484 0
 5161 0610 2021     		movs	r1, #32
 5162 0612 C520     		movs	r0, #197
 5163 0614 FFF7FEFF 		bl	VXISI2CWrite
 5164              	.LVL677:
3485:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
 5165              		.loc 1 3485 0
 5166 0618 FF21     		movs	r1, #255
 5167 061a D020     		movs	r0, #208
 5168 061c FFF7FEFF 		bl	VXISI2CWrite
 5169              	.LVL678:
3486:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
 5170              		.loc 1 3486 0
 5171 0620 3F21     		movs	r1, #63
ARM GAS  /tmp/cc8epWVM.s 			page 181


 5172 0622 D120     		movs	r0, #209
 5173 0624 FFF7FEFF 		bl	VXISI2CWrite
 5174              	.LVL679:
3487:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
 5175              		.loc 1 3487 0
 5176 0628 C221     		movs	r1, #194
 5177 062a D220     		movs	r0, #210
 5178 062c FFF7FEFF 		bl	VXISI2CWrite
 5179              	.LVL680:
3488:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
 5180              		.loc 1 3488 0
 5181 0630 3F21     		movs	r1, #63
 5182 0632 D320     		movs	r0, #211
 5183 0634 FFF7FEFF 		bl	VXISI2CWrite
 5184              	.LVL681:
3489:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
 5185              		.loc 1 3489 0
 5186 0638 0021     		movs	r1, #0
 5187 063a D420     		movs	r0, #212
 5188 063c FFF7FEFF 		bl	VXISI2CWrite
 5189              	.LVL682:
3490:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
 5190              		.loc 1 3490 0
 5191 0640 0021     		movs	r1, #0
 5192 0642 D520     		movs	r0, #213
 5193 0644 FFF7FEFF 		bl	VXISI2CWrite
 5194              	.LVL683:
3491:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
 5195              		.loc 1 3491 0
 5196 0648 0021     		movs	r1, #0
 5197 064a D620     		movs	r0, #214
 5198 064c FFF7FEFF 		bl	VXISI2CWrite
 5199              	.LVL684:
3492:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
 5200              		.loc 1 3492 0
 5201 0650 1021     		movs	r1, #16
 5202 0652 D720     		movs	r0, #215
 5203 0654 FFF7FEFF 		bl	VXISI2CWrite
 5204              	.LVL685:
3493:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
 5205              		.loc 1 3493 0
 5206 0658 0021     		movs	r1, #0
 5207 065a D820     		movs	r0, #216
 5208 065c FFF7FEFF 		bl	VXISI2CWrite
 5209              	.LVL686:
3494:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);
 5210              		.loc 1 3494 0
 5211 0660 7721     		movs	r1, #119
 5212 0662 DC20     		movs	r0, #220
 5213 0664 FFF7FEFF 		bl	VXISI2CWrite
 5214              	.LVL687:
3495:Src/main.c    **** 	VXISI2CWrite(0xDE,0xAF);
 5215              		.loc 1 3495 0
 5216 0668 0021     		movs	r1, #0
 5217 066a DD20     		movs	r0, #221
 5218 066c FFF7FEFF 		bl	VXISI2CWrite
 5219              	.LVL688:
ARM GAS  /tmp/cc8epWVM.s 			page 182


3496:Src/main.c    **** 	VXISI2CWrite(0xDF,0xEF);
 5220              		.loc 1 3496 0
 5221 0670 AF21     		movs	r1, #175
 5222 0672 DE20     		movs	r0, #222
 5223 0674 FFF7FEFF 		bl	VXISI2CWrite
 5224              	.LVL689:
3497:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
 5225              		.loc 1 3497 0
 5226 0678 EF21     		movs	r1, #239
 5227 067a DF20     		movs	r0, #223
 5228 067c FFF7FEFF 		bl	VXISI2CWrite
 5229              	.LVL690:
3498:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
 5230              		.loc 1 3498 0
 5231 0680 0021     		movs	r1, #0
 5232 0682 E020     		movs	r0, #224
 5233 0684 FFF7FEFF 		bl	VXISI2CWrite
 5234              	.LVL691:
3499:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
 5235              		.loc 1 3499 0
 5236 0688 0021     		movs	r1, #0
 5237 068a E120     		movs	r0, #225
 5238 068c FFF7FEFF 		bl	VXISI2CWrite
 5239              	.LVL692:
3500:Src/main.c    **** 	VXISI2CWrite(0xE3,0x12);
 5240              		.loc 1 3500 0
 5241 0690 0021     		movs	r1, #0
 5242 0692 E220     		movs	r0, #226
 5243 0694 FFF7FEFF 		bl	VXISI2CWrite
 5244              	.LVL693:
3501:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE2);
 5245              		.loc 1 3501 0
 5246 0698 1221     		movs	r1, #18
 5247 069a E320     		movs	r0, #227
 5248 069c FFF7FEFF 		bl	VXISI2CWrite
 5249              	.LVL694:
3502:Src/main.c    **** 	VXISI2CWrite(0xE5,0xD0);
 5250              		.loc 1 3502 0
 5251 06a0 E221     		movs	r1, #226
 5252 06a2 E420     		movs	r0, #228
 5253 06a4 FFF7FEFF 		bl	VXISI2CWrite
 5254              	.LVL695:
3503:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
 5255              		.loc 1 3503 0
 5256 06a8 D021     		movs	r1, #208
 5257 06aa E520     		movs	r0, #229
 5258 06ac FFF7FEFF 		bl	VXISI2CWrite
 5259              	.LVL696:
3504:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
 5260              		.loc 1 3504 0
 5261 06b0 0021     		movs	r1, #0
 5262 06b2 E620     		movs	r0, #230
 5263 06b4 FFF7FEFF 		bl	VXISI2CWrite
 5264              	.LVL697:
3505:Src/main.c    **** 	VXISI2CWrite(0xE8,0x0F);
 5265              		.loc 1 3505 0
 5266 06b8 0021     		movs	r1, #0
ARM GAS  /tmp/cc8epWVM.s 			page 183


 5267 06ba E720     		movs	r0, #231
 5268 06bc FFF7FEFF 		bl	VXISI2CWrite
 5269              	.LVL698:
3506:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
 5270              		.loc 1 3506 0
 5271 06c0 0F21     		movs	r1, #15
 5272 06c2 E820     		movs	r0, #232
 5273 06c4 FFF7FEFF 		bl	VXISI2CWrite
 5274              	.LVL699:
3507:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
 5275              		.loc 1 3507 0
 5276 06c8 0021     		movs	r1, #0
 5277 06ca E920     		movs	r0, #233
 5278 06cc FFF7FEFF 		bl	VXISI2CWrite
 5279              	.LVL700:
3508:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
 5280              		.loc 1 3508 0
 5281 06d0 0021     		movs	r1, #0
 5282 06d2 EA20     		movs	r0, #234
 5283 06d4 FFF7FEFF 		bl	VXISI2CWrite
 5284              	.LVL701:
3509:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
 5285              		.loc 1 3509 0
 5286 06d8 0021     		movs	r1, #0
 5287 06da EB20     		movs	r0, #235
 5288 06dc FFF7FEFF 		bl	VXISI2CWrite
 5289              	.LVL702:
3510:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
 5290              		.loc 1 3510 0
 5291 06e0 8821     		movs	r1, #136
 5292 06e2 EC20     		movs	r0, #236
 5293 06e4 FFF7FEFF 		bl	VXISI2CWrite
 5294              	.LVL703:
3511:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
 5295              		.loc 1 3511 0
 5296 06e8 0021     		movs	r1, #0
 5297 06ea ED20     		movs	r0, #237
 5298 06ec FFF7FEFF 		bl	VXISI2CWrite
 5299              	.LVL704:
3512:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
 5300              		.loc 1 3512 0
 5301 06f0 0021     		movs	r1, #0
 5302 06f2 EE20     		movs	r0, #238
 5303 06f4 FFF7FEFF 		bl	VXISI2CWrite
 5304              	.LVL705:
3513:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
 5305              		.loc 1 3513 0
 5306 06f8 0021     		movs	r1, #0
 5307 06fa EF20     		movs	r0, #239
 5308 06fc FFF7FEFF 		bl	VXISI2CWrite
 5309              	.LVL706:
3514:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
 5310              		.loc 1 3514 0
 5311 0700 3021     		movs	r1, #48
 5312 0702 F020     		movs	r0, #240
 5313 0704 FFF7FEFF 		bl	VXISI2CWrite
 5314              	.LVL707:
ARM GAS  /tmp/cc8epWVM.s 			page 184


3515:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
 5315              		.loc 1 3515 0
 5316 0708 4321     		movs	r1, #67
 5317 070a F120     		movs	r0, #241
 5318 070c FFF7FEFF 		bl	VXISI2CWrite
 5319              	.LVL708:
3516:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
 5320              		.loc 1 3516 0
 5321 0710 1F21     		movs	r1, #31
 5322 0712 F220     		movs	r0, #242
 5323 0714 FFF7FEFF 		bl	VXISI2CWrite
 5324              	.LVL709:
3517:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
 5325              		.loc 1 3517 0
 5326 0718 1F21     		movs	r1, #31
 5327 071a F320     		movs	r0, #243
 5328 071c FFF7FEFF 		bl	VXISI2CWrite
 5329              	.LVL710:
3518:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
 5330              		.loc 1 3518 0
 5331 0720 2221     		movs	r1, #34
 5332 0722 F420     		movs	r0, #244
 5333 0724 FFF7FEFF 		bl	VXISI2CWrite
 5334              	.LVL711:
3519:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
 5335              		.loc 1 3519 0
 5336 0728 7321     		movs	r1, #115
 5337 072a F520     		movs	r0, #245
 5338 072c FFF7FEFF 		bl	VXISI2CWrite
 5339              	.LVL712:
3520:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
 5340              		.loc 1 3520 0
 5341 0730 5321     		movs	r1, #83
 5342 0732 F620     		movs	r0, #246
 5343 0734 FFF7FEFF 		bl	VXISI2CWrite
 5344              	.LVL713:
3521:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
 5345              		.loc 1 3521 0
 5346 0738 8021     		movs	r1, #128
 5347 073a F720     		movs	r0, #247
 5348 073c FFF7FEFF 		bl	VXISI2CWrite
 5349              	.LVL714:
3522:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
 5350              		.loc 1 3522 0
 5351 0740 0121     		movs	r1, #1
 5352 0742 F820     		movs	r0, #248
 5353 0744 FFF7FEFF 		bl	VXISI2CWrite
 5354              	.LVL715:
3523:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
 5355              		.loc 1 3523 0
 5356 0748 0121     		movs	r1, #1
 5357 074a F920     		movs	r0, #249
 5358 074c FFF7FEFF 		bl	VXISI2CWrite
 5359              	.LVL716:
3524:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
 5360              		.loc 1 3524 0
 5361 0750 0021     		movs	r1, #0
ARM GAS  /tmp/cc8epWVM.s 			page 185


 5362 0752 FA20     		movs	r0, #250
 5363 0754 FFF7FEFF 		bl	VXISI2CWrite
 5364              	.LVL717:
3525:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
 5365              		.loc 1 3525 0
 5366 0758 0021     		movs	r1, #0
 5367 075a FB20     		movs	r0, #251
 5368 075c FFF7FEFF 		bl	VXISI2CWrite
 5369              	.LVL718:
3526:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
 5370              		.loc 1 3526 0
 5371 0760 0021     		movs	r1, #0
 5372 0762 FC20     		movs	r0, #252
 5373 0764 FFF7FEFF 		bl	VXISI2CWrite
 5374              	.LVL719:
3527:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
 5375              		.loc 1 3527 0
 5376 0768 7021     		movs	r1, #112
 5377 076a FD20     		movs	r0, #253
 5378 076c FFF7FEFF 		bl	VXISI2CWrite
 5379              	.LVL720:
3528:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
 5380              		.loc 1 3528 0
 5381 0770 4021     		movs	r1, #64
 5382 0772 FE20     		movs	r0, #254
 5383 0774 FFF7FEFF 		bl	VXISI2CWrite
 5384              	.LVL721:
3529:Src/main.c    **** 			 
 5385              		.loc 1 3529 0
 5386 0778 0721     		movs	r1, #7
 5387 077a FF20     		movs	r0, #255
 5388 077c FFF7FEFF 		bl	VXISI2CWrite
 5389              	.LVL722:
3531:Src/main.c    **** 
 5390              		.loc 1 3531 0
 5391 0780 08BD     		pop	{r3, pc}
 5392              		.cfi_endproc
 5393              	.LFE93:
 5395 0782 00BF     		.section	.text.SET_AHD_MDOE,"ax",%progbits
 5396              		.align	1
 5397              		.global	SET_AHD_MDOE
 5398              		.syntax unified
 5399              		.thumb
 5400              		.thumb_func
 5401              		.fpu softvfp
 5403              	SET_AHD_MDOE:
 5404              	.LFB94:
3534:Src/main.c    **** 	Printf("\r\nSET_AHD_MDOE...");
 5405              		.loc 1 3534 0
 5406              		.cfi_startproc
 5407              		@ args = 0, pretend = 0, frame = 0
 5408              		@ frame_needed = 0, uses_anonymous_args = 0
 5409 0000 08B5     		push	{r3, lr}
 5410              	.LCFI42:
 5411              		.cfi_def_cfa_offset 8
 5412              		.cfi_offset 3, -8
 5413              		.cfi_offset 14, -4
ARM GAS  /tmp/cc8epWVM.s 			page 186


3535:Src/main.c    **** 
 5414              		.loc 1 3535 0
 5415 0002 FE48     		ldr	r0, .L213
 5416 0004 FFF7FEFF 		bl	Printf
 5417              	.LVL723:
3537:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);
 5418              		.loc 1 3537 0
 5419 0008 4221     		movs	r1, #66
 5420 000a 0020     		movs	r0, #0
 5421 000c FFF7FEFF 		bl	VXISI2CWrite
 5422              	.LVL724:
3538:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
 5423              		.loc 1 3538 0
 5424 0010 0021     		movs	r1, #0
 5425 0012 0120     		movs	r0, #1
 5426 0014 FFF7FEFF 		bl	VXISI2CWrite
 5427              	.LVL725:
3539:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
 5428              		.loc 1 3539 0
 5429 0018 0021     		movs	r1, #0
 5430 001a 0220     		movs	r0, #2
 5431 001c FFF7FEFF 		bl	VXISI2CWrite
 5432              	.LVL726:
3540:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
 5433              		.loc 1 3540 0
 5434 0020 7521     		movs	r1, #117
 5435 0022 0320     		movs	r0, #3
 5436 0024 FFF7FEFF 		bl	VXISI2CWrite
 5437              	.LVL727:
3541:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
 5438              		.loc 1 3541 0
 5439 0028 1821     		movs	r1, #24
 5440 002a 0420     		movs	r0, #4
 5441 002c FFF7FEFF 		bl	VXISI2CWrite
 5442              	.LVL728:
3542:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
 5443              		.loc 1 3542 0
 5444 0030 8021     		movs	r1, #128
 5445 0032 0520     		movs	r0, #5
 5446 0034 FFF7FEFF 		bl	VXISI2CWrite
 5447              	.LVL729:
3543:Src/main.c    **** 	VXISI2CWrite(0x07,0x0C);
 5448              		.loc 1 3543 0
 5449 0038 2021     		movs	r1, #32
 5450 003a 0620     		movs	r0, #6
 5451 003c FFF7FEFF 		bl	VXISI2CWrite
 5452              	.LVL730:
3544:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
 5453              		.loc 1 3544 0
 5454 0040 0C21     		movs	r1, #12
 5455 0042 0720     		movs	r0, #7
 5456 0044 FFF7FEFF 		bl	VXISI2CWrite
 5457              	.LVL731:
3545:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
 5458              		.loc 1 3545 0
 5459 0048 4021     		movs	r1, #64
 5460 004a 0820     		movs	r0, #8
ARM GAS  /tmp/cc8epWVM.s 			page 187


 5461 004c FFF7FEFF 		bl	VXISI2CWrite
 5462              	.LVL732:
3546:Src/main.c    **** 	VXISI2CWrite(0x0A,0x40);
 5463              		.loc 1 3546 0
 5464 0050 0A21     		movs	r1, #10
 5465 0052 0920     		movs	r0, #9
 5466 0054 FFF7FEFF 		bl	VXISI2CWrite
 5467              	.LVL733:
3547:Src/main.c    **** 	VXISI2CWrite(0x0B,0x0A);
 5468              		.loc 1 3547 0
 5469 0058 4021     		movs	r1, #64
 5470 005a 0A20     		movs	r0, #10
 5471 005c FFF7FEFF 		bl	VXISI2CWrite
 5472              	.LVL734:
3548:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
 5473              		.loc 1 3548 0
 5474 0060 0A21     		movs	r1, #10
 5475 0062 0B20     		movs	r0, #11
 5476 0064 FFF7FEFF 		bl	VXISI2CWrite
 5477              	.LVL735:
3549:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
 5478              		.loc 1 3549 0
 5479 0068 0021     		movs	r1, #0
 5480 006a 0C20     		movs	r0, #12
 5481 006c FFF7FEFF 		bl	VXISI2CWrite
 5482              	.LVL736:
3550:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
 5483              		.loc 1 3550 0
 5484 0070 2021     		movs	r1, #32
 5485 0072 0D20     		movs	r0, #13
 5486 0074 FFF7FEFF 		bl	VXISI2CWrite
 5487              	.LVL737:
3551:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
 5488              		.loc 1 3551 0
 5489 0078 1021     		movs	r1, #16
 5490 007a 0E20     		movs	r0, #14
 5491 007c FFF7FEFF 		bl	VXISI2CWrite
 5492              	.LVL738:
3552:Src/main.c    **** 	VXISI2CWrite(0x10,0x81);
 5493              		.loc 1 3552 0
 5494 0080 0021     		movs	r1, #0
 5495 0082 0F20     		movs	r0, #15
 5496 0084 FFF7FEFF 		bl	VXISI2CWrite
 5497              	.LVL739:
3553:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
 5498              		.loc 1 3553 0
 5499 0088 8121     		movs	r1, #129
 5500 008a 1020     		movs	r0, #16
 5501 008c FFF7FEFF 		bl	VXISI2CWrite
 5502              	.LVL740:
3554:Src/main.c    **** 	VXISI2CWrite(0x12,0x74);
 5503              		.loc 1 3554 0
 5504 0090 8221     		movs	r1, #130
 5505 0092 1120     		movs	r0, #17
 5506 0094 FFF7FEFF 		bl	VXISI2CWrite
 5507              	.LVL741:
3555:Src/main.c    **** 	VXISI2CWrite(0x13,0x80);
ARM GAS  /tmp/cc8epWVM.s 			page 188


 5508              		.loc 1 3555 0
 5509 0098 7421     		movs	r1, #116
 5510 009a 1220     		movs	r0, #18
 5511 009c FFF7FEFF 		bl	VXISI2CWrite
 5512              	.LVL742:
3556:Src/main.c    **** 	VXISI2CWrite(0x14,0x38);
 5513              		.loc 1 3556 0
 5514 00a0 8021     		movs	r1, #128
 5515 00a2 1320     		movs	r0, #19
 5516 00a4 FFF7FEFF 		bl	VXISI2CWrite
 5517              	.LVL743:
3557:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
 5518              		.loc 1 3557 0
 5519 00a8 3821     		movs	r1, #56
 5520 00aa 1420     		movs	r0, #20
 5521 00ac FFF7FEFF 		bl	VXISI2CWrite
 5522              	.LVL744:
3558:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
 5523              		.loc 1 3558 0
 5524 00b0 7821     		movs	r1, #120
 5525 00b2 1520     		movs	r0, #21
 5526 00b4 FFF7FEFF 		bl	VXISI2CWrite
 5527              	.LVL745:
3559:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
 5528              		.loc 1 3559 0
 5529 00b8 FE21     		movs	r1, #254
 5530 00ba 1620     		movs	r0, #22
 5531 00bc FFF7FEFF 		bl	VXISI2CWrite
 5532              	.LVL746:
3560:Src/main.c    **** 	VXISI2CWrite(0x18,0xC0);
 5533              		.loc 1 3560 0
 5534 00c0 0021     		movs	r1, #0
 5535 00c2 1720     		movs	r0, #23
 5536 00c4 FFF7FEFF 		bl	VXISI2CWrite
 5537              	.LVL747:
3561:Src/main.c    **** 	VXISI2CWrite(0x19,0x01);
 5538              		.loc 1 3561 0
 5539 00c8 C021     		movs	r1, #192
 5540 00ca 1820     		movs	r0, #24
 5541 00cc FFF7FEFF 		bl	VXISI2CWrite
 5542              	.LVL748:
3562:Src/main.c    **** 	VXISI2CWrite(0x1A,0x20);
 5543              		.loc 1 3562 0
 5544 00d0 0121     		movs	r1, #1
 5545 00d2 1920     		movs	r0, #25
 5546 00d4 FFF7FEFF 		bl	VXISI2CWrite
 5547              	.LVL749:
3563:Src/main.c    **** 	VXISI2CWrite(0x1B,0x30);
 5548              		.loc 1 3563 0
 5549 00d8 2021     		movs	r1, #32
 5550 00da 1A20     		movs	r0, #26
 5551 00dc FFF7FEFF 		bl	VXISI2CWrite
 5552              	.LVL750:
3564:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
 5553              		.loc 1 3564 0
 5554 00e0 3021     		movs	r1, #48
 5555 00e2 1B20     		movs	r0, #27
ARM GAS  /tmp/cc8epWVM.s 			page 189


 5556 00e4 FFF7FEFF 		bl	VXISI2CWrite
 5557              	.LVL751:
3565:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
 5558              		.loc 1 3565 0
 5559 00e8 0021     		movs	r1, #0
 5560 00ea 1C20     		movs	r0, #28
 5561 00ec FFF7FEFF 		bl	VXISI2CWrite
 5562              	.LVL752:
3566:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
 5563              		.loc 1 3566 0
 5564 00f0 0021     		movs	r1, #0
 5565 00f2 1D20     		movs	r0, #29
 5566 00f4 FFF7FEFF 		bl	VXISI2CWrite
 5567              	.LVL753:
3567:Src/main.c    **** 	VXISI2CWrite(0x1F,0xA4);
 5568              		.loc 1 3567 0
 5569 00f8 2021     		movs	r1, #32
 5570 00fa 1E20     		movs	r0, #30
 5571 00fc FFF7FEFF 		bl	VXISI2CWrite
 5572              	.LVL754:
3568:Src/main.c    **** 	VXISI2CWrite(0x20,0x50);
 5573              		.loc 1 3568 0
 5574 0100 A421     		movs	r1, #164
 5575 0102 1F20     		movs	r0, #31
 5576 0104 FFF7FEFF 		bl	VXISI2CWrite
 5577              	.LVL755:
3569:Src/main.c    **** 	VXISI2CWrite(0x21,0xE2);
 5578              		.loc 1 3569 0
 5579 0108 5021     		movs	r1, #80
 5580 010a 2020     		movs	r0, #32
 5581 010c FFF7FEFF 		bl	VXISI2CWrite
 5582              	.LVL756:
3570:Src/main.c    **** 	VXISI2CWrite(0x22,0x87);
 5583              		.loc 1 3570 0
 5584 0110 E221     		movs	r1, #226
 5585 0112 2120     		movs	r0, #33
 5586 0114 FFF7FEFF 		bl	VXISI2CWrite
 5587              	.LVL757:
3571:Src/main.c    **** 	VXISI2CWrite(0x23,0x98);
 5588              		.loc 1 3571 0
 5589 0118 8721     		movs	r1, #135
 5590 011a 2220     		movs	r0, #34
 5591 011c FFF7FEFF 		bl	VXISI2CWrite
 5592              	.LVL758:
3572:Src/main.c    **** 	VXISI2CWrite(0x24,0x80);
 5593              		.loc 1 3572 0
 5594 0120 9821     		movs	r1, #152
 5595 0122 2320     		movs	r0, #35
 5596 0124 FFF7FEFF 		bl	VXISI2CWrite
 5597              	.LVL759:
3573:Src/main.c    **** 	VXISI2CWrite(0x25,0x44);
 5598              		.loc 1 3573 0
 5599 0128 8021     		movs	r1, #128
 5600 012a 2420     		movs	r0, #36
 5601 012c FFF7FEFF 		bl	VXISI2CWrite
 5602              	.LVL760:
3574:Src/main.c    **** 	VXISI2CWrite(0x26,0x65);
ARM GAS  /tmp/cc8epWVM.s 			page 190


 5603              		.loc 1 3574 0
 5604 0130 4421     		movs	r1, #68
 5605 0132 2520     		movs	r0, #37
 5606 0134 FFF7FEFF 		bl	VXISI2CWrite
 5607              	.LVL761:
3575:Src/main.c    **** 	VXISI2CWrite(0x27,0x38);
 5608              		.loc 1 3575 0
 5609 0138 6521     		movs	r1, #101
 5610 013a 2620     		movs	r0, #38
 5611 013c FFF7FEFF 		bl	VXISI2CWrite
 5612              	.LVL762:
3576:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
 5613              		.loc 1 3576 0
 5614 0140 3821     		movs	r1, #56
 5615 0142 2720     		movs	r0, #39
 5616 0144 FFF7FEFF 		bl	VXISI2CWrite
 5617              	.LVL763:
3577:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
 5618              		.loc 1 3577 0
 5619 0148 F021     		movs	r1, #240
 5620 014a 2820     		movs	r0, #40
 5621 014c FFF7FEFF 		bl	VXISI2CWrite
 5622              	.LVL764:
3578:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
 5623              		.loc 1 3578 0
 5624 0150 0021     		movs	r1, #0
 5625 0152 2920     		movs	r0, #41
 5626 0154 FFF7FEFF 		bl	VXISI2CWrite
 5627              	.LVL765:
3579:Src/main.c    **** 	VXISI2CWrite(0x2B,0x11);
 5628              		.loc 1 3579 0
 5629 0158 0021     		movs	r1, #0
 5630 015a 2A20     		movs	r0, #42
 5631 015c FFF7FEFF 		bl	VXISI2CWrite
 5632              	.LVL766:
3580:Src/main.c    **** 	VXISI2CWrite(0x2C,0x00);
 5633              		.loc 1 3580 0
 5634 0160 1121     		movs	r1, #17
 5635 0162 2B20     		movs	r0, #43
 5636 0164 FFF7FEFF 		bl	VXISI2CWrite
 5637              	.LVL767:
3581:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
 5638              		.loc 1 3581 0
 5639 0168 0021     		movs	r1, #0
 5640 016a 2C20     		movs	r0, #44
 5641 016c FFF7FEFF 		bl	VXISI2CWrite
 5642              	.LVL768:
3582:Src/main.c    **** 	VXISI2CWrite(0x2E,0x47);
 5643              		.loc 1 3582 0
 5644 0170 0021     		movs	r1, #0
 5645 0172 2D20     		movs	r0, #45
 5646 0174 FFF7FEFF 		bl	VXISI2CWrite
 5647              	.LVL769:
3583:Src/main.c    **** 	VXISI2CWrite(0x2F,0x80);
 5648              		.loc 1 3583 0
 5649 0178 4721     		movs	r1, #71
 5650 017a 2E20     		movs	r0, #46
ARM GAS  /tmp/cc8epWVM.s 			page 191


 5651 017c FFF7FEFF 		bl	VXISI2CWrite
 5652              	.LVL770:
3584:Src/main.c    **** 	VXISI2CWrite(0x30,0x38);
 5653              		.loc 1 3584 0
 5654 0180 8021     		movs	r1, #128
 5655 0182 2F20     		movs	r0, #47
 5656 0184 FFF7FEFF 		bl	VXISI2CWrite
 5657              	.LVL771:
3585:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
 5658              		.loc 1 3585 0
 5659 0188 3821     		movs	r1, #56
 5660 018a 3020     		movs	r0, #48
 5661 018c FFF7FEFF 		bl	VXISI2CWrite
 5662              	.LVL772:
3586:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
 5663              		.loc 1 3586 0
 5664 0190 8021     		movs	r1, #128
 5665 0192 3120     		movs	r0, #49
 5666 0194 FFF7FEFF 		bl	VXISI2CWrite
 5667              	.LVL773:
3587:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
 5668              		.loc 1 3587 0
 5669 0198 8021     		movs	r1, #128
 5670 019a 3220     		movs	r0, #50
 5671 019c FFF7FEFF 		bl	VXISI2CWrite
 5672              	.LVL774:
3588:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
 5673              		.loc 1 3588 0
 5674 01a0 8021     		movs	r1, #128
 5675 01a2 3320     		movs	r0, #51
 5676 01a4 FFF7FEFF 		bl	VXISI2CWrite
 5677              	.LVL775:
3589:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
 5678              		.loc 1 3589 0
 5679 01a8 A021     		movs	r1, #160
 5680 01aa 3420     		movs	r0, #52
 5681 01ac FFF7FEFF 		bl	VXISI2CWrite
 5682              	.LVL776:
3590:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
 5683              		.loc 1 3590 0
 5684 01b0 1821     		movs	r1, #24
 5685 01b2 3520     		movs	r0, #53
 5686 01b4 FFF7FEFF 		bl	VXISI2CWrite
 5687              	.LVL777:
3591:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
 5688              		.loc 1 3591 0
 5689 01b8 4621     		movs	r1, #70
 5690 01ba 3620     		movs	r0, #54
 5691 01bc FFF7FEFF 		bl	VXISI2CWrite
 5692              	.LVL778:
3592:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
 5693              		.loc 1 3592 0
 5694 01c0 6421     		movs	r1, #100
 5695 01c2 3720     		movs	r0, #55
 5696 01c4 FFF7FEFF 		bl	VXISI2CWrite
 5697              	.LVL779:
3593:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
ARM GAS  /tmp/cc8epWVM.s 			page 192


 5698              		.loc 1 3593 0
 5699 01c8 0021     		movs	r1, #0
 5700 01ca 3820     		movs	r0, #56
 5701 01cc FFF7FEFF 		bl	VXISI2CWrite
 5702              	.LVL780:
3594:Src/main.c    **** 	VXISI2CWrite(0x3A,0x73);
 5703              		.loc 1 3594 0
 5704 01d0 FF21     		movs	r1, #255
 5705 01d2 3920     		movs	r0, #57
 5706 01d4 FFF7FEFF 		bl	VXISI2CWrite
 5707              	.LVL781:
3595:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
 5708              		.loc 1 3595 0
 5709 01d8 7321     		movs	r1, #115
 5710 01da 3A20     		movs	r0, #58
 5711 01dc FFF7FEFF 		bl	VXISI2CWrite
 5712              	.LVL782:
3596:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
 5713              		.loc 1 3596 0
 5714 01e0 8021     		movs	r1, #128
 5715 01e2 3B20     		movs	r0, #59
 5716 01e4 FFF7FEFF 		bl	VXISI2CWrite
 5717              	.LVL783:
3597:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
 5718              		.loc 1 3597 0
 5719 01e8 8021     		movs	r1, #128
 5720 01ea 3C20     		movs	r0, #60
 5721 01ec FFF7FEFF 		bl	VXISI2CWrite
 5722              	.LVL784:
3598:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
 5723              		.loc 1 3598 0
 5724 01f0 8021     		movs	r1, #128
 5725 01f2 3D20     		movs	r0, #61
 5726 01f4 FFF7FEFF 		bl	VXISI2CWrite
 5727              	.LVL785:
3599:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
 5728              		.loc 1 3599 0
 5729 01f8 8021     		movs	r1, #128
 5730 01fa 3E20     		movs	r0, #62
 5731 01fc FFF7FEFF 		bl	VXISI2CWrite
 5732              	.LVL786:
3600:Src/main.c    **** 	VXISI2CWrite(0x40,0x80);
 5733              		.loc 1 3600 0
 5734 0200 8021     		movs	r1, #128
 5735 0202 3F20     		movs	r0, #63
 5736 0204 FFF7FEFF 		bl	VXISI2CWrite
 5737              	.LVL787:
3601:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);
 5738              		.loc 1 3601 0
 5739 0208 8021     		movs	r1, #128
 5740 020a 4020     		movs	r0, #64
 5741 020c FFF7FEFF 		bl	VXISI2CWrite
 5742              	.LVL788:
3602:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
 5743              		.loc 1 3602 0
 5744 0210 6021     		movs	r1, #96
 5745 0212 4120     		movs	r0, #65
ARM GAS  /tmp/cc8epWVM.s 			page 193


 5746 0214 FFF7FEFF 		bl	VXISI2CWrite
 5747              	.LVL789:
3603:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
 5748              		.loc 1 3603 0
 5749 0218 5F21     		movs	r1, #95
 5750 021a 4220     		movs	r0, #66
 5751 021c FFF7FEFF 		bl	VXISI2CWrite
 5752              	.LVL790:
3604:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
 5753              		.loc 1 3604 0
 5754 0220 3721     		movs	r1, #55
 5755 0222 4320     		movs	r0, #67
 5756 0224 FFF7FEFF 		bl	VXISI2CWrite
 5757              	.LVL791:
3605:Src/main.c    **** 	VXISI2CWrite(0x45,0x00);
 5758              		.loc 1 3605 0
 5759 0228 1421     		movs	r1, #20
 5760 022a 4420     		movs	r0, #68
 5761 022c FFF7FEFF 		bl	VXISI2CWrite
 5762              	.LVL792:
3606:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
 5763              		.loc 1 3606 0
 5764 0230 0021     		movs	r1, #0
 5765 0232 4520     		movs	r0, #69
 5766 0234 FFF7FEFF 		bl	VXISI2CWrite
 5767              	.LVL793:
3607:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
 5768              		.loc 1 3607 0
 5769 0238 0021     		movs	r1, #0
 5770 023a 4620     		movs	r0, #70
 5771 023c FFF7FEFF 		bl	VXISI2CWrite
 5772              	.LVL794:
3608:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
 5773              		.loc 1 3608 0
 5774 0240 0021     		movs	r1, #0
 5775 0242 4720     		movs	r0, #71
 5776 0244 FFF7FEFF 		bl	VXISI2CWrite
 5777              	.LVL795:
3609:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
 5778              		.loc 1 3609 0
 5779 0248 0021     		movs	r1, #0
 5780 024a 4820     		movs	r0, #72
 5781 024c FFF7FEFF 		bl	VXISI2CWrite
 5782              	.LVL796:
3610:Src/main.c    **** 	VXISI2CWrite(0x4A,0x00);
 5783              		.loc 1 3610 0
 5784 0250 0021     		movs	r1, #0
 5785 0252 4920     		movs	r0, #73
 5786 0254 FFF7FEFF 		bl	VXISI2CWrite
 5787              	.LVL797:
3611:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
 5788              		.loc 1 3611 0
 5789 0258 0021     		movs	r1, #0
 5790 025a 4A20     		movs	r0, #74
 5791 025c FFF7FEFF 		bl	VXISI2CWrite
 5792              	.LVL798:
3612:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
ARM GAS  /tmp/cc8epWVM.s 			page 194


 5793              		.loc 1 3612 0
 5794 0260 2021     		movs	r1, #32
 5795 0262 4B20     		movs	r0, #75
 5796 0264 FFF7FEFF 		bl	VXISI2CWrite
 5797              	.LVL799:
3613:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
 5798              		.loc 1 3613 0
 5799 0268 0021     		movs	r1, #0
 5800 026a 4C20     		movs	r0, #76
 5801 026c FFF7FEFF 		bl	VXISI2CWrite
 5802              	.LVL800:
3614:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
 5803              		.loc 1 3614 0
 5804 0270 0021     		movs	r1, #0
 5805 0272 4D20     		movs	r0, #77
 5806 0274 FFF7FEFF 		bl	VXISI2CWrite
 5807              	.LVL801:
3615:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
 5808              		.loc 1 3615 0
 5809 0278 0021     		movs	r1, #0
 5810 027a 4E20     		movs	r0, #78
 5811 027c FFF7FEFF 		bl	VXISI2CWrite
 5812              	.LVL802:
3616:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
 5813              		.loc 1 3616 0
 5814 0280 7F21     		movs	r1, #127
 5815 0282 4F20     		movs	r0, #79
 5816 0284 FFF7FEFF 		bl	VXISI2CWrite
 5817              	.LVL803:
3617:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
 5818              		.loc 1 3617 0
 5819 0288 2021     		movs	r1, #32
 5820 028a 5020     		movs	r0, #80
 5821 028c FFF7FEFF 		bl	VXISI2CWrite
 5822              	.LVL804:
3618:Src/main.c    **** 	VXISI2CWrite(0x52,0xA4);
 5823              		.loc 1 3618 0
 5824 0290 0021     		movs	r1, #0
 5825 0292 5120     		movs	r0, #81
 5826 0294 FFF7FEFF 		bl	VXISI2CWrite
 5827              	.LVL805:
3619:Src/main.c    **** 	VXISI2CWrite(0x53,0xC0);
 5828              		.loc 1 3619 0
 5829 0298 A421     		movs	r1, #164
 5830 029a 5220     		movs	r0, #82
 5831 029c FFF7FEFF 		bl	VXISI2CWrite
 5832              	.LVL806:
3620:Src/main.c    **** 	VXISI2CWrite(0x54,0x42);
 5833              		.loc 1 3620 0
 5834 02a0 C021     		movs	r1, #192
 5835 02a2 5320     		movs	r0, #83
 5836 02a4 FFF7FEFF 		bl	VXISI2CWrite
 5837              	.LVL807:
3621:Src/main.c    **** 	VXISI2CWrite(0x55,0x60);
 5838              		.loc 1 3621 0
 5839 02a8 4221     		movs	r1, #66
 5840 02aa 5420     		movs	r0, #84
ARM GAS  /tmp/cc8epWVM.s 			page 195


 5841 02ac FFF7FEFF 		bl	VXISI2CWrite
 5842              	.LVL808:
3622:Src/main.c    **** 	VXISI2CWrite(0x56,0x5C);
 5843              		.loc 1 3622 0
 5844 02b0 6021     		movs	r1, #96
 5845 02b2 5520     		movs	r0, #85
 5846 02b4 FFF7FEFF 		bl	VXISI2CWrite
 5847              	.LVL809:
3623:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
 5848              		.loc 1 3623 0
 5849 02b8 5C21     		movs	r1, #92
 5850 02ba 5620     		movs	r0, #86
 5851 02bc FFF7FEFF 		bl	VXISI2CWrite
 5852              	.LVL810:
3624:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
 5853              		.loc 1 3624 0
 5854 02c0 0421     		movs	r1, #4
 5855 02c2 5720     		movs	r0, #87
 5856 02c4 FFF7FEFF 		bl	VXISI2CWrite
 5857              	.LVL811:
3625:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
 5858              		.loc 1 3625 0
 5859 02c8 0021     		movs	r1, #0
 5860 02ca 5820     		movs	r0, #88
 5861 02cc FFF7FEFF 		bl	VXISI2CWrite
 5862              	.LVL812:
3626:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
 5863              		.loc 1 3626 0
 5864 02d0 0821     		movs	r1, #8
 5865 02d2 5920     		movs	r0, #89
 5866 02d4 FFF7FEFF 		bl	VXISI2CWrite
 5867              	.LVL813:
3627:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
 5868              		.loc 1 3627 0
 5869 02d8 1021     		movs	r1, #16
 5870 02da 5A20     		movs	r0, #90
 5871 02dc FFF7FEFF 		bl	VXISI2CWrite
 5872              	.LVL814:
3628:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
 5873              		.loc 1 3628 0
 5874 02e0 0021     		movs	r1, #0
 5875 02e2 5B20     		movs	r0, #91
 5876 02e4 FFF7FEFF 		bl	VXISI2CWrite
 5877              	.LVL815:
3629:Src/main.c    **** 	VXISI2CWrite(0x5D,0xA8);
 5878              		.loc 1 3629 0
 5879 02e8 6821     		movs	r1, #104
 5880 02ea 5C20     		movs	r0, #92
 5881 02ec FFF7FEFF 		bl	VXISI2CWrite
 5882              	.LVL816:
3630:Src/main.c    **** 	VXISI2CWrite(0x5E,0xC0);
 5883              		.loc 1 3630 0
 5884 02f0 A821     		movs	r1, #168
 5885 02f2 5D20     		movs	r0, #93
 5886 02f4 FFF7FEFF 		bl	VXISI2CWrite
 5887              	.LVL817:
3631:Src/main.c    **** 	VXISI2CWrite(0x5F,0x53);
ARM GAS  /tmp/cc8epWVM.s 			page 196


 5888              		.loc 1 3631 0
 5889 02f8 C021     		movs	r1, #192
 5890 02fa 5E20     		movs	r0, #94
 5891 02fc FFF7FEFF 		bl	VXISI2CWrite
 5892              	.LVL818:
3632:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
 5893              		.loc 1 3632 0
 5894 0300 5321     		movs	r1, #83
 5895 0302 5F20     		movs	r0, #95
 5896 0304 FFF7FEFF 		bl	VXISI2CWrite
 5897              	.LVL819:
3633:Src/main.c    **** 	VXISI2CWrite(0x61,0xCC);
 5898              		.loc 1 3633 0
 5899 0308 E021     		movs	r1, #224
 5900 030a 6020     		movs	r0, #96
 5901 030c FFF7FEFF 		bl	VXISI2CWrite
 5902              	.LVL820:
3634:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
 5903              		.loc 1 3634 0
 5904 0310 CC21     		movs	r1, #204
 5905 0312 6120     		movs	r0, #97
 5906 0314 FFF7FEFF 		bl	VXISI2CWrite
 5907              	.LVL821:
3635:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
 5908              		.loc 1 3635 0
 5909 0318 3321     		movs	r1, #51
 5910 031a 6220     		movs	r0, #98
 5911 031c FFF7FEFF 		bl	VXISI2CWrite
 5912              	.LVL822:
3636:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
 5913              		.loc 1 3636 0
 5914 0320 0121     		movs	r1, #1
 5915 0322 6320     		movs	r0, #99
 5916 0324 FFF7FEFF 		bl	VXISI2CWrite
 5917              	.LVL823:
3637:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
 5918              		.loc 1 3637 0
 5919 0328 FF21     		movs	r1, #255
 5920 032a 6420     		movs	r0, #100
 5921 032c FFF7FEFF 		bl	VXISI2CWrite
 5922              	.LVL824:
3638:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
 5923              		.loc 1 3638 0
 5924 0330 0121     		movs	r1, #1
 5925 0332 6520     		movs	r0, #101
 5926 0334 FFF7FEFF 		bl	VXISI2CWrite
 5927              	.LVL825:
3639:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
 5928              		.loc 1 3639 0
 5929 0338 FF21     		movs	r1, #255
 5930 033a 6620     		movs	r0, #102
 5931 033c FFF7FEFF 		bl	VXISI2CWrite
 5932              	.LVL826:
3640:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
 5933              		.loc 1 3640 0
 5934 0340 8921     		movs	r1, #137
 5935 0342 6720     		movs	r0, #103
ARM GAS  /tmp/cc8epWVM.s 			page 197


 5936 0344 FFF7FEFF 		bl	VXISI2CWrite
 5937              	.LVL827:
3641:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
 5938              		.loc 1 3641 0
 5939 0348 AB21     		movs	r1, #171
 5940 034a 6820     		movs	r0, #104
 5941 034c FFF7FEFF 		bl	VXISI2CWrite
 5942              	.LVL828:
3642:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
 5943              		.loc 1 3642 0
 5944 0350 8821     		movs	r1, #136
 5945 0352 6920     		movs	r0, #105
 5946 0354 FFF7FEFF 		bl	VXISI2CWrite
 5947              	.LVL829:
3643:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
 5948              		.loc 1 3643 0
 5949 0358 6E21     		movs	r1, #110
 5950 035a 6A20     		movs	r0, #106
 5951 035c FFF7FEFF 		bl	VXISI2CWrite
 5952              	.LVL830:
3644:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
 5953              		.loc 1 3644 0
 5954 0360 6E21     		movs	r1, #110
 5955 0362 6B20     		movs	r0, #107
 5956 0364 FFF7FEFF 		bl	VXISI2CWrite
 5957              	.LVL831:
3645:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
 5958              		.loc 1 3645 0
 5959 0368 6E21     		movs	r1, #110
 5960 036a 6C20     		movs	r0, #108
 5961 036c FFF7FEFF 		bl	VXISI2CWrite
 5962              	.LVL832:
3646:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
 5963              		.loc 1 3646 0
 5964 0370 0021     		movs	r1, #0
 5965 0372 6D20     		movs	r0, #109
 5966 0374 FFF7FEFF 		bl	VXISI2CWrite
 5967              	.LVL833:
3647:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
 5968              		.loc 1 3647 0
 5969 0378 0021     		movs	r1, #0
 5970 037a 6E20     		movs	r0, #110
 5971 037c FFF7FEFF 		bl	VXISI2CWrite
 5972              	.LVL834:
3648:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
 5973              		.loc 1 3648 0
 5974 0380 0021     		movs	r1, #0
 5975 0382 6F20     		movs	r0, #111
 5976 0384 FFF7FEFF 		bl	VXISI2CWrite
 5977              	.LVL835:
3649:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
 5978              		.loc 1 3649 0
 5979 0388 0021     		movs	r1, #0
 5980 038a 7020     		movs	r0, #112
 5981 038c FFF7FEFF 		bl	VXISI2CWrite
 5982              	.LVL836:
3650:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
ARM GAS  /tmp/cc8epWVM.s 			page 198


 5983              		.loc 1 3650 0
 5984 0390 0021     		movs	r1, #0
 5985 0392 7120     		movs	r0, #113
 5986 0394 FFF7FEFF 		bl	VXISI2CWrite
 5987              	.LVL837:
3651:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
 5988              		.loc 1 3651 0
 5989 0398 0021     		movs	r1, #0
 5990 039a 7220     		movs	r0, #114
 5991 039c FFF7FEFF 		bl	VXISI2CWrite
 5992              	.LVL838:
3652:Src/main.c    **** 	VXISI2CWrite(0x74,0x06);
 5993              		.loc 1 3652 0
 5994 03a0 0021     		movs	r1, #0
 5995 03a2 7320     		movs	r0, #115
 5996 03a4 FFF7FEFF 		bl	VXISI2CWrite
 5997              	.LVL839:
3653:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
 5998              		.loc 1 3653 0
 5999 03a8 0621     		movs	r1, #6
 6000 03aa 7420     		movs	r0, #116
 6001 03ac FFF7FEFF 		bl	VXISI2CWrite
 6002              	.LVL840:
3654:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
 6003              		.loc 1 3654 0
 6004 03b0 FF21     		movs	r1, #255
 6005 03b2 7520     		movs	r0, #117
 6006 03b4 FFF7FEFF 		bl	VXISI2CWrite
 6007              	.LVL841:
3655:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
 6008              		.loc 1 3655 0
 6009 03b8 FF21     		movs	r1, #255
 6010 03ba 7620     		movs	r0, #118
 6011 03bc FFF7FEFF 		bl	VXISI2CWrite
 6012              	.LVL842:
3656:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
 6013              		.loc 1 3656 0
 6014 03c0 FF21     		movs	r1, #255
 6015 03c2 7720     		movs	r0, #119
 6016 03c4 FFF7FEFF 		bl	VXISI2CWrite
 6017              	.LVL843:
3657:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
 6018              		.loc 1 3657 0
 6019 03c8 FF21     		movs	r1, #255
 6020 03ca 7820     		movs	r0, #120
 6021 03cc FFF7FEFF 		bl	VXISI2CWrite
 6022              	.LVL844:
3658:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
 6023              		.loc 1 3658 0
 6024 03d0 FF21     		movs	r1, #255
 6025 03d2 7920     		movs	r0, #121
 6026 03d4 FFF7FEFF 		bl	VXISI2CWrite
 6027              	.LVL845:
3659:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
 6028              		.loc 1 3659 0
 6029 03d8 FF21     		movs	r1, #255
 6030 03da 7A20     		movs	r0, #122
ARM GAS  /tmp/cc8epWVM.s 			page 199


 6031 03dc FFF7FEFF 		bl	VXISI2CWrite
 6032              	.LVL846:
3660:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
 6033              		.loc 1 3660 0
 6034 03e0 FF21     		movs	r1, #255
 6035 03e2 7B20     		movs	r0, #123
 6036 03e4 FFF7FEFF 		bl	VXISI2CWrite
 6037              	.LVL847:
3661:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
 6038              		.loc 1 3661 0
 6039 03e8 FF21     		movs	r1, #255
 6040 03ea 7C20     		movs	r0, #124
 6041 03ec FFF7FEFF 		bl	VXISI2CWrite
 6042              	.LVL848:
3662:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
 6043              		.loc 1 3662 0
 6044 03f0 F021     		movs	r1, #240
 6045 03f2 7D20     		movs	r0, #125
 6046 03f4 FFF7FEFF 		bl	VXISI2CWrite
 6047              	.LVL849:
 6048 03f8 02E0     		b	.L214
 6049              	.L215:
 6050 03fa 00BF     		.align	2
 6051              	.L213:
 6052 03fc 00000000 		.word	.LC37
 6053              	.L214:
3663:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
 6054              		.loc 1 3663 0
 6055 0400 8021     		movs	r1, #128
 6056 0402 7E20     		movs	r0, #126
 6057 0404 FFF7FEFF 		bl	VXISI2CWrite
 6058              	.LVL850:
3664:Src/main.c    **** 	VXISI2CWrite(0x80,0x01);
 6059              		.loc 1 3664 0
 6060 0408 0021     		movs	r1, #0
 6061 040a 7F20     		movs	r0, #127
 6062 040c FFF7FEFF 		bl	VXISI2CWrite
 6063              	.LVL851:
3665:Src/main.c    **** 	VXISI2CWrite(0x81,0x15);
 6064              		.loc 1 3665 0
 6065 0410 0121     		movs	r1, #1
 6066 0412 8020     		movs	r0, #128
 6067 0414 FFF7FEFF 		bl	VXISI2CWrite
 6068              	.LVL852:
3666:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
 6069              		.loc 1 3666 0
 6070 0418 1521     		movs	r1, #21
 6071 041a 8120     		movs	r0, #129
 6072 041c FFF7FEFF 		bl	VXISI2CWrite
 6073              	.LVL853:
3667:Src/main.c    **** 	VXISI2CWrite(0x83,0x2D);
 6074              		.loc 1 3667 0
 6075 0420 4021     		movs	r1, #64
 6076 0422 8220     		movs	r0, #130
 6077 0424 FFF7FEFF 		bl	VXISI2CWrite
 6078              	.LVL854:
3668:Src/main.c    **** 	VXISI2CWrite(0x84,0x57);
ARM GAS  /tmp/cc8epWVM.s 			page 200


 6079              		.loc 1 3668 0
 6080 0428 2D21     		movs	r1, #45
 6081 042a 8320     		movs	r0, #131
 6082 042c FFF7FEFF 		bl	VXISI2CWrite
 6083              	.LVL855:
3669:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
 6084              		.loc 1 3669 0
 6085 0430 5721     		movs	r1, #87
 6086 0432 8420     		movs	r0, #132
 6087 0434 FFF7FEFF 		bl	VXISI2CWrite
 6088              	.LVL856:
3670:Src/main.c    **** 	VXISI2CWrite(0x86,0x00);
 6089              		.loc 1 3670 0
 6090 0438 FD21     		movs	r1, #253
 6091 043a 8520     		movs	r0, #133
 6092 043c FFF7FEFF 		bl	VXISI2CWrite
 6093              	.LVL857:
3671:Src/main.c    **** 	VXISI2CWrite(0x87,0x00);
 6094              		.loc 1 3671 0
 6095 0440 0021     		movs	r1, #0
 6096 0442 8620     		movs	r0, #134
 6097 0444 FFF7FEFF 		bl	VXISI2CWrite
 6098              	.LVL858:
3672:Src/main.c    **** 	VXISI2CWrite(0x88,0x00);
 6099              		.loc 1 3672 0
 6100 0448 0021     		movs	r1, #0
 6101 044a 8720     		movs	r0, #135
 6102 044c FFF7FEFF 		bl	VXISI2CWrite
 6103              	.LVL859:
3673:Src/main.c    **** 	VXISI2CWrite(0x89,0x00);
 6104              		.loc 1 3673 0
 6105 0450 0021     		movs	r1, #0
 6106 0452 8820     		movs	r0, #136
 6107 0454 FFF7FEFF 		bl	VXISI2CWrite
 6108              	.LVL860:
3674:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
 6109              		.loc 1 3674 0
 6110 0458 0021     		movs	r1, #0
 6111 045a 8920     		movs	r0, #137
 6112 045c FFF7FEFF 		bl	VXISI2CWrite
 6113              	.LVL861:
3675:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
 6114              		.loc 1 3675 0
 6115 0460 0021     		movs	r1, #0
 6116 0462 8A20     		movs	r0, #138
 6117 0464 FFF7FEFF 		bl	VXISI2CWrite
 6118              	.LVL862:
3676:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
 6119              		.loc 1 3676 0
 6120 0468 7E21     		movs	r1, #126
 6121 046a 8B20     		movs	r0, #139
 6122 046c FFF7FEFF 		bl	VXISI2CWrite
 6123              	.LVL863:
3677:Src/main.c    **** 	VXISI2CWrite(0x8D,0x17);
 6124              		.loc 1 3677 0
 6125 0470 0321     		movs	r1, #3
 6126 0472 8C20     		movs	r0, #140
ARM GAS  /tmp/cc8epWVM.s 			page 201


 6127 0474 FFF7FEFF 		bl	VXISI2CWrite
 6128              	.LVL864:
3678:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
 6129              		.loc 1 3678 0
 6130 0478 1721     		movs	r1, #23
 6131 047a 8D20     		movs	r0, #141
 6132 047c FFF7FEFF 		bl	VXISI2CWrite
 6133              	.LVL865:
3679:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
 6134              		.loc 1 3679 0
 6135 0480 8C21     		movs	r1, #140
 6136 0482 8E20     		movs	r0, #142
 6137 0484 FFF7FEFF 		bl	VXISI2CWrite
 6138              	.LVL866:
3680:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
 6139              		.loc 1 3680 0
 6140 0488 0021     		movs	r1, #0
 6141 048a 8F20     		movs	r0, #143
 6142 048c FFF7FEFF 		bl	VXISI2CWrite
 6143              	.LVL867:
3681:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
 6144              		.loc 1 3681 0
 6145 0490 CC21     		movs	r1, #204
 6146 0492 9020     		movs	r0, #144
 6147 0494 FFF7FEFF 		bl	VXISI2CWrite
 6148              	.LVL868:
3682:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
 6149              		.loc 1 3682 0
 6150 0498 4121     		movs	r1, #65
 6151 049a 9120     		movs	r0, #145
 6152 049c FFF7FEFF 		bl	VXISI2CWrite
 6153              	.LVL869:
3683:Src/main.c    **** 	VXISI2CWrite(0x93,0x84);
 6154              		.loc 1 3683 0
 6155 04a0 C421     		movs	r1, #196
 6156 04a2 9220     		movs	r0, #146
 6157 04a4 FFF7FEFF 		bl	VXISI2CWrite
 6158              	.LVL870:
3684:Src/main.c    **** 	VXISI2CWrite(0x94,0x98);
 6159              		.loc 1 3684 0
 6160 04a8 8421     		movs	r1, #132
 6161 04aa 9320     		movs	r0, #147
 6162 04ac FFF7FEFF 		bl	VXISI2CWrite
 6163              	.LVL871:
3685:Src/main.c    **** 	VXISI2CWrite(0x95,0x80);
 6164              		.loc 1 3685 0
 6165 04b0 9821     		movs	r1, #152
 6166 04b2 9420     		movs	r0, #148
 6167 04b4 FFF7FEFF 		bl	VXISI2CWrite
 6168              	.LVL872:
3686:Src/main.c    **** 	VXISI2CWrite(0x96,0x65);
 6169              		.loc 1 3686 0
 6170 04b8 8021     		movs	r1, #128
 6171 04ba 9520     		movs	r0, #149
 6172 04bc FFF7FEFF 		bl	VXISI2CWrite
 6173              	.LVL873:
3687:Src/main.c    **** 	VXISI2CWrite(0x97,0x70);
ARM GAS  /tmp/cc8epWVM.s 			page 202


 6174              		.loc 1 3687 0
 6175 04c0 6521     		movs	r1, #101
 6176 04c2 9620     		movs	r0, #150
 6177 04c4 FFF7FEFF 		bl	VXISI2CWrite
 6178              	.LVL874:
3688:Src/main.c    **** 	VXISI2CWrite(0x98,0x29);
 6179              		.loc 1 3688 0
 6180 04c8 7021     		movs	r1, #112
 6181 04ca 9720     		movs	r0, #151
 6182 04cc FFF7FEFF 		bl	VXISI2CWrite
 6183              	.LVL875:
3689:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
 6184              		.loc 1 3689 0
 6185 04d0 2921     		movs	r1, #41
 6186 04d2 9820     		movs	r0, #152
 6187 04d4 FFF7FEFF 		bl	VXISI2CWrite
 6188              	.LVL876:
3690:Src/main.c    **** 	VXISI2CWrite(0x9A,0x00);
 6189              		.loc 1 3690 0
 6190 04d8 9021     		movs	r1, #144
 6191 04da 9920     		movs	r0, #153
 6192 04dc FFF7FEFF 		bl	VXISI2CWrite
 6193              	.LVL877:
3691:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
 6194              		.loc 1 3691 0
 6195 04e0 0021     		movs	r1, #0
 6196 04e2 9A20     		movs	r0, #154
 6197 04e4 FFF7FEFF 		bl	VXISI2CWrite
 6198              	.LVL878:
3692:Src/main.c    **** 	VXISI2CWrite(0x9C,0x00);
 6199              		.loc 1 3692 0
 6200 04e8 0421     		movs	r1, #4
 6201 04ea 9B20     		movs	r0, #155
 6202 04ec FFF7FEFF 		bl	VXISI2CWrite
 6203              	.LVL879:
3693:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
 6204              		.loc 1 3693 0
 6205 04f0 0021     		movs	r1, #0
 6206 04f2 9C20     		movs	r0, #156
 6207 04f4 FFF7FEFF 		bl	VXISI2CWrite
 6208              	.LVL880:
3694:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
 6209              		.loc 1 3694 0
 6210 04f8 0021     		movs	r1, #0
 6211 04fa 9D20     		movs	r0, #157
 6212 04fc FFF7FEFF 		bl	VXISI2CWrite
 6213              	.LVL881:
3695:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
 6214              		.loc 1 3695 0
 6215 0500 0421     		movs	r1, #4
 6216 0502 9E20     		movs	r0, #158
 6217 0504 FFF7FEFF 		bl	VXISI2CWrite
 6218              	.LVL882:
3696:Src/main.c    **** 	VXISI2CWrite(0xA0,0x80);
 6219              		.loc 1 3696 0
 6220 0508 6521     		movs	r1, #101
 6221 050a 9F20     		movs	r0, #159
ARM GAS  /tmp/cc8epWVM.s 			page 203


 6222 050c FFF7FEFF 		bl	VXISI2CWrite
 6223              	.LVL883:
3697:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD8);
 6224              		.loc 1 3697 0
 6225 0510 8021     		movs	r1, #128
 6226 0512 A020     		movs	r0, #160
 6227 0514 FFF7FEFF 		bl	VXISI2CWrite
 6228              	.LVL884:
3698:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
 6229              		.loc 1 3698 0
 6230 0518 D821     		movs	r1, #216
 6231 051a A120     		movs	r0, #161
 6232 051c FFF7FEFF 		bl	VXISI2CWrite
 6233              	.LVL885:
3699:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
 6234              		.loc 1 3699 0
 6235 0520 9821     		movs	r1, #152
 6236 0522 A220     		movs	r0, #162
 6237 0524 FFF7FEFF 		bl	VXISI2CWrite
 6238              	.LVL886:
3700:Src/main.c    **** 	VXISI2CWrite(0xA4,0x00);
 6239              		.loc 1 3700 0
 6240 0528 8721     		movs	r1, #135
 6241 052a A320     		movs	r0, #163
 6242 052c FFF7FEFF 		bl	VXISI2CWrite
 6243              	.LVL887:
3701:Src/main.c    **** 	VXISI2CWrite(0xA5,0x80);
 6244              		.loc 1 3701 0
 6245 0530 0021     		movs	r1, #0
 6246 0532 A420     		movs	r0, #164
 6247 0534 FFF7FEFF 		bl	VXISI2CWrite
 6248              	.LVL888:
3702:Src/main.c    **** 	VXISI2CWrite(0xA6,0x00);
 6249              		.loc 1 3702 0
 6250 0538 8021     		movs	r1, #128
 6251 053a A520     		movs	r0, #165
 6252 053c FFF7FEFF 		bl	VXISI2CWrite
 6253              	.LVL889:
3703:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
 6254              		.loc 1 3703 0
 6255 0540 0021     		movs	r1, #0
 6256 0542 A620     		movs	r0, #166
 6257 0544 FFF7FEFF 		bl	VXISI2CWrite
 6258              	.LVL890:
3704:Src/main.c    **** 	VXISI2CWrite(0xA8,0x40);
 6259              		.loc 1 3704 0
 6260 0548 7021     		movs	r1, #112
 6261 054a A720     		movs	r0, #167
 6262 054c FFF7FEFF 		bl	VXISI2CWrite
 6263              	.LVL891:
3705:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
 6264              		.loc 1 3705 0
 6265 0550 4021     		movs	r1, #64
 6266 0552 A820     		movs	r0, #168
 6267 0554 FFF7FEFF 		bl	VXISI2CWrite
 6268              	.LVL892:
3706:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2C);
ARM GAS  /tmp/cc8epWVM.s 			page 204


 6269              		.loc 1 3706 0
 6270 0558 1E21     		movs	r1, #30
 6271 055a A920     		movs	r0, #169
 6272 055c FFF7FEFF 		bl	VXISI2CWrite
 6273              	.LVL893:
3707:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
 6274              		.loc 1 3707 0
 6275 0560 2C21     		movs	r1, #44
 6276 0562 AA20     		movs	r0, #170
 6277 0564 FFF7FEFF 		bl	VXISI2CWrite
 6278              	.LVL894:
3708:Src/main.c    **** 	VXISI2CWrite(0xAC,0x90);
 6279              		.loc 1 3708 0
 6280 0568 0021     		movs	r1, #0
 6281 056a AB20     		movs	r0, #171
 6282 056c FFF7FEFF 		bl	VXISI2CWrite
 6283              	.LVL895:
3709:Src/main.c    **** 	VXISI2CWrite(0xAD,0x65);
 6284              		.loc 1 3709 0
 6285 0570 9021     		movs	r1, #144
 6286 0572 AC20     		movs	r0, #172
 6287 0574 FFF7FEFF 		bl	VXISI2CWrite
 6288              	.LVL896:
3710:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
 6289              		.loc 1 3710 0
 6290 0578 6521     		movs	r1, #101
 6291 057a AD20     		movs	r0, #173
 6292 057c FFF7FEFF 		bl	VXISI2CWrite
 6293              	.LVL897:
3711:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
 6294              		.loc 1 3711 0
 6295 0580 6521     		movs	r1, #101
 6296 0582 AE20     		movs	r0, #174
 6297 0584 FFF7FEFF 		bl	VXISI2CWrite
 6298              	.LVL898:
3712:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
 6299              		.loc 1 3712 0
 6300 0588 9921     		movs	r1, #153
 6301 058a AF20     		movs	r0, #175
 6302 058c FFF7FEFF 		bl	VXISI2CWrite
 6303              	.LVL899:
3713:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
 6304              		.loc 1 3713 0
 6305 0590 0021     		movs	r1, #0
 6306 0592 B020     		movs	r0, #176
 6307 0594 FFF7FEFF 		bl	VXISI2CWrite
 6308              	.LVL900:
3714:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
 6309              		.loc 1 3714 0
 6310 0598 0021     		movs	r1, #0
 6311 059a B120     		movs	r0, #177
 6312 059c FFF7FEFF 		bl	VXISI2CWrite
 6313              	.LVL901:
3715:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
 6314              		.loc 1 3715 0
 6315 05a0 0021     		movs	r1, #0
 6316 05a2 B220     		movs	r0, #178
ARM GAS  /tmp/cc8epWVM.s 			page 205


 6317 05a4 FFF7FEFF 		bl	VXISI2CWrite
 6318              	.LVL902:
3716:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
 6319              		.loc 1 3716 0
 6320 05a8 0021     		movs	r1, #0
 6321 05aa B320     		movs	r0, #179
 6322 05ac FFF7FEFF 		bl	VXISI2CWrite
 6323              	.LVL903:
3717:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
 6324              		.loc 1 3717 0
 6325 05b0 0021     		movs	r1, #0
 6326 05b2 B420     		movs	r0, #180
 6327 05b4 FFF7FEFF 		bl	VXISI2CWrite
 6328              	.LVL904:
3718:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
 6329              		.loc 1 3718 0
 6330 05b8 0021     		movs	r1, #0
 6331 05ba B520     		movs	r0, #181
 6332 05bc FFF7FEFF 		bl	VXISI2CWrite
 6333              	.LVL905:
3719:Src/main.c    **** 	VXISI2CWrite(0xB7,0x00);
 6334              		.loc 1 3719 0
 6335 05c0 0021     		movs	r1, #0
 6336 05c2 B620     		movs	r0, #182
 6337 05c4 FFF7FEFF 		bl	VXISI2CWrite
 6338              	.LVL906:
3720:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
 6339              		.loc 1 3720 0
 6340 05c8 0021     		movs	r1, #0
 6341 05ca B720     		movs	r0, #183
 6342 05cc FFF7FEFF 		bl	VXISI2CWrite
 6343              	.LVL907:
3721:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
 6344              		.loc 1 3721 0
 6345 05d0 8021     		movs	r1, #128
 6346 05d2 B820     		movs	r0, #184
 6347 05d4 FFF7FEFF 		bl	VXISI2CWrite
 6348              	.LVL908:
3722:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
 6349              		.loc 1 3722 0
 6350 05d8 0021     		movs	r1, #0
 6351 05da B920     		movs	r0, #185
 6352 05dc FFF7FEFF 		bl	VXISI2CWrite
 6353              	.LVL909:
3723:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
 6354              		.loc 1 3723 0
 6355 05e0 0121     		movs	r1, #1
 6356 05e2 BA20     		movs	r0, #186
 6357 05e4 FFF7FEFF 		bl	VXISI2CWrite
 6358              	.LVL910:
3724:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
 6359              		.loc 1 3724 0
 6360 05e8 0021     		movs	r1, #0
 6361 05ea BB20     		movs	r0, #187
 6362 05ec FFF7FEFF 		bl	VXISI2CWrite
 6363              	.LVL911:
3725:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
ARM GAS  /tmp/cc8epWVM.s 			page 206


 6364              		.loc 1 3725 0
 6365 05f0 9021     		movs	r1, #144
 6366 05f2 BC20     		movs	r0, #188
 6367 05f4 FFF7FEFF 		bl	VXISI2CWrite
 6368              	.LVL912:
3726:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
 6369              		.loc 1 3726 0
 6370 05f8 0121     		movs	r1, #1
 6371 05fa BD20     		movs	r0, #189
 6372 05fc FFF7FEFF 		bl	VXISI2CWrite
 6373              	.LVL913:
3727:Src/main.c    **** 	VXISI2CWrite(0xBF,0x00);
 6374              		.loc 1 3727 0
 6375 0600 2C21     		movs	r1, #44
 6376 0602 BE20     		movs	r0, #190
 6377 0604 FFF7FEFF 		bl	VXISI2CWrite
 6378              	.LVL914:
3728:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
 6379              		.loc 1 3728 0
 6380 0608 0021     		movs	r1, #0
 6381 060a BF20     		movs	r0, #191
 6382 060c FFF7FEFF 		bl	VXISI2CWrite
 6383              	.LVL915:
3729:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
 6384              		.loc 1 3729 0
 6385 0610 0021     		movs	r1, #0
 6386 0612 C020     		movs	r0, #192
 6387 0614 FFF7FEFF 		bl	VXISI2CWrite
 6388              	.LVL916:
3730:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
 6389              		.loc 1 3730 0
 6390 0618 2021     		movs	r1, #32
 6391 061a C120     		movs	r0, #193
 6392 061c FFF7FEFF 		bl	VXISI2CWrite
 6393              	.LVL917:
3731:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
 6394              		.loc 1 3731 0
 6395 0620 2021     		movs	r1, #32
 6396 0622 C220     		movs	r0, #194
 6397 0624 FFF7FEFF 		bl	VXISI2CWrite
 6398              	.LVL918:
3732:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
 6399              		.loc 1 3732 0
 6400 0628 2021     		movs	r1, #32
 6401 062a C320     		movs	r0, #195
 6402 062c FFF7FEFF 		bl	VXISI2CWrite
 6403              	.LVL919:
3733:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
 6404              		.loc 1 3733 0
 6405 0630 2021     		movs	r1, #32
 6406 0632 C420     		movs	r0, #196
 6407 0634 FFF7FEFF 		bl	VXISI2CWrite
 6408              	.LVL920:
3734:Src/main.c    **** 	VXISI2CWrite(0xC6,0x00);
 6409              		.loc 1 3734 0
 6410 0638 2021     		movs	r1, #32
 6411 063a C520     		movs	r0, #197
ARM GAS  /tmp/cc8epWVM.s 			page 207


 6412 063c FFF7FEFF 		bl	VXISI2CWrite
 6413              	.LVL921:
3735:Src/main.c    **** 	VXISI2CWrite(0xC7,0x00);
 6414              		.loc 1 3735 0
 6415 0640 0021     		movs	r1, #0
 6416 0642 C620     		movs	r0, #198
 6417 0644 FFF7FEFF 		bl	VXISI2CWrite
 6418              	.LVL922:
3736:Src/main.c    **** 	VXISI2CWrite(0xC8,0x00);
 6419              		.loc 1 3736 0
 6420 0648 0021     		movs	r1, #0
 6421 064a C720     		movs	r0, #199
 6422 064c FFF7FEFF 		bl	VXISI2CWrite
 6423              	.LVL923:
3737:Src/main.c    **** 	VXISI2CWrite(0xC9,0x00);
 6424              		.loc 1 3737 0
 6425 0650 0021     		movs	r1, #0
 6426 0652 C820     		movs	r0, #200
 6427 0654 FFF7FEFF 		bl	VXISI2CWrite
 6428              	.LVL924:
3738:Src/main.c    **** 	VXISI2CWrite(0xCA,0x00);
 6429              		.loc 1 3738 0
 6430 0658 0021     		movs	r1, #0
 6431 065a C920     		movs	r0, #201
 6432 065c FFF7FEFF 		bl	VXISI2CWrite
 6433              	.LVL925:
3739:Src/main.c    **** 	VXISI2CWrite(0xCB,0x00);
 6434              		.loc 1 3739 0
 6435 0660 0021     		movs	r1, #0
 6436 0662 CA20     		movs	r0, #202
 6437 0664 FFF7FEFF 		bl	VXISI2CWrite
 6438              	.LVL926:
3740:Src/main.c    **** 	VXISI2CWrite(0xCC,0x00);
 6439              		.loc 1 3740 0
 6440 0668 0021     		movs	r1, #0
 6441 066a CB20     		movs	r0, #203
 6442 066c FFF7FEFF 		bl	VXISI2CWrite
 6443              	.LVL927:
3741:Src/main.c    **** 	VXISI2CWrite(0xCD,0x00);
 6444              		.loc 1 3741 0
 6445 0670 0021     		movs	r1, #0
 6446 0672 CC20     		movs	r0, #204
 6447 0674 FFF7FEFF 		bl	VXISI2CWrite
 6448              	.LVL928:
3742:Src/main.c    **** 	VXISI2CWrite(0xCE,0x00);
 6449              		.loc 1 3742 0
 6450 0678 0021     		movs	r1, #0
 6451 067a CD20     		movs	r0, #205
 6452 067c FFF7FEFF 		bl	VXISI2CWrite
 6453              	.LVL929:
3743:Src/main.c    **** 	VXISI2CWrite(0xCF,0x00);
 6454              		.loc 1 3743 0
 6455 0680 0021     		movs	r1, #0
 6456 0682 CE20     		movs	r0, #206
 6457 0684 FFF7FEFF 		bl	VXISI2CWrite
 6458              	.LVL930:
3744:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
ARM GAS  /tmp/cc8epWVM.s 			page 208


 6459              		.loc 1 3744 0
 6460 0688 0021     		movs	r1, #0
 6461 068a CF20     		movs	r0, #207
 6462 068c FFF7FEFF 		bl	VXISI2CWrite
 6463              	.LVL931:
3745:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
 6464              		.loc 1 3745 0
 6465 0690 FF21     		movs	r1, #255
 6466 0692 D020     		movs	r0, #208
 6467 0694 FFF7FEFF 		bl	VXISI2CWrite
 6468              	.LVL932:
3746:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
 6469              		.loc 1 3746 0
 6470 0698 3F21     		movs	r1, #63
 6471 069a D120     		movs	r0, #209
 6472 069c FFF7FEFF 		bl	VXISI2CWrite
 6473              	.LVL933:
3747:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
 6474              		.loc 1 3747 0
 6475 06a0 C221     		movs	r1, #194
 6476 06a2 D220     		movs	r0, #210
 6477 06a4 FFF7FEFF 		bl	VXISI2CWrite
 6478              	.LVL934:
3748:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
 6479              		.loc 1 3748 0
 6480 06a8 3F21     		movs	r1, #63
 6481 06aa D320     		movs	r0, #211
 6482 06ac FFF7FEFF 		bl	VXISI2CWrite
 6483              	.LVL935:
3749:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
 6484              		.loc 1 3749 0
 6485 06b0 0021     		movs	r1, #0
 6486 06b2 D420     		movs	r0, #212
 6487 06b4 FFF7FEFF 		bl	VXISI2CWrite
 6488              	.LVL936:
3750:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
 6489              		.loc 1 3750 0
 6490 06b8 0021     		movs	r1, #0
 6491 06ba D520     		movs	r0, #213
 6492 06bc FFF7FEFF 		bl	VXISI2CWrite
 6493              	.LVL937:
3751:Src/main.c    **** 	VXISI2CWrite(0xD7,0x0F);
 6494              		.loc 1 3751 0
 6495 06c0 0021     		movs	r1, #0
 6496 06c2 D620     		movs	r0, #214
 6497 06c4 FFF7FEFF 		bl	VXISI2CWrite
 6498              	.LVL938:
3752:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
 6499              		.loc 1 3752 0
 6500 06c8 0F21     		movs	r1, #15
 6501 06ca D720     		movs	r0, #215
 6502 06cc FFF7FEFF 		bl	VXISI2CWrite
 6503              	.LVL939:
3753:Src/main.c    **** 	VXISI2CWrite(0xD9,0x00);
 6504              		.loc 1 3753 0
 6505 06d0 0021     		movs	r1, #0
 6506 06d2 D820     		movs	r0, #216
ARM GAS  /tmp/cc8epWVM.s 			page 209


 6507 06d4 FFF7FEFF 		bl	VXISI2CWrite
 6508              	.LVL940:
3754:Src/main.c    **** 	VXISI2CWrite(0xDA,0x00);
 6509              		.loc 1 3754 0
 6510 06d8 0021     		movs	r1, #0
 6511 06da D920     		movs	r0, #217
 6512 06dc FFF7FEFF 		bl	VXISI2CWrite
 6513              	.LVL941:
3755:Src/main.c    **** 	VXISI2CWrite(0xDB,0x00);
 6514              		.loc 1 3755 0
 6515 06e0 0021     		movs	r1, #0
 6516 06e2 DA20     		movs	r0, #218
 6517 06e4 FFF7FEFF 		bl	VXISI2CWrite
 6518              	.LVL942:
3756:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
 6519              		.loc 1 3756 0
 6520 06e8 0021     		movs	r1, #0
 6521 06ea DB20     		movs	r0, #219
 6522 06ec FFF7FEFF 		bl	VXISI2CWrite
 6523              	.LVL943:
3757:Src/main.c    **** 	VXISI2CWrite(0xDD,0x01);
 6524              		.loc 1 3757 0
 6525 06f0 7721     		movs	r1, #119
 6526 06f2 DC20     		movs	r0, #220
 6527 06f4 FFF7FEFF 		bl	VXISI2CWrite
 6528              	.LVL944:
3758:Src/main.c    **** 	VXISI2CWrite(0xDE,0x5F);
 6529              		.loc 1 3758 0
 6530 06f8 0121     		movs	r1, #1
 6531 06fa DD20     		movs	r0, #221
 6532 06fc FFF7FEFF 		bl	VXISI2CWrite
 6533              	.LVL945:
3759:Src/main.c    **** 	VXISI2CWrite(0xDF,0x96);
 6534              		.loc 1 3759 0
 6535 0700 5F21     		movs	r1, #95
 6536 0702 DE20     		movs	r0, #222
 6537 0704 FFF7FEFF 		bl	VXISI2CWrite
 6538              	.LVL946:
3760:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
 6539              		.loc 1 3760 0
 6540 0708 9621     		movs	r1, #150
 6541 070a DF20     		movs	r0, #223
 6542 070c FFF7FEFF 		bl	VXISI2CWrite
 6543              	.LVL947:
3761:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
 6544              		.loc 1 3761 0
 6545 0710 0021     		movs	r1, #0
 6546 0712 E020     		movs	r0, #224
 6547 0714 FFF7FEFF 		bl	VXISI2CWrite
 6548              	.LVL948:
3762:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
 6549              		.loc 1 3762 0
 6550 0718 0021     		movs	r1, #0
 6551 071a E120     		movs	r0, #225
 6552 071c FFF7FEFF 		bl	VXISI2CWrite
 6553              	.LVL949:
3763:Src/main.c    **** 	VXISI2CWrite(0xE3,0x47);
ARM GAS  /tmp/cc8epWVM.s 			page 210


 6554              		.loc 1 3763 0
 6555 0720 0021     		movs	r1, #0
 6556 0722 E220     		movs	r0, #226
 6557 0724 FFF7FEFF 		bl	VXISI2CWrite
 6558              	.LVL950:
3764:Src/main.c    **** 	VXISI2CWrite(0xE4,0x3C);
 6559              		.loc 1 3764 0
 6560 0728 4721     		movs	r1, #71
 6561 072a E320     		movs	r0, #227
 6562 072c FFF7FEFF 		bl	VXISI2CWrite
 6563              	.LVL951:
3765:Src/main.c    **** 	VXISI2CWrite(0xE5,0x80);
 6564              		.loc 1 3765 0
 6565 0730 3C21     		movs	r1, #60
 6566 0732 E420     		movs	r0, #228
 6567 0734 FFF7FEFF 		bl	VXISI2CWrite
 6568              	.LVL952:
3766:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
 6569              		.loc 1 3766 0
 6570 0738 8021     		movs	r1, #128
 6571 073a E520     		movs	r0, #229
 6572 073c FFF7FEFF 		bl	VXISI2CWrite
 6573              	.LVL953:
3767:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
 6574              		.loc 1 3767 0
 6575 0740 0021     		movs	r1, #0
 6576 0742 E620     		movs	r0, #230
 6577 0744 FFF7FEFF 		bl	VXISI2CWrite
 6578              	.LVL954:
3768:Src/main.c    **** 	VXISI2CWrite(0xE8,0x00);
 6579              		.loc 1 3768 0
 6580 0748 0021     		movs	r1, #0
 6581 074a E720     		movs	r0, #231
 6582 074c FFF7FEFF 		bl	VXISI2CWrite
 6583              	.LVL955:
3769:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
 6584              		.loc 1 3769 0
 6585 0750 0021     		movs	r1, #0
 6586 0752 E820     		movs	r0, #232
 6587 0754 FFF7FEFF 		bl	VXISI2CWrite
 6588              	.LVL956:
3770:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
 6589              		.loc 1 3770 0
 6590 0758 0021     		movs	r1, #0
 6591 075a E920     		movs	r0, #233
 6592 075c FFF7FEFF 		bl	VXISI2CWrite
 6593              	.LVL957:
3771:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
 6594              		.loc 1 3771 0
 6595 0760 0021     		movs	r1, #0
 6596 0762 EA20     		movs	r0, #234
 6597 0764 FFF7FEFF 		bl	VXISI2CWrite
 6598              	.LVL958:
3772:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
 6599              		.loc 1 3772 0
 6600 0768 0021     		movs	r1, #0
 6601 076a EB20     		movs	r0, #235
ARM GAS  /tmp/cc8epWVM.s 			page 211


 6602 076c FFF7FEFF 		bl	VXISI2CWrite
 6603              	.LVL959:
3773:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
 6604              		.loc 1 3773 0
 6605 0770 8821     		movs	r1, #136
 6606 0772 EC20     		movs	r0, #236
 6607 0774 FFF7FEFF 		bl	VXISI2CWrite
 6608              	.LVL960:
3774:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
 6609              		.loc 1 3774 0
 6610 0778 0021     		movs	r1, #0
 6611 077a ED20     		movs	r0, #237
 6612 077c FFF7FEFF 		bl	VXISI2CWrite
 6613              	.LVL961:
3775:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
 6614              		.loc 1 3775 0
 6615 0780 0021     		movs	r1, #0
 6616 0782 EE20     		movs	r0, #238
 6617 0784 FFF7FEFF 		bl	VXISI2CWrite
 6618              	.LVL962:
3776:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
 6619              		.loc 1 3776 0
 6620 0788 0021     		movs	r1, #0
 6621 078a EF20     		movs	r0, #239
 6622 078c FFF7FEFF 		bl	VXISI2CWrite
 6623              	.LVL963:
3777:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
 6624              		.loc 1 3777 0
 6625 0790 3021     		movs	r1, #48
 6626 0792 F020     		movs	r0, #240
 6627 0794 FFF7FEFF 		bl	VXISI2CWrite
 6628              	.LVL964:
3778:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
 6629              		.loc 1 3778 0
 6630 0798 4321     		movs	r1, #67
 6631 079a F120     		movs	r0, #241
 6632 079c FFF7FEFF 		bl	VXISI2CWrite
 6633              	.LVL965:
3779:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
 6634              		.loc 1 3779 0
 6635 07a0 1F21     		movs	r1, #31
 6636 07a2 F220     		movs	r0, #242
 6637 07a4 FFF7FEFF 		bl	VXISI2CWrite
 6638              	.LVL966:
3780:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
 6639              		.loc 1 3780 0
 6640 07a8 1F21     		movs	r1, #31
 6641 07aa F320     		movs	r0, #243
 6642 07ac FFF7FEFF 		bl	VXISI2CWrite
 6643              	.LVL967:
3781:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
 6644              		.loc 1 3781 0
 6645 07b0 2221     		movs	r1, #34
 6646 07b2 F420     		movs	r0, #244
 6647 07b4 FFF7FEFF 		bl	VXISI2CWrite
 6648              	.LVL968:
3782:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
ARM GAS  /tmp/cc8epWVM.s 			page 212


 6649              		.loc 1 3782 0
 6650 07b8 7321     		movs	r1, #115
 6651 07ba F520     		movs	r0, #245
 6652 07bc FFF7FEFF 		bl	VXISI2CWrite
 6653              	.LVL969:
3783:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
 6654              		.loc 1 3783 0
 6655 07c0 5321     		movs	r1, #83
 6656 07c2 F620     		movs	r0, #246
 6657 07c4 FFF7FEFF 		bl	VXISI2CWrite
 6658              	.LVL970:
3784:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
 6659              		.loc 1 3784 0
 6660 07c8 8021     		movs	r1, #128
 6661 07ca F720     		movs	r0, #247
 6662 07cc FFF7FEFF 		bl	VXISI2CWrite
 6663              	.LVL971:
3785:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
 6664              		.loc 1 3785 0
 6665 07d0 0121     		movs	r1, #1
 6666 07d2 F820     		movs	r0, #248
 6667 07d4 FFF7FEFF 		bl	VXISI2CWrite
 6668              	.LVL972:
3786:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
 6669              		.loc 1 3786 0
 6670 07d8 0121     		movs	r1, #1
 6671 07da F920     		movs	r0, #249
 6672 07dc FFF7FEFF 		bl	VXISI2CWrite
 6673              	.LVL973:
3787:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
 6674              		.loc 1 3787 0
 6675 07e0 0021     		movs	r1, #0
 6676 07e2 FA20     		movs	r0, #250
 6677 07e4 FFF7FEFF 		bl	VXISI2CWrite
 6678              	.LVL974:
3788:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
 6679              		.loc 1 3788 0
 6680 07e8 0021     		movs	r1, #0
 6681 07ea FB20     		movs	r0, #251
 6682 07ec FFF7FEFF 		bl	VXISI2CWrite
 6683              	.LVL975:
3789:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
 6684              		.loc 1 3789 0
 6685 07f0 0021     		movs	r1, #0
 6686 07f2 FC20     		movs	r0, #252
 6687 07f4 FFF7FEFF 		bl	VXISI2CWrite
 6688              	.LVL976:
3790:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
 6689              		.loc 1 3790 0
 6690 07f8 7021     		movs	r1, #112
 6691 07fa FD20     		movs	r0, #253
 6692 07fc FFF7FEFF 		bl	VXISI2CWrite
 6693              	.LVL977:
3791:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
 6694              		.loc 1 3791 0
 6695 0800 4021     		movs	r1, #64
 6696 0802 FE20     		movs	r0, #254
ARM GAS  /tmp/cc8epWVM.s 			page 213


 6697 0804 FFF7FEFF 		bl	VXISI2CWrite
 6698              	.LVL978:
3792:Src/main.c    **** 
 6699              		.loc 1 3792 0
 6700 0808 0721     		movs	r1, #7
 6701 080a FF20     		movs	r0, #255
 6702 080c FFF7FEFF 		bl	VXISI2CWrite
 6703              	.LVL979:
3794:Src/main.c    **** /**
 6704              		.loc 1 3794 0
 6705 0810 08BD     		pop	{r3, pc}
 6706              		.cfi_endproc
 6707              	.LFE94:
 6709 0812 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 6710              		.align	1
 6711              		.global	SystemClock_Config
 6712              		.syntax unified
 6713              		.thumb
 6714              		.thumb_func
 6715              		.fpu softvfp
 6717              	SystemClock_Config:
 6718              	.LFB95:
3836:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 6719              		.loc 1 3836 0
 6720              		.cfi_startproc
 6721              		@ args = 0, pretend = 0, frame = 64
 6722              		@ frame_needed = 0, uses_anonymous_args = 0
 6723 0000 70B5     		push	{r4, r5, r6, lr}
 6724              	.LCFI43:
 6725              		.cfi_def_cfa_offset 16
 6726              		.cfi_offset 4, -16
 6727              		.cfi_offset 5, -12
 6728              		.cfi_offset 6, -8
 6729              		.cfi_offset 14, -4
 6730 0002 90B0     		sub	sp, sp, #64
 6731              	.LCFI44:
 6732              		.cfi_def_cfa_offset 80
3837:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 6733              		.loc 1 3837 0
 6734 0004 2022     		movs	r2, #32
 6735 0006 0021     		movs	r1, #0
 6736 0008 07A8     		add	r0, sp, #28
 6737 000a FFF7FEFF 		bl	memset
 6738              	.LVL980:
3838:Src/main.c    **** 
 6739              		.loc 1 3838 0
 6740 000e 0024     		movs	r4, #0
 6741 0010 0194     		str	r4, [sp, #4]
 6742 0012 0294     		str	r4, [sp, #8]
 6743 0014 0394     		str	r4, [sp, #12]
 6744 0016 0494     		str	r4, [sp, #16]
 6745 0018 0594     		str	r4, [sp, #20]
3842:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 6746              		.loc 1 3842 0
 6747 001a 0225     		movs	r5, #2
 6748 001c 0695     		str	r5, [sp, #24]
3843:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
ARM GAS  /tmp/cc8epWVM.s 			page 214


 6749              		.loc 1 3843 0
 6750 001e 0126     		movs	r6, #1
 6751 0020 0A96     		str	r6, [sp, #40]
3844:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 6752              		.loc 1 3844 0
 6753 0022 1023     		movs	r3, #16
 6754 0024 0B93     		str	r3, [sp, #44]
3845:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 6755              		.loc 1 3845 0
 6756 0026 0D95     		str	r5, [sp, #52]
3847:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 6757              		.loc 1 3847 0
 6758 0028 4FF4E013 		mov	r3, #1835008
 6759 002c 0F93     		str	r3, [sp, #60]
3848:Src/main.c    ****   {
 6760              		.loc 1 3848 0
 6761 002e 06A8     		add	r0, sp, #24
 6762 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 6763              	.LVL981:
3854:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 6764              		.loc 1 3854 0
 6765 0034 0F23     		movs	r3, #15
 6766 0036 0193     		str	r3, [sp, #4]
3856:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 6767              		.loc 1 3856 0
 6768 0038 0295     		str	r5, [sp, #8]
3857:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 6769              		.loc 1 3857 0
 6770 003a 0394     		str	r4, [sp, #12]
3858:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 6771              		.loc 1 3858 0
 6772 003c 0494     		str	r4, [sp, #16]
3859:Src/main.c    **** 
 6773              		.loc 1 3859 0
 6774 003e 0594     		str	r4, [sp, #20]
3861:Src/main.c    ****   {
 6775              		.loc 1 3861 0
 6776 0040 3146     		mov	r1, r6
 6777 0042 01A8     		add	r0, sp, #4
 6778 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 6779              	.LVL982:
3865:Src/main.c    **** #endif
 6780              		.loc 1 3865 0
 6781 0048 10B0     		add	sp, sp, #64
 6782              	.LCFI45:
 6783              		.cfi_def_cfa_offset 16
 6784              		@ sp needed
 6785 004a 70BD     		pop	{r4, r5, r6, pc}
 6786              		.cfi_endproc
 6787              	.LFE95:
 6789              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 6790              		.align	1
 6791              		.global	HAL_TIM_PeriodElapsedCallback
 6792              		.syntax unified
 6793              		.thumb
 6794              		.thumb_func
 6795              		.fpu softvfp
ARM GAS  /tmp/cc8epWVM.s 			page 215


 6797              	HAL_TIM_PeriodElapsedCallback:
 6798              	.LFB100:
4224:Src/main.c    **** 
4225:Src/main.c    **** /* USER CODE BEGIN 4 */
4226:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
4227:Src/main.c    **** {
 6799              		.loc 1 4227 0
 6800              		.cfi_startproc
 6801              		@ args = 0, pretend = 0, frame = 0
 6802              		@ frame_needed = 0, uses_anonymous_args = 0
 6803              		@ link register save eliminated.
 6804              	.LVL983:
4228:Src/main.c    **** //	BYTE TempKey=0;
4229:Src/main.c    **** 
4230:Src/main.c    ****     //10us
4231:Src/main.c    ****     if (htim->Instance == TIM3)
 6805              		.loc 1 4231 0
 6806 0000 0268     		ldr	r2, [r0]
 6807 0002 184B     		ldr	r3, .L222
 6808 0004 9A42     		cmp	r2, r3
 6809 0006 00D0     		beq	.L221
 6810              	.L218:
4232:Src/main.c    ****     {
4233:Src/main.c    **** 	
4234:Src/main.c    **** 	// Timer Counter 
4235:Src/main.c    **** 	tic02++;
4236:Src/main.c    **** 	tic03++;
4237:Src/main.c    **** 	tic04++;
4238:Src/main.c    **** //	tic05++;
4239:Src/main.c    **** 	
4240:Src/main.c    **** 	if(tic02>=100)   
4241:Src/main.c    **** 	{
4242:Src/main.c    **** 	g_usTimerCounter += 1;     ///per 10us  interrupt
4243:Src/main.c    **** 	tic02=0;
4244:Src/main.c    **** 	g_bNotifyTimer0Int=_TRUE;
4245:Src/main.c    **** 	}	
4246:Src/main.c    **** /*
4247:Src/main.c    **** 	if(tic05>=100)////1ms
4248:Src/main.c    **** 	{
4249:Src/main.c    **** 	ucTickCount++;	//for IT66021
4250:Src/main.c    **** 	tic05=0;
4251:Src/main.c    **** 	}
4252:Src/main.c    **** 	*/
4253:Src/main.c    ****         tim3count++ ;
4254:Src/main.c    ****         if (tim3count > 100000 )
4255:Src/main.c    ****         {
4256:Src/main.c    ****             tim3count = 0 ;
4257:Src/main.c    ****             //Test_tim3_printf_Flg  = 1;
4258:Src/main.c    ****             if (OSDStateFlg ==1 )
4259:Src/main.c    ****             {
4260:Src/main.c    ****                 //static tByte enOSD10secOff = 1;   //En16wNumberOSD=1
4261:Src/main.c    ****                 OSDSecCount++ ;
4262:Src/main.c    ****             }
4263:Src/main.c    ****         }
4264:Src/main.c    **** #if 0
4265:Src/main.c    **** 
4266:Src/main.c    **** 		//Kane @HS 2007 0814 Ver1.31>>>>
ARM GAS  /tmp/cc8epWVM.s 			page 216


4267:Src/main.c    **** 	//	if(Time5ms)
4268:Src/main.c    **** 	//	Time5ms--;
4269:Src/main.c    **** 		//if(Time5ms==0)
4270:Src/main.c    **** 		{
4271:Src/main.c    **** 			//if(HAL_GPIO_ReadPin(UP_KEY_GPIO_Port,UP_KEY_Pin)==_FALSE)
4272:Src/main.c    **** 			//	TempKey|=0x01;
4273:Src/main.c    **** 			//if(HAL_GPIO_ReadPin(DOWN_KEY_GPIO_Port,DOWN_KEY_Pin)==_FALSE)
4274:Src/main.c    **** 			//	TempKey|=0x02;
4275:Src/main.c    **** 			//TempKey=(( (P2&0x60) >> 5) & 0x03);
4276:Src/main.c    **** //			TempKey=((~GPIOB->IDR)&(UP_KEY_Pin|DOWN_KEY_Pin))>>14;
4277:Src/main.c    **** 			TempKey=(((~GPIOB->IDR)&(UP_KEY_Pin|DOWN_KEY_Pin))>>14)&0x03;
4278:Src/main.c    **** 
4279:Src/main.c    **** 			if(updn_reg[3] != TempKey )  // (( (P2&0x60) >> 5) & 0x03))    //Abel for HS SW key ......951102
4280:Src/main.c    **** 			{																						   
4281:Src/main.c    **** 				updn_reg[0] = updn_reg[1];																
4282:Src/main.c    **** 				updn_reg[1] = updn_reg[2];																
4283:Src/main.c    **** 				updn_reg[2] = updn_reg[3];																
4284:Src/main.c    **** 				updn_reg[3] = TempKey;// ( (P2&0x60) >> 5) & 0x03; 
4285:Src/main.c    **** 				ChangeKey = 1;		
4286:Src/main.c    **** 				//else			//william-v1.42-961130
4287:Src/main.c    **** 				//ChangeKey=0;	//william-v1.42-961130
4288:Src/main.c    **** 			//Time5ms = (48-8);
4289:Src/main.c    **** 			//Time5ms = (48+100);
4290:Src/main.c    **** 			
4291:Src/main.c    **** 				
4292:Src/main.c    **** 			}
4293:Src/main.c    **** 		}
4294:Src/main.c    **** 		#endif
4295:Src/main.c    **** #if 0
4296:Src/main.c    ****         if (IR_IRQFlg == 1)
4297:Src/main.c    ****         {
4298:Src/main.c    ****             if (PreIR_IRQ_Index == IR_IRQ_Index )
4299:Src/main.c    ****             {
4300:Src/main.c    ****                 IR_PlusTimeVal++ ;
4301:Src/main.c    **** 
4302:Src/main.c    ****                 //9.2xms + 4.5xms = 13.8ms
4303:Src/main.c    ****                 if (IR_PlusTimeVal > 15000)  //10us
4304:Src/main.c    ****                 {
4305:Src/main.c    **** //                    IR_PlusTimeVal = 0  ;
4306:Src/main.c    **** //                    PreIR_IRQ_Index = 0 ;
4307:Src/main.c    **** //                    IR_IRQ_Index = 0 ;
4308:Src/main.c    **** //                    IR_IRQFlg = 0 ;
4309:Src/main.c    **** 
4310:Src/main.c    ****                     if (IR_ShiftCount >= 32 )
4311:Src/main.c    ****                     {
4312:Src/main.c    ****                         u16Vendor = (tWord)(IR_4BYTE & 0x0000FFFF) ;
4313:Src/main.c    ****                         if (u16Vendor == IR_Vendor_Code_ )
4314:Src/main.c    ****                         {
4315:Src/main.c    ****                             u8IRcode = (tByte)((IR_4BYTE & 0x00FF0000 ) >> 16)  ;
4316:Src/main.c    ****                             u8IRCheckcode  = 0xFF - (tByte)((IR_4BYTE & 0xFF000000 ) >> 24)  ;
4317:Src/main.c    ****                             IR_END_Flg = 1 ;
4318:Src/main.c    ****                         }
4319:Src/main.c    ****                     }
4320:Src/main.c    **** 
4321:Src/main.c    ****                     IR_ShiftCount = 0 ;
4322:Src/main.c    ****                     IR_PlusTimeVal = 0  ;
4323:Src/main.c    ****                     PreIR_IRQ_Index = 0 ;
ARM GAS  /tmp/cc8epWVM.s 			page 217


4324:Src/main.c    ****                     IR_IRQ_Index = 0 ;
4325:Src/main.c    ****                     IR_IRQFlg = 0 ;
4326:Src/main.c    ****                     //memset(aIR_PlusTime , 0 , 40 )  ;
4327:Src/main.c    ****                     IR_4BYTE = 0 ;
4328:Src/main.c    ****                     IR_StartFlg = 0 ;
4329:Src/main.c    ****                 }
4330:Src/main.c    ****             }
4331:Src/main.c    ****             else
4332:Src/main.c    ****             {
4333:Src/main.c    ****                 if (PreIR_IRQ_Index <= 33)
4334:Src/main.c    ****                 {
4335:Src/main.c    ****                     //aIR_PlusTime[PreIR_IRQ_Index] = IR_PlusTimeVal ;
4336:Src/main.c    ****                     if (IR_StartFlg == 1 )
4337:Src/main.c    ****                     {
4338:Src/main.c    ****                         if (IR_PlusTimeVal >90 )
4339:Src/main.c    ****                         {
4340:Src/main.c    ****                             //IR_4BYTE = IR_4BYTE << 1 ;
4341:Src/main.c    ****                             IR_4BYTE = IR_4BYTE >> 1 ;
4342:Src/main.c    **** 
4343:Src/main.c    ****                             if (IR_PlusTimeVal > 160 )
4344:Src/main.c    ****                             {
4345:Src/main.c    ****                                 //IR_4BYTE = IR_4BYTE | 0x01 ;
4346:Src/main.c    ****                                 IR_4BYTE = IR_4BYTE | 0x80000000 ;
4347:Src/main.c    ****                             }
4348:Src/main.c    ****                             else
4349:Src/main.c    ****                             {
4350:Src/main.c    ****                                 //IR_4BYTE = IR_4BYTE | 0x01 ;
4351:Src/main.c    ****                             }
4352:Src/main.c    ****                             IR_ShiftCount++ ;
4353:Src/main.c    ****                         }
4354:Src/main.c    ****                     }
4355:Src/main.c    **** 
4356:Src/main.c    ****                     if((IR_PlusTimeVal >1250 )&&(IR_PlusTimeVal < 1450))
4357:Src/main.c    ****                     {
4358:Src/main.c    ****                         IR_StartFlg =1 ;
4359:Src/main.c    ****                     }
4360:Src/main.c    ****                 }
4361:Src/main.c    ****                 IR_PlusTimeVal = 0 ;
4362:Src/main.c    ****                 PreIR_IRQ_Index = IR_IRQ_Index ;
4363:Src/main.c    ****             }
4364:Src/main.c    ****         }
4365:Src/main.c    **** #endif
4366:Src/main.c    **** 		///////////////////////////////////////////
4367:Src/main.c    **** 	/*
4368:Src/main.c    **** 		TempKey=0;
4369:Src/main.c    **** 		if(HAL_GPIO_ReadPin(MENU_KEY_GPIO_Port,MENU_KEY_Pin)==_FALSE)
4370:Src/main.c    **** 			TempKey|=0x08;
4371:Src/main.c    **** 		if(HAL_GPIO_ReadPin(POWER_KEY_GPIO_Port,POWER_KEY_Pin)==_FALSE)
4372:Src/main.c    **** 			TempKey|=0x04;
4373:Src/main.c    **** 		if(HAL_GPIO_ReadPin(POWER_KEY_GPIO_Port,POWER_KEY_Pin)==_FALSE)
4374:Src/main.c    **** 			TempKey|=0x04;
4375:Src/main.c    **** 		if(HAL_GPIO_ReadPin(JUMP_KEY_GPIO_Port,JUMP_KEY_Pin)==_FALSE)
4376:Src/main.c    **** 			TempKey|=0x10;
4377:Src/main.c    **** 		if(HAL_GPIO_ReadPin(SOURCE_KEY_GPIO_Port,SOURCE_KEY_Pin)==_FALSE)
4378:Src/main.c    **** 			Te			mpKey|=0x80;
4379:Src/main.c    **** */
4380:Src/main.c    **** #if 0
ARM GAS  /tmp/cc8epWVM.s 			page 218


4381:Src/main.c    **** 	if(tic03==1000)
4382:Src/main.c    **** 		{
4383:Src/main.c    **** 		tic03=0;
4384:Src/main.c    **** 		if(_ReadKey() ) {
4385:Src/main.c    **** 			
4386:Src/main.c    **** 			if( keytic==3 ) {
4387:Src/main.c    **** 				Key = _ReadKey();
4388:Src/main.c    **** 				RepeatKey = 0;
4389:Src/main.c    **** 				KeyReady = 1;
4390:Src/main.c    **** 			}
4391:Src/main.c    **** 			else if( keytic==100 ) {
4392:Src/main.c    **** 				Key = _ReadKey();
4393:Src/main.c    **** 				KeyReady = 1;
4394:Src/main.c    **** 				keytic = 80-70;
4395:Src/main.c    **** 
4396:Src/main.c    **** 			}
4397:Src/main.c    **** 			keytic++;
4398:Src/main.c    **** 		
4399:Src/main.c    **** 		}
4400:Src/main.c    **** 		else 
4401:Src/main.c    **** 		{
4402:Src/main.c    **** 			keytic = 0;
4403:Src/main.c    **** 			Key=0;
4404:Src/main.c    **** 		}
4405:Src/main.c    **** 		}	
4406:Src/main.c    **** 
4407:Src/main.c    **** 	if(tic04==1000)
4408:Src/main.c    **** 		{
4409:Src/main.c    **** 		tic04=0;
4410:Src/main.c    **** 				if(TP_PRES_DOWN ) {
4411:Src/main.c    **** 					
4412:Src/main.c    **** 					if( tptic==3) {
4413:Src/main.c    **** 						TouchP=TP_PRES_DOWN;
4414:Src/main.c    **** 					}
4415:Src/main.c    **** 					else if(tptic==150)
4416:Src/main.c    **** 						{
4417:Src/main.c    **** 						TouchP=TP_PRES_DOWN;						
4418:Src/main.c    **** 						
4419:Src/main.c    **** 						tptic=4;						
4420:Src/main.c    **** 						}
4421:Src/main.c    **** 				tptic++;
4422:Src/main.c    **** 				}
4423:Src/main.c    **** 				else 
4424:Src/main.c    **** 				{
4425:Src/main.c    **** 					tptic = 0;
4426:Src/main.c    **** 					TouchP=0;
4427:Src/main.c    **** 				}
4428:Src/main.c    **** 
4429:Src/main.c    **** 		}
4430:Src/main.c    **** 	#endif
4431:Src/main.c    ****     }
4432:Src/main.c    **** }
 6811              		.loc 1 4432 0
 6812 0008 7047     		bx	lr
 6813              	.L221:
4235:Src/main.c    **** 	tic03++;
 6814              		.loc 1 4235 0
ARM GAS  /tmp/cc8epWVM.s 			page 219


 6815 000a 174A     		ldr	r2, .L222+4
 6816 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 6817 000e 0133     		adds	r3, r3, #1
 6818 0010 DBB2     		uxtb	r3, r3
 6819 0012 1370     		strb	r3, [r2]
4236:Src/main.c    **** 	tic04++;
 6820              		.loc 1 4236 0
 6821 0014 1549     		ldr	r1, .L222+8
 6822 0016 0A68     		ldr	r2, [r1]
 6823 0018 0132     		adds	r2, r2, #1
 6824 001a 0A60     		str	r2, [r1]
4237:Src/main.c    **** //	tic05++;
 6825              		.loc 1 4237 0
 6826 001c 1449     		ldr	r1, .L222+12
 6827 001e 0A68     		ldr	r2, [r1]
 6828 0020 0132     		adds	r2, r2, #1
 6829 0022 0A60     		str	r2, [r1]
4240:Src/main.c    **** 	{
 6830              		.loc 1 4240 0
 6831 0024 632B     		cmp	r3, #99
 6832 0026 09D9     		bls	.L220
4242:Src/main.c    **** 	tic02=0;
 6833              		.loc 1 4242 0
 6834 0028 124A     		ldr	r2, .L222+16
 6835 002a 1368     		ldr	r3, [r2]
 6836 002c 0133     		adds	r3, r3, #1
 6837 002e 1360     		str	r3, [r2]
4243:Src/main.c    **** 	g_bNotifyTimer0Int=_TRUE;
 6838              		.loc 1 4243 0
 6839 0030 0D4B     		ldr	r3, .L222+4
 6840 0032 0022     		movs	r2, #0
 6841 0034 1A70     		strb	r2, [r3]
4244:Src/main.c    **** 	}	
 6842              		.loc 1 4244 0
 6843 0036 104B     		ldr	r3, .L222+20
 6844 0038 0122     		movs	r2, #1
 6845 003a 1A60     		str	r2, [r3]
 6846              	.L220:
4253:Src/main.c    ****         if (tim3count > 100000 )
 6847              		.loc 1 4253 0
 6848 003c 0F4B     		ldr	r3, .L222+24
 6849 003e 1A68     		ldr	r2, [r3]
 6850 0040 0132     		adds	r2, r2, #1
 6851 0042 1A60     		str	r2, [r3]
4254:Src/main.c    ****         {
 6852              		.loc 1 4254 0
 6853 0044 1A68     		ldr	r2, [r3]
 6854 0046 0E4B     		ldr	r3, .L222+28
 6855 0048 9A42     		cmp	r2, r3
 6856 004a DDD9     		bls	.L218
4256:Src/main.c    ****             //Test_tim3_printf_Flg  = 1;
 6857              		.loc 1 4256 0
 6858 004c 0B4B     		ldr	r3, .L222+24
 6859 004e 0022     		movs	r2, #0
 6860 0050 1A60     		str	r2, [r3]
4258:Src/main.c    ****             {
 6861              		.loc 1 4258 0
ARM GAS  /tmp/cc8epWVM.s 			page 220


 6862 0052 0C4B     		ldr	r3, .L222+32
 6863 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6864 0056 012B     		cmp	r3, #1
 6865 0058 D6D1     		bne	.L218
4261:Src/main.c    ****             }
 6866              		.loc 1 4261 0
 6867 005a 0B4A     		ldr	r2, .L222+36
 6868 005c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 6869 005e 0133     		adds	r3, r3, #1
 6870 0060 1370     		strb	r3, [r2]
 6871              		.loc 1 4432 0
 6872 0062 D1E7     		b	.L218
 6873              	.L223:
 6874              		.align	2
 6875              	.L222:
 6876 0064 00040040 		.word	1073742848
 6877 0068 00000000 		.word	tic02
 6878 006c 00000000 		.word	tic03
 6879 0070 00000000 		.word	tic04
 6880 0074 00000000 		.word	g_usTimerCounter
 6881 0078 00000000 		.word	g_bNotifyTimer0Int
 6882 007c 00000000 		.word	.LANCHOR22
 6883 0080 A0860100 		.word	100000
 6884 0084 00000000 		.word	.LANCHOR14
 6885 0088 00000000 		.word	.LANCHOR15
 6886              		.cfi_endproc
 6887              	.LFE100:
 6889              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 6890              		.align	1
 6891              		.global	HAL_UART_RxCpltCallback
 6892              		.syntax unified
 6893              		.thumb
 6894              		.thumb_func
 6895              		.fpu softvfp
 6897              	HAL_UART_RxCpltCallback:
 6898              	.LFB101:
4433:Src/main.c    **** 
4434:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
4435:Src/main.c    **** {
 6899              		.loc 1 4435 0
 6900              		.cfi_startproc
 6901              		@ args = 0, pretend = 0, frame = 0
 6902              		@ frame_needed = 0, uses_anonymous_args = 0
 6903              	.LVL984:
 6904 0000 10B5     		push	{r4, lr}
 6905              	.LCFI46:
 6906              		.cfi_def_cfa_offset 8
 6907              		.cfi_offset 4, -8
 6908              		.cfi_offset 14, -4
 6909 0002 0446     		mov	r4, r0
4436:Src/main.c    ****     if (huart->Instance == USART1)	//current UART
 6910              		.loc 1 4436 0
 6911 0004 0268     		ldr	r2, [r0]
 6912 0006 184B     		ldr	r3, .L232
 6913 0008 9A42     		cmp	r2, r3
 6914 000a 04D0     		beq	.L230
 6915              	.LVL985:
ARM GAS  /tmp/cc8epWVM.s 			page 221


 6916              	.L225:
4437:Src/main.c    ****     {
4438:Src/main.c    **** 
4439:Src/main.c    **** /*
4440:Src/main.c    **** 		if (Rx_indx==0)
4441:Src/main.c    ****         {
4442:Src/main.c    ****             memset(Rx_Buffer , 0  , RXBUFMAX ) ;
4443:Src/main.c    ****         }
4444:Src/main.c    **** 
4445:Src/main.c    ****         if (Rx_data[0] >= 0x30)
4446:Src/main.c    ****         {
4447:Src/main.c    ****             Rx_Buffer[Rx_indx]=Rx_data[0];	//add data to Rx_Buffer
4448:Src/main.c    ****             Rx_indx++ ;
4449:Src/main.c    ****             if (Rx_indx >= RXBUFMAX )
4450:Src/main.c    ****                 Rx_indx = 0 ;
4451:Src/main.c    ****         }
4452:Src/main.c    ****         else if ((Rx_data[0] == 0x0d) || (Rx_data[0] == 0xa))//if received data = 13
4453:Src/main.c    ****         {
4454:Src/main.c    ****             RxBufIndex = Rx_indx ;
4455:Src/main.c    ****             memcpy(gRxbuf ,Rx_Buffer, Rx_indx ) ;
4456:Src/main.c    ****             Rx_indx=0;
4457:Src/main.c    ****             Transfer_cplt=1;//transfer complete, data is ready to read
4458:Src/main.c    ****         }
4459:Src/main.c    **** */
4460:Src/main.c    **** #if 1
4461:Src/main.c    ****        RS_buf [RS_in++] = Rx_data[0];//USART_ReceiveData(USART1);	
4462:Src/main.c    ****     if( RS_in >= BUF_MAX)  RS_in = 0;
4463:Src/main.c    **** 		
4464:Src/main.c    **** 		//RS_tx(Rx_data[0]);
4465:Src/main.c    **** 
4466:Src/main.c    **** 
4467:Src/main.c    **** //HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data, 1);	//activate UART receive interrupt every time
4468:Src/main.c    **** 	HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data, 1);	 //activate UART receive interrupt every time
4469:Src/main.c    **** 	#endif
4470:Src/main.c    ****     }
4471:Src/main.c    **** #if 1
4472:Src/main.c    **** if (huart->Instance == USART2)	//current UART2
 6917              		.loc 1 4472 0
 6918 000c 2268     		ldr	r2, [r4]
 6919 000e 174B     		ldr	r3, .L232+4
 6920 0010 9A42     		cmp	r2, r3
 6921 0012 14D0     		beq	.L231
 6922              	.L224:
4473:Src/main.c    ****     {
4474:Src/main.c    **** 
4475:Src/main.c    ****        RS2_buf [RS2_in++] = Rx2_data[0];//USART_ReceiveData(USART1);	
4476:Src/main.c    ****     if( RS2_in >= TOA_BUF_MAX)  RS2_in = 0;
4477:Src/main.c    **** 	HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	 //activate UART receive interrupt every time
4478:Src/main.c    ****     }	
4479:Src/main.c    **** #endif
4480:Src/main.c    **** }
 6923              		.loc 1 4480 0
 6924 0014 10BD     		pop	{r4, pc}
 6925              	.LVL986:
 6926              	.L230:
4461:Src/main.c    ****     if( RS_in >= BUF_MAX)  RS_in = 0;
 6927              		.loc 1 4461 0
ARM GAS  /tmp/cc8epWVM.s 			page 222


 6928 0016 1649     		ldr	r1, .L232+8
 6929 0018 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 6930 001a 531C     		adds	r3, r2, #1
 6931 001c DBB2     		uxtb	r3, r3
 6932 001e 0B70     		strb	r3, [r1]
 6933 0020 1449     		ldr	r1, .L232+12
 6934 0022 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 6935              	.LVL987:
 6936 0024 1449     		ldr	r1, .L232+16
 6937 0026 8854     		strb	r0, [r1, r2]
4462:Src/main.c    **** 		
 6938              		.loc 1 4462 0
 6939 0028 1D2B     		cmp	r3, #29
 6940 002a 02D9     		bls	.L226
4462:Src/main.c    **** 		
 6941              		.loc 1 4462 0 is_stmt 0 discriminator 1
 6942 002c 104B     		ldr	r3, .L232+8
 6943 002e 0022     		movs	r2, #0
 6944 0030 1A70     		strb	r2, [r3]
 6945              	.L226:
4468:Src/main.c    **** 	#endif
 6946              		.loc 1 4468 0 is_stmt 1
 6947 0032 0122     		movs	r2, #1
 6948 0034 0F49     		ldr	r1, .L232+12
 6949 0036 1148     		ldr	r0, .L232+20
 6950 0038 FFF7FEFF 		bl	HAL_UART_Receive_IT
 6951              	.LVL988:
 6952 003c E6E7     		b	.L225
 6953              	.L231:
4475:Src/main.c    ****     if( RS2_in >= TOA_BUF_MAX)  RS2_in = 0;
 6954              		.loc 1 4475 0
 6955 003e 1049     		ldr	r1, .L232+24
 6956 0040 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 6957 0042 531C     		adds	r3, r2, #1
 6958 0044 DBB2     		uxtb	r3, r3
 6959 0046 0B70     		strb	r3, [r1]
 6960 0048 0E49     		ldr	r1, .L232+28
 6961 004a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 6962 004c 0E49     		ldr	r1, .L232+32
 6963 004e 8854     		strb	r0, [r1, r2]
4476:Src/main.c    **** 	HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	 //activate UART receive interrupt every time
 6964              		.loc 1 4476 0
 6965 0050 C72B     		cmp	r3, #199
 6966 0052 02D9     		bls	.L228
4476:Src/main.c    **** 	HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	 //activate UART receive interrupt every time
 6967              		.loc 1 4476 0 is_stmt 0 discriminator 1
 6968 0054 0A4B     		ldr	r3, .L232+24
 6969 0056 0022     		movs	r2, #0
 6970 0058 1A70     		strb	r2, [r3]
 6971              	.L228:
4477:Src/main.c    ****     }	
 6972              		.loc 1 4477 0 is_stmt 1
 6973 005a 0122     		movs	r2, #1
 6974 005c 0949     		ldr	r1, .L232+28
 6975 005e 0B48     		ldr	r0, .L232+36
 6976 0060 FFF7FEFF 		bl	HAL_UART_Receive_IT
 6977              	.LVL989:
ARM GAS  /tmp/cc8epWVM.s 			page 223


 6978              		.loc 1 4480 0
 6979 0064 D6E7     		b	.L224
 6980              	.L233:
 6981 0066 00BF     		.align	2
 6982              	.L232:
 6983 0068 00380140 		.word	1073821696
 6984 006c 00440040 		.word	1073759232
 6985 0070 00000000 		.word	RS_in
 6986 0074 00000000 		.word	.LANCHOR23
 6987 0078 00000000 		.word	RS_buf
 6988 007c 00000000 		.word	huart1
 6989 0080 00000000 		.word	RS2_in
 6990 0084 00000000 		.word	.LANCHOR24
 6991 0088 00000000 		.word	RS2_buf
 6992 008c 00000000 		.word	huart2
 6993              		.cfi_endproc
 6994              	.LFE101:
 6996              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 6997              		.align	1
 6998              		.global	HAL_GPIO_EXTI_Callback
 6999              		.syntax unified
 7000              		.thumb
 7001              		.thumb_func
 7002              		.fpu softvfp
 7004              	HAL_GPIO_EXTI_Callback:
 7005              	.LFB102:
4481:Src/main.c    **** 
4482:Src/main.c    **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
4483:Src/main.c    **** {
 7006              		.loc 1 4483 0
 7007              		.cfi_startproc
 7008              		@ args = 0, pretend = 0, frame = 0
 7009              		@ frame_needed = 0, uses_anonymous_args = 0
 7010              		@ link register save eliminated.
 7011              	.LVL990:
4484:Src/main.c    **** /*
4485:Src/main.c    ****     if(GPIO_Pin == IR_IN_Pin  )
4486:Src/main.c    ****     {
4487:Src/main.c    ****         IR_IRQFlg =1 ;
4488:Src/main.c    **** 
4489:Src/main.c    ****         IR_IRQ_Index++ ;
4490:Src/main.c    ****     }
4491:Src/main.c    **** 	*/
4492:Src/main.c    **** }
 7012              		.loc 1 4492 0
 7013 0000 7047     		bx	lr
 7014              		.cfi_endproc
 7015              	.LFE102:
 7017              		.section	.text.HS_Select_Win,"ax",%progbits
 7018              		.align	1
 7019              		.global	HS_Select_Win
 7020              		.syntax unified
 7021              		.thumb
 7022              		.thumb_func
 7023              		.fpu softvfp
 7025              	HS_Select_Win:
 7026              	.LFB103:
ARM GAS  /tmp/cc8epWVM.s 			page 224


4493:Src/main.c    **** 
4494:Src/main.c    **** void HS_Select_Win(unsigned char WinNum)	//20201214-02
4495:Src/main.c    **** {
 7027              		.loc 1 4495 0
 7028              		.cfi_startproc
 7029              		@ args = 0, pretend = 0, frame = 0
 7030              		@ frame_needed = 0, uses_anonymous_args = 0
 7031              	.LVL991:
 7032 0000 38B5     		push	{r3, r4, r5, lr}
 7033              	.LCFI47:
 7034              		.cfi_def_cfa_offset 16
 7035              		.cfi_offset 3, -16
 7036              		.cfi_offset 4, -12
 7037              		.cfi_offset 5, -8
 7038              		.cfi_offset 14, -4
4496:Src/main.c    **** 
4497:Src/main.c    **** 	
4498:Src/main.c    **** 	switch (WinNum)
 7039              		.loc 1 4498 0
 7040 0002 0128     		cmp	r0, #1
 7041 0004 34D0     		beq	.L237
4499:Src/main.c    **** 	{
4500:Src/main.c    **** 		default:
4501:Src/main.c    **** 		case 0:
4502:Src/main.c    **** 			VXISI2CWrite( 0x32, 0x00 );
 7042              		.loc 1 4502 0
 7043 0006 0021     		movs	r1, #0
 7044 0008 3220     		movs	r0, #50
 7045              	.LVL992:
 7046 000a FFF7FEFF 		bl	VXISI2CWrite
 7047              	.LVL993:
4503:Src/main.c    **** 			VXISI2CWrite( 0x19, 0x00 );
 7048              		.loc 1 4503 0
 7049 000e 0021     		movs	r1, #0
 7050 0010 1920     		movs	r0, #25
 7051 0012 FFF7FEFF 		bl	VXISI2CWrite
 7052              	.LVL994:
4504:Src/main.c    **** 			SelectInputMode=0;
 7053              		.loc 1 4504 0
 7054 0016 0024     		movs	r4, #0
 7055 0018 404B     		ldr	r3, .L258
 7056 001a 1C70     		strb	r4, [r3]
4505:Src/main.c    **** 			printf("Selected window 0\r\n");
 7057              		.loc 1 4505 0
 7058 001c 4048     		ldr	r0, .L258+4
 7059 001e FFF7FEFF 		bl	puts
 7060              	.LVL995:
4506:Src/main.c    **** 			pVS4210_MutiWindows1.OutputMode =VS4210_1080P_MODE0_w0;						
 7061              		.loc 1 4506 0
 7062 0022 4048     		ldr	r0, .L258+8
 7063 0024 0470     		strb	r4, [r0]
4507:Src/main.c    **** 			pVS4210_MutiWindows1.WindowMap.WMap0 = 1 ;			
 7064              		.loc 1 4507 0
 7065 0026 0123     		movs	r3, #1
 7066 0028 4370     		strb	r3, [r0, #1]
4508:Src/main.c    **** 			VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;	
 7067              		.loc 1 4508 0
ARM GAS  /tmp/cc8epWVM.s 			page 225


 7068 002a FFF7FEFF 		bl	VS4210_SetMutiWindows
 7069              	.LVL996:
4509:Src/main.c    **** 			//#if (_External_Sync==ON)
4510:Src/main.c    **** 			//VXISI2CWrite( 0x32, 0x00 );
4511:Src/main.c    **** 			  VXISI2CWrite( 0x19, 0x00 );
 7070              		.loc 1 4511 0
 7071 002e 2146     		mov	r1, r4
 7072 0030 1920     		movs	r0, #25
 7073 0032 FFF7FEFF 		bl	VXISI2CWrite
 7074              	.LVL997:
4512:Src/main.c    **** 			//#endif
4513:Src/main.c    **** 			//msleep(100) ;
4514:Src/main.c    **** 		//	VXISI2CWrite( 0x32, 0x80 );
4515:Src/main.c    **** 			if(CHECK_HDMI720P50())
 7075              		.loc 1 4515 0
 7076 0036 FFF7FEFF 		bl	CHECK_HDMI720P50
 7077              	.LVL998:
 7078 003a 40B9     		cbnz	r0, .L249
4516:Src/main.c    **** 			{
4517:Src/main.c    **** 				dbg_Printf("ch1, HDMI=720P50  no support\r\n") ;
4518:Src/main.c    **** 				Set_Video_Loss_OSD(0,ON);
4519:Src/main.c    **** 			}
4520:Src/main.c    **** 			else
4521:Src/main.c    **** 			{
4522:Src/main.c    **** 				if(bSignal[0]==1)
 7079              		.loc 1 4522 0
 7080 003c 3A4B     		ldr	r3, .L258+12
 7081 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7082 0040 012B     		cmp	r3, #1
 7083 0042 10D0     		beq	.L250
4523:Src/main.c    **** 				{
4524:Src/main.c    **** 				Set_Video_Loss_OSD(0,OFF);
4525:Src/main.c    **** 				}
4526:Src/main.c    **** 				else
4527:Src/main.c    **** 				{
4528:Src/main.c    **** 				Set_Video_Loss_OSD(0,ON);
 7084              		.loc 1 4528 0
 7085 0044 0121     		movs	r1, #1
 7086 0046 0020     		movs	r0, #0
 7087 0048 FFF7FEFF 		bl	Set_Video_Loss_OSD
 7088              	.LVL999:
 7089 004c 2FE0     		b	.L239
 7090              	.L249:
4517:Src/main.c    **** 				Set_Video_Loss_OSD(0,ON);
 7091              		.loc 1 4517 0
 7092 004e 41F2A513 		movw	r3, #4517
 7093 0052 364A     		ldr	r2, .L258+16
 7094 0054 3649     		ldr	r1, .L258+20
 7095 0056 3748     		ldr	r0, .L258+24
 7096 0058 FFF7FEFF 		bl	printf
 7097              	.LVL1000:
4518:Src/main.c    **** 			}
 7098              		.loc 1 4518 0
 7099 005c 0121     		movs	r1, #1
 7100 005e 2046     		mov	r0, r4
 7101 0060 FFF7FEFF 		bl	Set_Video_Loss_OSD
 7102              	.LVL1001:
ARM GAS  /tmp/cc8epWVM.s 			page 226


 7103 0064 23E0     		b	.L239
 7104              	.L250:
4524:Src/main.c    **** 				}
 7105              		.loc 1 4524 0
 7106 0066 0021     		movs	r1, #0
 7107 0068 0846     		mov	r0, r1
 7108 006a FFF7FEFF 		bl	Set_Video_Loss_OSD
 7109              	.LVL1002:
 7110 006e 1EE0     		b	.L239
 7111              	.LVL1003:
 7112              	.L237:
4529:Src/main.c    **** 				}
4530:Src/main.c    **** 			}
4531:Src/main.c    **** 			#if (_External_Sync==OFF)
4532:Src/main.c    **** 				//SET_HDMI_SYNC_PARA();			
4533:Src/main.c    **** 			#endif
4534:Src/main.c    **** 			break;
4535:Src/main.c    **** 		
4536:Src/main.c    **** 		case 1:
4537:Src/main.c    **** 			VXISI2CWrite( 0x32, 0x00 );
 7113              		.loc 1 4537 0
 7114 0070 0021     		movs	r1, #0
 7115 0072 3220     		movs	r0, #50
 7116              	.LVL1004:
 7117 0074 FFF7FEFF 		bl	VXISI2CWrite
 7118              	.LVL1005:
4538:Src/main.c    **** 			SelectInputMode=1;
 7119              		.loc 1 4538 0
 7120 0078 284C     		ldr	r4, .L258
 7121 007a 0125     		movs	r5, #1
 7122 007c 2570     		strb	r5, [r4]
4539:Src/main.c    **** 			printf("Selected window 1\r\n");
 7123              		.loc 1 4539 0
 7124 007e 2E48     		ldr	r0, .L258+28
 7125 0080 FFF7FEFF 		bl	puts
 7126              	.LVL1006:
4540:Src/main.c    **** 			pVS4210_MutiWindows1.OutputMode =VS4210_1080P_MODE0_w1;
 7127              		.loc 1 4540 0
 7128 0084 2748     		ldr	r0, .L258+8
 7129 0086 0570     		strb	r5, [r0]
4541:Src/main.c    **** 			pVS4210_MutiWindows1.WindowMap.WMap0 = 2 ;
 7130              		.loc 1 4541 0
 7131 0088 0223     		movs	r3, #2
 7132 008a 4370     		strb	r3, [r0, #1]
4542:Src/main.c    **** 			VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;		
 7133              		.loc 1 4542 0
 7134 008c FFF7FEFF 		bl	VS4210_SetMutiWindows
 7135              	.LVL1007:
4543:Src/main.c    **** 			VXISI2CWrite( 0x19, 0x04 );
 7136              		.loc 1 4543 0
 7137 0090 0421     		movs	r1, #4
 7138 0092 1920     		movs	r0, #25
 7139 0094 FFF7FEFF 		bl	VXISI2CWrite
 7140              	.LVL1008:
4544:Src/main.c    **** 
4545:Src/main.c    **** 		if(SelectInputMode==1)
 7141              		.loc 1 4545 0
ARM GAS  /tmp/cc8epWVM.s 			page 227


 7142 0098 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 7143 009a AB42     		cmp	r3, r5
 7144 009c 0ED0     		beq	.L251
 7145              	.L241:
4546:Src/main.c    **** 		{
4547:Src/main.c    **** 			if(  mode[0]==7 )
4548:Src/main.c    **** 				{
4549:Src/main.c    **** 			
4550:Src/main.c    **** 				TP_bt1120_1080P_1080P_mode0_w0();
4551:Src/main.c    **** 					printf("(=1)");
4552:Src/main.c    **** 				//VXISI2CWrite(0x10,0x01);
4553:Src/main.c    **** 				//VXISI2CWrite(0x9c,0x0A);
4554:Src/main.c    **** 				Set_Video_Loss_OSD(1,ON);
4555:Src/main.c    **** 
4556:Src/main.c    **** 			}
4557:Src/main.c    **** 			else
4558:Src/main.c    **** 				{
4559:Src/main.c    **** 				
4560:Src/main.c    **** 				printf("(=2)");
4561:Src/main.c    **** 								if(TP_InputMode==5)
4562:Src/main.c    **** 									{
4563:Src/main.c    **** 									TP_bt1120_720P_1080P_mode0_w0();
4564:Src/main.c    **** 									}
4565:Src/main.c    **** 								else if(TP_InputMode==6)
4566:Src/main.c    **** 									{
4567:Src/main.c    **** 									TP_bt1120_1080P_1080P_mode0_w0();
4568:Src/main.c    **** 									}
4569:Src/main.c    **** 								else if(TP_InputMode==0)
4570:Src/main.c    **** 									{
4571:Src/main.c    **** 									TP_bt1120_NTSC_1080P_mode0_w0();
4572:Src/main.c    **** 									}
4573:Src/main.c    **** 								else if(TP_InputMode==1)
4574:Src/main.c    **** 									{
4575:Src/main.c    **** 									TP_bt1120_PAL_1080P_mode0_w0();
4576:Src/main.c    **** 									}
4577:Src/main.c    **** 								else
4578:Src/main.c    **** 									VXISI2CWrite(0x10,0x01);
4579:Src/main.c    **** 
4580:Src/main.c    **** 										
4581:Src/main.c    **** 				}
4582:Src/main.c    **** 
4583:Src/main.c    **** 			#if (_External_Sync==OFF)
4584:Src/main.c    **** 			//SET_AHD_SYNC_PARA();
4585:Src/main.c    **** 			#endif
4586:Src/main.c    **** 		}	
4587:Src/main.c    **** 		// msleep(100) ;
4588:Src/main.c    **** 
4589:Src/main.c    **** 
4590:Src/main.c    **** 
4591:Src/main.c    **** 		
4592:Src/main.c    **** 			if(bSignal[1]==1)
 7146              		.loc 1 4592 0
 7147 009e 224B     		ldr	r3, .L258+12
 7148 00a0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 7149 00a2 012B     		cmp	r3, #1
 7150 00a4 35D0     		beq	.L252
4593:Src/main.c    **** 				Set_Video_Loss_OSD(1,OFF);
ARM GAS  /tmp/cc8epWVM.s 			page 228


4594:Src/main.c    **** 			else
4595:Src/main.c    **** 				Set_Video_Loss_OSD(1,ON);
 7151              		.loc 1 4595 0
 7152 00a6 0121     		movs	r1, #1
 7153 00a8 0846     		mov	r0, r1
 7154 00aa FFF7FEFF 		bl	Set_Video_Loss_OSD
 7155              	.LVL1009:
 7156              	.L239:
4596:Src/main.c    **** 			
4597:Src/main.c    **** 			break;
4598:Src/main.c    **** 		}
4599:Src/main.c    **** 	
4600:Src/main.c    **** 	
4601:Src/main.c    **** 
4602:Src/main.c    ****   		OSDSecCount = 0 ;
 7157              		.loc 1 4602 0
 7158 00ae 234B     		ldr	r3, .L258+32
 7159 00b0 0022     		movs	r2, #0
 7160 00b2 1A70     		strb	r2, [r3]
4603:Src/main.c    **** 		   OSDStateFlg = 1 ;		
 7161              		.loc 1 4603 0
 7162 00b4 224B     		ldr	r3, .L258+36
 7163 00b6 0122     		movs	r2, #1
 7164 00b8 1A70     		strb	r2, [r3]
4604:Src/main.c    **** }
 7165              		.loc 1 4604 0
 7166 00ba 38BD     		pop	{r3, r4, r5, pc}
 7167              	.L251:
4547:Src/main.c    **** 				{
 7168              		.loc 1 4547 0
 7169 00bc 214B     		ldr	r3, .L258+40
 7170 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7171 00c0 072B     		cmp	r3, #7
 7172 00c2 10D0     		beq	.L253
4560:Src/main.c    **** 								if(TP_InputMode==5)
 7173              		.loc 1 4560 0
 7174 00c4 2048     		ldr	r0, .L258+44
 7175 00c6 FFF7FEFF 		bl	printf
 7176              	.LVL1010:
4561:Src/main.c    **** 									{
 7177              		.loc 1 4561 0
 7178 00ca 204B     		ldr	r3, .L258+48
 7179 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7180 00ce 052B     		cmp	r3, #5
 7181 00d0 13D0     		beq	.L254
4565:Src/main.c    **** 									{
 7182              		.loc 1 4565 0
 7183 00d2 062B     		cmp	r3, #6
 7184 00d4 14D0     		beq	.L255
4569:Src/main.c    **** 									{
 7185              		.loc 1 4569 0
 7186 00d6 B3B1     		cbz	r3, .L256
4573:Src/main.c    **** 									{
 7187              		.loc 1 4573 0
 7188 00d8 012B     		cmp	r3, #1
 7189 00da 17D0     		beq	.L257
4578:Src/main.c    **** 
ARM GAS  /tmp/cc8epWVM.s 			page 229


 7190              		.loc 1 4578 0
 7191 00dc 0121     		movs	r1, #1
 7192 00de 1020     		movs	r0, #16
 7193 00e0 FFF7FEFF 		bl	VXISI2CWrite
 7194              	.LVL1011:
 7195 00e4 DBE7     		b	.L241
 7196              	.L253:
4550:Src/main.c    **** 					printf("(=1)");
 7197              		.loc 1 4550 0
 7198 00e6 FFF7FEFF 		bl	TP_bt1120_1080P_1080P_mode0_w0
 7199              	.LVL1012:
4551:Src/main.c    **** 				//VXISI2CWrite(0x10,0x01);
 7200              		.loc 1 4551 0
 7201 00ea 1948     		ldr	r0, .L258+52
 7202 00ec FFF7FEFF 		bl	printf
 7203              	.LVL1013:
4554:Src/main.c    **** 
 7204              		.loc 1 4554 0
 7205 00f0 2946     		mov	r1, r5
 7206 00f2 2846     		mov	r0, r5
 7207 00f4 FFF7FEFF 		bl	Set_Video_Loss_OSD
 7208              	.LVL1014:
 7209 00f8 D1E7     		b	.L241
 7210              	.L254:
4563:Src/main.c    **** 									}
 7211              		.loc 1 4563 0
 7212 00fa FFF7FEFF 		bl	TP_bt1120_720P_1080P_mode0_w0
 7213              	.LVL1015:
 7214 00fe CEE7     		b	.L241
 7215              	.L255:
4567:Src/main.c    **** 									}
 7216              		.loc 1 4567 0
 7217 0100 FFF7FEFF 		bl	TP_bt1120_1080P_1080P_mode0_w0
 7218              	.LVL1016:
 7219 0104 CBE7     		b	.L241
 7220              	.L256:
4571:Src/main.c    **** 									}
 7221              		.loc 1 4571 0
 7222 0106 FFF7FEFF 		bl	TP_bt1120_NTSC_1080P_mode0_w0
 7223              	.LVL1017:
 7224 010a C8E7     		b	.L241
 7225              	.L257:
4575:Src/main.c    **** 									}
 7226              		.loc 1 4575 0
 7227 010c FFF7FEFF 		bl	TP_bt1120_PAL_1080P_mode0_w0
 7228              	.LVL1018:
 7229 0110 C5E7     		b	.L241
 7230              	.L252:
4593:Src/main.c    **** 			else
 7231              		.loc 1 4593 0
 7232 0112 0021     		movs	r1, #0
 7233 0114 0120     		movs	r0, #1
 7234 0116 FFF7FEFF 		bl	Set_Video_Loss_OSD
 7235              	.LVL1019:
 7236 011a C8E7     		b	.L239
 7237              	.L259:
 7238              		.align	2
ARM GAS  /tmp/cc8epWVM.s 			page 230


 7239              	.L258:
 7240 011c 00000000 		.word	.LANCHOR17
 7241 0120 00000000 		.word	.LC38
 7242 0124 00000000 		.word	pVS4210_MutiWindows1
 7243 0128 00000000 		.word	.LANCHOR9
 7244 012c 00000000 		.word	.LANCHOR25
 7245 0130 00000000 		.word	.LC20
 7246 0134 14000000 		.word	.LC39
 7247 0138 3C000000 		.word	.LC40
 7248 013c 00000000 		.word	.LANCHOR15
 7249 0140 00000000 		.word	.LANCHOR14
 7250 0144 00000000 		.word	mode
 7251 0148 58000000 		.word	.LC42
 7252 014c 00000000 		.word	TP_InputMode
 7253 0150 50000000 		.word	.LC41
 7254              		.cfi_endproc
 7255              	.LFE103:
 7257              		.section	.text.main_loop,"ax",%progbits
 7258              		.align	1
 7259              		.global	main_loop
 7260              		.syntax unified
 7261              		.thumb
 7262              		.thumb_func
 7263              		.fpu softvfp
 7265              	main_loop:
 7266              	.LFB86:
2061:Src/main.c    **** 
 7267              		.loc 1 2061 0
 7268              		.cfi_startproc
 7269              		@ Volatile: function does not return.
 7270              		@ args = 0, pretend = 0, frame = 0
 7271              		@ frame_needed = 0, uses_anonymous_args = 0
 7272 0000 00B5     		push	{lr}
 7273              	.LCFI48:
 7274              		.cfi_def_cfa_offset 4
 7275              		.cfi_offset 14, -4
 7276 0002 83B0     		sub	sp, sp, #12
 7277              	.LCFI49:
 7278              		.cfi_def_cfa_offset 16
 7279 0004 67E0     		b	.L276
 7280              	.L278:
2081:Src/main.c    **** 		HDMITX_DevLoopProc() ;
 7281              		.loc 1 2081 0
 7282 0006 1346     		mov	r3, r2
 7283 0008 0022     		movs	r2, #0
 7284 000a 1A70     		strb	r2, [r3]
2082:Src/main.c    **** 	}
 7285              		.loc 1 2082 0
 7286 000c FFF7FEFF 		bl	HDMITX_DevLoopProc
 7287              	.LVL1020:
 7288 0010 70E0     		b	.L262
 7289              	.L279:
2117:Src/main.c    **** 			   if (gMode0LoopSecCount > gMode0LoopSecCmpVal)
 7290              		.loc 1 2117 0
 7291 0012 5E4A     		ldr	r2, .L284
 7292 0014 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 7293 0016 0133     		adds	r3, r3, #1
ARM GAS  /tmp/cc8epWVM.s 			page 231


 7294 0018 DBB2     		uxtb	r3, r3
 7295 001a 1370     		strb	r3, [r2]
2118:Src/main.c    **** 			   {
 7296              		.loc 1 2118 0
 7297 001c 5C4A     		ldr	r2, .L284+4
 7298 001e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7299 0020 9342     		cmp	r3, r2
 7300 0022 40F28580 		bls	.L265
2120:Src/main.c    **** 				   pVS4210_MutiWindows1.OutputMode = VS4210_FULL_MODE0 ;
 7301              		.loc 1 2120 0
 7302 0026 0021     		movs	r1, #0
 7303 0028 584B     		ldr	r3, .L284
 7304 002a 1970     		strb	r1, [r3]
2121:Src/main.c    **** 				   if (pVS4210_MutiWindows1.WindowMap.WMap0 < 4)
 7305              		.loc 1 2121 0
 7306 002c 594B     		ldr	r3, .L284+8
 7307 002e 1970     		strb	r1, [r3]
2122:Src/main.c    **** 				   {
 7308              		.loc 1 2122 0
 7309 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 7310 0032 032B     		cmp	r3, #3
 7311 0034 14D8     		bhi	.L266
2124:Src/main.c    **** 				   }
 7312              		.loc 1 2124 0
 7313 0036 0133     		adds	r3, r3, #1
 7314 0038 5649     		ldr	r1, .L284+8
 7315 003a 4B70     		strb	r3, [r1, #1]
 7316              	.L267:
2129:Src/main.c    **** 				   VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;
 7317              		.loc 1 2129 0
 7318 003c 554C     		ldr	r4, .L284+8
 7319 003e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 7320 0040 0192     		str	r2, [sp, #4]
 7321 0042 0093     		str	r3, [sp]
 7322 0044 40F65103 		movw	r3, #2129
 7323 0048 534A     		ldr	r2, .L284+12
 7324 004a 5449     		ldr	r1, .L284+16
 7325 004c 5448     		ldr	r0, .L284+20
 7326 004e FFF7FEFF 		bl	printf
 7327              	.LVL1021:
2130:Src/main.c    **** 				   OSDSecCount = 0 ;
 7328              		.loc 1 2130 0
 7329 0052 2046     		mov	r0, r4
 7330 0054 FFF7FEFF 		bl	VS4210_SetMutiWindows
 7331              	.LVL1022:
2131:Src/main.c    **** 			   }
 7332              		.loc 1 2131 0
 7333 0058 524B     		ldr	r3, .L284+24
 7334 005a 0022     		movs	r2, #0
 7335 005c 1A70     		strb	r2, [r3]
 7336 005e 67E0     		b	.L265
 7337              	.L266:
2127:Src/main.c    **** 				   }
 7338              		.loc 1 2127 0
 7339 0060 4C4B     		ldr	r3, .L284+8
 7340 0062 0121     		movs	r1, #1
 7341 0064 5970     		strb	r1, [r3, #1]
ARM GAS  /tmp/cc8epWVM.s 			page 232


 7342 0066 E9E7     		b	.L267
 7343              	.L280:
2137:Src/main.c    **** 		   }
 7344              		.loc 1 2137 0
 7345 0068 4A4B     		ldr	r3, .L284+8
 7346 006a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 7347 006c 4D4A     		ldr	r2, .L284+24
 7348 006e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7349 0070 0192     		str	r2, [sp, #4]
 7350 0072 0093     		str	r3, [sp]
 7351 0074 40F65903 		movw	r3, #2137
 7352 0078 474A     		ldr	r2, .L284+12
 7353 007a 4849     		ldr	r1, .L284+16
 7354 007c 4A48     		ldr	r0, .L284+28
 7355 007e FFF7FEFF 		bl	printf
 7356              	.LVL1023:
 7357 0082 59E0     		b	.L268
 7358              	.L281:
2146:Src/main.c    **** 			   {
 7359              		.loc 1 2146 0
 7360 0084 474B     		ldr	r3, .L284+24
 7361 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7362 0088 092B     		cmp	r3, #9
 7363 008a 59D9     		bls	.L269
2148:Src/main.c    **** 				   OSDStateFlg = 0 ;
 7364              		.loc 1 2148 0
 7365 008c 0023     		movs	r3, #0
 7366 008e 454A     		ldr	r2, .L284+24
 7367 0090 1370     		strb	r3, [r2]
2149:Src/main.c    **** 				   OSD_Clear_All();
 7368              		.loc 1 2149 0
 7369 0092 464A     		ldr	r2, .L284+32
 7370 0094 1370     		strb	r3, [r2]
2150:Src/main.c    **** 				   ////VXIS_fSetContentOsdOnOff(0) ;
 7371              		.loc 1 2150 0
 7372 0096 FFF7FEFF 		bl	OSD_Clear_All
 7373              	.LVL1024:
 7374 009a 51E0     		b	.L269
 7375              	.L282:
2156:Src/main.c    **** 		   
 7376              		.loc 1 2156 0
 7377 009c 8021     		movs	r1, #128
 7378 009e 3220     		movs	r0, #50
 7379 00a0 FFF7FEFF 		bl	VXISI2CWrite
 7380              	.LVL1025:
 7381 00a4 51E0     		b	.L264
 7382              	.L283:
2192:Src/main.c    **** 				else
 7383              		.loc 1 2192 0
 7384 00a6 FFF7FEFF 		bl	HS_Select_Win
 7385              	.LVL1026:
 7386 00aa 01E0     		b	.L271
 7387              	.L272:
2206:Src/main.c    **** 	}while(AccessEnable == 0);
 7388              		.loc 1 2206 0 discriminator 2
 7389 00ac FFF7FEFF 		bl	Monitor
 7390              	.LVL1027:
ARM GAS  /tmp/cc8epWVM.s 			page 233


 7391              	.L271:
2206:Src/main.c    **** 	}while(AccessEnable == 0);
 7392              		.loc 1 2206 0 is_stmt 0 discriminator 1
 7393 00b0 FFF7FEFF 		bl	RS_ready
 7394              	.LVL1028:
 7395 00b4 0028     		cmp	r0, #0
 7396 00b6 F9D1     		bne	.L272
2207:Src/main.c    **** 	#endif
 7397              		.loc 1 2207 0 is_stmt 1
 7398 00b8 3D4B     		ldr	r3, .L284+36
 7399 00ba 1B68     		ldr	r3, [r3]
 7400 00bc 002B     		cmp	r3, #0
 7401 00be F7D0     		beq	.L271
 7402 00c0 01E0     		b	.L274
 7403              	.L275:
2210:Src/main.c    **** 		
 7404              		.loc 1 2210 0 discriminator 2
 7405 00c2 FFF7FEFF 		bl	TOAReceivePaser
 7406              	.LVL1029:
 7407              	.L274:
2210:Src/main.c    **** 		
 7408              		.loc 1 2210 0 is_stmt 0 discriminator 1
 7409 00c6 FFF7FEFF 		bl	RS2_ready
 7410              	.LVL1030:
 7411 00ca 0028     		cmp	r0, #0
 7412 00cc F9D1     		bne	.L275
2212:Src/main.c    **** 
 7413              		.loc 1 2212 0 is_stmt 1
 7414 00ce FFF7FEFF 		bl	SysTimerHandler
 7415              	.LVL1031:
2214:Src/main.c    **** 
 7416              		.loc 1 2214 0
 7417 00d2 FFF7FEFF 		bl	Get_2824cIrq
 7418              	.LVL1032:
 7419              	.L276:
2072:Src/main.c    **** 	#endif
 7420              		.loc 1 2072 0
 7421 00d6 364B     		ldr	r3, .L284+36
 7422 00d8 1B68     		ldr	r3, [r3]
 7423 00da 012B     		cmp	r3, #1
 7424 00dc E8D1     		bne	.L271
2075:Src/main.c    **** 	HDMI_AudioModeDetect() ;
 7425              		.loc 1 2075 0
 7426 00de FFF7FEFF 		bl	HDMI_VideoModeDetect
 7427              	.LVL1033:
2076:Src/main.c    **** 
 7428              		.loc 1 2076 0
 7429 00e2 FFF7FEFF 		bl	HDMI_AudioModeDetect
 7430              	.LVL1034:
2078:Src/main.c    **** 	if (TxCount > 10 )
 7431              		.loc 1 2078 0
 7432 00e6 334A     		ldr	r2, .L284+40
 7433 00e8 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 7434 00ea 0133     		adds	r3, r3, #1
 7435 00ec DBB2     		uxtb	r3, r3
 7436 00ee 1370     		strb	r3, [r2]
2079:Src/main.c    **** 	{
ARM GAS  /tmp/cc8epWVM.s 			page 234


 7437              		.loc 1 2079 0
 7438 00f0 0A2B     		cmp	r3, #10
 7439 00f2 88D8     		bhi	.L278
 7440              	.L262:
2103:Src/main.c    **** 
 7441              		.loc 1 2103 0
 7442 00f4 0A20     		movs	r0, #10
 7443 00f6 FFF7FEFF 		bl	msleep
 7444              	.LVL1035:
2105:Src/main.c    **** 	   if (gMode0LoopCount > 100 )
 7445              		.loc 1 2105 0
 7446 00fa 2F4A     		ldr	r2, .L284+44
 7447 00fc 1388     		ldrh	r3, [r2]
 7448 00fe 0133     		adds	r3, r3, #1
 7449 0100 9BB2     		uxth	r3, r3
 7450 0102 1380     		strh	r3, [r2]	@ movhi
2106:Src/main.c    **** 	   {
 7451              		.loc 1 2106 0
 7452 0104 642B     		cmp	r3, #100
 7453 0106 06D9     		bls	.L263
2108:Src/main.c    **** 		   OSDSecCount = OSDSecCount +1 ;
 7454              		.loc 1 2108 0
 7455 0108 1346     		mov	r3, r2
 7456 010a 0022     		movs	r2, #0
 7457 010c 1A80     		strh	r2, [r3]	@ movhi
2109:Src/main.c    **** 	   }
 7458              		.loc 1 2109 0
 7459 010e 254A     		ldr	r2, .L284+24
 7460 0110 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 7461 0112 0133     		adds	r3, r3, #1
 7462 0114 1370     		strb	r3, [r2]
 7463              	.L263:
2112:Src/main.c    **** 	   {
 7464              		.loc 1 2112 0
 7465 0116 234B     		ldr	r3, .L284+24
 7466 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7467 011a 284A     		ldr	r2, .L284+48
 7468 011c 1268     		ldr	r2, [r2]
 7469 011e 9342     		cmp	r3, r2
 7470 0120 13D0     		beq	.L264
2114:Src/main.c    **** 		   if (gMode0LoopFlg == 1)
 7471              		.loc 1 2114 0
 7472 0122 264A     		ldr	r2, .L284+48
 7473 0124 1360     		str	r3, [r2]
2115:Src/main.c    **** 		   {
 7474              		.loc 1 2115 0
 7475 0126 264B     		ldr	r3, .L284+52
 7476 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7477 012a 012B     		cmp	r3, #1
 7478 012c 3FF471AF 		beq	.L279
 7479              	.L265:
2135:Src/main.c    **** 		   {
 7480              		.loc 1 2135 0
 7481 0130 234B     		ldr	r3, .L284+52
 7482 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7483 0134 012B     		cmp	r3, #1
 7484 0136 97D0     		beq	.L280
ARM GAS  /tmp/cc8epWVM.s 			page 235


 7485              	.L268:
2144:Src/main.c    **** 		   {
 7486              		.loc 1 2144 0
 7487 0138 1C4B     		ldr	r3, .L284+32
 7488 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7489 013c 012B     		cmp	r3, #1
 7490 013e A1D0     		beq	.L281
 7491              	.L269:
2155:Src/main.c    **** 			VXISI2CWrite(0x32,0x80);
 7492              		.loc 1 2155 0
 7493 0140 3220     		movs	r0, #50
 7494 0142 FFF7FEFF 		bl	VXISI2CRead
 7495              	.LVL1036:
 7496 0146 0028     		cmp	r0, #0
 7497 0148 A8D0     		beq	.L282
 7498              	.L264:
2161:Src/main.c    **** 	
 7499              		.loc 1 2161 0
 7500 014a FFF7FEFF 		bl	EQ_Detect
 7501              	.LVL1037:
2179:Src/main.c    **** 		if((CheckSelectInputMode!=SelectInputMode)/*&&(BOOT_ISSUE==0)*/)
 7502              		.loc 1 2179 0
 7503 014e 1021     		movs	r1, #16
 7504 0150 1C48     		ldr	r0, .L284+56
 7505 0152 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 7506              	.LVL1038:
 7507 0156 1C4B     		ldr	r3, .L284+60
 7508 0158 1870     		strb	r0, [r3]
2180:Src/main.c    **** 		{
 7509              		.loc 1 2180 0
 7510 015a 1C4B     		ldr	r3, .L284+64
 7511 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7512 015e 9842     		cmp	r0, r3
 7513 0160 A6D0     		beq	.L271
2182:Src/main.c    **** 			CheckSelectInputMode=HDMI_SELECT_GET();
 7514              		.loc 1 2182 0
 7515 0162 3220     		movs	r0, #50
 7516 0164 FFF7FEFF 		bl	msleep
 7517              	.LVL1039:
2183:Src/main.c    **** 
 7518              		.loc 1 2183 0
 7519 0168 1021     		movs	r1, #16
 7520 016a 1648     		ldr	r0, .L284+56
 7521 016c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 7522              	.LVL1040:
 7523 0170 154B     		ldr	r3, .L284+60
 7524 0172 1870     		strb	r0, [r3]
2185:Src/main.c    **** 				{
 7525              		.loc 1 2185 0
 7526 0174 154B     		ldr	r3, .L284+64
 7527 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7528 0178 9842     		cmp	r0, r3
 7529 017a 99D0     		beq	.L271
2187:Src/main.c    **** 
 7530              		.loc 1 2187 0
 7531 017c 134B     		ldr	r3, .L284+64
 7532 017e 1870     		strb	r0, [r3]
ARM GAS  /tmp/cc8epWVM.s 			page 236


2191:Src/main.c    **** 					HS_Select_Win(1);
 7533              		.loc 1 2191 0
 7534 0180 0128     		cmp	r0, #1
 7535 0182 90D0     		beq	.L283
2194:Src/main.c    **** 				}
 7536              		.loc 1 2194 0
 7537 0184 0020     		movs	r0, #0
 7538 0186 FFF7FEFF 		bl	HS_Select_Win
 7539              	.LVL1041:
 7540 018a 91E7     		b	.L271
 7541              	.L285:
 7542              		.align	2
 7543              	.L284:
 7544 018c 00000000 		.word	.LANCHOR30
 7545 0190 00000000 		.word	.LANCHOR31
 7546 0194 00000000 		.word	pVS4210_MutiWindows1
 7547 0198 00000000 		.word	.LANCHOR32
 7548 019c 00000000 		.word	.LC20
 7549 01a0 00000000 		.word	.LC43
 7550 01a4 00000000 		.word	.LANCHOR15
 7551 01a8 24000000 		.word	.LC44
 7552 01ac 00000000 		.word	.LANCHOR14
 7553 01b0 00000000 		.word	AccessEnable
 7554 01b4 00000000 		.word	.LANCHOR26
 7555 01b8 00000000 		.word	.LANCHOR27
 7556 01bc 00000000 		.word	.LANCHOR28
 7557 01c0 00000000 		.word	.LANCHOR29
 7558 01c4 00080140 		.word	1073809408
 7559 01c8 00000000 		.word	.LANCHOR33
 7560 01cc 00000000 		.word	.LANCHOR17
 7561              		.cfi_endproc
 7562              	.LFE86:
 7564              		.section	.text.main,"ax",%progbits
 7565              		.align	1
 7566              		.global	main
 7567              		.syntax unified
 7568              		.thumb
 7569              		.thumb_func
 7570              		.fpu softvfp
 7572              	main:
 7573              	.LFB85:
1750:Src/main.c    ****   /* USER CODE BEGIN 1 */
 7574              		.loc 1 1750 0
 7575              		.cfi_startproc
 7576              		@ args = 0, pretend = 0, frame = 0
 7577              		@ frame_needed = 0, uses_anonymous_args = 0
 7578 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7579              	.LCFI50:
 7580              		.cfi_def_cfa_offset 28
 7581              		.cfi_offset 4, -28
 7582              		.cfi_offset 5, -24
 7583              		.cfi_offset 6, -20
 7584              		.cfi_offset 7, -16
 7585              		.cfi_offset 8, -12
 7586              		.cfi_offset 9, -8
 7587              		.cfi_offset 14, -4
 7588 0004 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/cc8epWVM.s 			page 237


 7589              	.LCFI51:
 7590              		.cfi_def_cfa_offset 40
1769:Src/main.c    ****   
 7591              		.loc 1 1769 0
 7592 0006 FFF7FEFF 		bl	HAL_Init
 7593              	.LVL1042:
1776:Src/main.c    **** 
 7594              		.loc 1 1776 0
 7595 000a FFF7FEFF 		bl	SystemClock_Config
 7596              	.LVL1043:
1780:Src/main.c    **** 
 7597              		.loc 1 1780 0
 7598 000e FFF7FEFF 		bl	InitialTimerEvent
 7599              	.LVL1044:
1785:Src/main.c    ****  // LCDPowerOFF();
 7600              		.loc 1 1785 0
 7601 0012 FFF7FEFF 		bl	MX_GPIO_Init
 7602              	.LVL1045:
1800:Src/main.c    ****   MX_USART1_UART_Init();
 7603              		.loc 1 1800 0
 7604 0016 FFF7FEFF 		bl	MX_TIM3_Init
 7605              	.LVL1046:
1801:Src/main.c    ****   MX_USART2_UART_Init();
 7606              		.loc 1 1801 0
 7607 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 7608              	.LVL1047:
1802:Src/main.c    **** //  MX_ADC1_Init();
 7609              		.loc 1 1802 0
 7610 001e FFF7FEFF 		bl	MX_USART2_UART_Init
 7611              	.LVL1048:
1809:Src/main.c    ****  SW_I2C1_Init() ;
 7612              		.loc 1 1809 0
 7613 0022 FFF7FEFF 		bl	SW_I2C0_Init
 7614              	.LVL1049:
1810:Src/main.c    ****  SW_I2C2_Init() ;
 7615              		.loc 1 1810 0
 7616 0026 FFF7FEFF 		bl	SW_I2C1_Init
 7617              	.LVL1050:
1811:Src/main.c    ****  SW_I2C3_Init() ;
 7618              		.loc 1 1811 0
 7619 002a FFF7FEFF 		bl	SW_I2C2_Init
 7620              	.LVL1051:
1812:Src/main.c    **** 
 7621              		.loc 1 1812 0
 7622 002e FFF7FEFF 		bl	SW_I2C3_Init
 7623              	.LVL1052:
1819:Src/main.c    **** SET_Audio_Mute(ON);
 7624              		.loc 1 1819 0
 7625 0032 0121     		movs	r1, #1
 7626 0034 0020     		movs	r0, #0
 7627 0036 FFF7FEFF 		bl	Set_Video_Loss_OSD
 7628              	.LVL1053:
1820:Src/main.c    **** 
 7629              		.loc 1 1820 0
 7630 003a 0120     		movs	r0, #1
 7631 003c FFF7FEFF 		bl	SET_Audio_Mute
 7632              	.LVL1054:
ARM GAS  /tmp/cc8epWVM.s 			page 238


1825:Src/main.c    ****   HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data, 1);	//activate UART receive interrupt every time
 7633              		.loc 1 1825 0
 7634 0040 3220     		movs	r0, #50
 7635 0042 FFF7FEFF 		bl	msleep
 7636              	.LVL1055:
1826:Src/main.c    ****   HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	//activate UART receive interrupt every time
 7637              		.loc 1 1826 0
 7638 0046 0122     		movs	r2, #1
 7639 0048 5749     		ldr	r1, .L293
 7640 004a 5848     		ldr	r0, .L293+4
 7641 004c FFF7FEFF 		bl	HAL_UART_Receive_IT
 7642              	.LVL1056:
1827:Src/main.c    **** 
 7643              		.loc 1 1827 0
 7644 0050 0122     		movs	r2, #1
 7645 0052 5749     		ldr	r1, .L293+8
 7646 0054 5748     		ldr	r0, .L293+12
 7647 0056 FFF7FEFF 		bl	HAL_UART_Receive_IT
 7648              	.LVL1057:
1831:Src/main.c    ****  TP2824_SET_REST(0);
 7649              		.loc 1 1831 0
 7650 005a 574D     		ldr	r5, .L293+16
 7651 005c 0022     		movs	r2, #0
 7652 005e 4FF48051 		mov	r1, #4096
 7653 0062 2846     		mov	r0, r5
 7654 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 7655              	.LVL1058:
1832:Src/main.c    **** 
 7656              		.loc 1 1832 0
 7657 0068 544C     		ldr	r4, .L293+20
 7658 006a 0022     		movs	r2, #0
 7659 006c 0221     		movs	r1, #2
 7660 006e 2046     		mov	r0, r4
 7661 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 7662              	.LVL1059:
1834:Src/main.c    ****   //HAL_GPIO_WritePin(TP2824_RST_GPIO_Port, VS_RST_Pin, 1); //VS4210 RST
 7663              		.loc 1 1834 0
 7664 0074 6420     		movs	r0, #100
 7665 0076 FFF7FEFF 		bl	msleep
 7666              	.LVL1060:
1837:Src/main.c    ****  TP2824_SET_REST(1);
 7667              		.loc 1 1837 0
 7668 007a 0122     		movs	r2, #1
 7669 007c 4FF48051 		mov	r1, #4096
 7670 0080 2846     		mov	r0, r5
 7671 0082 FFF7FEFF 		bl	HAL_GPIO_WritePin
 7672              	.LVL1061:
1838:Src/main.c    **** 
 7673              		.loc 1 1838 0
 7674 0086 0122     		movs	r2, #1
 7675 0088 0221     		movs	r1, #2
 7676 008a 2046     		mov	r0, r4
 7677 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 7678              	.LVL1062:
1852:Src/main.c    ****   {
 7679              		.loc 1 1852 0
 7680 0090 0024     		movs	r4, #0
ARM GAS  /tmp/cc8epWVM.s 			page 239


 7681 0092 20E0     		b	.L287
 7682              	.LVL1063:
 7683              	.L288:
1854:Src/main.c    ****       dbg_Printf("Init HDMI RX,Chip(%d)....\r\n",(int)i ) ;
 7684              		.loc 1 1854 0 discriminator 3
 7685 0094 4A4B     		ldr	r3, .L293+24
 7686 0096 1C70     		strb	r4, [r3]
1855:Src/main.c    ****       InitHDMIRX(0);
 7687              		.loc 1 1855 0 discriminator 3
 7688 0098 4A4E     		ldr	r6, .L293+28
 7689 009a 4B4D     		ldr	r5, .L293+32
 7690 009c 0094     		str	r4, [sp]
 7691 009e 40F23F73 		movw	r3, #1855
 7692 00a2 3246     		mov	r2, r6
 7693 00a4 2946     		mov	r1, r5
 7694 00a6 4948     		ldr	r0, .L293+36
 7695 00a8 FFF7FEFF 		bl	printf
 7696              	.LVL1064:
1856:Src/main.c    ****       HDMIRX_WriteI2C_Byte(0x89 ,0x80);
 7697              		.loc 1 1856 0 discriminator 3
 7698 00ac 0020     		movs	r0, #0
 7699 00ae FFF7FEFF 		bl	InitHDMIRX
 7700              	.LVL1065:
1857:Src/main.c    **** 
 7701              		.loc 1 1857 0 discriminator 3
 7702 00b2 8021     		movs	r1, #128
 7703 00b4 8920     		movs	r0, #137
 7704 00b6 FFF7FEFF 		bl	HDMIRX_WriteI2C_Byte
 7705              	.LVL1066:
1860:Src/main.c    ****       dbg_Printf("IT66021 chip num=%d , 02reg=0x%02x\r\n", (int )i , (int)val ) ;
 7706              		.loc 1 1860 0 discriminator 3
 7707 00ba 0220     		movs	r0, #2
 7708 00bc FFF7FEFF 		bl	HDMIRX_ReadI2C_Byte
 7709              	.LVL1067:
1861:Src/main.c    **** #endif
 7710              		.loc 1 1861 0 discriminator 3
 7711 00c0 0190     		str	r0, [sp, #4]
 7712 00c2 0094     		str	r4, [sp]
 7713 00c4 40F24573 		movw	r3, #1861
 7714 00c8 3246     		mov	r2, r6
 7715 00ca 2946     		mov	r1, r5
 7716 00cc 4048     		ldr	r0, .L293+40
 7717              	.LVL1068:
 7718 00ce FFF7FEFF 		bl	printf
 7719              	.LVL1069:
1852:Src/main.c    ****   {
 7720              		.loc 1 1852 0 discriminator 3
 7721 00d2 0134     		adds	r4, r4, #1
 7722              	.LVL1070:
 7723 00d4 E4B2     		uxtb	r4, r4
 7724              	.LVL1071:
 7725              	.L287:
1852:Src/main.c    ****   {
 7726              		.loc 1 1852 0 is_stmt 0 discriminator 1
 7727 00d6 012C     		cmp	r4, #1
 7728 00d8 DCD9     		bls	.L288
1874:Src/main.c    **** 	  #endif
ARM GAS  /tmp/cc8epWVM.s 			page 240


 7729              		.loc 1 1874 0 is_stmt 1
 7730 00da 3E4C     		ldr	r4, .L293+44
 7731              	.LVL1072:
 7732 00dc 0025     		movs	r5, #0
 7733 00de 2570     		strb	r5, [r4]
1877:Src/main.c    ****   pVS4210_MutiWindows1.OutputSize = _OUTPUT_1080P60 ;
 7734              		.loc 1 1877 0
 7735 00e0 6571     		strb	r5, [r4, #5]
1878:Src/main.c    **** 	#ifdef VS4210_SELECT_WIN1	//20201211-02
 7736              		.loc 1 1878 0
 7737 00e2 0126     		movs	r6, #1
 7738 00e4 A671     		strb	r6, [r4, #6]
1885:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap1 = 2 ; //set ch2 = video2
 7739              		.loc 1 1885 0
 7740 00e6 6670     		strb	r6, [r4, #1]
1886:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap2 = 3 ; //set ch3 = video3
 7741              		.loc 1 1886 0
 7742 00e8 0223     		movs	r3, #2
 7743 00ea A370     		strb	r3, [r4, #2]
1887:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap3 = 4 ; //set ch4 = video4
 7744              		.loc 1 1887 0
 7745 00ec 0327     		movs	r7, #3
 7746 00ee E770     		strb	r7, [r4, #3]
1888:Src/main.c    **** 	#endif
 7747              		.loc 1 1888 0
 7748 00f0 0423     		movs	r3, #4
 7749 00f2 2371     		strb	r3, [r4, #4]
1892:Src/main.c    **** 
 7750              		.loc 1 1892 0
 7751 00f4 3849     		ldr	r1, .L293+48
 7752 00f6 0F20     		movs	r0, #15
 7753 00f8 FFF7FEFF 		bl	VXOSD_UseFont_init
 7754              	.LVL1073:
1894:Src/main.c    **** #endif
 7755              		.loc 1 1894 0
 7756 00fc FFF7FEFF 		bl	main_init
 7757              	.LVL1074:
1902:Src/main.c    **** 
 7758              		.loc 1 1902 0
 7759 0100 FFF7FEFF 		bl	Init_TP280x_RegSet
 7760              	.LVL1075:
1906:Src/main.c    ****    dbg_Printf("VS4210 chip ID = 0x%02x\r\n",(int)val) ;
 7761              		.loc 1 1906 0
 7762 0104 2846     		mov	r0, r5
 7763 0106 FFF7FEFF 		bl	VXISI2CRead
 7764              	.LVL1076:
1907:Src/main.c    ****    dbg_Printf("VS4210 Init. (Startting...)\r\n") ;
 7765              		.loc 1 1907 0
 7766 010a DFF8B890 		ldr	r9, .L293+28
 7767 010e DFF8B880 		ldr	r8, .L293+32
 7768 0112 0090     		str	r0, [sp]
 7769 0114 40F27373 		movw	r3, #1907
 7770 0118 4A46     		mov	r2, r9
 7771 011a 4146     		mov	r1, r8
 7772 011c 2F48     		ldr	r0, .L293+52
 7773              	.LVL1077:
 7774 011e FFF7FEFF 		bl	printf
ARM GAS  /tmp/cc8epWVM.s 			page 241


 7775              	.LVL1078:
1908:Src/main.c    **** #endif
 7776              		.loc 1 1908 0
 7777 0122 40F27473 		movw	r3, #1908
 7778 0126 4A46     		mov	r2, r9
 7779 0128 4146     		mov	r1, r8
 7780 012a 2D48     		ldr	r0, .L293+56
 7781 012c FFF7FEFF 		bl	printf
 7782              	.LVL1079:
1911:Src/main.c    ****   //pVS4210_MutiWindows1.DrawOSDFlg = 0x00 ;  //Enable OSD, bit1=Title, bit0 = bar
 7783              		.loc 1 1911 0
 7784 0130 E771     		strb	r7, [r4, #7]
1921:Src/main.c    ****   //pVS4210_MutiWindows1.OutputSize = _OUTPUT_720P60 ;
 7785              		.loc 1 1921 0
 7786 0132 A671     		strb	r6, [r4, #6]
1924:Src/main.c    ****   pVS4210_MutiWindows1.DrawBoxColor= _EN_DRAWBOX_COLOR_White ;
 7787              		.loc 1 1924 0
 7788 0134 2572     		strb	r5, [r4, #8]
1925:Src/main.c    ****   VXIS_fSetOsdx2(0) ;
 7789              		.loc 1 1925 0
 7790 0136 6572     		strb	r5, [r4, #9]
1926:Src/main.c    **** 
 7791              		.loc 1 1926 0
 7792 0138 2846     		mov	r0, r5
 7793 013a FFF7FEFF 		bl	VXIS_fSetOsdx2
 7794              	.LVL1080:
1928:Src/main.c    **** 
 7795              		.loc 1 1928 0
 7796 013e 2046     		mov	r0, r4
 7797 0140 FFF7FEFF 		bl	VS4210_SetMutiWindows
 7798              	.LVL1081:
1930:Src/main.c    ****   {
 7799              		.loc 1 1930 0
 7800 0144 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 7801 0146 3BB1     		cbz	r3, .L289
1932:Src/main.c    ****         Tim1_count = 0 ;
 7802              		.loc 1 1932 0
 7803 0148 264B     		ldr	r3, .L293+60
 7804 014a 1E60     		str	r6, [r3]
1933:Src/main.c    ****         OSDStateFlg = 1 ;
 7805              		.loc 1 1933 0
 7806 014c 2649     		ldr	r1, .L293+64
 7807 014e 0D60     		str	r5, [r1]
1934:Src/main.c    ****         OSDSecCount = 0 ;
 7808              		.loc 1 1934 0
 7809 0150 2649     		ldr	r1, .L293+68
 7810 0152 0E70     		strb	r6, [r1]
1935:Src/main.c    ****   }  
 7811              		.loc 1 1935 0
 7812 0154 264A     		ldr	r2, .L293+72
 7813 0156 1570     		strb	r5, [r2]
 7814              	.L289:
1938:Src/main.c    **** memset(&ExOsdContent[1] ,_spc , (EXTERNOSDNUMBER+1) *2 ) ;
 7815              		.loc 1 1938 0
 7816 0158 2648     		ldr	r0, .L293+76
 7817 015a 5D23     		movs	r3, #93
 7818 015c 00F8013B 		strb	r3, [r0], #1
ARM GAS  /tmp/cc8epWVM.s 			page 242


1939:Src/main.c    **** exosdLen = 4*EXTERNOSDNUMBER + 4  ;
 7819              		.loc 1 1939 0
 7820 0160 2022     		movs	r2, #32
 7821 0162 6D21     		movs	r1, #109
 7822 0164 FFF7FEFF 		bl	memset
 7823              	.LVL1082:
1942:Src/main.c    **** for (i = exosdStart ; i <= exosdLen ;i = i+2 )
 7824              		.loc 1 1942 0
 7825 0168 0122     		movs	r2, #1
1943:Src/main.c    **** {
 7826              		.loc 1 1943 0
 7827 016a 2123     		movs	r3, #33
 7828 016c 0AE0     		b	.L290
 7829              	.LVL1083:
 7830              	.L291:
1945:Src/main.c    **** 	ExOsdContent[i+1] = _spc ;
 7831              		.loc 1 1945 0 discriminator 3
 7832 016e 02F17F00 		add	r0, r2, #127
 7833 0172 2049     		ldr	r1, .L293+76
 7834 0174 C854     		strb	r0, [r1, r3]
1946:Src/main.c    **** 	j++ ;
 7835              		.loc 1 1946 0 discriminator 3
 7836 0176 581C     		adds	r0, r3, #1
 7837 0178 6D24     		movs	r4, #109
 7838 017a 0C54     		strb	r4, [r1, r0]
1947:Src/main.c    **** }
 7839              		.loc 1 1947 0 discriminator 3
 7840 017c 0132     		adds	r2, r2, #1
 7841              	.LVL1084:
 7842 017e D2B2     		uxtb	r2, r2
 7843              	.LVL1085:
1943:Src/main.c    **** {
 7844              		.loc 1 1943 0 discriminator 3
 7845 0180 0233     		adds	r3, r3, #2
 7846              	.LVL1086:
 7847 0182 DBB2     		uxtb	r3, r3
 7848              	.LVL1087:
 7849              	.L290:
1943:Src/main.c    **** {
 7850              		.loc 1 1943 0 is_stmt 0 discriminator 1
 7851 0184 402B     		cmp	r3, #64
 7852 0186 F2D9     		bls	.L291
1949:Src/main.c    ****   exosdLen = EXTERNOSDNUMBER *2  ;
 7853              		.loc 1 1949 0 is_stmt 1
 7854 0188 1F22     		movs	r2, #31
 7855              	.LVL1088:
 7856 018a 6D21     		movs	r1, #109
 7857 018c 1A48     		ldr	r0, .L293+80
 7858 018e FFF7FEFF 		bl	memset
 7859              	.LVL1089:
1952:Src/main.c    **** //test@end
 7860              		.loc 1 1952 0
 7861 0192 0020     		movs	r0, #0
 7862 0194 FFF7FEFF 		bl	Audio_Sel
 7863              	.LVL1090:
2015:Src/main.c    ****   /* USER CODE END 2 */
 7864              		.loc 1 2015 0
ARM GAS  /tmp/cc8epWVM.s 			page 243


 7865 0198 1848     		ldr	r0, .L293+84
 7866 019a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 7867              	.LVL1091:
2032:Src/main.c    **** 
 7868              		.loc 1 2032 0
 7869 019e 1848     		ldr	r0, .L293+88
 7870 01a0 FFF7FEFF 		bl	printf
 7871              	.LVL1092:
2045:Src/main.c    **** 	
 7872              		.loc 1 2045 0
 7873 01a4 FFF7FEFF 		bl	main_loop
 7874              	.LVL1093:
 7875              	.L294:
 7876              		.align	2
 7877              	.L293:
 7878 01a8 00000000 		.word	.LANCHOR23
 7879 01ac 00000000 		.word	huart1
 7880 01b0 00000000 		.word	.LANCHOR24
 7881 01b4 00000000 		.word	huart2
 7882 01b8 000C0140 		.word	1073810432
 7883 01bc 00100140 		.word	1073811456
 7884 01c0 00000000 		.word	gHDMI_Index
 7885 01c4 00000000 		.word	.LANCHOR34
 7886 01c8 00000000 		.word	.LC20
 7887 01cc 00000000 		.word	.LC45
 7888 01d0 28000000 		.word	.LC46
 7889 01d4 00000000 		.word	pVS4210_MutiWindows1
 7890 01d8 00000000 		.word	UserDefineFont1
 7891 01dc 58000000 		.word	.LC47
 7892 01e0 7C000000 		.word	.LC48
 7893 01e4 00000000 		.word	.LANCHOR12
 7894 01e8 00000000 		.word	.LANCHOR13
 7895 01ec 00000000 		.word	.LANCHOR14
 7896 01f0 00000000 		.word	.LANCHOR15
 7897 01f4 00000000 		.word	ExOsdContent
 7898 01f8 3F000000 		.word	ExOsdContent+63
 7899 01fc 00000000 		.word	htim3
 7900 0200 A4000000 		.word	.LC49
 7901              		.cfi_endproc
 7902              	.LFE85:
 7904              		.section	.text.Error_Handler,"ax",%progbits
 7905              		.align	1
 7906              		.global	Error_Handler
 7907              		.syntax unified
 7908              		.thumb
 7909              		.thumb_func
 7910              		.fpu softvfp
 7912              	Error_Handler:
 7913              	.LFB104:
4605:Src/main.c    **** 
4606:Src/main.c    **** /* USER CODE END 4 */
4607:Src/main.c    **** 
4608:Src/main.c    **** /**
4609:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
4610:Src/main.c    ****   * @retval None
4611:Src/main.c    ****   */
4612:Src/main.c    **** void Error_Handler(void)
ARM GAS  /tmp/cc8epWVM.s 			page 244


4613:Src/main.c    **** {
 7914              		.loc 1 4613 0
 7915              		.cfi_startproc
 7916              		@ args = 0, pretend = 0, frame = 0
 7917              		@ frame_needed = 0, uses_anonymous_args = 0
 7918              		@ link register save eliminated.
4614:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
4615:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
4616:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
4617:Src/main.c    **** }
 7919              		.loc 1 4617 0
 7920 0000 7047     		bx	lr
 7921              		.cfi_endproc
 7922              	.LFE104:
 7924              		.global	OSDStateFlg
 7925              		.global	OSDSecCount
 7926              		.comm	pVS4210_JointKind1,10,4
 7927              		.global	gRxLoopFlg
 7928              		.comm	gabVXIS_Input_mirrorH,4,4
 7929              		.global	OSD_Show_Flg
 7930              		.global	Tim1_count
 7931              		.comm	pVS4210_MutiWindows1,10,4
 7932              		.global	TxCount
 7933              		.global	bSignal
 7934              		.global	gMode0LoopSecCmpVal
 7935              		.global	gMode0LoopSecCount
 7936              		.global	gMode0LoopFlg
 7937              		.global	gMode0LoopCount
 7938              		.global	gbAUDO_INDEX
 7939              		.comm	gPrebAUDO_INDEX,1,1
 7940              		.comm	gPreAudioSampleFreq,1,1
 7941              		.global	CheckSelectInputMode
 7942              		.global	SelectInputMode
 7943              		.global	OSDPreSecCount
 7944              		.global	PrebVXIS_InputMode
 7945              		.comm	ExOsdContent,256,4
 7946              		.global	CURRENT_CH
 7947              		.global	BOOT_ISSUE
 7948              		.global	OSD_SPEAKER
 7949              		.global	OSD_MIRROR
 7950              		.comm	CAMR_M,1,1
 7951              		.comm	CAMC_M,1,1
 7952              		.comm	CAMB_M,1,1
 7953              		.comm	CAMA_M,1,1
 7954              		.comm	Priority,1,1
 7955              		.comm	SelectModeType,1,1
 7956              		.global	tptic
 7957              		.global	keytic
 7958              		.global	PowerFlag
 7959              		.comm	TimeStep,1,1
 7960              		.global	PWMLevel
 7961              		.global	AutoDayNightDelay
 7962              		.global	LightSensor_ADC
 7963              		.global	DayNightLevel
 7964              		.comm	DebugLevel,1,1
 7965              		.global	half_scaler
 7966              		.comm	ManVidRes,1,1
ARM GAS  /tmp/cc8epWVM.s 			page 245


 7967              		.global	VS8812_ADDR
 7968              		.global	VS4210_ADDR
 7969              		.comm	htim2,64,4
 7970              		.comm	hadc1,48,4
 7971              		.comm	huart2,64,4
 7972              		.comm	huart1,64,4
 7973              		.comm	htim3,64,4
 7974              		.comm	newInRes,4,4
 7975              		.section	.bss.AutoDayNightDelay,"aw",%nobits
 7976              		.set	.LANCHOR20,. + 0
 7979              	AutoDayNightDelay:
 7980 0000 00       		.space	1
 7981              		.section	.bss.CURRENT_CH,"aw",%nobits
 7982              		.set	.LANCHOR7,. + 0
 7985              	CURRENT_CH:
 7986 0000 00       		.space	1
 7987              		.section	.bss.CheckSelectInputMode,"aw",%nobits
 7988              		.set	.LANCHOR33,. + 0
 7991              	CheckSelectInputMode:
 7992 0000 00       		.space	1
 7993              		.section	.bss.DayNightLevel,"aw",%nobits
 7994              		.set	.LANCHOR18,. + 0
 7997              	DayNightLevel:
 7998 0000 00       		.space	1
 7999              		.section	.bss.DebugFlg,"aw",%nobits
 8000              		.align	2
 8003              	DebugFlg:
 8004 0000 00000000 		.space	4
 8005              		.section	.bss.IR_4BYTE,"aw",%nobits
 8006              		.align	2
 8009              	IR_4BYTE:
 8010 0000 00000000 		.space	4
 8011              		.section	.bss.IR_Code,"aw",%nobits
 8014              	IR_Code:
 8015 0000 00       		.space	1
 8016              		.section	.bss.IR_END_Flg,"aw",%nobits
 8019              	IR_END_Flg:
 8020 0000 00       		.space	1
 8021              		.section	.bss.IR_IRQFlg,"aw",%nobits
 8024              	IR_IRQFlg:
 8025 0000 00       		.space	1
 8026              		.section	.bss.IR_IRQ_Index,"aw",%nobits
 8029              	IR_IRQ_Index:
 8030 0000 00       		.space	1
 8031              		.section	.bss.IR_PlusTimeVal,"aw",%nobits
 8032              		.align	1
 8035              	IR_PlusTimeVal:
 8036 0000 0000     		.space	2
 8037              		.section	.bss.IR_ShiftCount,"aw",%nobits
 8040              	IR_ShiftCount:
 8041 0000 00       		.space	1
 8042              		.section	.bss.IR_StartFlg,"aw",%nobits
 8045              	IR_StartFlg:
 8046 0000 00       		.space	1
 8047              		.section	.bss.LightSensor_ADC,"aw",%nobits
 8048              		.align	1
 8051              	LightSensor_ADC:
ARM GAS  /tmp/cc8epWVM.s 			page 246


 8052 0000 0000     		.space	2
 8053              		.section	.bss.OSDSecCount,"aw",%nobits
 8054              		.set	.LANCHOR15,. + 0
 8057              	OSDSecCount:
 8058 0000 00       		.space	1
 8059              		.section	.bss.OSD_MIRROR,"aw",%nobits
 8060              		.align	2
 8061              		.set	.LANCHOR5,. + 0
 8064              	OSD_MIRROR:
 8065 0000 00000000 		.space	4
 8066              		.section	.bss.OSD_SPEAKER,"aw",%nobits
 8067              		.align	2
 8068              		.set	.LANCHOR6,. + 0
 8071              	OSD_SPEAKER:
 8072 0000 00000000 		.space	4
 8073              		.section	.bss.OSD_Show_Flg,"aw",%nobits
 8074              		.align	2
 8075              		.set	.LANCHOR12,. + 0
 8078              	OSD_Show_Flg:
 8079 0000 00000000 		.space	4
 8080              		.section	.bss.PreIR_Code,"aw",%nobits
 8083              	PreIR_Code:
 8084 0000 00       		.space	1
 8085              		.section	.bss.PreIR_IRQ_Index,"aw",%nobits
 8088              	PreIR_IRQ_Index:
 8089 0000 00       		.space	1
 8090              		.section	.bss.Rx2_data,"aw",%nobits
 8091              		.align	2
 8092              		.set	.LANCHOR24,. + 0
 8095              	Rx2_data:
 8096 0000 0000     		.space	2
 8097              		.section	.bss.RxBufIndex,"aw",%nobits
 8098              		.align	2
 8099              		.set	.LANCHOR3,. + 0
 8102              	RxBufIndex:
 8103 0000 00000000 		.space	4
 8104              		.section	.bss.Rx_data,"aw",%nobits
 8105              		.align	2
 8106              		.set	.LANCHOR23,. + 0
 8109              	Rx_data:
 8110 0000 0000     		.space	2
 8111              		.section	.bss.Rx_indx,"aw",%nobits
 8112              		.align	2
 8115              	Rx_indx:
 8116 0000 00000000 		.space	4
 8117              		.section	.bss.RxiCount,"aw",%nobits
 8118              		.align	2
 8121              	RxiCount:
 8122 0000 00000000 		.space	4
 8123              		.section	.bss.SelectInputMode,"aw",%nobits
 8124              		.set	.LANCHOR17,. + 0
 8127              	SelectInputMode:
 8128 0000 00       		.space	1
 8129              		.section	.bss.Tim1_count,"aw",%nobits
 8130              		.align	2
 8131              		.set	.LANCHOR13,. + 0
 8134              	Tim1_count:
ARM GAS  /tmp/cc8epWVM.s 			page 247


 8135 0000 00000000 		.space	4
 8136              		.section	.bss.Transfer_cplt,"aw",%nobits
 8137              		.set	.LANCHOR2,. + 0
 8140              	Transfer_cplt:
 8141 0000 00       		.space	1
 8142              		.section	.bss.TxCount,"aw",%nobits
 8143              		.set	.LANCHOR26,. + 0
 8146              	TxCount:
 8147 0000 00       		.space	1
 8148              		.section	.bss.TxiCount,"aw",%nobits
 8149              		.align	2
 8152              	TxiCount:
 8153 0000 00000000 		.space	4
 8154              		.section	.bss.bOldSignal,"aw",%nobits
 8155              		.align	2
 8156              		.set	.LANCHOR10,. + 0
 8159              	bOldSignal:
 8160 0000 00000000 		.space	4
 8161              		.section	.bss.bSignal,"aw",%nobits
 8162              		.align	2
 8163              		.set	.LANCHOR9,. + 0
 8166              	bSignal:
 8167 0000 00000000 		.space	4
 8168              		.section	.bss.gAudioSampleFreq,"aw",%nobits
 8169              		.align	2
 8170              		.set	.LANCHOR1,. + 0
 8173              	gAudioSampleFreq:
 8174 0000 00000000 		.space	4
 8175              		.section	.bss.gMode0LoopCount,"aw",%nobits
 8176              		.align	1
 8177              		.set	.LANCHOR27,. + 0
 8180              	gMode0LoopCount:
 8181 0000 0000     		.space	2
 8182              		.section	.bss.gMode0LoopFlg,"aw",%nobits
 8183              		.set	.LANCHOR29,. + 0
 8186              	gMode0LoopFlg:
 8187 0000 00       		.space	1
 8188              		.section	.bss.gMode0LoopSecCount,"aw",%nobits
 8189              		.set	.LANCHOR30,. + 0
 8192              	gMode0LoopSecCount:
 8193 0000 00       		.space	1
 8194              		.section	.bss.gRxbuf,"aw",%nobits
 8195              		.align	2
 8196              		.set	.LANCHOR4,. + 0
 8199              	gRxbuf:
 8200 0000 00000000 		.space	50
 8200      00000000 
 8200      00000000 
 8200      00000000 
 8200      00000000 
 8201              		.section	.bss.gbAUDO_INDEX,"aw",%nobits
 8202              		.set	.LANCHOR0,. + 0
 8205              	gbAUDO_INDEX:
 8206 0000 00       		.space	1
 8207              		.section	.bss.half_scaler,"aw",%nobits
 8210              	half_scaler:
 8211 0000 00       		.space	1
ARM GAS  /tmp/cc8epWVM.s 			page 248


 8212              		.section	.bss.keytic,"aw",%nobits
 8215              	keytic:
 8216 0000 00       		.space	1
 8217              		.section	.bss.tim3count,"aw",%nobits
 8218              		.align	2
 8219              		.set	.LANCHOR22,. + 0
 8222              	tim3count:
 8223 0000 00000000 		.space	4
 8224              		.section	.bss.tptic,"aw",%nobits
 8227              	tptic:
 8228 0000 00       		.space	1
 8229              		.section	.bss.u16Vendor,"aw",%nobits
 8230              		.align	1
 8233              	u16Vendor:
 8234 0000 0000     		.space	2
 8235              		.section	.bss.u8IRCheckcode,"aw",%nobits
 8238              	u8IRCheckcode:
 8239 0000 00       		.space	1
 8240              		.section	.bss.u8IRcode,"aw",%nobits
 8243              	u8IRcode:
 8244 0000 00       		.space	1
 8245              		.section	.bss.u8PowerFlg,"aw",%nobits
 8248              	u8PowerFlg:
 8249 0000 00       		.space	1
 8250              		.section	.data.BOOT_ISSUE,"aw",%progbits
 8253              	BOOT_ISSUE:
 8254 0000 01       		.byte	1
 8255              		.section	.data.OSDPreSecCount,"aw",%progbits
 8256              		.align	2
 8257              		.set	.LANCHOR28,. + 0
 8260              	OSDPreSecCount:
 8261 0000 FFFFFFFF 		.word	-1
 8262              		.section	.data.OSDStateFlg,"aw",%progbits
 8263              		.set	.LANCHOR14,. + 0
 8266              	OSDStateFlg:
 8267 0000 01       		.byte	1
 8268              		.section	.data.PWMLevel,"aw",%progbits
 8269              		.set	.LANCHOR19,. + 0
 8272              	PWMLevel:
 8273 0000 80       		.byte	-128
 8274              		.section	.data.PowerFlag,"aw",%progbits
 8275              		.set	.LANCHOR21,. + 0
 8278              	PowerFlag:
 8279 0000 01       		.byte	1
 8280              		.section	.data.PrebVXIS_InputMode,"aw",%progbits
 8281              		.align	2
 8282              		.set	.LANCHOR16,. + 0
 8285              	PrebVXIS_InputMode:
 8286 0000 FA       		.byte	-6
 8287 0001 FA       		.byte	-6
 8288 0002 FA       		.byte	-6
 8289 0003 FA       		.byte	-6
 8290              		.section	.data.VS4210_ADDR,"aw",%progbits
 8293              	VS4210_ADDR:
 8294 0000 40       		.byte	64
 8295              		.section	.data.VS8812_ADDR,"aw",%progbits
 8298              	VS8812_ADDR:
ARM GAS  /tmp/cc8epWVM.s 			page 249


 8299 0000 12       		.byte	18
 8300              		.section	.data.gMode0LoopSecCmpVal,"aw",%progbits
 8301              		.set	.LANCHOR31,. + 0
 8304              	gMode0LoopSecCmpVal:
 8305 0000 0A       		.byte	10
 8306              		.section	.data.gRxLoopFlg,"aw",%progbits
 8309              	gRxLoopFlg:
 8310 0000 01       		.byte	1
 8311              		.section	.rodata.CHECK_HDMI720P50.str1.4,"aMS",%progbits,1
 8312              		.align	2
 8313              	.LC20:
 8314 0000 5372632F 		.ascii	"Src/main.c\000"
 8314      6D61696E 
 8314      2E6300
 8315 000b 00       		.space	1
 8316              	.LC21:
 8317 000c 25732C25 		.ascii	"%s,%s,%d:ch%d, InputMode=%d \015\012\000"
 8317      732C2564 
 8317      3A636825 
 8317      642C2049 
 8317      6E707574 
 8318              		.section	.rodata.GetRS232_CMD.str1.4,"aMS",%progbits,1
 8319              		.align	2
 8320              	.LC1:
 8321 0000 52784275 		.ascii	"RxBufIndex=%d,str=%s\015\012\000"
 8321      66496E64 
 8321      65783D25 
 8321      642C7374 
 8321      723D2573 
 8322 0017 00       		.space	1
 8323              	.LC2:
 8324 0018 49724E75 		.ascii	"IrNum=0x%02x\015\012\000"
 8324      6D3D3078 
 8324      25303278 
 8324      0D0A00
 8325              		.section	.rodata.HDMI_VideoModeDetect.str1.4,"aMS",%progbits,1
 8326              		.align	2
 8327              	.LC22:
 8328 0000 25732C25 		.ascii	"%s,%s,%d:##ch%d, VS4210_Rx_NoSignal\015\012\000"
 8328      732C2564 
 8328      3A232363 
 8328      6825642C 
 8328      20565334 
 8329 0026 0000     		.space	2
 8330              	.LC23:
 8331 0028 25732C25 		.ascii	"%s,%s,%d:ch%d, HDMI=720P50 no support\015\012\000"
 8331      732C2564 
 8331      3A636825 
 8331      642C2048 
 8331      444D493D 
 8332              		.section	.rodata.HS_Select_Win.str1.4,"aMS",%progbits,1
 8333              		.align	2
 8334              	.LC38:
 8335 0000 53656C65 		.ascii	"Selected window 0\015\000"
 8335      63746564 
 8335      2077696E 
 8335      646F7720 
ARM GAS  /tmp/cc8epWVM.s 			page 250


 8335      300D00
 8336 0013 00       		.space	1
 8337              	.LC39:
 8338 0014 25732C25 		.ascii	"%s,%s,%d:ch1, HDMI=720P50  no support\015\012\000"
 8338      732C2564 
 8338      3A636831 
 8338      2C204844 
 8338      4D493D37 
 8339              	.LC40:
 8340 003c 53656C65 		.ascii	"Selected window 1\015\000"
 8340      63746564 
 8340      2077696E 
 8340      646F7720 
 8340      310D00
 8341 004f 00       		.space	1
 8342              	.LC41:
 8343 0050 283D3129 		.ascii	"(=1)\000"
 8343      00
 8344 0055 000000   		.space	3
 8345              	.LC42:
 8346 0058 283D3229 		.ascii	"(=2)\000"
 8346      00
 8347              		.section	.rodata.SET_AHD_MDOE.str1.4,"aMS",%progbits,1
 8348              		.align	2
 8349              	.LC37:
 8350 0000 0D0A5345 		.ascii	"\015\012SET_AHD_MDOE...\000"
 8350      545F4148 
 8350      445F4D44 
 8350      4F452E2E 
 8350      2E00
 8351              		.section	.rodata.SET_Audio_Mute.str1.4,"aMS",%progbits,1
 8352              		.align	2
 8353              	.LC0:
 8354 0000 282A5345 		.ascii	"(*SET_Audio_Mute=%d)\000"
 8354      545F4175 
 8354      64696F5F 
 8354      4D757465 
 8354      3D256429 
 8355              		.section	.rodata.SET_VS4210_1280_720_out.str1.4,"aMS",%progbits,1
 8356              		.align	2
 8357              	.LC36:
 8358 0000 0D0A5345 		.ascii	"\015\012SET_VS4210_1280_720_out\000"
 8358      545F5653 
 8358      34323130 
 8358      5F313238 
 8358      305F3732 
 8359              		.section	.rodata.SET_VS4210_720_480_out.str1.4,"aMS",%progbits,1
 8360              		.align	2
 8361              	.LC35:
 8362 0000 0D0A5345 		.ascii	"\015\012SET_VS4210_720_480_out \000"
 8362      545F5653 
 8362      34323130 
 8362      5F373230 
 8362      5F343830 
 8363              		.section	.rodata.TP_bt1120_1080P_1080P_mode0_w0.str1.4,"aMS",%progbits,1
 8364              		.align	2
 8365              	.LC31:
ARM GAS  /tmp/cc8epWVM.s 			page 251


 8366 0000 0D0A4C6F 		.ascii	"\015\012Loading VS4210 AHD table 1080P... \000"
 8366      6164696E 
 8366      67205653 
 8366      34323130 
 8366      20414844 
 8367              		.section	.rodata.TP_bt1120_720P_1080P_mode0_w0.str1.4,"aMS",%progbits,1
 8368              		.align	2
 8369              	.LC32:
 8370 0000 0D0A4C6F 		.ascii	"\015\012Loading VS4210 AHD table 720P... \000"
 8370      6164696E 
 8370      67205653 
 8370      34323130 
 8370      20414844 
 8371              		.section	.rodata.TP_bt1120_NTSC_1080P_mode0_w0.str1.4,"aMS",%progbits,1
 8372              		.align	2
 8373              	.LC33:
 8374 0000 0D0A4C6F 		.ascii	"\015\012Loading VS4210 AHD table NTSC... \000"
 8374      6164696E 
 8374      67205653 
 8374      34323130 
 8374      20414844 
 8375              		.section	.rodata.TP_bt1120_PAL_1080P_mode0_w0.str1.4,"aMS",%progbits,1
 8376              		.align	2
 8377              	.LC34:
 8378 0000 0D0A4C6F 		.ascii	"\015\012Loading VS4210 AHD table PAL... \000"
 8378      6164696E 
 8378      67205653 
 8378      34323130 
 8378      20414844 
 8379              		.section	.rodata.WaitPowerOn.str1.4,"aMS",%progbits,1
 8380              		.align	2
 8381              	.LC29:
 8382 0000 0D0A2850 		.ascii	"\015\012(Power off..)\000"
 8382      6F776572 
 8382      206F6666 
 8382      2E2E2900 
 8383              	.LC30:
 8384 0010 0D0A2850 		.ascii	"\015\012(Power ON..)\000"
 8384      6F776572 
 8384      204F4E2E 
 8384      2E2900
 8385              		.section	.rodata.__FUNCTION__.9366,"a",%progbits
 8386              		.align	2
 8387              		.set	.LANCHOR8,. + 0
 8390              	__FUNCTION__.9366:
 8391 0000 43484543 		.ascii	"CHECK_HDMI720P50\000"
 8391      4B5F4844 
 8391      4D493732 
 8391      30503530 
 8391      00
 8392              		.section	.rodata.__FUNCTION__.9371,"a",%progbits
 8393              		.align	2
 8394              		.set	.LANCHOR11,. + 0
 8397              	__FUNCTION__.9371:
 8398 0000 48444D49 		.ascii	"HDMI_VideoModeDetect\000"
 8398      5F566964 
 8398      656F4D6F 
ARM GAS  /tmp/cc8epWVM.s 			page 252


 8398      64654465 
 8398      74656374 
 8399              		.section	.rodata.__FUNCTION__.9418,"a",%progbits
 8400              		.align	2
 8401              		.set	.LANCHOR34,. + 0
 8404              	__FUNCTION__.9418:
 8405 0000 6D61696E 		.ascii	"main\000"
 8405      00
 8406              		.section	.rodata.__FUNCTION__.9429,"a",%progbits
 8407              		.align	2
 8408              		.set	.LANCHOR32,. + 0
 8411              	__FUNCTION__.9429:
 8412 0000 6D61696E 		.ascii	"main_loop\000"
 8412      5F6C6F6F 
 8412      7000
 8413              		.section	.rodata.__FUNCTION__.9508,"a",%progbits
 8414              		.align	2
 8415              		.set	.LANCHOR25,. + 0
 8418              	__FUNCTION__.9508:
 8419 0000 48535F53 		.ascii	"HS_Select_Win\000"
 8419      656C6563 
 8419      745F5769 
 8419      6E00
 8420              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 8421              		.align	2
 8422              	.LC45:
 8423 0000 25732C25 		.ascii	"%s,%s,%d:Init HDMI RX,Chip(%d)....\015\012\000"
 8423      732C2564 
 8423      3A496E69 
 8423      74204844 
 8423      4D492052 
 8424 0025 000000   		.space	3
 8425              	.LC46:
 8426 0028 25732C25 		.ascii	"%s,%s,%d:IT66021 chip num=%d , 02reg=0x%02x\015\012"
 8426      732C2564 
 8426      3A495436 
 8426      36303231 
 8426      20636869 
 8427 0055 00       		.ascii	"\000"
 8428 0056 0000     		.space	2
 8429              	.LC47:
 8430 0058 25732C25 		.ascii	"%s,%s,%d:VS4210 chip ID = 0x%02x\015\012\000"
 8430      732C2564 
 8430      3A565334 
 8430      32313020 
 8430      63686970 
 8431 007b 00       		.space	1
 8432              	.LC48:
 8433 007c 25732C25 		.ascii	"%s,%s,%d:VS4210 Init. (Startting...)\015\012\000"
 8433      732C2564 
 8433      3A565334 
 8433      32313020 
 8433      496E6974 
 8434 00a3 00       		.space	1
 8435              	.LC49:
 8436 00a4 0D0A4D61 		.ascii	"\015\012Main Loop...\000"
 8436      696E204C 
ARM GAS  /tmp/cc8epWVM.s 			page 253


 8436      6F6F702E 
 8436      2E2E00
 8437              		.section	.rodata.main_init.str1.4,"aMS",%progbits,1
 8438              		.align	2
 8439              	.LC24:
 8440 0000 0D0A5072 		.ascii	"\015\012Prev.FW:%04x\015\012\000"
 8440      65762E46 
 8440      573A2530 
 8440      34780D0A 
 8440      00
 8441 0011 000000   		.space	3
 8442              	.LC25:
 8443 0014 0D0A4375 		.ascii	"\015\012Curr.FW:%04x\000"
 8443      72722E46 
 8443      573A2530 
 8443      347800
 8444 0023 00       		.space	1
 8445              	.LC26:
 8446 0024 0D0A5B4D 		.ascii	"\015\012[MSG]main_init()=> rev != FWVER & call Clea"
 8446      53475D6D 
 8446      61696E5F 
 8446      696E6974 
 8446      28293D3E 
 8447 0051 72426173 		.ascii	"rBasicEE()\015\012\000"
 8447      69634545 
 8447      28290D0A 
 8447      00
 8448 005e 0000     		.space	2
 8449              	.LC27:
 8450 0060 0D0A4361 		.ascii	"\015\012Cannot access EEPROM!!!!\000"
 8450      6E6E6F74 
 8450      20616363 
 8450      65737320 
 8450      45455052 
 8451 007b 00       		.space	1
 8452              	.LC28:
 8453 007c 0D0A4E6F 		.ascii	"\015\012No initialize\000"
 8453      20696E69 
 8453      7469616C 
 8453      697A6500 
 8454              		.section	.rodata.main_loop.str1.4,"aMS",%progbits,1
 8455              		.align	2
 8456              	.LC43:
 8457 0000 25732C25 		.ascii	"%s,%s,%d:LOOP CH=%d,SMP Sec=%d\015\012\000"
 8457      732C2564 
 8457      3A4C4F4F 
 8457      50204348 
 8457      3D25642C 
 8458 0021 000000   		.space	3
 8459              	.LC44:
 8460 0024 25732C25 		.ascii	"%s,%s,%d:Loop CH=%d,SecCount=%d\015\012\000"
 8460      732C2564 
 8460      3A4C6F6F 
 8460      70204348 
 8460      3D25642C 
 8461              		.section	.rodata.setloopoutmode.str1.4,"aMS",%progbits,1
 8462              		.align	2
ARM GAS  /tmp/cc8epWVM.s 			page 254


 8463              	.LC3:
 8464 0000 56533432 		.ascii	"VS4210_MODE0_w0\015\000"
 8464      31305F4D 
 8464      4F444530 
 8464      5F77300D 
 8464      00
 8465 0011 000000   		.space	3
 8466              	.LC4:
 8467 0014 56533432 		.ascii	"VS4210_MODE0_w1\015\000"
 8467      31305F4D 
 8467      4F444530 
 8467      5F77310D 
 8467      00
 8468 0025 000000   		.space	3
 8469              	.LC5:
 8470 0028 56533432 		.ascii	"VS4210_MODE0_w2\015\000"
 8470      31305F4D 
 8470      4F444530 
 8470      5F77320D 
 8470      00
 8471 0039 000000   		.space	3
 8472              	.LC6:
 8473 003c 56533432 		.ascii	"VS4210_MODE0_w3\015\000"
 8473      31305F4D 
 8473      4F444530 
 8473      5F77330D 
 8473      00
 8474 004d 000000   		.space	3
 8475              	.LC7:
 8476 0050 56533432 		.ascii	"VS4210_MODE1\015\000"
 8476      31305F4D 
 8476      4F444531 
 8476      0D00
 8477 005e 0000     		.space	2
 8478              	.LC8:
 8479 0060 56533432 		.ascii	"VS4210_MODE2\015\000"
 8479      31305F4D 
 8479      4F444532 
 8479      0D00
 8480 006e 0000     		.space	2
 8481              	.LC9:
 8482 0070 56533432 		.ascii	"VS4210_MODE12 ch1 ch2\015\000"
 8482      31305F4D 
 8482      4F444531 
 8482      32206368 
 8482      31206368 
 8483 0087 00       		.space	1
 8484              	.LC10:
 8485 0088 56533432 		.ascii	"VS4210_MODE12 ch1 ch4\015\000"
 8485      31305F4D 
 8485      4F444531 
 8485      32206368 
 8485      31206368 
 8486 009f 00       		.space	1
 8487              	.LC11:
 8488 00a0 56533432 		.ascii	"VS4210_MODE12 ch4 ch2\015\000"
 8488      31305F4D 
ARM GAS  /tmp/cc8epWVM.s 			page 255


 8488      4F444531 
 8488      32206368 
 8488      34206368 
 8489 00b7 00       		.space	1
 8490              	.LC12:
 8491 00b8 56533432 		.ascii	"VS4210_MODE12 ch4 ch3\015\000"
 8491      31305F4D 
 8491      4F444531 
 8491      32206368 
 8491      34206368 
 8492 00cf 00       		.space	1
 8493              	.LC13:
 8494 00d0 56533432 		.ascii	"VS4210_MODE12 ch2 ch1\015\000"
 8494      31305F4D 
 8494      4F444531 
 8494      32206368 
 8494      32206368 
 8495 00e7 00       		.space	1
 8496              	.LC14:
 8497 00e8 56533432 		.ascii	"VS4210_MODE12 ch2 ch3\015\000"
 8497      31305F4D 
 8497      4F444531 
 8497      32206368 
 8497      32206368 
 8498 00ff 00       		.space	1
 8499              	.LC15:
 8500 0100 56533432 		.ascii	"VS4210_MODE12 ch2 ch4\015\000"
 8500      31305F4D 
 8500      4F444531 
 8500      32206368 
 8500      32206368 
 8501 0117 00       		.space	1
 8502              	.LC16:
 8503 0118 56533432 		.ascii	"VS4210_MODE12 ch1 ch3\015\000"
 8503      31305F4D 
 8503      4F444531 
 8503      32206368 
 8503      31206368 
 8504 012f 00       		.space	1
 8505              	.LC17:
 8506 0130 56533432 		.ascii	"VS4210_MODE12 ch3 ch2\015\000"
 8506      31305F4D 
 8506      4F444531 
 8506      32206368 
 8506      33206368 
 8507 0147 00       		.space	1
 8508              	.LC18:
 8509 0148 56533432 		.ascii	"VS4210_MODE12 ch3 ch4\015\000"
 8509      31305F4D 
 8509      4F444531 
 8509      32206368 
 8509      33206368 
 8510 015f 00       		.space	1
 8511              	.LC19:
 8512 0160 56533432 		.ascii	"VS4210_MODE12 ch3 ch1\015\000"
 8512      31305F4D 
 8512      4F444531 
ARM GAS  /tmp/cc8epWVM.s 			page 256


 8512      32206368 
 8512      33206368 
 8513              		.text
 8514              	.Letext0:
 8515              		.file 2 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_
 8516              		.file 3 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 8517              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 8518              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 8519              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 8520              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 8521              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 8522              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 8523              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 8524              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 8525              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 8526              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 8527              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 8528              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 8529              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 8530              		.file 17 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 8531              		.file 18 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 8532              		.file 19 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/st
 8533              		.file 20 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 8534              		.file 21 "VS4210/VXIS_Extern_Define.h"
 8535              		.file 22 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 8536              		.file 23 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/ctype.h"
 8537              		.file 24 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/errno.h"
 8538              		.file 25 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/unistd.h"
 8539              		.file 26 "sw_i2c/VX_swi2c.h"
 8540              		.file 27 "VS4210/VS4210.h"
 8541              		.file 28 "TP2824/tpinc/TP2802.h"
 8542              		.file 29 "VS4210/audio.h"
 8543              		.file 30 "VS4210/GT911.h"
 8544              		.file 31 "VS4210/VX_OSD_Simple.h"
 8545              		.file 32 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdio.h"
 8546              		.file 33 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 8547              		.file 34 "<built-in>"
 8548              		.file 35 "VS4210/Printf.h"
 8549              		.file 36 "VS4210/ite66121.h"
 8550              		.file 37 "VS4210/monitor.h"
 8551              		.file 38 "VS4210/TOA_Protocol.h"
 8552              		.file 39 "sw_i2c/sw_i2c0.h"
 8553              		.file 40 "sw_i2c/sw_i2c1.h"
 8554              		.file 41 "sw_i2c/sw_i2c2.h"
 8555              		.file 42 "Inc/main.h"
 8556              		.file 43 "VS4210/HDMI_RX_lib.h"
 8557              		.file 44 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/string.h"
 8558              		.file 45 "VS4210/keyremo.h"
 8559              		.file 46 "VS4210/Etc_eep.h"
ARM GAS  /tmp/cc8epWVM.s 			page 257


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc8epWVM.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc8epWVM.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc8epWVM.s:171    .text.MX_GPIO_Init:00000000000000c8 $d
     /tmp/cc8epWVM.s:179    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/cc8epWVM.s:185    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/cc8epWVM.s:256    .text.MX_TIM3_Init:000000000000004c $d
                            *COM*:0000000000000040 htim3
     /tmp/cc8epWVM.s:262    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc8epWVM.s:268    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc8epWVM.s:308    .text.MX_USART1_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart1
     /tmp/cc8epWVM.s:314    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc8epWVM.s:320    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc8epWVM.s:360    .text.MX_USART2_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart2
     /tmp/cc8epWVM.s:366    .text.HDMI_AudioModeDetect:0000000000000000 $t
     /tmp/cc8epWVM.s:372    .text.HDMI_AudioModeDetect:0000000000000000 HDMI_AudioModeDetect
     /tmp/cc8epWVM.s:436    .text.HDMI_AudioModeDetect:0000000000000050 $d
                            *COM*:0000000000000001 gPreAudioSampleFreq
     /tmp/cc8epWVM.s:444    .text._write:0000000000000000 $t
     /tmp/cc8epWVM.s:451    .text._write:0000000000000000 _write
     /tmp/cc8epWVM.s:503    .text._write:0000000000000030 $d
     /tmp/cc8epWVM.s:508    .text.Audio_Sel:0000000000000000 $t
     /tmp/cc8epWVM.s:515    .text.Audio_Sel:0000000000000000 Audio_Sel
     /tmp/cc8epWVM.s:537    .text.Audio_Sel:000000000000000e $d
     /tmp/cc8epWVM.s:767    .text.Audio_Sel:0000000000000170 $d
     /tmp/cc8epWVM.s:776    .text.SET_Audio_Mute:0000000000000000 $t
     /tmp/cc8epWVM.s:783    .text.SET_Audio_Mute:0000000000000000 SET_Audio_Mute
     /tmp/cc8epWVM.s:827    .text.SET_Audio_Mute:0000000000000028 $d
     /tmp/cc8epWVM.s:833    .text.InitialTimerEvent:0000000000000000 $t
     /tmp/cc8epWVM.s:840    .text.InitialTimerEvent:0000000000000000 InitialTimerEvent
     /tmp/cc8epWVM.s:860    .text.GetRS232_CMD:0000000000000000 $t
     /tmp/cc8epWVM.s:867    .text.GetRS232_CMD:0000000000000000 GetRS232_CMD
     /tmp/cc8epWVM.s:949    .text.GetRS232_CMD:0000000000000060 $d
     /tmp/cc8epWVM.s:958    .text.setloopoutmode:0000000000000000 $t
     /tmp/cc8epWVM.s:965    .text.setloopoutmode:0000000000000000 setloopoutmode
     /tmp/cc8epWVM.s:985    .text.setloopoutmode:000000000000000c $d
     /tmp/cc8epWVM.s:1005   .text.setloopoutmode:0000000000000034 $t
     /tmp/cc8epWVM.s:1549   .text.setloopoutmode:00000000000002f0 $d
                            *COM*:000000000000000a pVS4210_JointKind1
                            *COM*:0000000000000001 CAMA_M
                            *COM*:0000000000000004 gabVXIS_Input_mirrorH
                            *COM*:0000000000000001 CAMB_M
                            *COM*:0000000000000001 CAMC_M
                            *COM*:0000000000000001 CAMR_M
     /tmp/cc8epWVM.s:1575   .text.setloopoutmode:000000000000034c $t
     /tmp/cc8epWVM.s:1694   .text.setloopoutmode:00000000000003e8 $d
     /tmp/cc8epWVM.s:1709   .text.CHECK_HDMI720P50:0000000000000000 $t
     /tmp/cc8epWVM.s:1716   .text.CHECK_HDMI720P50:0000000000000000 CHECK_HDMI720P50
     /tmp/cc8epWVM.s:1824   .text.CHECK_HDMI720P50:0000000000000068 $d
     /tmp/cc8epWVM.s:1833   .text.HDMI_VideoModeDetect:0000000000000000 $t
     /tmp/cc8epWVM.s:1839   .text.HDMI_VideoModeDetect:0000000000000000 HDMI_VideoModeDetect
     /tmp/cc8epWVM.s:2180   .text.HDMI_VideoModeDetect:00000000000001f0 $d
                            *COM*:0000000000000004 newInRes
                            *COM*:000000000000000a pVS4210_MutiWindows1
ARM GAS  /tmp/cc8epWVM.s 			page 258


     /tmp/cc8epWVM.s:2207   .text.main_init:0000000000000000 $t
     /tmp/cc8epWVM.s:2214   .text.main_init:0000000000000000 main_init
     /tmp/cc8epWVM.s:2307   .text.main_init:0000000000000074 $d
                            *COM*:0000000000000001 DebugLevel
     /tmp/cc8epWVM.s:2317   .text.LCDPowerON:0000000000000000 $t
     /tmp/cc8epWVM.s:2324   .text.LCDPowerON:0000000000000000 LCDPowerON
     /tmp/cc8epWVM.s:2337   .text.LCDPowerOFF:0000000000000000 $t
     /tmp/cc8epWVM.s:2344   .text.LCDPowerOFF:0000000000000000 LCDPowerOFF
     /tmp/cc8epWVM.s:2357   .text.uComOnChipInitial:0000000000000000 $t
     /tmp/cc8epWVM.s:2364   .text.uComOnChipInitial:0000000000000000 uComOnChipInitial
     /tmp/cc8epWVM.s:2399   .text.uComOnChipInitial:0000000000000024 $d
     /tmp/cc8epWVM.s:2404   .text.user_pwm_setvalue:0000000000000000 $t
     /tmp/cc8epWVM.s:2411   .text.user_pwm_setvalue:0000000000000000 user_pwm_setvalue
     /tmp/cc8epWVM.s:2458   .text.user_pwm_setvalue:0000000000000028 $d
                            *COM*:0000000000000040 htim2
     /tmp/cc8epWVM.s:2463   .text.AdjustAutoDayNight:0000000000000000 $t
     /tmp/cc8epWVM.s:2470   .text.AdjustAutoDayNight:0000000000000000 AdjustAutoDayNight
     /tmp/cc8epWVM.s:2593   .text.AdjustAutoDayNight:000000000000008c $d
     /tmp/cc8epWVM.s:2600   .text.LoadEEPROM:0000000000000000 $t
     /tmp/cc8epWVM.s:2607   .text.LoadEEPROM:0000000000000000 LoadEEPROM
     /tmp/cc8epWVM.s:2620   .text.WaitPowerOn:0000000000000000 $t
     /tmp/cc8epWVM.s:2627   .text.WaitPowerOn:0000000000000000 WaitPowerOn
     /tmp/cc8epWVM.s:2732   .text.WaitPowerOn:0000000000000084 $d
     /tmp/cc8epWVM.s:2739   .text.VS4210_FULL88init2:0000000000000000 $t
     /tmp/cc8epWVM.s:2746   .text.VS4210_FULL88init2:0000000000000000 VS4210_FULL88init2
     /tmp/cc8epWVM.s:2790   .text.VS4210_FULL88init2:000000000000001c $d
     /tmp/cc8epWVM.s:2795   .text.TP_bt1120_1080P_1080P_mode0_w0:0000000000000000 $t
     /tmp/cc8epWVM.s:2802   .text.TP_bt1120_1080P_1080P_mode0_w0:0000000000000000 TP_bt1120_1080P_1080P_mode0_w0
     /tmp/cc8epWVM.s:2826   .text.TP_bt1120_1080P_1080P_mode0_w0:0000000000000010 $d
     /tmp/cc8epWVM.s:2832   .text.TP_bt1120_720P_1080P_mode0_w0:0000000000000000 $t
     /tmp/cc8epWVM.s:2839   .text.TP_bt1120_720P_1080P_mode0_w0:0000000000000000 TP_bt1120_720P_1080P_mode0_w0
     /tmp/cc8epWVM.s:2868   .text.TP_bt1120_720P_1080P_mode0_w0:0000000000000018 $d
     /tmp/cc8epWVM.s:2874   .text.TP_bt1120_NTSC_1080P_mode0_w0:0000000000000000 $t
     /tmp/cc8epWVM.s:2881   .text.TP_bt1120_NTSC_1080P_mode0_w0:0000000000000000 TP_bt1120_NTSC_1080P_mode0_w0
     /tmp/cc8epWVM.s:2905   .text.TP_bt1120_NTSC_1080P_mode0_w0:0000000000000010 $d
     /tmp/cc8epWVM.s:2911   .text.TP_bt1120_PAL_1080P_mode0_w0:0000000000000000 $t
     /tmp/cc8epWVM.s:2918   .text.TP_bt1120_PAL_1080P_mode0_w0:0000000000000000 TP_bt1120_PAL_1080P_mode0_w0
     /tmp/cc8epWVM.s:2942   .text.TP_bt1120_PAL_1080P_mode0_w0:0000000000000010 $d
     /tmp/cc8epWVM.s:2948   .text.SET_VS4210_720_480_out:0000000000000000 $t
     /tmp/cc8epWVM.s:2955   .text.SET_VS4210_720_480_out:0000000000000000 SET_VS4210_720_480_out
     /tmp/cc8epWVM.s:3604   .text.SET_VS4210_720_480_out:00000000000003fc $d
     /tmp/cc8epWVM.s:3607   .text.SET_VS4210_720_480_out:0000000000000400 $t
     /tmp/cc8epWVM.s:4172   .text.SET_VS4210_1280_720_out:0000000000000000 $t
     /tmp/cc8epWVM.s:4179   .text.SET_VS4210_1280_720_out:0000000000000000 SET_VS4210_1280_720_out
     /tmp/cc8epWVM.s:4828   .text.SET_VS4210_1280_720_out:00000000000003fc $d
     /tmp/cc8epWVM.s:4831   .text.SET_VS4210_1280_720_out:0000000000000400 $t
     /tmp/cc8epWVM.s:5396   .text.SET_AHD_MDOE:0000000000000000 $t
     /tmp/cc8epWVM.s:5403   .text.SET_AHD_MDOE:0000000000000000 SET_AHD_MDOE
     /tmp/cc8epWVM.s:6052   .text.SET_AHD_MDOE:00000000000003fc $d
     /tmp/cc8epWVM.s:6055   .text.SET_AHD_MDOE:0000000000000400 $t
     /tmp/cc8epWVM.s:6710   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc8epWVM.s:6717   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc8epWVM.s:6790   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc8epWVM.s:6797   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc8epWVM.s:6876   .text.HAL_TIM_PeriodElapsedCallback:0000000000000064 $d
     /tmp/cc8epWVM.s:6890   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cc8epWVM.s:6897   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
ARM GAS  /tmp/cc8epWVM.s 			page 259


     /tmp/cc8epWVM.s:6983   .text.HAL_UART_RxCpltCallback:0000000000000068 $d
     /tmp/cc8epWVM.s:6997   .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/cc8epWVM.s:7004   .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/cc8epWVM.s:7018   .text.HS_Select_Win:0000000000000000 $t
     /tmp/cc8epWVM.s:7025   .text.HS_Select_Win:0000000000000000 HS_Select_Win
     /tmp/cc8epWVM.s:7240   .text.HS_Select_Win:000000000000011c $d
     /tmp/cc8epWVM.s:7258   .text.main_loop:0000000000000000 $t
     /tmp/cc8epWVM.s:7265   .text.main_loop:0000000000000000 main_loop
     /tmp/cc8epWVM.s:7544   .text.main_loop:000000000000018c $d
     /tmp/cc8epWVM.s:7565   .text.main:0000000000000000 $t
     /tmp/cc8epWVM.s:7572   .text.main:0000000000000000 main
     /tmp/cc8epWVM.s:7878   .text.main:00000000000001a8 $d
                            *COM*:0000000000000100 ExOsdContent
     /tmp/cc8epWVM.s:7905   .text.Error_Handler:0000000000000000 $t
     /tmp/cc8epWVM.s:7912   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc8epWVM.s:8266   .data.OSDStateFlg:0000000000000000 OSDStateFlg
     /tmp/cc8epWVM.s:8057   .bss.OSDSecCount:0000000000000000 OSDSecCount
     /tmp/cc8epWVM.s:8309   .data.gRxLoopFlg:0000000000000000 gRxLoopFlg
     /tmp/cc8epWVM.s:8078   .bss.OSD_Show_Flg:0000000000000000 OSD_Show_Flg
     /tmp/cc8epWVM.s:8134   .bss.Tim1_count:0000000000000000 Tim1_count
     /tmp/cc8epWVM.s:8146   .bss.TxCount:0000000000000000 TxCount
     /tmp/cc8epWVM.s:8166   .bss.bSignal:0000000000000000 bSignal
     /tmp/cc8epWVM.s:8304   .data.gMode0LoopSecCmpVal:0000000000000000 gMode0LoopSecCmpVal
     /tmp/cc8epWVM.s:8192   .bss.gMode0LoopSecCount:0000000000000000 gMode0LoopSecCount
     /tmp/cc8epWVM.s:8186   .bss.gMode0LoopFlg:0000000000000000 gMode0LoopFlg
     /tmp/cc8epWVM.s:8180   .bss.gMode0LoopCount:0000000000000000 gMode0LoopCount
     /tmp/cc8epWVM.s:8205   .bss.gbAUDO_INDEX:0000000000000000 gbAUDO_INDEX
                            *COM*:0000000000000001 gPrebAUDO_INDEX
     /tmp/cc8epWVM.s:7991   .bss.CheckSelectInputMode:0000000000000000 CheckSelectInputMode
     /tmp/cc8epWVM.s:8127   .bss.SelectInputMode:0000000000000000 SelectInputMode
     /tmp/cc8epWVM.s:8260   .data.OSDPreSecCount:0000000000000000 OSDPreSecCount
     /tmp/cc8epWVM.s:8285   .data.PrebVXIS_InputMode:0000000000000000 PrebVXIS_InputMode
     /tmp/cc8epWVM.s:7985   .bss.CURRENT_CH:0000000000000000 CURRENT_CH
     /tmp/cc8epWVM.s:8253   .data.BOOT_ISSUE:0000000000000000 BOOT_ISSUE
     /tmp/cc8epWVM.s:8071   .bss.OSD_SPEAKER:0000000000000000 OSD_SPEAKER
     /tmp/cc8epWVM.s:8064   .bss.OSD_MIRROR:0000000000000000 OSD_MIRROR
                            *COM*:0000000000000001 Priority
                            *COM*:0000000000000001 SelectModeType
     /tmp/cc8epWVM.s:8227   .bss.tptic:0000000000000000 tptic
     /tmp/cc8epWVM.s:8215   .bss.keytic:0000000000000000 keytic
     /tmp/cc8epWVM.s:8278   .data.PowerFlag:0000000000000000 PowerFlag
                            *COM*:0000000000000001 TimeStep
     /tmp/cc8epWVM.s:8272   .data.PWMLevel:0000000000000000 PWMLevel
     /tmp/cc8epWVM.s:7979   .bss.AutoDayNightDelay:0000000000000000 AutoDayNightDelay
     /tmp/cc8epWVM.s:8051   .bss.LightSensor_ADC:0000000000000000 LightSensor_ADC
     /tmp/cc8epWVM.s:7997   .bss.DayNightLevel:0000000000000000 DayNightLevel
     /tmp/cc8epWVM.s:8210   .bss.half_scaler:0000000000000000 half_scaler
                            *COM*:0000000000000001 ManVidRes
     /tmp/cc8epWVM.s:8298   .data.VS8812_ADDR:0000000000000000 VS8812_ADDR
     /tmp/cc8epWVM.s:8293   .data.VS4210_ADDR:0000000000000000 VS4210_ADDR
                            *COM*:0000000000000030 hadc1
     /tmp/cc8epWVM.s:7980   .bss.AutoDayNightDelay:0000000000000000 $d
     /tmp/cc8epWVM.s:7986   .bss.CURRENT_CH:0000000000000000 $d
     /tmp/cc8epWVM.s:7992   .bss.CheckSelectInputMode:0000000000000000 $d
     /tmp/cc8epWVM.s:7998   .bss.DayNightLevel:0000000000000000 $d
     /tmp/cc8epWVM.s:8000   .bss.DebugFlg:0000000000000000 $d
     /tmp/cc8epWVM.s:8003   .bss.DebugFlg:0000000000000000 DebugFlg
ARM GAS  /tmp/cc8epWVM.s 			page 260


     /tmp/cc8epWVM.s:8006   .bss.IR_4BYTE:0000000000000000 $d
     /tmp/cc8epWVM.s:8009   .bss.IR_4BYTE:0000000000000000 IR_4BYTE
     /tmp/cc8epWVM.s:8014   .bss.IR_Code:0000000000000000 IR_Code
     /tmp/cc8epWVM.s:8015   .bss.IR_Code:0000000000000000 $d
     /tmp/cc8epWVM.s:8019   .bss.IR_END_Flg:0000000000000000 IR_END_Flg
     /tmp/cc8epWVM.s:8020   .bss.IR_END_Flg:0000000000000000 $d
     /tmp/cc8epWVM.s:8024   .bss.IR_IRQFlg:0000000000000000 IR_IRQFlg
     /tmp/cc8epWVM.s:8025   .bss.IR_IRQFlg:0000000000000000 $d
     /tmp/cc8epWVM.s:8029   .bss.IR_IRQ_Index:0000000000000000 IR_IRQ_Index
     /tmp/cc8epWVM.s:8030   .bss.IR_IRQ_Index:0000000000000000 $d
     /tmp/cc8epWVM.s:8032   .bss.IR_PlusTimeVal:0000000000000000 $d
     /tmp/cc8epWVM.s:8035   .bss.IR_PlusTimeVal:0000000000000000 IR_PlusTimeVal
     /tmp/cc8epWVM.s:8040   .bss.IR_ShiftCount:0000000000000000 IR_ShiftCount
     /tmp/cc8epWVM.s:8041   .bss.IR_ShiftCount:0000000000000000 $d
     /tmp/cc8epWVM.s:8045   .bss.IR_StartFlg:0000000000000000 IR_StartFlg
     /tmp/cc8epWVM.s:8046   .bss.IR_StartFlg:0000000000000000 $d
     /tmp/cc8epWVM.s:8048   .bss.LightSensor_ADC:0000000000000000 $d
     /tmp/cc8epWVM.s:8058   .bss.OSDSecCount:0000000000000000 $d
     /tmp/cc8epWVM.s:8060   .bss.OSD_MIRROR:0000000000000000 $d
     /tmp/cc8epWVM.s:8067   .bss.OSD_SPEAKER:0000000000000000 $d
     /tmp/cc8epWVM.s:8074   .bss.OSD_Show_Flg:0000000000000000 $d
     /tmp/cc8epWVM.s:8083   .bss.PreIR_Code:0000000000000000 PreIR_Code
     /tmp/cc8epWVM.s:8084   .bss.PreIR_Code:0000000000000000 $d
     /tmp/cc8epWVM.s:8088   .bss.PreIR_IRQ_Index:0000000000000000 PreIR_IRQ_Index
     /tmp/cc8epWVM.s:8089   .bss.PreIR_IRQ_Index:0000000000000000 $d
     /tmp/cc8epWVM.s:8091   .bss.Rx2_data:0000000000000000 $d
     /tmp/cc8epWVM.s:8095   .bss.Rx2_data:0000000000000000 Rx2_data
     /tmp/cc8epWVM.s:8098   .bss.RxBufIndex:0000000000000000 $d
     /tmp/cc8epWVM.s:8102   .bss.RxBufIndex:0000000000000000 RxBufIndex
     /tmp/cc8epWVM.s:8105   .bss.Rx_data:0000000000000000 $d
     /tmp/cc8epWVM.s:8109   .bss.Rx_data:0000000000000000 Rx_data
     /tmp/cc8epWVM.s:8112   .bss.Rx_indx:0000000000000000 $d
     /tmp/cc8epWVM.s:8115   .bss.Rx_indx:0000000000000000 Rx_indx
     /tmp/cc8epWVM.s:8118   .bss.RxiCount:0000000000000000 $d
     /tmp/cc8epWVM.s:8121   .bss.RxiCount:0000000000000000 RxiCount
     /tmp/cc8epWVM.s:8128   .bss.SelectInputMode:0000000000000000 $d
     /tmp/cc8epWVM.s:8130   .bss.Tim1_count:0000000000000000 $d
     /tmp/cc8epWVM.s:8140   .bss.Transfer_cplt:0000000000000000 Transfer_cplt
     /tmp/cc8epWVM.s:8141   .bss.Transfer_cplt:0000000000000000 $d
     /tmp/cc8epWVM.s:8147   .bss.TxCount:0000000000000000 $d
     /tmp/cc8epWVM.s:8149   .bss.TxiCount:0000000000000000 $d
     /tmp/cc8epWVM.s:8152   .bss.TxiCount:0000000000000000 TxiCount
     /tmp/cc8epWVM.s:8155   .bss.bOldSignal:0000000000000000 $d
     /tmp/cc8epWVM.s:8159   .bss.bOldSignal:0000000000000000 bOldSignal
     /tmp/cc8epWVM.s:8162   .bss.bSignal:0000000000000000 $d
     /tmp/cc8epWVM.s:8169   .bss.gAudioSampleFreq:0000000000000000 $d
     /tmp/cc8epWVM.s:8173   .bss.gAudioSampleFreq:0000000000000000 gAudioSampleFreq
     /tmp/cc8epWVM.s:8176   .bss.gMode0LoopCount:0000000000000000 $d
     /tmp/cc8epWVM.s:8187   .bss.gMode0LoopFlg:0000000000000000 $d
     /tmp/cc8epWVM.s:8193   .bss.gMode0LoopSecCount:0000000000000000 $d
     /tmp/cc8epWVM.s:8195   .bss.gRxbuf:0000000000000000 $d
     /tmp/cc8epWVM.s:8199   .bss.gRxbuf:0000000000000000 gRxbuf
     /tmp/cc8epWVM.s:8206   .bss.gbAUDO_INDEX:0000000000000000 $d
     /tmp/cc8epWVM.s:8211   .bss.half_scaler:0000000000000000 $d
     /tmp/cc8epWVM.s:8216   .bss.keytic:0000000000000000 $d
     /tmp/cc8epWVM.s:8218   .bss.tim3count:0000000000000000 $d
     /tmp/cc8epWVM.s:8222   .bss.tim3count:0000000000000000 tim3count
ARM GAS  /tmp/cc8epWVM.s 			page 261


     /tmp/cc8epWVM.s:8228   .bss.tptic:0000000000000000 $d
     /tmp/cc8epWVM.s:8230   .bss.u16Vendor:0000000000000000 $d
     /tmp/cc8epWVM.s:8233   .bss.u16Vendor:0000000000000000 u16Vendor
     /tmp/cc8epWVM.s:8238   .bss.u8IRCheckcode:0000000000000000 u8IRCheckcode
     /tmp/cc8epWVM.s:8239   .bss.u8IRCheckcode:0000000000000000 $d
     /tmp/cc8epWVM.s:8243   .bss.u8IRcode:0000000000000000 u8IRcode
     /tmp/cc8epWVM.s:8244   .bss.u8IRcode:0000000000000000 $d
     /tmp/cc8epWVM.s:8248   .bss.u8PowerFlg:0000000000000000 u8PowerFlg
     /tmp/cc8epWVM.s:8249   .bss.u8PowerFlg:0000000000000000 $d
     /tmp/cc8epWVM.s:8256   .data.OSDPreSecCount:0000000000000000 $d
     /tmp/cc8epWVM.s:8281   .data.PrebVXIS_InputMode:0000000000000000 $d
     /tmp/cc8epWVM.s:8312   .rodata.CHECK_HDMI720P50.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8319   .rodata.GetRS232_CMD.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8326   .rodata.HDMI_VideoModeDetect.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8333   .rodata.HS_Select_Win.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8348   .rodata.SET_AHD_MDOE.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8352   .rodata.SET_Audio_Mute.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8356   .rodata.SET_VS4210_1280_720_out.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8360   .rodata.SET_VS4210_720_480_out.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8364   .rodata.TP_bt1120_1080P_1080P_mode0_w0.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8368   .rodata.TP_bt1120_720P_1080P_mode0_w0.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8372   .rodata.TP_bt1120_NTSC_1080P_mode0_w0.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8376   .rodata.TP_bt1120_PAL_1080P_mode0_w0.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8380   .rodata.WaitPowerOn.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8386   .rodata.__FUNCTION__.9366:0000000000000000 $d
     /tmp/cc8epWVM.s:8390   .rodata.__FUNCTION__.9366:0000000000000000 __FUNCTION__.9366
     /tmp/cc8epWVM.s:8393   .rodata.__FUNCTION__.9371:0000000000000000 $d
     /tmp/cc8epWVM.s:8397   .rodata.__FUNCTION__.9371:0000000000000000 __FUNCTION__.9371
     /tmp/cc8epWVM.s:8400   .rodata.__FUNCTION__.9418:0000000000000000 $d
     /tmp/cc8epWVM.s:8404   .rodata.__FUNCTION__.9418:0000000000000000 __FUNCTION__.9418
     /tmp/cc8epWVM.s:8407   .rodata.__FUNCTION__.9429:0000000000000000 $d
     /tmp/cc8epWVM.s:8411   .rodata.__FUNCTION__.9429:0000000000000000 __FUNCTION__.9429
     /tmp/cc8epWVM.s:8414   .rodata.__FUNCTION__.9508:0000000000000000 $d
     /tmp/cc8epWVM.s:8418   .rodata.__FUNCTION__.9508:0000000000000000 __FUNCTION__.9508
     /tmp/cc8epWVM.s:8421   .rodata.main.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8438   .rodata.main_init.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8455   .rodata.main_loop.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:8462   .rodata.setloopoutmode.str1.4:0000000000000000 $d
     /tmp/cc8epWVM.s:542    .text.Audio_Sel:0000000000000013 $d
     /tmp/cc8epWVM.s:542    .text.Audio_Sel:0000000000000014 $t

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
getHDMIRXAudioInfo
HDMI_Tx_SetAudioFs
gHDMI_Index
HAL_UART_Transmit
__errno
Printf
MCUTimerInitialTimerEvent
printf
strtol
ARM GAS  /tmp/cc8epWVM.s 			page 262


puts
VS4210_SetMutiWindows
AudioMute
MCUTimerCancelTimerEvent
MCUTimerActiveTimerEvent
AUDIO_SELECT
HDMIRX_ReadI2C_Byte
gbVXIS_InputMode
CheckHDMIRX
VS4210_Rx_NoSignal
Set_Video_Loss_OSD
GetHDMI_InputMode
VS4210_SetInModeOutMode
VS4210_SetInputSizeHV
VXISI2CWrite
PreVState
VState
gHTotal
gVActive
gHActive
gVTotal
GetFWRevEE
delay
SaveFWRevEE
ClearBasicEE
HAL_TIM_PWM_ConfigChannel
HAL_TIM_PWM_Start
PowerLED
WriteEEP
TriggerHandler
SysTimerHandler
EQ_Detect
GT9147_Scan
CheckKeyIn
CheckTrigger
VS4210_Addr_88param
VS4210_TP_bt1120_1080P_1080P_mode0_w0_88param
VS4210_TP_bt1120_720P_1080P_mode0_w0_88param
VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param
VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
tic02
tic03
tic04
g_usTimerCounter
g_bNotifyTimer0Int
HAL_UART_Receive_IT
RS_in
RS_buf
RS2_in
RS2_buf
mode
TP_InputMode
HDMITX_DevLoopProc
OSD_Clear_All
ARM GAS  /tmp/cc8epWVM.s 			page 263


Monitor
RS_ready
TOAReceivePaser
RS2_ready
Get_2824cIrq
msleep
VXISI2CRead
HAL_GPIO_ReadPin
AccessEnable
HAL_Init
SW_I2C0_Init
SW_I2C1_Init
SW_I2C2_Init
SW_I2C3_Init
InitHDMIRX
HDMIRX_WriteI2C_Byte
VXOSD_UseFont_init
Init_TP280x_RegSet
VXIS_fSetOsdx2
HAL_TIM_Base_Start_IT
UserDefineFont1
