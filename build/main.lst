ARM GAS  /tmp/ccUr6nXF.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB98:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include <stdio.h>
  27:Src/main.c    **** #include <stdlib.h>
  28:Src/main.c    **** #include <ctype.h>
  29:Src/main.c    **** #include <errno.h>
  30:Src/main.c    **** #ifdef __GNUC__
  31:Src/main.c    ****     #include <sys/unistd.h>
  32:Src/main.c    **** #endif
  33:Src/main.c    **** 
  34:Src/main.c    **** #include "VXIS_Extern_Define.h"
ARM GAS  /tmp/ccUr6nXF.s 			page 2


  35:Src/main.c    **** #include "sw_i2c0.h"  //TP2824
  36:Src/main.c    **** #include "sw_i2c1.h"  //VS4210
  37:Src/main.c    **** #include "sw_i2c2.h"  //IT66121
  38:Src/main.c    **** #include "VX_swi2c.h"
  39:Src/main.c    **** #include "ite66121.h"
  40:Src/main.c    **** #include "HDMI_RX_lib.h"
  41:Src/main.c    **** #include "VS4210.h"
  42:Src/main.c    **** #include "IRdef.h"
  43:Src/main.c    **** #include "TP2802.h"
  44:Src/main.c    **** #include "VX_OSD_Simple.h"
  45:Src/main.c    **** #include "monitor.h"
  46:Src/main.c    **** #include "Printf.h"
  47:Src/main.c    **** #include "Etc_eep.h"
  48:Src/main.c    **** #include 	"audio.h"
  49:Src/main.c    **** #include "keyremo.h"
  50:Src/main.c    **** #include "VX8812.h"
  51:Src/main.c    **** #include "HDMI_RX_lib.h"
  52:Src/main.c    **** 
  53:Src/main.c    **** #include "TOA_Protocol.h"
  54:Src/main.c    **** 
  55:Src/main.c    **** //#include "VS4210_param_Mode88.h"
  56:Src/main.c    **** //#include "VS4210_param_Modex26.h"
  57:Src/main.c    **** 
  58:Src/main.c    **** #include "GT911.h"
  59:Src/main.c    **** //#include "exOSDfont.h"
  60:Src/main.c    **** 
  61:Src/main.c    **** //#include "it660x.h"
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE END Includes */
  64:Src/main.c    **** 
  65:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  66:Src/main.c    **** /* USER CODE BEGIN PTD */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE END PTD */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  71:Src/main.c    **** /* USER CODE BEGIN PD */
  72:Src/main.c    **** #define RXBUFMAX 50
  73:Src/main.c    **** #define IR_Vendor_Code_ 0xFF00
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE END PD */
  76:Src/main.c    **** 
  77:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  78:Src/main.c    **** /* USER CODE BEGIN PM */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* USER CODE END PM */
  81:Src/main.c    **** 
  82:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  83:Src/main.c    **** TIM_HandleTypeDef htim3;
  84:Src/main.c    **** 
  85:Src/main.c    **** UART_HandleTypeDef huart1;
  86:Src/main.c    **** UART_HandleTypeDef huart2;
  87:Src/main.c    **** 
  88:Src/main.c    **** ADC_HandleTypeDef hadc1;
  89:Src/main.c    **** TIM_HandleTypeDef htim2;
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE BEGIN PV */
ARM GAS  /tmp/ccUr6nXF.s 			page 3


  92:Src/main.c    **** volatile tByte VS4210_ADDR = 0x40 ;
  93:Src/main.c    **** volatile tByte VS8812_ADDR = 0x12 ;
  94:Src/main.c    **** #define OSD_OFF_SEC 10
  95:Src/main.c    **** 
  96:Src/main.c    **** //RX
  97:Src/main.c    **** tByte	ManVidRes;
  98:Src/main.c    **** tByte	half_scaler = 0;
  99:Src/main.c    **** tByte	DebugLevel;
 100:Src/main.c    **** tByte	DayNightLevel=0;
 101:Src/main.c    **** tWord LightSensor_ADC=0;
 102:Src/main.c    **** BYTE AutoDayNightDelay=0;
 103:Src/main.c    **** DATA BYTE PWMLevel=0x80;
 104:Src/main.c    **** BYTE TimeStep;
 105:Src/main.c    **** BYTE	PowerFlag=1;
 106:Src/main.c    **** DATA BYTE keytic=0,tptic=0;
 107:Src/main.c    **** BYTE	SelectModeType;
 108:Src/main.c    **** BYTE	Priority;
 109:Src/main.c    **** BYTE CAMA_M;	
 110:Src/main.c    **** BYTE CAMB_M;	
 111:Src/main.c    **** BYTE CAMC_M;	
 112:Src/main.c    **** BYTE CAMR_M;
 113:Src/main.c    **** BYTE OSD_MIRROR[4]={0,0,0,0};
 114:Src/main.c    **** BYTE OSD_SPEAKER[4]={0,0,0,0};
 115:Src/main.c    **** BYTE BOOT_ISSUE=1;
 116:Src/main.c    **** BYTE CURRENT_CH=0;
 117:Src/main.c    **** tByte ExOsdContent[256] ;
 118:Src/main.c    **** tByte PrebVXIS_InputMode[4]= {250,250,250,250} ;
 119:Src/main.c    **** 
 120:Src/main.c    **** int OSDPreSecCount =-1 ;
 121:Src/main.c    **** BYTE SelectInputMode=0;///0=HDMI , 1=AHD
 122:Src/main.c    **** BYTE CheckSelectInputMode=0;///0=HDMI , 1=AHD
 123:Src/main.c    **** 
 124:Src/main.c    **** //audio
 125:Src/main.c    **** tByte gPreAudioSampleFreq ;
 126:Src/main.c    **** tByte gPrebAUDO_INDEX  ;
 127:Src/main.c    **** tByte gbAUDO_INDEX = 0  ;
 128:Src/main.c    **** static tByte gAudioSampleFreq[4] ;
 129:Src/main.c    **** 
 130:Src/main.c    **** tWord gMode0LoopCount = 0 ;
 131:Src/main.c    **** tByte gMode0LoopFlg = 0 ;
 132:Src/main.c    **** tByte gMode0LoopSecCount = 0 ;
 133:Src/main.c    **** tByte gMode0LoopSecCmpVal = 10 ;
 134:Src/main.c    **** 
 135:Src/main.c    **** //Rx
 136:Src/main.c    **** static tByte bOldSignal[4] ;
 137:Src/main.c    **** tByte bSignal[4]= {0,0,0,0} ;
 138:Src/main.c    **** extern tByte PreVState[4] ;
 139:Src/main.c    **** extern tByte VState[4] ;
 140:Src/main.c    **** extern tByte AState[4] ;
 141:Src/main.c    **** 
 142:Src/main.c    **** //Tx
 143:Src/main.c    **** tByte TxCount = 0 ;
 144:Src/main.c    **** 
 145:Src/main.c    **** T_VS4210_MutiWindows pVS4210_MutiWindows1 ;
 146:Src/main.c    **** unsigned int volatile Tim1_count=0;
 147:Src/main.c    **** bit OSD_Show_Flg = 0 ;
 148:Src/main.c    **** 
ARM GAS  /tmp/ccUr6nXF.s 			page 4


 149:Src/main.c    **** static int TimeOutCount ;
 150:Src/main.c    **** 
 151:Src/main.c    **** extern DATA BYTE keytic;
 152:Src/main.c    **** extern 	DATA BYTE Key;
 153:Src/main.c    **** extern 	bit KeyReady, RepeatKey;
 154:Src/main.c    **** 
 155:Src/main.c    **** extern BYTE  updn_reg[4];
 156:Src/main.c    **** extern BYTE Time5ms;
 157:Src/main.c    **** extern bit ChangeKey;
 158:Src/main.c    **** extern tByte RS_buf[BUF_MAX];
 159:Src/main.c    **** extern  tByte RS2_buf[TOA_BUF_MAX];
 160:Src/main.c    **** extern  tByte	 RS_in, RS2_in;
 161:Src/main.c    **** extern BYTE tic02;
 162:Src/main.c    **** extern WORD tic03,tic04,tic05;
 163:Src/main.c    **** extern volatile WORD  g_usTimerCounter;
 164:Src/main.c    **** extern volatile bit g_bNotifyTimer0Int;
 165:Src/main.c    **** extern BYTE	AudioVol;
 166:Src/main.c    **** extern BYTE NowModeState;
 167:Src/main.c    **** extern BYTE Disp_Input;
 168:Src/main.c    **** extern BYTE OSD_LOCKF;
 169:Src/main.c    **** extern BYTE TriggerFlag;
 170:Src/main.c    **** 
 171:Src/main.c    **** extern BYTE	MainSetSelectMode[13];
 172:Src/main.c    **** /*extern*/ tByte gabVXIS_Input_mirrorH[4];
 173:Src/main.c    **** extern tByte gWindowNum ;
 174:Src/main.c    **** 
 175:Src/main.c    **** extern BYTE TP_ACTION;
 176:Src/main.c    **** extern BYTE TP_PRES_DOWN;
 177:Src/main.c    **** extern BYTE TouchP;
 178:Src/main.c    **** extern USHORT ucTickCount;
 179:Src/main.c    **** extern bit   AccessEnable;
 180:Src/main.c    **** extern tByte TP_InputMode;
 181:Src/main.c    **** extern tByte mode[0];
 182:Src/main.c    **** 
 183:Src/main.c    **** extern tcByte VS4210_TP_bt1120_1080P_1080P_mode0_w0_88param[VS4210_INIT_NUMBER] ;
 184:Src/main.c    **** extern tcByte VS4210_TP_bt1120_720P_1080P_mode0_w0_88param[VS4210_INIT_NUMBER] ;
 185:Src/main.c    **** extern tcByte VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param[VS4210_INIT_NUMBER] ;
 186:Src/main.c    **** extern tcByte VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param[VS4210_INIT_NUMBER] ;
 187:Src/main.c    **** 
 188:Src/main.c    **** //Extern OSD 20200110-01
 189:Src/main.c    **** extern const unsigned char UserDefineFont1[40*(4+23+1)] ; //extern OSD
 190:Src/main.c    **** 
 191:Src/main.c    **** extern tcByte VS4210_hdmi1080P_1080P_mode0_w0_88param[VS4210_INIT_NUMBER];
 192:Src/main.c    **** extern tcByte VS4210_Addr_88param[VS4210_INIT_NUMBER];
 193:Src/main.c    **** 
 194:Src/main.c    **** tByte volatile gRxLoopFlg = 1 ;
 195:Src/main.c    **** T_VS4210_MutiWindows pVS4210_JointKind1 ;
 196:Src/main.c    **** 
 197:Src/main.c    **** static volatile tByte  u8PowerFlg  = 0 ;
 198:Src/main.c    **** /*static volatile */tByte  OSDSecCount = 0 ;
 199:Src/main.c    **** //static volatile 
 200:Src/main.c    **** 	tByte  OSDStateFlg = 1 ;
 201:Src/main.c    **** static volatile tByte  IR_ShiftCount = 0 ;
 202:Src/main.c    **** static volatile tDWord IR_4BYTE = 0 ;
 203:Src/main.c    **** static volatile tWord  u16Vendor ;
 204:Src/main.c    **** static volatile tByte  u8IRcode ;
 205:Src/main.c    **** static volatile tByte  u8IRCheckcode ;
ARM GAS  /tmp/ccUr6nXF.s 			page 5


 206:Src/main.c    **** static volatile tByte  PreIR_Code = 0 ;
 207:Src/main.c    **** static volatile tByte  IR_Code = 0 ;
 208:Src/main.c    **** static volatile tByte  IR_StartFlg = 0 ;
 209:Src/main.c    **** static volatile tByte  IR_END_Flg = 0 ;
 210:Src/main.c    **** static volatile tByte  IR_IRQFlg = 0 ;
 211:Src/main.c    **** static volatile tByte  PreIR_IRQ_Index = 0 ;
 212:Src/main.c    **** static volatile tByte  IR_IRQ_Index = 0 ;
 213:Src/main.c    **** static volatile tWord  IR_PlusTimeVal = 0 ;
 214:Src/main.c    **** static volatile tDWord tim3count = 0 ; //10us
 215:Src/main.c    **** 
 216:Src/main.c    **** static volatile tDWord TxiCount = 0 ;
 217:Src/main.c    **** static volatile tDWord RxiCount = 0 ;
 218:Src/main.c    **** 
 219:Src/main.c    **** static char Rx_data[2],Rx2_data[2]/*, Rx_Buffer[RXBUFMAX]*/, Transfer_cplt;
 220:Src/main.c    **** static volatile int Rx_indx = 0 ;
 221:Src/main.c    **** static volatile int RxBufIndex= 0 ;
 222:Src/main.c    **** static char gRxbuf[RXBUFMAX] ;
 223:Src/main.c    **** 
 224:Src/main.c    **** static volatile int DebugFlg = 0 ;
 225:Src/main.c    **** 
 226:Src/main.c    **** //static int OutMapLoopModeIndex = VS4210_LOOP_MODE_NUMBER ;
 227:Src/main.c    **** //static tByte OutMapLoopOutSizeIndex ;
 228:Src/main.c    **** 
 229:Src/main.c    **** /* USER CODE END PV */
 230:Src/main.c    **** 
 231:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 232:Src/main.c    **** void SystemClock_Config(void);
 233:Src/main.c    **** //static void MX_ADC1_Init(void);
 234:Src/main.c    **** //static void MX_TIM2_Init(void);
 235:Src/main.c    **** static void MX_GPIO_Init(void);
 236:Src/main.c    **** static void MX_TIM3_Init(void);
 237:Src/main.c    **** static void MX_USART1_UART_Init(void);
 238:Src/main.c    **** static void MX_USART2_UART_Init(void);
 239:Src/main.c    **** 
 240:Src/main.c    **** extern void MCUTimerInitialTimerEvent(void);
 241:Src/main.c    **** extern void MCUTimerActiveTimerEvent(WORD usTime, BYTE ucEventID);
 242:Src/main.c    **** extern BYTE RS_ready(void);
 243:Src/main.c    **** extern BYTE RS2_ready(void);
 244:Src/main.c    **** 
 245:Src/main.c    **** extern void SysTimerHandler(void);
 246:Src/main.c    **** 
 247:Src/main.c    **** 
 248:Src/main.c    **** /* USER CODE BEGIN PFP */
 249:Src/main.c    **** #ifdef __GNUC__
 250:Src/main.c    **** 
 251:Src/main.c    **** // With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
 252:Src/main.c    **** 
 253:Src/main.c    **** //   set to 'Yes') calls __io_putchar()
 254:Src/main.c    **** 
 255:Src/main.c    **** int _write(int file, char *data, int len)
 256:Src/main.c    **** {
 257:Src/main.c    ****     if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 258:Src/main.c    ****     {
 259:Src/main.c    ****         errno = EBADF;
 260:Src/main.c    ****         return -1;
 261:Src/main.c    ****     }
 262:Src/main.c    ****     // arbitrary timeout 1000
ARM GAS  /tmp/ccUr6nXF.s 			page 6


 263:Src/main.c    ****     HAL_StatusTypeDef status =
 264:Src/main.c    ****         HAL_UART_Transmit(&huart1, (uint8_t*)data, (uint16_t)len, 1000);
 265:Src/main.c    ****     // return # of bytes written - as best we can tell
 266:Src/main.c    ****     return (status == HAL_OK ? len : 0);
 267:Src/main.c    **** }
 268:Src/main.c    **** #else
 269:Src/main.c    **** int fputc(int ch, FILE *f)
 270:Src/main.c    **** {
 271:Src/main.c    ****     /* Place your implementation of fputc here */
 272:Src/main.c    ****     /* e.g. write a character to the USART */
 273:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 274:Src/main.c    ****     return ch;
 275:Src/main.c    **** }
 276:Src/main.c    **** #endif
 277:Src/main.c    **** 
 278:Src/main.c    **** void Audio_Sel(unsigned char mode )
 279:Src/main.c    **** {
 280:Src/main.c    ****     gbAUDO_INDEX = mode ;
 281:Src/main.c    ****     switch(mode)
 282:Src/main.c    ****     {
 283:Src/main.c    ****     case HDMI_AUDIO_NONE:
 284:Src/main.c    **** //        A_AUDIO = 1 ;
 285:Src/main.c    **** //        B_AUDIO = 1 ;
 286:Src/main.c    **** //        H1_AUDIO= 1 ;
 287:Src/main.c    **** //        H2_AUDIO= 1 ;
 288:Src/main.c    **** //        H3_AUDIO= 1 ;
 289:Src/main.c    **** //        H4_AUDIO= 1 ;
 290:Src/main.c    ****   //mask by ryan@20210126             HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_SE
 291:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_SET);
 292:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 293:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 294:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 295:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 296:Src/main.c    ****         break ;
 297:Src/main.c    **** 
 298:Src/main.c    ****     case HDMI_AUDIO_1:
 299:Src/main.c    **** //        A_AUDIO = 0 ;
 300:Src/main.c    **** //        B_AUDIO = 1 ;
 301:Src/main.c    **** //        H1_AUDIO= 0 ;
 302:Src/main.c    **** //        H2_AUDIO= 1 ;
 303:Src/main.c    **** //        H3_AUDIO= 1 ;
 304:Src/main.c    **** //        H4_AUDIO= 1 ;
 305:Src/main.c    **** 
 306:Src/main.c    ****   //mask by ryan@20210126      HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_RESET);
 307:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_SET);
 308:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_RESET);
 309:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 310:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 311:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 312:Src/main.c    **** 
 313:Src/main.c    ****         HDMI_Tx_SetAudioFs(gAudioSampleFreq[0])  ;
 314:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[0] ;
 315:Src/main.c    ****         break ;
 316:Src/main.c    **** 
 317:Src/main.c    ****     case HDMI_AUDIO_2:
 318:Src/main.c    **** //        A_AUDIO = 0 ;
 319:Src/main.c    **** //        B_AUDIO = 1 ;
ARM GAS  /tmp/ccUr6nXF.s 			page 7


 320:Src/main.c    **** //        H1_AUDIO= 1 ;
 321:Src/main.c    **** //        H2_AUDIO= 0 ;
 322:Src/main.c    **** //        H3_AUDIO= 1 ;
 323:Src/main.c    **** //        H4_AUDIO= 1 ;
 324:Src/main.c    **** 
 325:Src/main.c    ****   //mask by ryan@20210126             HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_RE
 326:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_SET);
 327:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 328:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_RESET);
 329:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 330:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 331:Src/main.c    **** 
 332:Src/main.c    ****         HDMI_Tx_SetAudioFs(gAudioSampleFreq[1])  ;
 333:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[1] ;
 334:Src/main.c    ****         break ;
 335:Src/main.c    **** 
 336:Src/main.c    ****     case HDMI_AUDIO_3:
 337:Src/main.c    **** //        A_AUDIO = 1 ;
 338:Src/main.c    **** //        B_AUDIO = 0 ;
 339:Src/main.c    **** //        H1_AUDIO= 1 ;
 340:Src/main.c    **** //        H2_AUDIO= 1 ;
 341:Src/main.c    **** //        H3_AUDIO= 0 ;
 342:Src/main.c    **** //        H4_AUDIO= 1 ;
 343:Src/main.c    ****    //mask by ryan@20210126            HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_SE
 344:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_RESET);
 345:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 346:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 347:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_RESET);
 348:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 349:Src/main.c    **** 
 350:Src/main.c    ****         HDMI_Tx_SetAudioFs(gAudioSampleFreq[2])  ;
 351:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[2] ;
 352:Src/main.c    ****         break ;
 353:Src/main.c    **** 
 354:Src/main.c    ****     case HDMI_AUDIO_4:
 355:Src/main.c    **** //        A_AUDIO = 1 ;
 356:Src/main.c    **** //        B_AUDIO = 0 ;
 357:Src/main.c    **** //        H1_AUDIO= 1 ;
 358:Src/main.c    **** //        H2_AUDIO= 1 ;
 359:Src/main.c    **** //        H3_AUDIO= 1 ;
 360:Src/main.c    **** //        H4_AUDIO= 0 ;
 361:Src/main.c    ****   //mask by ryan@20210126             HAL_GPIO_WritePin(A_AUDIO_GPIO_Port, A_AUDIO_Pin, GPIO_PIN_SE
 362:Src/main.c    ****         HAL_GPIO_WritePin(B_AUDIO_GPIO_Port, B_AUDIO_Pin, GPIO_PIN_RESET);
 363:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 364:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 365:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 366:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_RESET);
 367:Src/main.c    **** 
 368:Src/main.c    ****         HDMI_Tx_SetAudioFs(gAudioSampleFreq[3])  ;
 369:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[3] ;
 370:Src/main.c    ****         break ;
 371:Src/main.c    ****     }
 372:Src/main.c    **** }
 373:Src/main.c    **** 
 374:Src/main.c    **** void SET_Audio_Mute(unsigned char mode )
 375:Src/main.c    **** {
 376:Src/main.c    **** 
ARM GAS  /tmp/ccUr6nXF.s 			page 8


 377:Src/main.c    **** if(mode==ON)
 378:Src/main.c    **** 	HAL_GPIO_WritePin(AUD_I2C_MUTE_Port,AUD_I2C_MUTE_Pin, GPIO_PIN_RESET);
 379:Src/main.c    **** else
 380:Src/main.c    **** 	HAL_GPIO_WritePin(AUD_I2C_MUTE_Port,AUD_I2C_MUTE_Pin, GPIO_PIN_SET);
 381:Src/main.c    **** 
 382:Src/main.c    **** Printf("(*SET_Audio_Mute=%d)",(WORD)mode);
 383:Src/main.c    **** 
 384:Src/main.c    **** }
 385:Src/main.c    **** 
 386:Src/main.c    **** //Sleep
 387:Src/main.c    **** /*
 388:Src/main.c    **** void msleep(unsigned int i )
 389:Src/main.c    **** {
 390:Src/main.c    ****     HAL_Delay(i);
 391:Src/main.c    **** }
 392:Src/main.c    **** */
 393:Src/main.c    **** 
 394:Src/main.c    **** /* USER CODE END PFP */
 395:Src/main.c    **** 
 396:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 397:Src/main.c    **** /* USER CODE BEGIN 0 */
 398:Src/main.c    **** 
 399:Src/main.c    **** void InitialTimerEvent(void)
 400:Src/main.c    **** {
 401:Src/main.c    **** 	MCUTimerInitialTimerEvent();  //clear all of timer event	
 402:Src/main.c    **** 
 403:Src/main.c    **** 		#if (_DEBUG_MESSAGE_SysTimerEvent==ON)
 404:Src/main.c    ****   		//MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER);//for timer
 405:Src/main.c    **** 
 406:Src/main.c    **** 
 407:Src/main.c    **** 
 408:Src/main.c    **** 		   //	MCUTimerActiveTimerEvent(SEC(6), _SYSTEM_TIMER_EVENT_BOOT_VIDEO_DETECT);//for timer
 409:Src/main.c    ****   		//MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);//for timer
 410:Src/main.c    **** 
 411:Src/main.c    **** //	MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_UART2_CHECK);//for test
 412:Src/main.c    **** 		
 413:Src/main.c    ****      		#endif
 414:Src/main.c    **** //MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_VIDEO_RESET);			
 415:Src/main.c    **** 	/*		
 416:Src/main.c    ****      	MCUTimerActiveTimerEvent(SEC(5-2), _SYSTEM_TIMER_EVENT_BOOT_VIDEO_DETECT);//for timer
 417:Src/main.c    **** 	MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_LIGHT_SENSOR_CHECK);//for timer
 418:Src/main.c    **** 	MCUTimerActiveTimerEvent(100, _SYSTEM_TIMER_EVENT_GRN_ON);
 419:Src/main.c    **** 	MCUTimerActiveTimerEvent(SEC(1),  _SYSTEM_TIMER_EVENT_ADC_CHECK);
 420:Src/main.c    **** 	*/
 421:Src/main.c    **** }
 422:Src/main.c    **** 
 423:Src/main.c    **** void GetRS232_CMD(void)
 424:Src/main.c    **** {
 425:Src/main.c    ****     char achstr[3] ;
 426:Src/main.c    ****     char *endptr ;
 427:Src/main.c    ****     long IrNum  ;
 428:Src/main.c    ****     if (Transfer_cplt == 1)
 429:Src/main.c    ****     {
 430:Src/main.c    ****         Transfer_cplt = 0 ;
 431:Src/main.c    ****         printf("RxBufIndex=%d,str=%s\r\n",RxBufIndex, gRxbuf);
 432:Src/main.c    ****         if ( RxBufIndex >= 4 )
 433:Src/main.c    ****         {
ARM GAS  /tmp/ccUr6nXF.s 			page 9


 434:Src/main.c    ****             if ((gRxbuf[0] =='G') && (gRxbuf[3]=='g'))
 435:Src/main.c    ****             {
 436:Src/main.c    ****                 achstr[2] = '\0' ;
 437:Src/main.c    ****                 memcpy(&achstr[0], &gRxbuf[1], 2 ) ;
 438:Src/main.c    ****                 IrNum = strtol(achstr, &endptr, 16) ;
 439:Src/main.c    ****                 printf("IrNum=0x%02x\r\n",(int)IrNum);
 440:Src/main.c    ****             }
 441:Src/main.c    ****             else if ((gRxbuf[0] =='S') && (gRxbuf[5]=='s'))
 442:Src/main.c    ****             {                
 443:Src/main.c    ****             }
 444:Src/main.c    ****         }
 445:Src/main.c    ****     }
 446:Src/main.c    **** }
 447:Src/main.c    **** 
 448:Src/main.c    **** //static
 449:Src/main.c    **** 	void setloopoutmode(int index)
 450:Src/main.c    **** {
 451:Src/main.c    **** /*
 452:Src/main.c    **** 	pVS4210_JointKind1.AudioChannel = HDMI_AUDIO_NONE ;
 453:Src/main.c    **** 	  pVS4210_JointKind1.DrawBoxFlg =1 ;
 454:Src/main.c    **** 	  pVS4210_JointKind1.DrawOSDFlg =0x03 ; //bits 0 ,1
 455:Src/main.c    **** //	pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE1 ;
 456:Src/main.c    **** 	  pVS4210_JointKind1.OutputSize = _OUTPUT_800x480;//_OUTPUT_1080P60 ;
 457:Src/main.c    **** */
 458:Src/main.c    ****     switch(index)
 459:Src/main.c    ****     {
 460:Src/main.c    ****     case VS4210_LOOP_MODE0_w0:
 461:Src/main.c    ****     {
 462:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w0 ;
 463:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 464:Src/main.c    **** 	 OSD_MIRROR[0]=CAMA_M;
 465:Src/main.c    **** 	 gabVXIS_Input_mirrorH[0]=CAMA_M;
 466:Src/main.c    ****         printf("VS4210_MODE0_w0\r\n") ;
 467:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 468:Src/main.c    ****         break ;
 469:Src/main.c    ****     }
 470:Src/main.c    ****     case VS4210_LOOP_MODE0_w1:
 471:Src/main.c    ****     {
 472:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w1 ;
 473:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 474:Src/main.c    ****    	 OSD_MIRROR[0]=CAMB_M;
 475:Src/main.c    **** 	 gabVXIS_Input_mirrorH[1]=CAMB_M; 
 476:Src/main.c    **** 	 OSD_SPEAKER[0]=ON;
 477:Src/main.c    ****         printf("VS4210_MODE0_w1\r\n") ;
 478:Src/main.c    ****         break ;
 479:Src/main.c    ****     }
 480:Src/main.c    ****     case VS4210_LOOP_MODE0_w2:
 481:Src/main.c    ****     {
 482:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w2 ;
 483:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 484:Src/main.c    **** 	 OSD_MIRROR[0]=CAMC_M;	
 485:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 	 
 486:Src/main.c    **** 	 OSD_SPEAKER[0]=ON;
 487:Src/main.c    ****         printf("VS4210_MODE0_w2\r\n") ;
 488:Src/main.c    ****         break ;
 489:Src/main.c    ****     }
 490:Src/main.c    ****     case VS4210_LOOP_MODE0_w3:
ARM GAS  /tmp/ccUr6nXF.s 			page 10


 491:Src/main.c    ****     {
 492:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w3 ;
 493:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 494:Src/main.c    ****    	OSD_MIRROR[0]=CAMR_M;	
 495:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 		
 496:Src/main.c    ****   	OSD_SPEAKER[0]=ON;
 497:Src/main.c    ****         printf("VS4210_MODE0_w3\r\n") ;
 498:Src/main.c    ****         break ;
 499:Src/main.c    ****     }
 500:Src/main.c    ****     case VS4210_LOOP_MODE1:
 501:Src/main.c    ****     {
 502:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE1 ;
 503:Src/main.c    **** 	
 504:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 505:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 506:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 507:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 508:Src/main.c    ****    	  OSD_MIRROR[0]=CAMA_M;	
 509:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 510:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
 511:Src/main.c    ****    	  OSD_MIRROR[3]=CAMR_M;	
 512:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 513:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 514:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		  
 515:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 		  
 516:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 517:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 518:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 519:Src/main.c    **** 	  OSD_SPEAKER[3]=ON;
 520:Src/main.c    **** 
 521:Src/main.c    ****         printf("VS4210_MODE1\r\n") ;
 522:Src/main.c    ****         break ;
 523:Src/main.c    ****     }
 524:Src/main.c    **** 	
 525:Src/main.c    ****     case VS4210_LOOP_MODE2:
 526:Src/main.c    ****     {
 527:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE2 ;
 528:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 529:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 530:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 531:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 532:Src/main.c    ****         printf("VS4210_MODE2\r\n") ;
 533:Src/main.c    ****         break ;
 534:Src/main.c    ****     }
 535:Src/main.c    **** 	#if 0
 536:Src/main.c    ****     case VS4210_LOOP_MODE8:
 537:Src/main.c    ****     {
 538:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 539:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 540:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 541:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 542:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 543:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 544:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 545:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
 546:Src/main.c    ****    	  OSD_MIRROR[3]=CAMR_M;	
 547:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
ARM GAS  /tmp/ccUr6nXF.s 			page 11


 548:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 549:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		  
 550:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M;	  
 551:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 552:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 553:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 554:Src/main.c    ****         printf("VS4210_MODE8 ch1 ch2 ch3\r\n") ;
 555:Src/main.c    ****         break ;
 556:Src/main.c    ****     }
 557:Src/main.c    **** 	    case VS4210_LOOP_MODE8_412:
 558:Src/main.c    ****     {
 559:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 560:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 561:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 562:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =2 ;
 563:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =0 ;
 564:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 565:Src/main.c    ****    	  OSD_MIRROR[1]=CAMA_M;	
 566:Src/main.c    ****    	  OSD_MIRROR[2]=CAMB_M;	
 567:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 568:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 569:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMB_M; 		  
 570:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 571:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 572:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 573:Src/main.c    **** 	  
 574:Src/main.c    ****       //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 575:Src/main.c    ****         printf("VS4210_MODE8 ch4 ch1 ch2\r\n") ;
 576:Src/main.c    ****         break ;
 577:Src/main.c    ****     }
 578:Src/main.c    ****      case VS4210_LOOP_MODE8_123:
 579:Src/main.c    **** 	 {
 580:Src/main.c    **** 			 pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 581:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 582:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 583:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 584:Src/main.c    **** 		   OSD_MIRROR[0]=CAMA_M; 
 585:Src/main.c    **** 		   OSD_MIRROR[1]=CAMB_M; 
 586:Src/main.c    **** 		   OSD_MIRROR[2]=CAMC_M; 
 587:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 588:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 589:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		   
 590:Src/main.c    **** 		   OSD_SPEAKER[0]=ON;
 591:Src/main.c    **** 		   OSD_SPEAKER[1]=OFF;
 592:Src/main.c    **** 		   OSD_SPEAKER[2]=OFF;
 593:Src/main.c    **** 		   
 594:Src/main.c    **** 		   //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 595:Src/main.c    **** 			 printf("VS4210_MODE8 ch1 ch2 ch3\r\n") ;
 596:Src/main.c    **** 			 break ;
 597:Src/main.c    **** 		 }
 598:Src/main.c    ****   case VS4210_LOOP_MODE8_124:
 599:Src/main.c    **** 	 {
 600:Src/main.c    **** 			 pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 601:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 602:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 603:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 604:Src/main.c    **** 		   OSD_MIRROR[0]=CAMA_M; 
ARM GAS  /tmp/ccUr6nXF.s 			page 12


 605:Src/main.c    **** 		   OSD_MIRROR[1]=CAMB_M; 
 606:Src/main.c    **** 		   OSD_MIRROR[2]=CAMR_M; 
 607:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 608:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 609:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 		   
 610:Src/main.c    **** 		   OSD_SPEAKER[0]=OFF;
 611:Src/main.c    **** 		   OSD_SPEAKER[1]=OFF;
 612:Src/main.c    **** 		   OSD_SPEAKER[2]=ON;
 613:Src/main.c    **** 		   
 614:Src/main.c    **** 		   //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 615:Src/main.c    **** 			 printf("VS4210_MODE8 ch1 ch2 ch4\r\n") ;
 616:Src/main.c    **** 			 break ;
 617:Src/main.c    **** 		 }	 
 618:Src/main.c    ****   case VS4210_LOOP_MODE8_134:
 619:Src/main.c    **** 	 {
 620:Src/main.c    **** 			 pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 621:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 622:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 623:Src/main.c    **** 			 pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 624:Src/main.c    **** 		   OSD_MIRROR[0]=CAMA_M; 
 625:Src/main.c    **** 		   OSD_MIRROR[1]=CAMC_M; 
 626:Src/main.c    **** 		   OSD_MIRROR[2]=CAMR_M; 
 627:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 628:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 		  
 629:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 		   
 630:Src/main.c    **** 		   OSD_SPEAKER[0]=OFF;
 631:Src/main.c    **** 		   OSD_SPEAKER[1]=OFF;
 632:Src/main.c    **** 		   OSD_SPEAKER[2]=ON;
 633:Src/main.c    **** 		   //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 634:Src/main.c    **** 			 printf("VS4210_MODE8 ch1 ch3 ch4\r\n") ;
 635:Src/main.c    **** 			 break ;
 636:Src/main.c    **** 		 }	 
 637:Src/main.c    **** //=============
 638:Src/main.c    **** case VS4210_LOOP_MODE8_213:
 639:Src/main.c    ****    {
 640:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 641:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 642:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 643:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 644:Src/main.c    **** 		 OSD_MIRROR[0]=CAMB_M; 
 645:Src/main.c    **** 		 OSD_MIRROR[1]=CAMA_M; 
 646:Src/main.c    **** 		 OSD_MIRROR[2]=CAMC_M; 
 647:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMB_M; 		  
 648:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 649:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 			 
 650:Src/main.c    **** 		 OSD_SPEAKER[0]=ON;
 651:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 652:Src/main.c    **** 		 OSD_SPEAKER[2]=OFF;
 653:Src/main.c    **** 		 
 654:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 655:Src/main.c    **** 		   printf("VS4210_MODE8 ch2 ch1 ch3\r\n") ;
 656:Src/main.c    **** 		   break ;
 657:Src/main.c    **** 	   }   
 658:Src/main.c    **** case VS4210_LOOP_MODE8_214:
 659:Src/main.c    ****    {
 660:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 661:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =2 ;
ARM GAS  /tmp/ccUr6nXF.s 			page 13


 662:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 663:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 664:Src/main.c    **** 		 OSD_MIRROR[0]=CAMB_M; 
 665:Src/main.c    **** 		 OSD_MIRROR[1]=CAMA_M; 
 666:Src/main.c    **** 		 OSD_MIRROR[2]=CAMR_M; 
 667:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMB_M; 		  
 668:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 669:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 			 
 670:Src/main.c    **** 		 OSD_SPEAKER[0]=OFF;
 671:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 672:Src/main.c    **** 		 OSD_SPEAKER[2]=ON;
 673:Src/main.c    **** 		 
 674:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 675:Src/main.c    **** 		   printf("VS4210_MODE8 ch2 ch1 ch4\r\n") ;
 676:Src/main.c    **** 		   break ;
 677:Src/main.c    **** 	   }   
 678:Src/main.c    **** case VS4210_LOOP_MODE8_234:
 679:Src/main.c    ****    {
 680:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 681:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 682:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 683:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 684:Src/main.c    **** 		 OSD_MIRROR[0]=CAMA_M; 
 685:Src/main.c    **** 		 OSD_MIRROR[1]=CAMC_M; 
 686:Src/main.c    **** 		 OSD_MIRROR[2]=CAMR_M; 
 687:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 688:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 		  
 689:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 			 
 690:Src/main.c    **** 		 OSD_SPEAKER[0]=OFF;
 691:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 692:Src/main.c    **** 		 OSD_SPEAKER[2]=ON;
 693:Src/main.c    **** 		 
 694:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 695:Src/main.c    **** 		   printf("VS4210_MODE8 ch2 ch3 ch4\r\n") ;
 696:Src/main.c    **** 		   break ;
 697:Src/main.c    **** 	   }   
 698:Src/main.c    **** 
 699:Src/main.c    **** //=============
 700:Src/main.c    **** case VS4210_LOOP_MODE8_312:
 701:Src/main.c    ****    {
 702:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 703:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 704:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 705:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =2 ;
 706:Src/main.c    **** 		 OSD_MIRROR[0]=CAMC_M; 
 707:Src/main.c    **** 		 OSD_MIRROR[1]=CAMA_M; 
 708:Src/main.c    **** 		 OSD_MIRROR[2]=CAMB_M; 
 709:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMC_M; 		  
 710:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 711:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMB_M; 		 
 712:Src/main.c    **** 		 OSD_SPEAKER[0]=ON;
 713:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 714:Src/main.c    **** 		 OSD_SPEAKER[2]=OFF;	 
 715:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 716:Src/main.c    **** 		   printf("VS4210_MODE8 ch3 ch1 ch2\r\n") ;
 717:Src/main.c    **** 		   break ;
 718:Src/main.c    **** 	   }   
ARM GAS  /tmp/ccUr6nXF.s 			page 14


 719:Src/main.c    **** case VS4210_LOOP_MODE8_314:
 720:Src/main.c    ****    {
 721:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 722:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 723:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 724:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 725:Src/main.c    **** 		 OSD_MIRROR[0]=CAMC_M; 
 726:Src/main.c    **** 		 OSD_MIRROR[1]=CAMA_M; 
 727:Src/main.c    **** 		 OSD_MIRROR[2]=CAMR_M; 
 728:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMC_M; 		  
 729:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 730:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 		 
 731:Src/main.c    **** 		 OSD_SPEAKER[0]=OFF;
 732:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 733:Src/main.c    **** 		 OSD_SPEAKER[2]=ON;	 
 734:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 735:Src/main.c    **** 		   printf("VS4210_MODE8 ch3 ch1 ch4\r\n") ;
 736:Src/main.c    **** 		   break ;
 737:Src/main.c    **** 	   }   
 738:Src/main.c    **** case VS4210_LOOP_MODE8_324:
 739:Src/main.c    ****    {
 740:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 741:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 742:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 743:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =4 ;
 744:Src/main.c    **** 		 OSD_MIRROR[0]=CAMC_M; 
 745:Src/main.c    **** 		 OSD_MIRROR[1]=CAMB_M; 
 746:Src/main.c    **** 		 OSD_MIRROR[2]=CAMR_M; 
 747:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMC_M; 		  
 748:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 749:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMR_M; 			 
 750:Src/main.c    **** 		 OSD_SPEAKER[0]=OFF;
 751:Src/main.c    **** 		 OSD_SPEAKER[1]=OFF;
 752:Src/main.c    **** 		 OSD_SPEAKER[2]=ON;	 
 753:Src/main.c    **** 		 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 754:Src/main.c    **** 		   printf("VS4210_MODE8 ch3 ch2 ch4\r\n") ;
 755:Src/main.c    **** 		   break ;
 756:Src/main.c    **** 	   }   
 757:Src/main.c    **** //=============
 758:Src/main.c    **** 
 759:Src/main.c    **** 		case VS4210_LOOP_MODE8_413:
 760:Src/main.c    **** 		   {
 761:Src/main.c    **** 				   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 762:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 763:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 764:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 765:Src/main.c    **** 				 OSD_MIRROR[0]=CAMR_M; 
 766:Src/main.c    **** 				 OSD_MIRROR[1]=CAMA_M; 
 767:Src/main.c    **** 				 OSD_MIRROR[2]=CAMC_M; 
 768:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 769:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 770:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 				 
 771:Src/main.c    **** 				 OSD_SPEAKER[0]=ON;
 772:Src/main.c    **** 				 OSD_SPEAKER[1]=OFF;
 773:Src/main.c    **** 				 OSD_SPEAKER[2]=OFF;  
 774:Src/main.c    **** 				 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 775:Src/main.c    **** 				   printf("VS4210_MODE8 ch4 ch1 ch3\r\n") ;
ARM GAS  /tmp/ccUr6nXF.s 			page 15


 776:Src/main.c    **** 				   break ;
 777:Src/main.c    **** 			   }   
 778:Src/main.c    **** 		case VS4210_LOOP_MODE8_423:
 779:Src/main.c    **** 		   {
 780:Src/main.c    **** 				   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE8 ;
 781:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 782:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 783:Src/main.c    **** 				   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 784:Src/main.c    **** 				 OSD_MIRROR[0]=CAMR_M; 
 785:Src/main.c    **** 				 OSD_MIRROR[1]=CAMB_M; 
 786:Src/main.c    **** 				 OSD_MIRROR[2]=CAMC_M; 
 787:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 788:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 789:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 					 
 790:Src/main.c    **** 				 OSD_SPEAKER[0]=ON;
 791:Src/main.c    **** 				 OSD_SPEAKER[1]=OFF;
 792:Src/main.c    **** 				 OSD_SPEAKER[2]=OFF;  
 793:Src/main.c    **** 				 //  pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 794:Src/main.c    **** 				   printf("VS4210_MODE8 ch4 ch2 ch3\r\n") ;
 795:Src/main.c    **** 				   break ;
 796:Src/main.c    **** 			   }   
 797:Src/main.c    **** 
 798:Src/main.c    **** 		//=============
 799:Src/main.c    **** 	    case VS4210_LOOP_MODE10_123:
 800:Src/main.c    ****     {
 801:Src/main.c    ****   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE10 ;
 802:Src/main.c    **** 
 803:Src/main.c    **** pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 804:Src/main.c    **** pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 805:Src/main.c    **** pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 806:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 807:Src/main.c    **** 
 808:Src/main.c    **** 	OSD_MIRROR[0]=CAMR_M; 
 809:Src/main.c    **** 	OSD_MIRROR[1]=CAMA_M; 
 810:Src/main.c    **** 	OSD_MIRROR[2]=CAMB_M; 
 811:Src/main.c    **** 	OSD_MIRROR[3]=CAMC_M; 
 812:Src/main.c    **** 
 813:Src/main.c    **** gabVXIS_Input_mirrorH[0]=CAMR_M;		  
 814:Src/main.c    **** gabVXIS_Input_mirrorH[1]=CAMA_M;		  
 815:Src/main.c    **** gabVXIS_Input_mirrorH[2]=CAMB_M;		
 816:Src/main.c    **** gabVXIS_Input_mirrorH[3]=CAMC_M;		  
 817:Src/main.c    **** 
 818:Src/main.c    **** 	OSD_SPEAKER[0]=ON;
 819:Src/main.c    **** 	OSD_SPEAKER[1]=OFF;
 820:Src/main.c    **** 	OSD_SPEAKER[2]=OFF;
 821:Src/main.c    **** 	OSD_SPEAKER[3]=OFF;
 822:Src/main.c    **** 
 823:Src/main.c    **** 
 824:Src/main.c    ****      //   pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 825:Src/main.c    ****         printf("VS4210_MODE10 ch1 ch2 ch3\r\n") ;
 826:Src/main.c    ****         break ;
 827:Src/main.c    ****     }
 828:Src/main.c    **** case VS4210_LOOP_MODE10_412:
 829:Src/main.c    **** 	{
 830:Src/main.c    **** 	   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE10 ;
 831:Src/main.c    **** 	   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 832:Src/main.c    **** 	   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
ARM GAS  /tmp/ccUr6nXF.s 			page 16


 833:Src/main.c    **** 	   pVS4210_JointKind1.WindowMap.WMap2 =2 ;
 834:Src/main.c    **** 	    pVS4210_JointKind1.WindowMap.WMap3 =0 ;
 835:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 836:Src/main.c    ****    	  OSD_MIRROR[1]=CAMA_M;	
 837:Src/main.c    ****    	  OSD_MIRROR[2]=CAMB_M;	
 838:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 839:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 840:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMB_M; 	  
 841:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 842:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 843:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 844:Src/main.c    **** 	//	 pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 845:Src/main.c    **** 	   printf("VS4210_MODE10 ch4 ch1 ch2\r\n") ;
 846:Src/main.c    **** 		break;
 847:Src/main.c    ****     	}
 848:Src/main.c    **** 	case VS4210_LOOP_MODE10_413:
 849:Src/main.c    **** 		{
 850:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE10 ;
 851:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 852:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 853:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 854:Src/main.c    **** 		  OSD_MIRROR[0]=CAMR_M; 
 855:Src/main.c    **** 		  OSD_MIRROR[1]=CAMA_M; 
 856:Src/main.c    **** 		  OSD_MIRROR[2]=CAMC_M; 
 857:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 858:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M; 		  
 859:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 			  
 860:Src/main.c    **** 		  OSD_SPEAKER[0]=ON;
 861:Src/main.c    **** 		  OSD_SPEAKER[1]=OFF;
 862:Src/main.c    **** 		  OSD_SPEAKER[2]=OFF;
 863:Src/main.c    **** 		//	 pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 864:Src/main.c    **** 		   printf("VS4210_MODE10 ch4 ch1 ch3\r\n") ;
 865:Src/main.c    **** 			break;
 866:Src/main.c    **** 			}
 867:Src/main.c    **** 	case VS4210_LOOP_MODE10_423:
 868:Src/main.c    **** 		{
 869:Src/main.c    **** 		   pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE10 ;
 870:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 871:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 872:Src/main.c    **** 		   pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 873:Src/main.c    **** 		  OSD_MIRROR[0]=CAMR_M; 
 874:Src/main.c    **** 		  OSD_MIRROR[1]=CAMB_M; 
 875:Src/main.c    **** 		  OSD_MIRROR[2]=CAMC_M; 
 876:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMR_M; 		  
 877:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 878:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 			  
 879:Src/main.c    **** 		  OSD_SPEAKER[0]=ON;
 880:Src/main.c    **** 		  OSD_SPEAKER[1]=OFF;
 881:Src/main.c    **** 		  OSD_SPEAKER[2]=OFF;
 882:Src/main.c    **** 		//	 pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 883:Src/main.c    **** 		   printf("VS4210_MODE10 ch4 ch2 ch3\r\n") ;
 884:Src/main.c    **** 			break;
 885:Src/main.c    **** 			}
 886:Src/main.c    **** 
 887:Src/main.c    ****     case VS4210_LOOP_MODE9:
 888:Src/main.c    ****     {
 889:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE9 ;
ARM GAS  /tmp/ccUr6nXF.s 			page 17


 890:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 891:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 892:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 893:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 894:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 895:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 896:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
 897:Src/main.c    ****    	  OSD_MIRROR[3]=CAMR_M;	
 898:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 899:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 900:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		  
 901:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 	  
 902:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 903:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 904:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 905:Src/main.c    **** 	  OSD_SPEAKER[3]=ON;	  
 906:Src/main.c    ****         printf("VS4210_MODE9\r\n") ;
 907:Src/main.c    ****         break ;
 908:Src/main.c    ****     }
 909:Src/main.c    **** 	#endif
 910:Src/main.c    ****     case VS4210_LOOP_MODE12_12:
 911:Src/main.c    ****     {
 912:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 913:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 914:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 915:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 916:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 917:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 918:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
 919:Src/main.c    ****   	OSD_SPEAKER[0]=ON;
 920:Src/main.c    ****   	OSD_SPEAKER[1]=OFF;
 921:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch2\r\n") ;
 922:Src/main.c    ****         break ;
 923:Src/main.c    ****     }
 924:Src/main.c    **** 	case VS4210_LOOP_MODE12_14:
 925:Src/main.c    ****       {
 926:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 927:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 928:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
 929:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 930:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;
 931:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 932:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 933:Src/main.c    ****   	OSD_SPEAKER[0]=OFF;
 934:Src/main.c    ****   	OSD_SPEAKER[1]=ON;	  
 935:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch4\r\n") ;	
 936:Src/main.c    **** 	break;
 937:Src/main.c    ****     	}
 938:Src/main.c    **** 	case VS4210_LOOP_MODE12_42:
 939:Src/main.c    ****       {
 940:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 941:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 942:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 943:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 944:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 945:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMR_M;			  
 946:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
ARM GAS  /tmp/ccUr6nXF.s 			page 18


 947:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 948:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 949:Src/main.c    ****         printf("VS4210_MODE12 ch4 ch2\r\n") ;	
 950:Src/main.c    **** 	break;
 951:Src/main.c    ****     	}
 952:Src/main.c    **** 	case VS4210_LOOP_MODE12_43:
 953:Src/main.c    ****       {
 954:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 955:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 956:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 957:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 958:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 959:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMR_M;			  
 960:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 961:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 962:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 963:Src/main.c    ****         printf("VS4210_MODE12 ch4 ch3\r\n") ;	
 964:Src/main.c    **** 	break;
 965:Src/main.c    ****     	}
 966:Src/main.c    **** 	//==============
 967:Src/main.c    **** 	case VS4210_LOOP_MODE12_21:
 968:Src/main.c    ****       {
 969:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 970:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 971:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 972:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 973:Src/main.c    ****    	  OSD_MIRROR[1]=CAMA_M;	
 974:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 975:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 976:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 977:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 978:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch1\r\n") ;	
 979:Src/main.c    **** 	break;
 980:Src/main.c    ****     	}
 981:Src/main.c    **** 	case VS4210_LOOP_MODE12_23:
 982:Src/main.c    ****       {
 983:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 984:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 985:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 986:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 987:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 988:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 989:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 990:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 991:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 992:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch3\r\n") ;	
 993:Src/main.c    **** 	break;
 994:Src/main.c    ****     	}
 995:Src/main.c    **** 	case VS4210_LOOP_MODE12_24:
 996:Src/main.c    ****       {
 997:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
 998:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2;
 999:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
1000:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
1001:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;	
1002:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
1003:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
ARM GAS  /tmp/ccUr6nXF.s 			page 19


1004:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
1005:Src/main.c    **** 	  OSD_SPEAKER[1]=ON;		  
1006:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch4\r\n") ;	
1007:Src/main.c    **** 	break;
1008:Src/main.c    ****     	}
1009:Src/main.c    **** 
1010:Src/main.c    **** 	//==============
1011:Src/main.c    **** 	case VS4210_LOOP_MODE12_13:
1012:Src/main.c    ****       {
1013:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
1014:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
1015:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
1016:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
1017:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
1018:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
1019:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
1020:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
1021:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
1022:Src/main.c    **** 	  
1023:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch3\r\n") ;	
1024:Src/main.c    **** 	break;
1025:Src/main.c    ****     	}
1026:Src/main.c    **** 	case VS4210_LOOP_MODE12_32:
1027:Src/main.c    ****       {
1028:Src/main.c    ****        pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
1029:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
1030:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
1031:Src/main.c    **** 	  OSD_MIRROR[0]=CAMC_M;	
1032:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
1033:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
1034:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
1035:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
1036:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
1037:Src/main.c    **** 	  
1038:Src/main.c    ****         printf("VS4210_MODE12 ch3 ch2\r\n") ;	
1039:Src/main.c    **** 	break;
1040:Src/main.c    ****     	}
1041:Src/main.c    **** 
1042:Src/main.c    ****     case VS4210_LOOP_MODE12_34:
1043:Src/main.c    ****     {
1044:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
1045:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
1046:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
1047:Src/main.c    **** 	  OSD_MIRROR[0]=CAMC_M;	
1048:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;	
1049:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
1050:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
1051:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
1052:Src/main.c    **** 	  OSD_SPEAKER[1]=ON;	
1053:Src/main.c    **** 	  
1054:Src/main.c    ****         printf("VS4210_MODE12 ch3 ch4\r\n") ;
1055:Src/main.c    ****         break ;
1056:Src/main.c    ****     }
1057:Src/main.c    **** //========================
1058:Src/main.c    **** 
1059:Src/main.c    **** case VS4210_LOOP_MODE12_31:
1060:Src/main.c    ****   {
ARM GAS  /tmp/ccUr6nXF.s 			page 20


1061:Src/main.c    ****    pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE12 ;
1062:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap0 =3 ;
1063:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap1 =1 ;
1064:Src/main.c    ****   OSD_MIRROR[0]=CAMC_M; 
1065:Src/main.c    ****   OSD_MIRROR[1]=CAMA_M; 
1066:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
1067:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M;   
1068:Src/main.c    ****   OSD_SPEAKER[0]=ON;
1069:Src/main.c    ****   OSD_SPEAKER[1]=OFF;	
1070:Src/main.c    ****   
1071:Src/main.c    **** 	printf("VS4210_MODE12 ch3 ch1\r\n") ;	
1072:Src/main.c    **** break;
1073:Src/main.c    **** 	}
1074:Src/main.c    **** 
1075:Src/main.c    **** //=======================
1076:Src/main.c    **** #if 0
1077:Src/main.c    ****     case VS4210_LOOP_MODE14:
1078:Src/main.c    ****     {
1079:Src/main.c    ****         pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE14 ;
1080:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
1081:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
1082:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
1083:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
1084:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
1085:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
1086:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
1087:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
1088:Src/main.c    **** 	  gabVXIS_Input_mirrorH[2]=CAMC_M;		
1089:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
1090:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
1091:Src/main.c    **** 	  OSD_SPEAKER[3]=OFF;	
1092:Src/main.c    **** 	  
1093:Src/main.c    ****         printf("VS4210_MODE14 ch1 ch2\r\n") ;
1094:Src/main.c    ****         break ;
1095:Src/main.c    ****     }
1096:Src/main.c    **** #endif
1097:Src/main.c    ****     }
1098:Src/main.c    **** 
1099:Src/main.c    **** 	
1100:Src/main.c    **** VS4210_SetMutiWindows(&pVS4210_JointKind1) ;
1101:Src/main.c    **** 
1102:Src/main.c    **** //AUDIO_SELECT(index);
1103:Src/main.c    **** AudioMute(ON);
1104:Src/main.c    **** 
1105:Src/main.c    **** MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_AUDIO_CHANNEL_SELECT);
1106:Src/main.c    **** MCUTimerActiveTimerEvent(SEC(1),  _SYSTEM_TIMER_EVENT_AUDIO_CHANNEL_SELECT);
1107:Src/main.c    **** AUDIO_SELECT(index);
1108:Src/main.c    **** 
1109:Src/main.c    **** CURRENT_CH=index;
1110:Src/main.c    **** 
1111:Src/main.c    **** //ChangeVol(0);
1112:Src/main.c    **** 
1113:Src/main.c    **** }
1114:Src/main.c    **** 
1115:Src/main.c    **** /*
1116:Src/main.c    **** static int GetKet_State(void)
1117:Src/main.c    **** {
ARM GAS  /tmp/ccUr6nXF.s 			page 21


1118:Src/main.c    ****     int re = 0  ;
1119:Src/main.c    **** 
1120:Src/main.c    **** 	#if 0
1121:Src/main.c    ****     if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin ) == 0)
1122:Src/main.c    ****     {
1123:Src/main.c    ****         re =1 ;
1124:Src/main.c    **** 		  re =0 ;
1125:Src/main.c    ****      //   printf("SW1 Key\r\n") ;
1126:Src/main.c    ****     }
1127:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin ) == 0)
1128:Src/main.c    ****     {
1129:Src/main.c    ****         re =2 ;
1130:Src/main.c    **** 		 re =0 ;
1131:Src/main.c    ****     //    printf("SW2 Key\r\n") ;
1132:Src/main.c    ****     }
1133:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin ) == 0)
1134:Src/main.c    ****     {
1135:Src/main.c    ****         re =3 ;
1136:Src/main.c    ****         printf("SW3 Key\r\n") ;
1137:Src/main.c    ****     }
1138:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin ) == 0)
1139:Src/main.c    ****     {
1140:Src/main.c    ****         re =4 ;
1141:Src/main.c    ****         printf("SW4 Key\r\n") ;
1142:Src/main.c    ****     }
1143:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin ) == 0)
1144:Src/main.c    ****     {
1145:Src/main.c    ****        // re =5 ;
1146:Src/main.c    ****       //  printf("SW5 Key\r\n") ;
1147:Src/main.c    ****       Monitor(); 
1148:Src/main.c    ****     }
1149:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW6_GPIO_Port, SW6_Pin ) == 0)
1150:Src/main.c    ****     {
1151:Src/main.c    ****         re =6 ;
1152:Src/main.c    ****         printf("SW6 Key\r\n") ;
1153:Src/main.c    ****     }
1154:Src/main.c    ****     else if (HAL_GPIO_ReadPin(SW7_GPIO_Port, SW7_Pin ) == 0)
1155:Src/main.c    ****     {
1156:Src/main.c    ****         re =7 ;
1157:Src/main.c    ****         printf("SW7 Key\r\n") ;
1158:Src/main.c    ****     }
1159:Src/main.c    **** #endif
1160:Src/main.c    **** 
1161:Src/main.c    ****     return re ;
1162:Src/main.c    **** }
1163:Src/main.c    **** */
1164:Src/main.c    **** 	static void HDMI_VideoModeDetect(void)
1165:Src/main.c    **** 	{
1166:Src/main.c    **** 		tByte i  ;
1167:Src/main.c    **** 	
1168:Src/main.c    **** 		for(i = 0 ; i< 2/*4*/ ; i++ )
1169:Src/main.c    **** 		{
1170:Src/main.c    **** 			gHDMI_Index = i ;
1171:Src/main.c    **** 			//--- Start --- 20201214-01
1172:Src/main.c    **** 			if( i == 1 )
1173:Src/main.c    **** 			{
1174:Src/main.c    **** 				if( newInRes[0] == _OSD_No_Signal )
ARM GAS  /tmp/ccUr6nXF.s 			page 22


1175:Src/main.c    **** 					bSignal[gHDMI_Index] = 0;
1176:Src/main.c    **** 				else
1177:Src/main.c    **** 					bSignal[gHDMI_Index] = 1;
1178:Src/main.c    **** 			}
1179:Src/main.c    **** 			else
1180:Src/main.c    **** 			//--- End ---
1181:Src/main.c    **** 			bSignal[gHDMI_Index] = CheckHDMIRX();
1182:Src/main.c    **** 
1183:Src/main.c    **** 			//if( (i == 1 )&&(bSignal[1]==1))
1184:Src/main.c    **** 			//{
1185:Src/main.c    **** 			//dbg_Printf("ch%d, InputMode=%d \r\n", (int)(i+1),(int) gbVXIS_InputMode[i] ) ;
1186:Src/main.c    **** 			//}
1187:Src/main.c    **** 			
1188:Src/main.c    **** 			if (PreVState[gHDMI_Index] != VState[gHDMI_Index]  )
1189:Src/main.c    **** 			{
1190:Src/main.c    **** 				PreVState[gHDMI_Index]	= VState[gHDMI_Index] ;
1191:Src/main.c    **** 			}
1192:Src/main.c    **** 	
1193:Src/main.c    **** 			if(bSignal[gHDMI_Index] != bOldSignal[gHDMI_Index] )
1194:Src/main.c    **** 			{
1195:Src/main.c    **** 				bOldSignal[gHDMI_Index] = bSignal[gHDMI_Index] ;
1196:Src/main.c    **** 	
1197:Src/main.c    **** 				if(bSignal[gHDMI_Index] == 0 )
1198:Src/main.c    **** 				{
1199:Src/main.c    **** 					VS4210_Rx_NoSignal(i) ;
1200:Src/main.c    **** 					dbg_Printf("##ch%d, VS4210_Rx_NoSignal\r\n", (int)(i+1) ) ;
1201:Src/main.c    **** 					if (pVS4210_MutiWindows1.DrawOSDFlg != 0)
1202:Src/main.c    **** 					{
1203:Src/main.c    **** 						OSD_Show_Flg = 1 ;
1204:Src/main.c    **** 						Tim1_count = 0 ;
1205:Src/main.c    **** 						OSDStateFlg = 1 ;
1206:Src/main.c    **** 						OSDSecCount = 0 ;
1207:Src/main.c    **** 					}
1208:Src/main.c    **** 					gbVXIS_InputMode[gHDMI_Index] =_OSD_No_Signal ;
1209:Src/main.c    **** 					PrebVXIS_InputMode[gHDMI_Index] = _OSD_No_Signal ;
1210:Src/main.c    **** 
1211:Src/main.c    **** 					if((SelectInputMode==_HDMI_Input)&&(gHDMI_Index==0))
1212:Src/main.c    **** 						Set_Video_Loss_OSD(0,ON);
1213:Src/main.c    **** 					//MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);	
1214:Src/main.c    **** 					//VXISI2CWrite(0x9C,0x0A);
1215:Src/main.c    **** 						SET_Audio_Mute(ON);
1216:Src/main.c    **** 				}
1217:Src/main.c    **** 			}
1218:Src/main.c    **** 	
1219:Src/main.c    **** 			if( bSignal[gHDMI_Index] == 1  )
1220:Src/main.c    **** 			{
1221:Src/main.c    **** 				//--- Start --- 20201214-01
1222:Src/main.c    **** 				if( i == 1 )
1223:Src/main.c    **** 					gbVXIS_InputMode[gHDMI_Index] = newInRes[0];
1224:Src/main.c    **** 				else
1225:Src/main.c    **** 				//--- End ---
1226:Src/main.c    **** 				gbVXIS_InputMode[gHDMI_Index] = GetHDMI_InputMode(gHDMI_Index ) ;
1227:Src/main.c    **** 
1228:Src/main.c    **** 			}
1229:Src/main.c    **** 	
1230:Src/main.c    **** 			if (gbVXIS_InputMode[gHDMI_Index] != PrebVXIS_InputMode[gHDMI_Index] )
1231:Src/main.c    **** 			{
ARM GAS  /tmp/ccUr6nXF.s 			page 23


1232:Src/main.c    **** 				PrebVXIS_InputMode[gHDMI_Index] = gbVXIS_InputMode[gHDMI_Index] ;
1233:Src/main.c    **** 	
1234:Src/main.c    **** 				if (gbVXIS_InputMode[gHDMI_Index] != _OSD_No_Signal)
1235:Src/main.c    **** 				{
1236:Src/main.c    **** 					VS4210_SetInModeOutMode(i , gbVXIS_InputMode[i] , pVS4210_MutiWindows1.OutputMode );
1237:Src/main.c    **** 
1238:Src/main.c    **** 					if((SelectInputMode==_AHD_Input)&&(gHDMI_Index==1))			
1239:Src/main.c    **** 					VXISI2CWrite( 0x19, 0x01 );
1240:Src/main.c    **** 							
1241:Src/main.c    **** 							
1242:Src/main.c    **** 					VS4210_SetInputSizeHV(i ,gHActive[i], gVActive[i], gHTotal[i] ,gVTotal[i] ) ;
1243:Src/main.c    **** 
1244:Src/main.c    **** 
1245:Src/main.c    **** 					dbg_Printf("ch%d, InputMode=%d \r\n", (int)(i+1),(int) gbVXIS_InputMode[i] ) ;
1246:Src/main.c    **** 
1247:Src/main.c    **** 						#if 0
1248:Src/main.c    **** 						if(gbVXIS_InputMode[i]==6)
1249:Src/main.c    **** 						{
1250:Src/main.c    **** 						printf("(set reg.)");
1251:Src/main.c    **** 						 VXISI2CWrite(0x08,0x21);
1252:Src/main.c    **** 						 VXISI2CWrite(0x0A,0x21);
1253:Src/main.c    **** 						 VXISI2CWrite(0x74,0x02);
1254:Src/main.c    **** 						 VXISI2CWrite(0x82,0x40);
1255:Src/main.c    **** 						}
1256:Src/main.c    **** 						#endif
1257:Src/main.c    **** 					if (pVS4210_MutiWindows1.DrawOSDFlg != 0)
1258:Src/main.c    **** 					{
1259:Src/main.c    **** 						OSD_Show_Flg = 1 ;
1260:Src/main.c    **** 						Tim1_count = 0 ;
1261:Src/main.c    **** 						OSDStateFlg = 1 ;
1262:Src/main.c    **** 						OSDSecCount = 0 ;
1263:Src/main.c    **** 					}
1264:Src/main.c    **** 
1265:Src/main.c    **** 						if((SelectInputMode==_HDMI_Input)&&(gHDMI_Index==0))
1266:Src/main.c    **** 						Set_Video_Loss_OSD(0,OFF);	
1267:Src/main.c    **** 
1268:Src/main.c    **** 						if((SelectInputMode==_AHD_Input)&&(gHDMI_Index==1))
1269:Src/main.c    **** 							{
1270:Src/main.c    **** 							MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_VIDEO_RESET);
1271:Src/main.c    **** 							}
1272:Src/main.c    **** 						
1273:Src/main.c    **** 						if(gHDMI_Index==0)
1274:Src/main.c    **** 						SET_Audio_Mute(OFF);	
1275:Src/main.c    **** 						//MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);
1276:Src/main.c    **** 				}
1277:Src/main.c    **** 			}
1278:Src/main.c    **** 		}
1279:Src/main.c    **** 	}
1280:Src/main.c    **** 
1281:Src/main.c    **** static void HDMI_AudioModeDetect(void)
1282:Src/main.c    **** {
1283:Src/main.c    ****     tByte pbAudioSampleFreq, pbValidCh ;
1284:Src/main.c    ****     pbAudioSampleFreq = 0 ;
1285:Src/main.c    **** 
1286:Src/main.c    ****     getHDMIRXAudioInfo(&pbAudioSampleFreq , &pbValidCh ) ;
1287:Src/main.c    **** 
1288:Src/main.c    ****     if (gbAUDO_INDEX != HDMI_AUDIO_NONE )
ARM GAS  /tmp/ccUr6nXF.s 			page 24


1289:Src/main.c    ****     {
1290:Src/main.c    ****         if (gbAUDO_INDEX  == gHDMI_Index )
1291:Src/main.c    ****         {
1292:Src/main.c    ****             if (gPreAudioSampleFreq != pbAudioSampleFreq)
1293:Src/main.c    ****             {
1294:Src/main.c    ****                 gPreAudioSampleFreq = pbAudioSampleFreq ;
1295:Src/main.c    ****                 HDMI_Tx_SetAudioFs(gPreAudioSampleFreq )  ;
1296:Src/main.c    ****             }
1297:Src/main.c    ****         }
1298:Src/main.c    ****     }
1299:Src/main.c    ****     gAudioSampleFreq[gHDMI_Index] = pbAudioSampleFreq ;
1300:Src/main.c    **** }
1301:Src/main.c    **** 
1302:Src/main.c    **** //=============================================================================
1303:Src/main.c    **** //    Main Initialize Routine
1304:Src/main.c    **** //=============================================================================
1305:Src/main.c    **** void main_init (void)
1306:Src/main.c    **** {
1307:Src/main.c    **** 
1308:Src/main.c    **** 	WORD	rev;
1309:Src/main.c    **** 
1310:Src/main.c    **** 		rev = GetFWRevEE();
1311:Src/main.c    **** 		Printf("\r\nPrev.FW:%04x\r\n", rev);
1312:Src/main.c    **** 		
1313:Src/main.c    **** 		if( GetFWRevEE()!=FWVER )	// exist EEPROM
1314:Src/main.c    **** 		{					
1315:Src/main.c    **** 			Printf("\r\nCurr.FW:%04x", (WORD)FWVER);
1316:Src/main.c    **** 			SaveFWRevEE(FWVER);
1317:Src/main.c    **** 			Printf("\r\nCurr.FW:%04x", (WORD)GetFWRevEE());
1318:Src/main.c    **** 		}
1319:Src/main.c    **** 
1320:Src/main.c    **** 		if( GetFWRevEE()==FWVER )
1321:Src/main.c    **** 		{					// exist EEPROM
1322:Src/main.c    **** 			if( rev != FWVER ) 
1323:Src/main.c    **** 				{
1324:Src/main.c    **** 				ClearBasicEE();
1325:Src/main.c    **** 			
1326:Src/main.c    **** 			Printf("\r\n[MSG]main_init()=> rev != FWVER & call ClearBasicEE()\r\n");  //pinchi test
1327:Src/main.c    **** 				}
1328:Src/main.c    **** 			else
1329:Src/main.c    **** 				{
1330:Src/main.c    **** 				;//DebugLevel = GetDebugLevelEE();
1331:Src/main.c    **** 
1332:Src/main.c    **** 				}
1333:Src/main.c    **** 		}
1334:Src/main.c    **** 		else 
1335:Src/main.c    **** 		{
1336:Src/main.c    **** 			Printf("\r\nCannot access EEPROM!!!!");
1337:Src/main.c    **** 			Printf("\r\nNo initialize");
1338:Src/main.c    **** 			DebugLevel = 0xff;
1339:Src/main.c    **** 			return;
1340:Src/main.c    **** 		}
1341:Src/main.c    **** 
1342:Src/main.c    **** 
1343:Src/main.c    **** 	delay(100);
1344:Src/main.c    **** 	
1345:Src/main.c    **** 
ARM GAS  /tmp/ccUr6nXF.s 			page 25


1346:Src/main.c    **** //	SET_POWER_STATUS(_POWER_STATUS_OFF);
1347:Src/main.c    **** //	SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1348:Src/main.c    **** 
1349:Src/main.c    **** }
1350:Src/main.c    **** 
1351:Src/main.c    **** 
1352:Src/main.c    **** void AdjustAutoDayNight(BYTE val)
1353:Src/main.c    **** {
1354:Src/main.c    **** //	BYTE page;
1355:Src/main.c    **** 	BYTE PWMLevelTemp=0;
1356:Src/main.c    **** 	val=0xff-val;
1357:Src/main.c    **** 
1358:Src/main.c    **** 	#if 1//ryan@20170928
1359:Src/main.c    **** 	if(val>=0&&val<100)
1360:Src/main.c    **** 		PWMLevelTemp=0+70;
1361:Src/main.c    **** 	else if(val>=100&&val<140)
1362:Src/main.c    **** 		PWMLevelTemp=20+70;//20;
1363:Src/main.c    **** 	else if(val>=140&&val<180)
1364:Src/main.c    **** 		PWMLevelTemp=40+70;//50;
1365:Src/main.c    **** 	else if(val>=180&&val<220)
1366:Src/main.c    **** 		PWMLevelTemp=60+70;//65;
1367:Src/main.c    **** 	else if(val>=220&&val<=255)//andy 20110414
1368:Src/main.c    **** 	{
1369:Src/main.c    **** 		//#ifdef AWT
1370:Src/main.c    **** 		PWMLevelTemp=75+70;//80;
1371:Src/main.c    **** 		//#else
1372:Src/main.c    **** 		//PWMLevelTemp=115;
1373:Src/main.c    **** 		//#endif
1374:Src/main.c    **** 		//	PWMLevelTemp=128;
1375:Src/main.c    **** 	}
1376:Src/main.c    **** 
1377:Src/main.c    **** 	#else
1378:Src/main.c    **** 	if(val>=0&&val<100)
1379:Src/main.c    **** 		PWMLevelTemp=0;
1380:Src/main.c    **** 	else if(val>=100&&val<140)
1381:Src/main.c    **** 		PWMLevelTemp=30;//20;
1382:Src/main.c    **** 	else if(val>=140&&val<180)
1383:Src/main.c    **** 		PWMLevelTemp=60;//50;
1384:Src/main.c    **** 	else if(val>=180&&val<220)
1385:Src/main.c    **** 		PWMLevelTemp=80;//65;
1386:Src/main.c    **** 	else if(val>=220&&val<=255)//andy 20110414
1387:Src/main.c    **** 	{
1388:Src/main.c    **** 		//#ifdef AWT
1389:Src/main.c    **** 		PWMLevelTemp=110;//80;
1390:Src/main.c    **** 		//#else
1391:Src/main.c    **** 		//PWMLevelTemp=115;
1392:Src/main.c    **** 		//#endif
1393:Src/main.c    **** 	}
1394:Src/main.c    **** 	#endif
1395:Src/main.c    **** 	//else
1396:Src/main.c    **** 	//	PWMLevelTemp=0;
1397:Src/main.c    **** 
1398:Src/main.c    **** 
1399:Src/main.c    **** 	if(DayNightLevel==1)
1400:Src/main.c    **** 	{
1401:Src/main.c    **** 		//if(AutoDayNightDelay<(5+5+5))
1402:Src/main.c    **** 	//		AutoDayNightDelay++;
ARM GAS  /tmp/ccUr6nXF.s 			page 26


1403:Src/main.c    **** 		//else
1404:Src/main.c    **** 		{
1405:Src/main.c    **** 			if(PWMLevel > PWMLevelTemp)
1406:Src/main.c    **** 				PWMLevel-=1;
1407:Src/main.c    **** 			else if(PWMLevel < PWMLevelTemp)
1408:Src/main.c    **** 				PWMLevel+=1;
1409:Src/main.c    **** 
1410:Src/main.c    **** 			AutoDayNightDelay=0;
1411:Src/main.c    **** 		}
1412:Src/main.c    **** 
1413:Src/main.c    **** 	//	PWMLevel=PWMLevelTemp;
1414:Src/main.c    **** 
1415:Src/main.c    **** 		
1416:Src/main.c    **** 	//	Printf("(PWMLevel1=%02x %02x)",(WORD)PWMLevel,(WORD)PWMLevelTemp);
1417:Src/main.c    **** 
1418:Src/main.c    **** 	user_pwm_setvalue(PWMLevel*15);
1419:Src/main.c    **** 
1420:Src/main.c    **** 	}
1421:Src/main.c    **** 	else
1422:Src/main.c    **** 	{
1423:Src/main.c    **** 	//	PWMLevel=PWMLevelTemp;
1424:Src/main.c    **** 		PWMLevel=255/*0x80*/;
1425:Src/main.c    **** 	//		Printf("(PWMLevel2=%02x)",(WORD)PWMLevel);
1426:Src/main.c    **** 	user_pwm_setvalue(_PWMLevelMax);
1427:Src/main.c    **** 	}
1428:Src/main.c    **** 	
1429:Src/main.c    **** #if 0
1430:Src/main.c    **** 
1431:Src/main.c    **** 	//Printf("\r\nLADC0=%02x",(WORD)val);
1432:Src/main.c    **** 	page = ReadTW88( 0xff );
1433:Src/main.c    **** 	WriteTW88( 0xff, 0x00 );		// set page 0
1434:Src/main.c    **** 	WriteTW88( 0xbe, ((ReadTW88(0xbe) & 0xcf) | 0x10) );	// set active Low control, if want active hig
1435:Src/main.c    **** 	//WriteTW88( 0xc4, ((ReadTW88(0xc4) & 0x80)|(val>>2)) );	// set pwm number
1436:Src/main.c    **** 	WriteTW88( 0xc4, ((ReadTW88(0xc4) & 0x80)|(PWMLevel)) );	// set pwm number
1437:Src/main.c    **** 	WriteTW88( 0xff, page );
1438:Src/main.c    **** 	
1439:Src/main.c    **** 	#endif
1440:Src/main.c    **** 	/*
1441:Src/main.c    **** 	if(DayNightLevel==0)
1442:Src/main.c    **** 	user_pwm_setvalue(4000);
1443:Src/main.c    **** 	else
1444:Src/main.c    **** 	user_pwm_setvalue(PWMLevel*15);
1445:Src/main.c    **** */		
1446:Src/main.c    **** }
1447:Src/main.c    **** void LCDPowerON(void)
1448:Src/main.c    **** {
1449:Src/main.c    **** /*
1450:Src/main.c    **** 	Printf("(LCDPowerON)");
1451:Src/main.c    **** 
1452:Src/main.c    **** 	TTLI1_RES(OFF);
1453:Src/main.c    **** 	PANEL_EN(ON);
1454:Src/main.c    **** 	msleep(50) ;
1455:Src/main.c    **** 	msleep(100) ;///for new 7in panel  	LCM : TH070800480NYR40S1-L
1456:Src/main.c    **** //	MCUTimerDelayXms(50);
1457:Src/main.c    **** 	LCD_PWR(ON);
1458:Src/main.c    **** 
1459:Src/main.c    **** 	msleep(50) ;
ARM GAS  /tmp/ccUr6nXF.s 			page 27


1460:Src/main.c    **** 
1461:Src/main.c    **** //	MCUTimerDelayXms(50);
1462:Src/main.c    **** 	BL_ENABLE(ON);
1463:Src/main.c    **** HAL_GPIO_WritePin(PA7_GPIO_Port, PA7_Pin, 0);
1464:Src/main.c    **** 
1465:Src/main.c    **** //	BL_PWM(ON);
1466:Src/main.c    **** 
1467:Src/main.c    **** AudioMute(OFF);
1468:Src/main.c    **** */
1469:Src/main.c    **** 
1470:Src/main.c    **** }
1471:Src/main.c    **** 
1472:Src/main.c    **** void LCDPowerOFF(void)
1473:Src/main.c    **** {
1474:Src/main.c    **** /*
1475:Src/main.c    **** 	Printf("(LCDPowerOFF)");
1476:Src/main.c    **** 
1477:Src/main.c    **** #if 0
1478:Src/main.c    **** 
1479:Src/main.c    **** 	TTLI1_RES(OFF);
1480:Src/main.c    **** 	PANEL_EN(ON);
1481:Src/main.c    **** 	msleep(50) ;
1482:Src/main.c    **** //	MCUTimerDelayXms(50);
1483:Src/main.c    **** 	LCD_PWR(ON);
1484:Src/main.c    **** 
1485:Src/main.c    **** 	msleep(50) ;
1486:Src/main.c    **** 
1487:Src/main.c    **** //	MCUTimerDelayXms(50);
1488:Src/main.c    **** 	BL_ENABLE(ON);
1489:Src/main.c    **** //	BL_PWM(ON);
1490:Src/main.c    **** 
1491:Src/main.c    **** #else
1492:Src/main.c    **** 	BL_ENABLE(OFF);
1493:Src/main.c    **** HAL_GPIO_WritePin(PA7_GPIO_Port, PA7_Pin, 1); 
1494:Src/main.c    **** 
1495:Src/main.c    **** //	BL_PWM(OFF);
1496:Src/main.c    **** //	msleep(50) ;
1497:Src/main.c    **** //	MCUTimerDelayXms(50);
1498:Src/main.c    **** 	TTLI1_RES(ON);
1499:Src/main.c    **** 	PANEL_EN(OFF);
1500:Src/main.c    **** //	MCUTimerDelayXms(50);
1501:Src/main.c    **** //	msleep(50) ;
1502:Src/main.c    **** 
1503:Src/main.c    **** 	LCD_PWR(OFF);
1504:Src/main.c    **** #endif
1505:Src/main.c    **** 
1506:Src/main.c    **** AudioMute(ON);
1507:Src/main.c    **** */
1508:Src/main.c    **** }
1509:Src/main.c    **** 
1510:Src/main.c    **** 
1511:Src/main.c    **** /* USER CODE END 0 */
1512:Src/main.c    **** 
1513:Src/main.c    **** /**
1514:Src/main.c    ****   * @brief  The application entry point.
1515:Src/main.c    ****   * @retval int
1516:Src/main.c    ****   */
ARM GAS  /tmp/ccUr6nXF.s 			page 28


1517:Src/main.c    **** 
1518:Src/main.c    **** void uComOnChipInitial(void)
1519:Src/main.c    **** {
1520:Src/main.c    **** 
1521:Src/main.c    **** //power reset
1522:Src/main.c    **** 
1523:Src/main.c    **** //power
1524:Src/main.c    **** PCON3V3_TP(ON);      
1525:Src/main.c    **** PCON1V2_TP(ON);      
1526:Src/main.c    **** 
1527:Src/main.c    **** VS4210_RST(OFF);   
1528:Src/main.c    **** 
1529:Src/main.c    **** #if 0
1530:Src/main.c    **** 
1531:Src/main.c    **** 	Set_USART1();
1532:Src/main.c    **** 
1533:Src/main.c    **** 
1534:Src/main.c    **** 	//Set_USART2();
1535:Src/main.c    **** 	//Set_USB();
1536:Src/main.c    **** 	//USB_Interrupts_Config();
1537:Src/main.c    **** 	Set_GPIO_Port();
1538:Src/main.c    **** 
1539:Src/main.c    **** 	//AUDIO_OUT_Flag=ReadEEP(0xae);
1540:Src/main.c    **** 	MUTE_OUT(1);
1541:Src/main.c    **** 
1542:Src/main.c    **** 
1543:Src/main.c    **** 
1544:Src/main.c    **** 	Set_Timer();
1545:Src/main.c    **** 	Set_Init_GPIO();
1546:Src/main.c    **** 
1547:Src/main.c    **** 	TIM4_PWM(0);
1548:Src/main.c    **** 	Set_Battery_ADC();
1549:Src/main.c    **** 
1550:Src/main.c    **** 	EXTI_Configuration();
1551:Src/main.c    **** 
1552:Src/main.c    **** 	//Set_I2C_Port();
1553:Src/main.c    **** 	//Set_IR_Port();
1554:Src/main.c    **** 	//Set_ADC_Port();
1555:Src/main.c    **** 	
1556:Src/main.c    **** GPIO_SetBits(GPIOA, GPIO_Pin_1);//TW8816 reset
1557:Src/main.c    **** GPIO_ResetBits(GPIOA, GPIO_Pin_0);//TW8816 reset
1558:Src/main.c    **** 
1559:Src/main.c    **** GPIO_SetBits(GPIOA, GPIO_Pin_12);//ryan@20150525
1560:Src/main.c    **** GPIO_SetBits(GPIOA, GPIO_Pin_13);//ryan@20150525
1561:Src/main.c    **** GPIO_SetBits(GPIOA, GPIO_Pin_14);//ryan@20150525
1562:Src/main.c    **** 
1563:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_9);//ryan@20150525
1564:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_13);//ryan@20150525
1565:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_14);//ryan@20150525
1566:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_15);//ryan@20150525
1567:Src/main.c    **** 
1568:Src/main.c    **** GPIO_SetBits(GPIOC, GPIO_Pin_7);//ryan@20150525
1569:Src/main.c    **** 
1570:Src/main.c    **** //GPIO_ResetBits(GPIOC, GPIO_Pin_8);//ryan@20150525
1571:Src/main.c    **** PC_SW(1);//MP board
1572:Src/main.c    **** DC_OUT(0);//MP board
1573:Src/main.c    **** 	
ARM GAS  /tmp/ccUr6nXF.s 			page 29


1574:Src/main.c    **** 
1575:Src/main.c    **** #if __USE_SPI_FLASH__ == 1
1576:Src/main.c    **** 	Reset_SPI();
1577:Src/main.c    **** 	Set_SPI();
1578:Src/main.c    **** #endif
1579:Src/main.c    **** 
1580:Src/main.c    **** 	//Set_USBClock();
1581:Src/main.c    **** 	//USB_Interrupts_Config();
1582:Src/main.c    **** 	//USB_Init();
1583:Src/main.c    **** 
1584:Src/main.c    **** #endif
1585:Src/main.c    **** 
1586:Src/main.c    **** }
1587:Src/main.c    **** 
1588:Src/main.c    **** void user_pwm_setvalue(uint16_t value)
1589:Src/main.c    **** {
1590:Src/main.c    ****     TIM_OC_InitTypeDef sConfigOC;
1591:Src/main.c    ****   
1592:Src/main.c    ****     sConfigOC.OCMode = TIM_OCMODE_PWM1;
1593:Src/main.c    ****     sConfigOC.Pulse = value;
1594:Src/main.c    ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1595:Src/main.c    ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
1596:Src/main.c    ****     HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
1597:Src/main.c    ****     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  
1598:Src/main.c    **** }
1599:Src/main.c    **** 
1600:Src/main.c    **** void LoadEEPROM (void)
1601:Src/main.c    **** {
1602:Src/main.c    **** #if 0
1603:Src/main.c    **** 	 PowerFlag = ReadEEP(EEP_Powerflag);
1604:Src/main.c    **** 	 SelectModeType = ReadEEP(EEP_SelectMode);
1605:Src/main.c    **** 
1606:Src/main.c    **** 	OSD_LOCKF= ReadEEP(EEP_ONOFFChoice);
1607:Src/main.c    **** 	Disp_Input = ReadEEP(EEP_COSDMode); 
1608:Src/main.c    **** 		
1609:Src/main.c    **** 	 TimeStep = ReadEEP(EEP_TimeStep);
1610:Src/main.c    **** 	 Priority=ReadEEP(EEP_PRIORITY);
1611:Src/main.c    **** 	 DayNightLevel= ReadEEP(EEP_AutoMode);
1612:Src/main.c    **** 	 NowModeState = ReadEEP(EEP_NowModeState);
1613:Src/main.c    **** 	
1614:Src/main.c    **** 	AudioVol = GetAudioVolEE();
1615:Src/main.c    **** 	CAMA_M= ReadEEP(EEP_CAMAMode);
1616:Src/main.c    **** 	CAMB_M= ReadEEP(EEP_CAMBMode);
1617:Src/main.c    **** 	CAMC_M= ReadEEP(EEP_CAMCMode);
1618:Src/main.c    **** 	CAMR_M= ReadEEP(EEP_CAMRMode);
1619:Src/main.c    **** 
1620:Src/main.c    **** 	AudioVol = GetAudioVolEE();
1621:Src/main.c    **** 
1622:Src/main.c    **** #endif
1623:Src/main.c    **** }
1624:Src/main.c    **** 
1625:Src/main.c    **** void WaitPowerOn(void)
1626:Src/main.c    **** {
1627:Src/main.c    **** BYTE val;
1628:Src/main.c    **** 	PowerLED(_SYSTEM_TIMER_EVENT_RED_ON);
1629:Src/main.c    **** 
1630:Src/main.c    **** 	LCDPowerOFF();
ARM GAS  /tmp/ccUr6nXF.s 			page 30


1631:Src/main.c    **** 	
1632:Src/main.c    **** 	MCUTimerCancelTimerEvent( _USER_TIMER_EVENT_PANEL_BACKLIGHT_ON);
1633:Src/main.c    **** 
1634:Src/main.c    **** 	Printf("\r\n(Power off..)");
1635:Src/main.c    **** 		
1636:Src/main.c    **** 	while(1) 
1637:Src/main.c    **** 	{	
1638:Src/main.c    **** 
1639:Src/main.c    **** 			CheckKeyIn();
1640:Src/main.c    **** 			if(PowerFlag==ON)
1641:Src/main.c    **** 			{
1642:Src/main.c    **** 				//PowerFlag=ON;
1643:Src/main.c    **** 				WriteEEP(EEP_Powerflag,PowerFlag);//2007.3.28 Justin
1644:Src/main.c    **** 				break;		//poweron
1645:Src/main.c    **** 			}
1646:Src/main.c    **** 			
1647:Src/main.c    **** 		  val=CheckTrigger();
1648:Src/main.c    **** 		 
1649:Src/main.c    **** //		  TriggerHandler(val);
1650:Src/main.c    **** 
1651:Src/main.c    **** 		if(val!=0)
1652:Src/main.c    **** 		{	
1653:Src/main.c    **** 			  PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON);
1654:Src/main.c    **** 			TriggerHandler(val);
1655:Src/main.c    **** 			//	AudioMute(OFF);
1656:Src/main.c    **** 			//DisplayInput();		//william v0.2 20120223
1657:Src/main.c    **** 			/*
1658:Src/main.c    **** 			if(!(TriggerMode==0x08))
1659:Src/main.c    **** 			{
1660:Src/main.c    **** 				//Printf("\r\n(**PowerFlag=%02x)",(WORD)PowerFlag);
1661:Src/main.c    **** 				LCDPowerON(1);//修正power on時顯示太慢問題
1662:Src/main.c    **** 				AudioMute(1);
1663:Src/main.c    **** 			}
1664:Src/main.c    **** 			*/
1665:Src/main.c    **** 			
1666:Src/main.c    **** 		}
1667:Src/main.c    **** 		else
1668:Src/main.c    **** 		{
1669:Src/main.c    **** 			//Printf("\r\n(*NO-TRIG)");
1670:Src/main.c    **** 			TriggerHandler(val);  //Pinchi 20140922 add for AWT ML072Q
1671:Src/main.c    **** 
1672:Src/main.c    **** 
1673:Src/main.c    **** 				if(TriggerFlag==0)
1674:Src/main.c    **** 				{
1675:Src/main.c    **** 				//PowerOff();
1676:Src/main.c    **** 			//	AudioMute(ON);
1677:Src/main.c    **** 				
1678:Src/main.c    **** 				//PowerLED(_SYSTEM_TIMER_EVENT_RED_ON);
1679:Src/main.c    **** 				/*
1680:Src/main.c    **** 				if(live_out_state==1)	////live out issue 
1681:Src/main.c    **** 				{
1682:Src/main.c    **** 				live_out_state=0;
1683:Src/main.c    **** 				SetNowMode();
1684:Src/main.c    **** 				Panel_power=0;
1685:Src/main.c    **** 				}
1686:Src/main.c    **** 				*/
1687:Src/main.c    **** 				}
ARM GAS  /tmp/ccUr6nXF.s 			page 31


1688:Src/main.c    **** 			
1689:Src/main.c    **** 		//	TriggerHandler(val);  //Pinchi 20140922 move to above for AWT ML072Q	
1690:Src/main.c    **** 		}		  
1691:Src/main.c    **** 
1692:Src/main.c    **** 		   SysTimerHandler();
1693:Src/main.c    **** 		   	  EQ_Detect();	 
1694:Src/main.c    **** 			  
1695:Src/main.c    **** //			  	if((GT9147_Scan(1)>=_TOUCH_COUNT_1)&&(TP_ACTION==ON))
1696:Src/main.c    **** 					if(GT9147_Scan(1)>=_TOUCH_COUNT_1)
1697:Src/main.c    **** 
1698:Src/main.c    **** 					PowerFlag=ON;
1699:Src/main.c    **** 					
1700:Src/main.c    ****    	}
1701:Src/main.c    **** 
1702:Src/main.c    **** 	PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON);
1703:Src/main.c    **** //	SHOWOSDINFO();	
1704:Src/main.c    **** 	
1705:Src/main.c    **** //		if((NowModeState==JumpMode)&&(TriggerFlag==0))
1706:Src/main.c    **** //			 ShowJUMPOSD();
1707:Src/main.c    **** 		
1708:Src/main.c    **** 	MCUTimerCancelTimerEvent(_USER_TIMER_EVENT_DISPLAY_DISABLE);
1709:Src/main.c    **** 	MCUTimerActiveTimerEvent(SEC(2),_USER_TIMER_EVENT_DISPLAY_DISABLE);
1710:Src/main.c    **** 
1711:Src/main.c    **** 	
1712:Src/main.c    **** 
1713:Src/main.c    **** MCUTimerActiveTimerEvent(SEC(1),  _USER_TIMER_EVENT_PANEL_BACKLIGHT_ON);
1714:Src/main.c    **** //LCDPowerON();
1715:Src/main.c    **** Printf("\r\n(Power ON..)");		
1716:Src/main.c    **** 
1717:Src/main.c    **** 
1718:Src/main.c    **** }
1719:Src/main.c    **** 
1720:Src/main.c    **** 
1721:Src/main.c    **** int main(void)
1722:Src/main.c    **** {
1723:Src/main.c    ****   /* USER CODE BEGIN 1 */
1724:Src/main.c    ****   TimeOutCount = 0 ;
1725:Src/main.c    **** 
1726:Src/main.c    ****     tByte i ;
1727:Src/main.c    ****     tByte j ;
1728:Src/main.c    ****     tByte exosdLen ;
1729:Src/main.c    ****     tByte exosdStart ;
1730:Src/main.c    **** #ifdef VICTOR_DEBUG
1731:Src/main.c    ****     tByte val ;
1732:Src/main.c    **** #endif
1733:Src/main.c    ****   //  int keystate ;
1734:Src/main.c    **** 
1735:Src/main.c    ****   /* USER CODE END 1 */
1736:Src/main.c    **** 
1737:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
1738:Src/main.c    **** 
1739:Src/main.c    ****   /* Reset of all peripherals, Initializes the F
1740:Src/main.c    ****    sh interface and the Systick. */
1741:Src/main.c    ****   HAL_Init();
1742:Src/main.c    ****   
1743:Src/main.c    ****   /* USER CODE BEGIN Init */
1744:Src/main.c    **** 
ARM GAS  /tmp/ccUr6nXF.s 			page 32


1745:Src/main.c    ****   /* USER CODE END Init */
1746:Src/main.c    **** 
1747:Src/main.c    ****   /* Configure the system clock */
1748:Src/main.c    ****   SystemClock_Config();
1749:Src/main.c    **** 
1750:Src/main.c    ****   
1751:Src/main.c    ****   /* USER CODE BEGIN SysInit */
1752:Src/main.c    ****   InitialTimerEvent();
1753:Src/main.c    **** 
1754:Src/main.c    ****   /* USER CODE END SysInit */
1755:Src/main.c    **** 
1756:Src/main.c    ****   /* Initialize all configured peripherals */
1757:Src/main.c    ****   MX_GPIO_Init();
1758:Src/main.c    ****  // LCDPowerOFF();
1759:Src/main.c    **** // AudioMute(ON);
1760:Src/main.c    **** 
1761:Src/main.c    **** //SET_PCA9554PW(_Shutter_SW,OFF);
1762:Src/main.c    ****  // SET_PCA9554PW(_CCD12_SW,ON);
1763:Src/main.c    **** //SET_PCA9554PW(_PCON5V_AUDIO,ON);
1764:Src/main.c    ****  //SET_PCA9554PW(_COL_PW_5V,OFF);
1765:Src/main.c    **** 
1766:Src/main.c    **** //  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin , GPIO_PIN_SET);
1767:Src/main.c    **** //  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin , GPIO_PIN_SET); 
1768:Src/main.c    **** 
1769:Src/main.c    ****  // PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON);
1770:Src/main.c    **** 
1771:Src/main.c    **** //  MX_TIM2_Init();
1772:Src/main.c    ****   MX_TIM3_Init();
1773:Src/main.c    ****   MX_USART1_UART_Init();
1774:Src/main.c    ****   MX_USART2_UART_Init();
1775:Src/main.c    **** //  MX_ADC1_Init();
1776:Src/main.c    ****   
1777:Src/main.c    ****   /* USER CODE BEGIN 2 */
1778:Src/main.c    **** 
1779:Src/main.c    **** //HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);	
1780:Src/main.c    ****   
1781:Src/main.c    ****  SW_I2C0_Init() ;
1782:Src/main.c    ****  SW_I2C1_Init() ;
1783:Src/main.c    ****  SW_I2C2_Init() ;
1784:Src/main.c    ****  SW_I2C3_Init() ;
1785:Src/main.c    **** 
1786:Src/main.c    **** //user_pwm_setvalue(2000);
1787:Src/main.c    **** 
1788:Src/main.c    ****   //uComOnChipInitial();
1789:Src/main.c    ****   
1790:Src/main.c    **** // if((SelectInputMode==_HDMI_Input)&&(gHDMI_Index==0))
1791:Src/main.c    **** Set_Video_Loss_OSD(0,ON);
1792:Src/main.c    **** SET_Audio_Mute(ON);
1793:Src/main.c    **** 
1794:Src/main.c    **** 
1795:Src/main.c    ****  // GT9147_Init();
1796:Src/main.c    **** #if 1
1797:Src/main.c    ****   msleep(50) ;
1798:Src/main.c    ****   HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data, 1);	//activate UART receive interrupt every time
1799:Src/main.c    ****   HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	//activate UART receive interrupt every time
1800:Src/main.c    **** 
1801:Src/main.c    ****  // HAL_GPIO_WritePin(TP2824_RST_GPIO_Port, VS_RST_Pin, 0); //RX RST
ARM GAS  /tmp/ccUr6nXF.s 			page 33


1802:Src/main.c    ****  //HAL_GPIO_WritePin(TX_RST_GPIO_Port, VS_RST_Pin, 0); //TX RST
1803:Src/main.c    ****   HAL_GPIO_WritePin(VS_RST_GPIO_Port, VS_RST_Pin, 0); //VS4210 RST
1804:Src/main.c    ****  TP2824_SET_REST(0);
1805:Src/main.c    **** 
1806:Src/main.c    ****   msleep(100) ;
1807:Src/main.c    ****   //HAL_GPIO_WritePin(TP2824_RST_GPIO_Port, VS_RST_Pin, 1); //VS4210 RST
1808:Src/main.c    **** // HAL_GPIO_WritePin(TX_RST_GPIO_Port, VS_RST_Pin, 1); //TX RST
1809:Src/main.c    ****   HAL_GPIO_WritePin(VS_RST_GPIO_Port, VS_RST_Pin, 1); //VS4210 RST
1810:Src/main.c    ****  TP2824_SET_REST(1);
1811:Src/main.c    **** 
1812:Src/main.c    **** #endif
1813:Src/main.c    **** //LCDPowerON();
1814:Src/main.c    **** // SET_PCA9554PW(_COL_PW_5V,ON); 
1815:Src/main.c    **** 
1816:Src/main.c    ****   //I2CWrite(VS9988_ADDR, 0x01, 0x5A);  //reset
1817:Src/main.c    **** //  printf("\r\nVS4210 sdk2.0 Compiled %s %s !\r\n",__DATE__ , __TIME__);
1818:Src/main.c    **** // val = VXISI2CRead(0x00) ;
1819:Src/main.c    **** //  printf("VS4210 ID = 0x%02X !\r\n", (int)val );
1820:Src/main.c    **** 
1821:Src/main.c    ****   //Init_TP280x_RegSet();
1822:Src/main.c    **** 
1823:Src/main.c    ****   // RX Init
1824:Src/main.c    ****   for (i = 0 ; i < HDMI_IN_NUMBER ; i++ )
1825:Src/main.c    ****   {
1826:Src/main.c    ****       gHDMI_Index = i ;
1827:Src/main.c    ****       dbg_Printf("Init HDMI RX,Chip(%d)....\r\n",(int)i ) ;
1828:Src/main.c    ****       InitHDMIRX(0);
1829:Src/main.c    ****       HDMIRX_WriteI2C_Byte(0x89 ,0x80);
1830:Src/main.c    **** 
1831:Src/main.c    **** #ifdef VICTOR_DEBUG
1832:Src/main.c    ****       val = HDMIRX_ReadI2C_Byte(0x02) ;
1833:Src/main.c    ****       dbg_Printf("IT66021 chip num=%d , 02reg=0x%02x\r\n", (int )i , (int)val ) ;
1834:Src/main.c    **** #endif
1835:Src/main.c    ****   }
1836:Src/main.c    ****   
1837:Src/main.c    **** //  dbg_Printf("Init HDMI Tx....\r\n") ;
1838:Src/main.c    ****  //  HDMI_Tx_Init();
1839:Src/main.c    **** 
1840:Src/main.c    ****    if (HDMI_IN_NUMBER == 4 )
1841:Src/main.c    ****     pVS4210_MutiWindows1.OutputMode = VS4210_1080P_MODE1 ;  // 4windows
1842:Src/main.c    ****   else
1843:Src/main.c    **** 	  #ifdef VS4210_SELECT_WIN1	//20201211-02
1844:Src/main.c    **** 	  pVS4210_MutiWindows1.OutputMode =VS4210_1080P_MODE0_w1;
1845:Src/main.c    **** 	  #else
1846:Src/main.c    ****       pVS4210_MutiWindows1.OutputMode =VS4210_1080P_MODE0_w0;/// VS4210_1080P_MODE12 ;  
1847:Src/main.c    **** 	  #endif
1848:Src/main.c    **** 
1849:Src/main.c    ****   pVS4210_MutiWindows1.AudioChannel = HDMI_AUDIO_1 ;
1850:Src/main.c    ****   pVS4210_MutiWindows1.OutputSize = _OUTPUT_1080P60 ;
1851:Src/main.c    **** 	#ifdef VS4210_SELECT_WIN1	//20201211-02
1852:Src/main.c    **** 	pVS4210_MutiWindows1.WindowMap.WMap0 = 2 ;
1853:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap1 = 1 ; //set ch2 = video2
1854:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap2 = 3 ; //set ch3 = video3
1855:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap3 = 4 ; //set ch4 = video4
1856:Src/main.c    **** 	#else
1857:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap0 = 1 ; //set ch1 = video1
1858:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap1 = 2 ; //set ch2 = video2
ARM GAS  /tmp/ccUr6nXF.s 			page 34


1859:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap2 = 3 ; //set ch3 = video3
1860:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap3 = 4 ; //set ch4 = video4
1861:Src/main.c    **** 	#endif
1862:Src/main.c    **** #if 1
1863:Src/main.c    **** //Extern OSD 20200110-01
1864:Src/main.c    **** VXOSD_UseFont_init(EXTERNOSDNUMBER ,&UserDefineFont1[0] ) ;
1865:Src/main.c    **** 
1866:Src/main.c    **** main_init();
1867:Src/main.c    **** #endif
1868:Src/main.c    **** 
1869:Src/main.c    **** #ifdef  _SUPPORT_EDID_RAM_
1870:Src/main.c    **** //interval EDID ryan@20200917
1871:Src/main.c    **** //SETIT66021EDID();
1872:Src/main.c    **** #endif
1873:Src/main.c    **** 
1874:Src/main.c    ****    Init_TP280x_RegSet();
1875:Src/main.c    **** 
1876:Src/main.c    ****    //test@start
1877:Src/main.c    **** #ifdef VICTOR_DEBUG
1878:Src/main.c    ****    val = VXISI2CRead(0x00) ;
1879:Src/main.c    ****    dbg_Printf("VS4210 chip ID = 0x%02x\r\n",(int)val) ;
1880:Src/main.c    ****    dbg_Printf("VS4210 Init. (Startting...)\r\n") ;
1881:Src/main.c    **** #endif
1882:Src/main.c    **** 
1883:Src/main.c    ****  pVS4210_MutiWindows1.DrawOSDFlg = 0x03 ;  //Enable OSD, bit1=Title, bit0 = bar
1884:Src/main.c    ****   //pVS4210_MutiWindows1.DrawOSDFlg = 0x00 ;  //Enable OSD, bit1=Title, bit0 = bar
1885:Src/main.c    ****   //pVS4210_MutiWindows1.OutputMode = VS4210_1080P_MODE1 ;  // 4windows
1886:Src/main.c    ****   //pVS4210_MutiWindows1.OutputMode = VS4210_1080P_MODE6 ;  // 1_3 windows
1887:Src/main.c    ****   //pVS4210_MutiWindows1.OutputMode = VS4210_1080P_MODE12 ;  // 4windows
1888:Src/main.c    **** //  pVS4210_MutiWindows1.WindowMap.WMap0 = 1 ; //set ch1 = video1
1889:Src/main.c    **** //  pVS4210_MutiWindows1.WindowMap.WMap1 = 2 ; //set ch2 = video2
1890:Src/main.c    **** //  pVS4210_MutiWindows1.WindowMap.WMap2 = 3 ; //set ch3 = video3
1891:Src/main.c    **** //  pVS4210_MutiWindows1.WindowMap.WMap3 = 4 ; //set ch4 = video4
1892:Src/main.c    ****   //pVS4210_MutiWindows1.AudioChannel = HDMI_AUDIO_1 ;
1893:Src/main.c    ****   pVS4210_MutiWindows1.OutputSize = _OUTPUT_1080P60 ;
1894:Src/main.c    ****   //pVS4210_MutiWindows1.OutputSize = _OUTPUT_720P60 ;
1895:Src/main.c    ****   //pVS4210_MutiWindows1.DrawBoxFlg =1 ;
1896:Src/main.c    ****   pVS4210_MutiWindows1.DrawBoxFlg =0 ;
1897:Src/main.c    ****   pVS4210_MutiWindows1.DrawBoxColor= _EN_DRAWBOX_COLOR_White ;
1898:Src/main.c    ****   VXIS_fSetOsdx2(0) ;
1899:Src/main.c    **** 
1900:Src/main.c    ****   VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;
1901:Src/main.c    **** 
1902:Src/main.c    ****   if (pVS4210_MutiWindows1.DrawOSDFlg != 0)
1903:Src/main.c    ****   {
1904:Src/main.c    ****         OSD_Show_Flg = 1 ;
1905:Src/main.c    ****         Tim1_count = 0 ;
1906:Src/main.c    ****         OSDStateFlg = 1 ;
1907:Src/main.c    ****         OSDSecCount = 0 ;
1908:Src/main.c    ****   }  
1909:Src/main.c    **** 
1910:Src/main.c    **** ExOsdContent[0] = 3*  ((EXTERNOSDNUMBER *2) +1) ;
1911:Src/main.c    **** memset(&ExOsdContent[1] ,_spc , (EXTERNOSDNUMBER+1) *2 ) ;
1912:Src/main.c    **** exosdLen = 4*EXTERNOSDNUMBER + 4  ;
1913:Src/main.c    **** exosdStart = (EXTERNOSDNUMBER +1) *2 +1 ;
1914:Src/main.c    **** j = 1 ;
1915:Src/main.c    **** for (i = exosdStart ; i <= exosdLen ;i = i+2 )
ARM GAS  /tmp/ccUr6nXF.s 			page 35


1916:Src/main.c    **** {
1917:Src/main.c    **** 	ExOsdContent[i] = 0x7F + j ;
1918:Src/main.c    **** 	ExOsdContent[i+1] = _spc ;
1919:Src/main.c    **** 	j++ ;
1920:Src/main.c    **** }
1921:Src/main.c    **** memset(&ExOsdContent[4*EXTERNOSDNUMBER +3] ,_spc ,EXTERNOSDNUMBER *2 +1   ) ;
1922:Src/main.c    ****   exosdLen = EXTERNOSDNUMBER *2  ;
1923:Src/main.c    **** 
1924:Src/main.c    **** Audio_Sel(HDMI_AUDIO_1) ;
1925:Src/main.c    **** //test@end
1926:Src/main.c    **** 
1927:Src/main.c    **** /*
1928:Src/main.c    **** //xxxxx 2013-0801
1929:Src/main.c    **** IT6602HPDCtrl(1,0);	// HDMI port , set HPD = 0
1930:Src/main.c    **** //xxxxx
1931:Src/main.c    **** 
1932:Src/main.c    ****     delay1ms(1000);	//for power sequence
1933:Src/main.c    **** 
1934:Src/main.c    **** IT6602_fsm_init();
1935:Src/main.c    **** */
1936:Src/main.c    **** 
1937:Src/main.c    **** 
1938:Src/main.c    **** #if 0
1939:Src/main.c    **** //PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON);
1940:Src/main.c    **** 
1941:Src/main.c    **** //load eeprom data
1942:Src/main.c    **** //LoadEEPROM();
1943:Src/main.c    **** 
1944:Src/main.c    **** //RX
1945:Src/main.c    ****   ManVidRes = RES1920X1080 ; //0x01
1946:Src/main.c    **** //Init_TP280x_RegSet();
1947:Src/main.c    **** 
1948:Src/main.c    **** //TX
1949:Src/main.c    ****   //VS9988_Set_Format(gbVXIS_InputMode, gbVXIS_OuputModeflg, gbVXIS_OuputChannel  )	;
1950:Src/main.c    ****   //gbVXIS_InputMode = _OSD_NO_SINGLE ;
1951:Src/main.c    ****   //VS9988_BlueScreen() ;
1952:Src/main.c    ****   //VXOSD_SetOnOff(0) ;
1953:Src/main.c    **** 
1954:Src/main.c    ****   //HDMI_Tx_Init() ;
1955:Src/main.c    **** 
1956:Src/main.c    ****   //VS4210 SW Reset@start
1957:Src/main.c    ****     VXISI2CWrite( 0x01 , 0x5A); //Reset
1958:Src/main.c    **** 
1959:Src/main.c    **** 
1960:Src/main.c    ****   //VS4210 SW Reset@end
1961:Src/main.c    ****   //VS4210_SwitchChip(0x40, 0 ) ;c8 cc8
1962:Src/main.c    ****   pVS4210_JointKind1.AudioChannel = HDMI_AUDIO_NONE ;
1963:Src/main.c    ****   pVS4210_JointKind1.DrawBoxFlg =1 ;
1964:Src/main.c    ****   pVS4210_JointKind1.DrawOSDFlg =0x03 ; //bits 0 ,1
1965:Src/main.c    ****   //pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE0_w0 ;
1966:Src/main.c    ****  // pVS4210_JointKind1.OutputMode = VS4210_1080P_MODE1 ;
1967:Src/main.c    **** pVS4210_JointKind1.OutputMode =VS4210_1080P_MODE0_w0;/* VS4210_1080P_MODE1 ;*/
1968:Src/main.c    ****   pVS4210_JointKind1.OutputSize = _OUTPUT_1080P60 ;///*_OUTPUT_800x480;*/
1969:Src/main.c    **** 
1970:Src/main.c    **** //LCDPowerON();
1971:Src/main.c    **** 
1972:Src/main.c    **** //VS4210_Rx_NoSignal(3) ;
ARM GAS  /tmp/ccUr6nXF.s 			page 36


1973:Src/main.c    **** 
1974:Src/main.c    ****  setloopoutmode(0) ;
1975:Src/main.c    **** // SetNowMode();	
1976:Src/main.c    **** 
1977:Src/main.c    ****     VS4210_Rx_NoSignal(0) ;
1978:Src/main.c    ****   VS4210_Rx_NoSignal(1) ;
1979:Src/main.c    ****   VS4210_Rx_NoSignal(2) ;
1980:Src/main.c    ****   VS4210_Rx_NoSignal(3) ;
1981:Src/main.c    ****   
1982:Src/main.c    ****   #endif
1983:Src/main.c    **** // LCDPowerON();
1984:Src/main.c    **** // SetNowMode();  
1985:Src/main.c    ****   //void VS4210_Rx_NoSignal(tByte ch )
1986:Src/main.c    **** 
1987:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim3) ;
1988:Src/main.c    ****   /* USER CODE END 2 */
1989:Src/main.c    ****  
1990:Src/main.c    ****   /* Infinite loop */
1991:Src/main.c    ****   /* USER CODE BEGIN WHILE */
1992:Src/main.c    **** 
1993:Src/main.c    **** //SetNowMode();  
1994:Src/main.c    **** 
1995:Src/main.c    ****  // 	LoadVideoData();
1996:Src/main.c    **** 
1997:Src/main.c    **** //	  AudioMute(OFF);
1998:Src/main.c    **** 	//  LCDPowerON();
1999:Src/main.c    **** 
2000:Src/main.c    **** //	SET_VX8812_SD_Video_Out(_NTSC);
2001:Src/main.c    **** //	SET_VX8812_SD_Video_Out(_PAL);
2002:Src/main.c    **** 
2003:Src/main.c    **** //  Printf("\r\nMain Loop...");
2004:Src/main.c    ****   printf("\r\nMain Loop...");
2005:Src/main.c    **** 
2006:Src/main.c    ****   //VXISI2CWrite(0x08,0x21);
2007:Src/main.c    ****   //VXISI2CWrite(0x0A,0x21);
2008:Src/main.c    ****   //VXISI2CWrite(0x74,0x02);
2009:Src/main.c    ****   //VXISI2CWrite(0x82,0x40);
2010:Src/main.c    **** //  VS4210_FULL88init2(VS4210_hdmi1080P_1080P_mode0_w0_88param);
2011:Src/main.c    **** 
2012:Src/main.c    ****   while (1)
2013:Src/main.c    ****   {
2014:Src/main.c    ****     /* USER CODE END WHILE */
2015:Src/main.c    **** 
2016:Src/main.c    **** //	if(PowerFlag==ON)///power offf
2017:Src/main.c    **** 	 main_loop();
2018:Src/main.c    **** 	
2019:Src/main.c    **** //	WaitPowerOn();
2020:Src/main.c    **** 
2021:Src/main.c    **** 	//user_pwm_setvalue(500);
2022:Src/main.c    **** 
2023:Src/main.c    ****     /* USER CODE BEGIN 3 */
2024:Src/main.c    **** 
2025:Src/main.c    **** 
2026:Src/main.c    **** 
2027:Src/main.c    **** 
2028:Src/main.c    ****   }
2029:Src/main.c    ****   /* USER CODE END 3 */
ARM GAS  /tmp/ccUr6nXF.s 			page 37


2030:Src/main.c    **** }
2031:Src/main.c    **** 
2032:Src/main.c    **** void main_loop(void)
2033:Src/main.c    **** {
2034:Src/main.c    **** 
2035:Src/main.c    **** //BYTE val;
2036:Src/main.c    **** //USHORT loopinterval;
2037:Src/main.c    **** 
2038:Src/main.c    **** //VXISI2CWrite(0xf0,0xb5);
2039:Src/main.c    **** 
2040:Src/main.c    **** while(1)
2041:Src/main.c    **** {
2042:Src/main.c    **** 
2043:Src/main.c    **** #if (_DEBUG_MESSAGE_Monitor==ON)
2044:Src/main.c    **** 	if(AccessEnable==1)
2045:Src/main.c    **** 	#endif
2046:Src/main.c    **** {
2047:Src/main.c    **** 	HDMI_VideoModeDetect() ;
2048:Src/main.c    **** 	HDMI_AudioModeDetect() ;
2049:Src/main.c    **** 
2050:Src/main.c    **** 	TxCount++ ;
2051:Src/main.c    **** 	if (TxCount > 10 )
2052:Src/main.c    **** 	{
2053:Src/main.c    **** 		TxCount = 0 ;
2054:Src/main.c    **** 		HDMITX_DevLoopProc() ;
2055:Src/main.c    **** 	}
2056:Src/main.c    **** 	
2057:Src/main.c    **** //	GetRS232_CMD();
2058:Src/main.c    **** 	//getmcukeystate() ;
2059:Src/main.c    **** 	/*
2060:Src/main.c    **** 	if (IR_END_Flg ==1 )
2061:Src/main.c    **** 	{
2062:Src/main.c    **** 		IR_END_Flg = 0 ;
2063:Src/main.c    **** 		if (u8IRcode == u8IRCheckcode )
2064:Src/main.c    **** 		{
2065:Src/main.c    **** 			dbg_Printf("Vendor=0x%04x,IR=0x%02x\r\n",(int) u16Vendor,(int) u8IRcode) ;
2066:Src/main.c    **** 			if (u16Vendor == IR_Vendor_Code_)
2067:Src/main.c    **** 			{
2068:Src/main.c    **** 				ir_process(u8IRcode) ;
2069:Src/main.c    **** 				u16Vendor =0 ;
2070:Src/main.c    **** 			}
2071:Src/main.c    **** 		}
2072:Src/main.c    **** 	}
2073:Src/main.c    **** 	*/
2074:Src/main.c    **** 
2075:Src/main.c    **** 	msleep(10) ;
2076:Src/main.c    **** 
2077:Src/main.c    **** 	   gMode0LoopCount++ ;
2078:Src/main.c    **** 	   if (gMode0LoopCount > 100 )
2079:Src/main.c    **** 	   {
2080:Src/main.c    **** 		   gMode0LoopCount = 0 ;
2081:Src/main.c    **** 		   OSDSecCount = OSDSecCount +1 ;
2082:Src/main.c    **** 	   }
2083:Src/main.c    **** 	
2084:Src/main.c    **** 	   if (OSDPreSecCount != OSDSecCount)
2085:Src/main.c    **** 	   {
2086:Src/main.c    **** 		   OSDPreSecCount = OSDSecCount ;
ARM GAS  /tmp/ccUr6nXF.s 			page 38


2087:Src/main.c    **** 		   if (gMode0LoopFlg == 1)
2088:Src/main.c    **** 		   {
2089:Src/main.c    **** 			   gMode0LoopSecCount ++ ;
2090:Src/main.c    **** 			   if (gMode0LoopSecCount > gMode0LoopSecCmpVal)
2091:Src/main.c    **** 			   {
2092:Src/main.c    **** 				   gMode0LoopSecCount = 0 ;
2093:Src/main.c    **** 				   pVS4210_MutiWindows1.OutputMode = VS4210_FULL_MODE0 ;
2094:Src/main.c    **** 				   if (pVS4210_MutiWindows1.WindowMap.WMap0 < 4)
2095:Src/main.c    **** 				   {
2096:Src/main.c    **** 					   pVS4210_MutiWindows1.WindowMap.WMap0 = pVS4210_MutiWindows1.WindowMap.WMap0 +1 ;
2097:Src/main.c    **** 				   }
2098:Src/main.c    **** 				   else {
2099:Src/main.c    **** 					   pVS4210_MutiWindows1.WindowMap.WMap0 = 1 ;
2100:Src/main.c    **** 				   }
2101:Src/main.c    **** 				   dbg_Printf("LOOP CH=%d,SMP Sec=%d\r\n",pVS4210_MutiWindows1.WindowMap.WMap0, gMode0LoopSecCm
2102:Src/main.c    **** 				   VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;
2103:Src/main.c    **** 				   OSDSecCount = 0 ;
2104:Src/main.c    **** 			   }
2105:Src/main.c    **** 		   }
2106:Src/main.c    **** 	
2107:Src/main.c    **** 		   if (gMode0LoopFlg == 1)
2108:Src/main.c    **** 		   {
2109:Src/main.c    **** 		    dbg_Printf("Loop CH=%d,SecCount=%d\r\n",pVS4210_MutiWindows1.WindowMap.WMap0, OSDSecCount)  ;
2110:Src/main.c    **** 		   }
2111:Src/main.c    **** 		   else
2112:Src/main.c    **** 		   {
2113:Src/main.c    **** 		  //dbg_Printf("OSDSecCount=%d\r\n", OSDSecCount)  ;
2114:Src/main.c    **** 		   }
2115:Src/main.c    **** 	
2116:Src/main.c    **** 		   if (OSDStateFlg == 1 )
2117:Src/main.c    **** 		   {
2118:Src/main.c    **** 			   if (OSDSecCount >= OSD_OFF_SEC )
2119:Src/main.c    **** 			   {
2120:Src/main.c    **** 				   OSDSecCount = 0 ;
2121:Src/main.c    **** 				   OSDStateFlg = 0 ;
2122:Src/main.c    **** 				   OSD_Clear_All();
2123:Src/main.c    **** 				   ////VXIS_fSetContentOsdOnOff(0) ;
2124:Src/main.c    **** 			   }
2125:Src/main.c    **** 		   }
2126:Src/main.c    **** 
2127:Src/main.c    **** 		if(VXISI2CRead(0x32)==0 )///CONTRAST
2128:Src/main.c    **** 			VXISI2CWrite(0x32,0x80);
2129:Src/main.c    **** 		   
2130:Src/main.c    **** 	   }
2131:Src/main.c    **** 
2132:Src/main.c    **** 
2133:Src/main.c    **** 	EQ_Detect();
2134:Src/main.c    **** 	
2135:Src/main.c    **** #if (_Source_Switch==ON)
2136:Src/main.c    **** 
2137:Src/main.c    **** 	#if (_Only_AHD_Mode==ON)
2138:Src/main.c    **** 		if((SelectInputMode!=1))
2139:Src/main.c    **** 		{
2140:Src/main.c    **** 			msleep(50) ;
2141:Src/main.c    **** 
2142:Src/main.c    **** 			if((SelectInputMode!=1))
2143:Src/main.c    **** 				{
ARM GAS  /tmp/ccUr6nXF.s 			page 39


2144:Src/main.c    **** 				SelectInputMode=1;
2145:Src/main.c    **** 
2146:Src/main.c    **** 					HS_Select_Win(1);
2147:Src/main.c    **** 				}
2148:Src/main.c    **** 		}	
2149:Src/main.c    **** 
2150:Src/main.c    **** 	#else
2151:Src/main.c    **** 	CheckSelectInputMode=HDMI_SELECT_GET();
2152:Src/main.c    **** 		if((CheckSelectInputMode!=SelectInputMode)/*&&(BOOT_ISSUE==0)*/)
2153:Src/main.c    **** 		{
2154:Src/main.c    **** 			msleep(50) ;
2155:Src/main.c    **** 			CheckSelectInputMode=HDMI_SELECT_GET();
2156:Src/main.c    **** 
2157:Src/main.c    **** 			if((CheckSelectInputMode!=SelectInputMode)/*&&(BOOT_ISSUE==0)*/)
2158:Src/main.c    **** 				{
2159:Src/main.c    **** 				SelectInputMode=CheckSelectInputMode;
2160:Src/main.c    **** 
2161:Src/main.c    **** 			//	HS_Select_Win(HDMI_SELECT_GET());
2162:Src/main.c    **** 
2163:Src/main.c    **** 				if(SelectInputMode==1)
2164:Src/main.c    **** 					HS_Select_Win(1);
2165:Src/main.c    **** 				else
2166:Src/main.c    **** 				HS_Select_Win(0);
2167:Src/main.c    **** 				}
2168:Src/main.c    **** 		}	
2169:Src/main.c    **** 
2170:Src/main.c    **** 		
2171:Src/main.c    **** 	#endif
2172:Src/main.c    **** 
2173:Src/main.c    **** #endif
2174:Src/main.c    **** }
2175:Src/main.c    **** 
2176:Src/main.c    **** 	#if (_DEBUG_MESSAGE_Monitor==ON)
2177:Src/main.c    **** 	do {	//20201211-04
2178:Src/main.c    **** 	while( RS_ready())	Monitor();	
2179:Src/main.c    **** 	}while(AccessEnable == 0);
2180:Src/main.c    **** 	#endif
2181:Src/main.c    **** 
2182:Src/main.c    **** while( RS2_ready())     TOAReceivePaser();
2183:Src/main.c    **** 		
2184:Src/main.c    **** 	      SysTimerHandler();
2185:Src/main.c    **** 
2186:Src/main.c    **** 		Get_2824cIrq();//check tp2824 COC
2187:Src/main.c    **** 
2188:Src/main.c    **** 
2189:Src/main.c    **** 
2190:Src/main.c    **** #if 0
2191:Src/main.c    **** 		  loopinterval += getloopTicCount();
2192:Src/main.c    **** 		  
2193:Src/main.c    **** 					  ///////////////////////////
2194:Src/main.c    **** 					  // sys main flow
2195:Src/main.c    **** 					  ///////////////////////////
2196:Src/main.c    **** 					  if( loopinterval >=MS_LOOP) //execute once each 50m second
2197:Src/main.c    **** 					  {
2198:Src/main.c    **** 				    //printf("loopinterval\n");
2199:Src/main.c    **** 		  
2200:Src/main.c    **** 					   loopinterval =0;
ARM GAS  /tmp/ccUr6nXF.s 			page 40


2201:Src/main.c    **** 				//	 IT6602_fsm();
2202:Src/main.c    **** 					 }
2203:Src/main.c    **** #endif	
2204:Src/main.c    **** 	/*
2205:Src/main.c    **** 		CheckKeyIn();
2206:Src/main.c    **** 
2207:Src/main.c    **** 	CheckTouchP();
2208:Src/main.c    **** 	
2209:Src/main.c    **** 	  EQ_Detect();	 
2210:Src/main.c    **** 
2211:Src/main.c    **** 	if( GT9147_Scan(1)==_TOUCH_COUNT_4 ) break;		
2212:Src/main.c    **** 	
2213:Src/main.c    **** 		  val=CheckTrigger();
2214:Src/main.c    **** 		  TriggerHandler(val);
2215:Src/main.c    **** 
2216:Src/main.c    **** 	if( !CheckKeyIn() ) break;			// POWEROFF
2217:Src/main.c    **** 	*/
2218:Src/main.c    **** 	
2219:Src/main.c    **** 	}
2220:Src/main.c    **** 
2221:Src/main.c    **** }
2222:Src/main.c    **** 
2223:Src/main.c    **** /* static*/ void VS4210_FULL88init2( tcByte *Valn )
2224:Src/main.c    ****  {
2225:Src/main.c    **** 	 tByte i ;
2226:Src/main.c    **** 	 tByte addr ;
2227:Src/main.c    **** 	 tByte i2cVal ;
2228:Src/main.c    **** 	 tcByte *Addrn ; 
2229:Src/main.c    **** 	 Addrn = &VS4210_Addr_88param[0] ; 
2230:Src/main.c    ****  
2231:Src/main.c    **** 	 for (i=0 ; i< VS4210_INIT_NUMBER ; i++)
2232:Src/main.c    **** 	 {
2233:Src/main.c    **** 		 addr	= Addrn[i] ;
2234:Src/main.c    **** 		 i2cVal = Valn[i];
2235:Src/main.c    **** 		 VXISI2CWrite( addr,i2cVal);
2236:Src/main.c    **** 	 }
2237:Src/main.c    ****  }
2238:Src/main.c    **** 
2239:Src/main.c    **** void TP_bt1120_1080P_1080P_mode0_w0(void)
2240:Src/main.c    **** {
2241:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table 1080P... ");
2242:Src/main.c    **** #if 1
2243:Src/main.c    **** 
2244:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_1080P_1080P_mode0_w0_88param);
2245:Src/main.c    **** #else
2246:Src/main.c    **** 
2247:Src/main.c    **** VXISI2CWrite(0x00,0x42); 
2248:Src/main.c    **** VXISI2CWrite(0x01,0x00); 
2249:Src/main.c    **** VXISI2CWrite(0x02,0x00); 
2250:Src/main.c    **** VXISI2CWrite(0x03,0x75); 
2251:Src/main.c    **** VXISI2CWrite(0x04,0x18); 
2252:Src/main.c    **** VXISI2CWrite(0x05,0x80); 
2253:Src/main.c    **** VXISI2CWrite(0x06,0x20); 
2254:Src/main.c    **** VXISI2CWrite(0x07,0x0C); 
2255:Src/main.c    **** VXISI2CWrite(0x08,0x40); 
2256:Src/main.c    **** VXISI2CWrite(0x09,0x0A); 
2257:Src/main.c    **** VXISI2CWrite(0x0A,0x40); 
ARM GAS  /tmp/ccUr6nXF.s 			page 41


2258:Src/main.c    **** VXISI2CWrite(0x0B,0x0A); 
2259:Src/main.c    **** VXISI2CWrite(0x0C,0x00); 
2260:Src/main.c    **** VXISI2CWrite(0x0D,0x20); 
2261:Src/main.c    **** VXISI2CWrite(0x0E,0x10); 
2262:Src/main.c    **** VXISI2CWrite(0x0F,0x00); 
2263:Src/main.c    **** VXISI2CWrite(0x10,0x81); 
2264:Src/main.c    **** VXISI2CWrite(0x11,0x82); 
2265:Src/main.c    **** VXISI2CWrite(0x12,0x74); 
2266:Src/main.c    **** VXISI2CWrite(0x13,0x80); 
2267:Src/main.c    **** VXISI2CWrite(0x14,0x38); 
2268:Src/main.c    **** VXISI2CWrite(0x15,0x78); 
2269:Src/main.c    **** VXISI2CWrite(0x16,0xFE); 
2270:Src/main.c    **** VXISI2CWrite(0x17,0x00); 
2271:Src/main.c    **** VXISI2CWrite(0x18,0xC0); 
2272:Src/main.c    **** VXISI2CWrite(0x19,0x01); 
2273:Src/main.c    **** VXISI2CWrite(0x1A,0x20); 
2274:Src/main.c    **** VXISI2CWrite(0x1B,0x30); 
2275:Src/main.c    **** VXISI2CWrite(0x1C,0x00); 
2276:Src/main.c    **** VXISI2CWrite(0x1D,0x00); 
2277:Src/main.c    **** VXISI2CWrite(0x1E,0x20); 
2278:Src/main.c    **** VXISI2CWrite(0x1F,0xA4); 
2279:Src/main.c    **** VXISI2CWrite(0x20,0x50); 
2280:Src/main.c    **** VXISI2CWrite(0x21,0xE2); 
2281:Src/main.c    **** VXISI2CWrite(0x22,0x87); 
2282:Src/main.c    **** VXISI2CWrite(0x23,0x98); 
2283:Src/main.c    **** VXISI2CWrite(0x24,0x80); 
2284:Src/main.c    **** VXISI2CWrite(0x25,0x44); 
2285:Src/main.c    **** VXISI2CWrite(0x26,0x65); 
2286:Src/main.c    **** VXISI2CWrite(0x27,0x38); 
2287:Src/main.c    **** VXISI2CWrite(0x28,0xF0); 
2288:Src/main.c    **** VXISI2CWrite(0x29,0x00); 
2289:Src/main.c    **** VXISI2CWrite(0x2A,0x00); 
2290:Src/main.c    **** VXISI2CWrite(0x2B,0x11); 
2291:Src/main.c    **** VXISI2CWrite(0x2C,0x00); 
2292:Src/main.c    **** VXISI2CWrite(0x2D,0x00); 
2293:Src/main.c    **** VXISI2CWrite(0x2E,0x47); 
2294:Src/main.c    **** VXISI2CWrite(0x2F,0x80); 
2295:Src/main.c    **** VXISI2CWrite(0x30,0x38); 
2296:Src/main.c    **** VXISI2CWrite(0x31,0x80); 
2297:Src/main.c    **** VXISI2CWrite(0x32,0x80); 
2298:Src/main.c    **** VXISI2CWrite(0x33,0x80); 
2299:Src/main.c    **** VXISI2CWrite(0x34,0xA0); 
2300:Src/main.c    **** VXISI2CWrite(0x35,0x18); 
2301:Src/main.c    **** VXISI2CWrite(0x36,0x46); 
2302:Src/main.c    **** VXISI2CWrite(0x37,0x64); 
2303:Src/main.c    **** VXISI2CWrite(0x38,0x00); 
2304:Src/main.c    **** VXISI2CWrite(0x39,0xFF); 
2305:Src/main.c    **** VXISI2CWrite(0x3A,0x00); 
2306:Src/main.c    **** VXISI2CWrite(0x3B,0x80); 
2307:Src/main.c    **** VXISI2CWrite(0x3C,0x80); 
2308:Src/main.c    **** VXISI2CWrite(0x3D,0x80); 
2309:Src/main.c    **** VXISI2CWrite(0x3E,0x80); 
2310:Src/main.c    **** VXISI2CWrite(0x3F,0x80); 
2311:Src/main.c    **** //VXISI2CWrite(0xVXISI2C)
2312:Src/main.c    **** VXISI2CWrite(0x41,0x60); 
2313:Src/main.c    **** VXISI2CWrite(0x42,0x5F); 
2314:Src/main.c    **** VXISI2CWrite(0x43,0x37); 
ARM GAS  /tmp/ccUr6nXF.s 			page 42


2315:Src/main.c    **** VXISI2CWrite(0x44,0x14); 
2316:Src/main.c    **** VXISI2CWrite(0x45,0x00); 
2317:Src/main.c    **** VXISI2CWrite(0x46,0x00); 
2318:Src/main.c    **** VXISI2CWrite(0x47,0x00); 
2319:Src/main.c    **** VXISI2CWrite(0x48,0x00); 
2320:Src/main.c    **** VXISI2CWrite(0x49,0x00); 
2321:Src/main.c    **** VXISI2CWrite(0x4A,0x00); 
2322:Src/main.c    **** VXISI2CWrite(0x4B,0x20); 
2323:Src/main.c    **** VXISI2CWrite(0x4C,0x00); 
2324:Src/main.c    **** VXISI2CWrite(0x4D,0x00); 
2325:Src/main.c    **** VXISI2CWrite(0x4E,0x00); 
2326:Src/main.c    **** VXISI2CWrite(0x4F,0x7F); 
2327:Src/main.c    **** VXISI2CWrite(0x50,0x20); 
2328:Src/main.c    **** VXISI2CWrite(0x51,0x05); 
2329:Src/main.c    **** VXISI2CWrite(0x52,0x00); 
2330:Src/main.c    **** VXISI2CWrite(0x53,0x06); 
2331:Src/main.c    **** VXISI2CWrite(0x54,0x00); 
2332:Src/main.c    **** VXISI2CWrite(0x55,0xB4); 
2333:Src/main.c    **** VXISI2CWrite(0x56,0x3D); 
2334:Src/main.c    **** VXISI2CWrite(0x57,0x04); 
2335:Src/main.c    **** VXISI2CWrite(0x58,0x00); 
2336:Src/main.c    **** VXISI2CWrite(0x59,0x08); 
2337:Src/main.c    **** VXISI2CWrite(0x5A,0x10); 
2338:Src/main.c    **** VXISI2CWrite(0x5B,0x00); 
2339:Src/main.c    **** VXISI2CWrite(0x5C,0x68); 
2340:Src/main.c    **** VXISI2CWrite(0x5D,0x40); 
2341:Src/main.c    **** VXISI2CWrite(0x5E,0x0A); 
2342:Src/main.c    **** VXISI2CWrite(0x5F,0x00); 
2343:Src/main.c    **** VXISI2CWrite(0x60,0xB4); 
2344:Src/main.c    **** VXISI2CWrite(0x61,0x51); 
2345:Src/main.c    **** VXISI2CWrite(0x62,0x33); 
2346:Src/main.c    **** VXISI2CWrite(0x63,0x01); 
2347:Src/main.c    **** VXISI2CWrite(0x64,0xFF); 
2348:Src/main.c    **** VXISI2CWrite(0x65,0x01); 
2349:Src/main.c    **** VXISI2CWrite(0x66,0xFF); 
2350:Src/main.c    **** VXISI2CWrite(0x67,0x89); 
2351:Src/main.c    **** VXISI2CWrite(0x68,0xAB); 
2352:Src/main.c    **** VXISI2CWrite(0x69,0x88); 
2353:Src/main.c    **** VXISI2CWrite(0x6A,0x6E); 
2354:Src/main.c    **** VXISI2CWrite(0x6B,0x6E); 
2355:Src/main.c    **** VXISI2CWrite(0x6C,0x6E); 
2356:Src/main.c    **** VXISI2CWrite(0x6D,0x00); 
2357:Src/main.c    **** VXISI2CWrite(0x6E,0x00); 
2358:Src/main.c    **** VXISI2CWrite(0x6F,0x00); 
2359:Src/main.c    **** VXISI2CWrite(0x70,0x00); 
2360:Src/main.c    **** VXISI2CWrite(0x71,0x00); 
2361:Src/main.c    **** VXISI2CWrite(0x72,0x00); 
2362:Src/main.c    **** VXISI2CWrite(0x73,0x00); 
2363:Src/main.c    **** VXISI2CWrite(0x74,0x06); 
2364:Src/main.c    **** VXISI2CWrite(0x75,0xFF); 
2365:Src/main.c    **** VXISI2CWrite(0x76,0xFF); 
2366:Src/main.c    **** VXISI2CWrite(0x77,0xFF); 
2367:Src/main.c    **** VXISI2CWrite(0x78,0xFF); 
2368:Src/main.c    **** VXISI2CWrite(0x79,0xFF); 
2369:Src/main.c    **** VXISI2CWrite(0x7A,0xFF); 
2370:Src/main.c    **** VXISI2CWrite(0x7B,0xFF); 
2371:Src/main.c    **** VXISI2CWrite(0x7C,0xFF); 
ARM GAS  /tmp/ccUr6nXF.s 			page 43


2372:Src/main.c    **** VXISI2CWrite(0x7D,0xF0); 
2373:Src/main.c    **** VXISI2CWrite(0x7E,0x80); 
2374:Src/main.c    **** VXISI2CWrite(0x7F,0x00); 
2375:Src/main.c    **** VXISI2CWrite(0x80,0x01); 
2376:Src/main.c    **** VXISI2CWrite(0x81,0x15); 
2377:Src/main.c    **** VXISI2CWrite(0x82,0x40); 
2378:Src/main.c    **** VXISI2CWrite(0x83,0x2D); 
2379:Src/main.c    **** VXISI2CWrite(0x84,0x57); 
2380:Src/main.c    **** VXISI2CWrite(0x85,0xFD); 
2381:Src/main.c    **** VXISI2CWrite(0x86,0x00); 
2382:Src/main.c    **** VXISI2CWrite(0x87,0x00); 
2383:Src/main.c    **** VXISI2CWrite(0x88,0x00); 
2384:Src/main.c    **** VXISI2CWrite(0x89,0x00); 
2385:Src/main.c    **** VXISI2CWrite(0x8A,0x00); 
2386:Src/main.c    **** VXISI2CWrite(0x8B,0x7E); 
2387:Src/main.c    **** VXISI2CWrite(0x8C,0x03); 
2388:Src/main.c    **** VXISI2CWrite(0x8D,0x17); 
2389:Src/main.c    **** VXISI2CWrite(0x8E,0x8C); 
2390:Src/main.c    **** VXISI2CWrite(0x8F,0x00); 
2391:Src/main.c    **** VXISI2CWrite(0x90,0xCC); 
2392:Src/main.c    **** VXISI2CWrite(0x91,0x41); 
2393:Src/main.c    **** VXISI2CWrite(0x92,0xC4); 
2394:Src/main.c    **** VXISI2CWrite(0x93,0x84); 
2395:Src/main.c    **** VXISI2CWrite(0x94,0x98); 
2396:Src/main.c    **** VXISI2CWrite(0x95,0x80); 
2397:Src/main.c    **** VXISI2CWrite(0x96,0x65); 
2398:Src/main.c    **** VXISI2CWrite(0x97,0x70); 
2399:Src/main.c    **** VXISI2CWrite(0x98,0x29); 
2400:Src/main.c    **** VXISI2CWrite(0x99,0x90); 
2401:Src/main.c    **** VXISI2CWrite(0x9A,0x80); 
2402:Src/main.c    **** VXISI2CWrite(0x9B,0x04); 
2403:Src/main.c    **** VXISI2CWrite(0x9C,0x00); 
2404:Src/main.c    **** VXISI2CWrite(0x9D,0x00); 
2405:Src/main.c    **** VXISI2CWrite(0x9E,0x04); 
2406:Src/main.c    **** VXISI2CWrite(0x9F,0x65); 
2407:Src/main.c    **** VXISI2CWrite(0xA0,0x80); 
2408:Src/main.c    **** VXISI2CWrite(0xA1,0xD8); 
2409:Src/main.c    **** VXISI2CWrite(0xA2,0x98); 
2410:Src/main.c    **** VXISI2CWrite(0xA3,0x87); 
2411:Src/main.c    **** VXISI2CWrite(0xA4,0x00); 
2412:Src/main.c    **** VXISI2CWrite(0xA5,0x80); 
2413:Src/main.c    **** VXISI2CWrite(0xA6,0x00); 
2414:Src/main.c    **** VXISI2CWrite(0xA7,0x70); 
2415:Src/main.c    **** VXISI2CWrite(0xA8,0x40); 
2416:Src/main.c    **** VXISI2CWrite(0xA9,0x1E); 
2417:Src/main.c    **** VXISI2CWrite(0xAA,0x2C); 
2418:Src/main.c    **** VXISI2CWrite(0xAB,0x00); 
2419:Src/main.c    **** VXISI2CWrite(0xAC,0x90); 
2420:Src/main.c    **** VXISI2CWrite(0xAD,0x65); 
2421:Src/main.c    **** VXISI2CWrite(0xAE,0x65); 
2422:Src/main.c    **** VXISI2CWrite(0xAF,0x99); 
2423:Src/main.c    **** VXISI2CWrite(0xB0,0x00); 
2424:Src/main.c    **** VXISI2CWrite(0xB1,0x00); 
2425:Src/main.c    **** VXISI2CWrite(0xB2,0x00); 
2426:Src/main.c    **** VXISI2CWrite(0xB3,0x00); 
2427:Src/main.c    **** VXISI2CWrite(0xB4,0x00); 
2428:Src/main.c    **** VXISI2CWrite(0xB5,0x00); 
ARM GAS  /tmp/ccUr6nXF.s 			page 44


2429:Src/main.c    **** VXISI2CWrite(0xB6,0x00); 
2430:Src/main.c    **** VXISI2CWrite(0xB7,0x00); 
2431:Src/main.c    **** VXISI2CWrite(0xB8,0x80); 
2432:Src/main.c    **** VXISI2CWrite(0xB9,0x00); 
2433:Src/main.c    **** VXISI2CWrite(0xBA,0x01); 
2434:Src/main.c    **** VXISI2CWrite(0xBB,0x00); 
2435:Src/main.c    **** VXISI2CWrite(0xBC,0x90); 
2436:Src/main.c    **** VXISI2CWrite(0xBD,0x01); 
2437:Src/main.c    **** VXISI2CWrite(0xBE,0x2C); 
2438:Src/main.c    **** VXISI2CWrite(0xBF,0x00); 
2439:Src/main.c    **** VXISI2CWrite(0xC0,0x00); 
2440:Src/main.c    **** VXISI2CWrite(0xC1,0x20); 
2441:Src/main.c    **** VXISI2CWrite(0xC2,0x20); 
2442:Src/main.c    **** VXISI2CWrite(0xC3,0x20); 
2443:Src/main.c    **** VXISI2CWrite(0xC4,0x20); 
2444:Src/main.c    **** VXISI2CWrite(0xC5,0x20); 
2445:Src/main.c    **** VXISI2CWrite(0xC6,0x00); 
2446:Src/main.c    **** VXISI2CWrite(0xC7,0x00); 
2447:Src/main.c    **** VXISI2CWrite(0xC8,0x00); 
2448:Src/main.c    **** VXISI2CWrite(0xC9,0x00); 
2449:Src/main.c    **** VXISI2CWrite(0xCA,0x00); 
2450:Src/main.c    **** VXISI2CWrite(0xCB,0x00); 
2451:Src/main.c    **** VXISI2CWrite(0xCC,0x00); 
2452:Src/main.c    **** VXISI2CWrite(0xCD,0x00); 
2453:Src/main.c    **** VXISI2CWrite(0xCE,0x00); 
2454:Src/main.c    **** VXISI2CWrite(0xCF,0x00); 
2455:Src/main.c    **** VXISI2CWrite(0xD0,0xFF); 
2456:Src/main.c    **** VXISI2CWrite(0xD1,0x3F); 
2457:Src/main.c    **** VXISI2CWrite(0xD2,0xC2); 
2458:Src/main.c    **** VXISI2CWrite(0xD3,0x3F); 
2459:Src/main.c    **** VXISI2CWrite(0xD4,0x00); 
2460:Src/main.c    **** VXISI2CWrite(0xD5,0x00); 
2461:Src/main.c    **** VXISI2CWrite(0xD6,0x00); 
2462:Src/main.c    **** VXISI2CWrite(0xD7,0x0F); 
2463:Src/main.c    **** VXISI2CWrite(0xD8,0x00); 
2464:Src/main.c    **** VXISI2CWrite(0xD9,0x00); 
2465:Src/main.c    **** VXISI2CWrite(0xDA,0x00); 
2466:Src/main.c    **** VXISI2CWrite(0xDB,0x00); 
2467:Src/main.c    **** VXISI2CWrite(0xDC,0x77); 
2468:Src/main.c    **** VXISI2CWrite(0xDD,0x01); 
2469:Src/main.c    **** VXISI2CWrite(0xDE,0x5F); 
2470:Src/main.c    **** VXISI2CWrite(0xDF,0x96); 
2471:Src/main.c    **** VXISI2CWrite(0xE0,0x00); 
2472:Src/main.c    **** VXISI2CWrite(0xE1,0x00); 
2473:Src/main.c    **** VXISI2CWrite(0xE2,0x00); 
2474:Src/main.c    **** VXISI2CWrite(0xE3,0x47); 
2475:Src/main.c    **** VXISI2CWrite(0xE4,0x3C); 
2476:Src/main.c    **** VXISI2CWrite(0xE5,0x80); 
2477:Src/main.c    **** VXISI2CWrite(0xE6,0x00); 
2478:Src/main.c    **** VXISI2CWrite(0xE7,0x00); 
2479:Src/main.c    **** VXISI2CWrite(0xE8,0x00); 
2480:Src/main.c    **** VXISI2CWrite(0xE9,0x00); 
2481:Src/main.c    **** VXISI2CWrite(0xEA,0x00); 
2482:Src/main.c    **** VXISI2CWrite(0xEB,0x00); 
2483:Src/main.c    **** VXISI2CWrite(0xEC,0x88); 
2484:Src/main.c    **** VXISI2CWrite(0xED,0x00); 
2485:Src/main.c    **** VXISI2CWrite(0xEE,0x00); 
ARM GAS  /tmp/ccUr6nXF.s 			page 45


2486:Src/main.c    **** VXISI2CWrite(0xEF,0x00); 
2487:Src/main.c    **** VXISI2CWrite(0xF0,0x30); 
2488:Src/main.c    **** VXISI2CWrite(0xF1,0x43); 
2489:Src/main.c    **** VXISI2CWrite(0xF2,0x1F); 
2490:Src/main.c    **** VXISI2CWrite(0xF3,0x1F); 
2491:Src/main.c    **** VXISI2CWrite(0xF4,0x22); 
2492:Src/main.c    **** VXISI2CWrite(0xF5,0x73); 
2493:Src/main.c    **** VXISI2CWrite(0xF6,0x53); 
2494:Src/main.c    **** VXISI2CWrite(0xF7,0x80); 
2495:Src/main.c    **** VXISI2CWrite(0xF8,0x01); 
2496:Src/main.c    **** VXISI2CWrite(0xF9,0x01); 
2497:Src/main.c    **** VXISI2CWrite(0xFA,0x00); 
2498:Src/main.c    **** VXISI2CWrite(0xFB,0x00); 
2499:Src/main.c    **** VXISI2CWrite(0xFC,0x00); 
2500:Src/main.c    **** VXISI2CWrite(0xFD,0x70); 
2501:Src/main.c    **** VXISI2CWrite(0xFE,0x18); 
2502:Src/main.c    **** VXISI2CWrite(0xFF,0x07); 
2503:Src/main.c    **** 
2504:Src/main.c    **** 
2505:Src/main.c    **** /*
2506:Src/main.c    **** VXISI2CWrite(0x01,0x00);
2507:Src/main.c    **** VXISI2CWrite(0x02,0x00);
2508:Src/main.c    **** VXISI2CWrite(0x03,0x75);
2509:Src/main.c    **** VXISI2CWrite(0x04,0x18);
2510:Src/main.c    **** VXISI2CWrite(0x05,0x80);
2511:Src/main.c    **** VXISI2CWrite(0x06,0x20);
2512:Src/main.c    **** VXISI2CWrite(0x07,0x0C);
2513:Src/main.c    **** VXISI2CWrite(0x08,0x21);
2514:Src/main.c    **** VXISI2CWrite(0x09,0x0A);
2515:Src/main.c    **** VXISI2CWrite(0x0A,0x21);
2516:Src/main.c    **** VXISI2CWrite(0x0B,0x0A);
2517:Src/main.c    **** VXISI2CWrite(0x0C,0x00);
2518:Src/main.c    **** VXISI2CWrite(0x0D,0x20);
2519:Src/main.c    **** VXISI2CWrite(0x0E,0x10);
2520:Src/main.c    **** VXISI2CWrite(0x0F,0x00);
2521:Src/main.c    **** VXISI2CWrite(0x10,0x81);
2522:Src/main.c    **** VXISI2CWrite(0x11,0x82);
2523:Src/main.c    **** VXISI2CWrite(0x12,0x00);
2524:Src/main.c    **** VXISI2CWrite(0x13,0x00);
2525:Src/main.c    **** VXISI2CWrite(0x14,0x00);
2526:Src/main.c    **** VXISI2CWrite(0x15,0x78);
2527:Src/main.c    **** VXISI2CWrite(0x16,0xFE);
2528:Src/main.c    **** VXISI2CWrite(0x17,0x00);
2529:Src/main.c    **** VXISI2CWrite(0x18,0xC0);
2530:Src/main.c    **** VXISI2CWrite(0x19,0x01);
2531:Src/main.c    **** VXISI2CWrite(0x1A,0x36);
2532:Src/main.c    **** VXISI2CWrite(0x1B,0x30);
2533:Src/main.c    **** VXISI2CWrite(0x1C,0x00);
2534:Src/main.c    **** VXISI2CWrite(0x1D,0x00);
2535:Src/main.c    **** VXISI2CWrite(0x1E,0x20);
2536:Src/main.c    **** VXISI2CWrite(0x1F,0x00);
2537:Src/main.c    **** VXISI2CWrite(0x20,0x00);
2538:Src/main.c    **** VXISI2CWrite(0x21,0x00);
2539:Src/main.c    **** VXISI2CWrite(0x22,0xA7);
2540:Src/main.c    **** VXISI2CWrite(0x23,0x50);
2541:Src/main.c    **** VXISI2CWrite(0x24,0x80);
2542:Src/main.c    **** VXISI2CWrite(0x25,0x44);
ARM GAS  /tmp/ccUr6nXF.s 			page 46


2543:Src/main.c    **** VXISI2CWrite(0x26,0x65);
2544:Src/main.c    **** VXISI2CWrite(0x27,0x38);
2545:Src/main.c    **** VXISI2CWrite(0x28,0xF0);
2546:Src/main.c    **** VXISI2CWrite(0x29,0x00);
2547:Src/main.c    **** VXISI2CWrite(0x2A,0x00);
2548:Src/main.c    **** VXISI2CWrite(0x2B,0x11);
2549:Src/main.c    **** VXISI2CWrite(0x2C,0x00);
2550:Src/main.c    **** VXISI2CWrite(0x2D,0x00);
2551:Src/main.c    **** VXISI2CWrite(0x2E,0x47);
2552:Src/main.c    **** VXISI2CWrite(0x2F,0x80);
2553:Src/main.c    **** VXISI2CWrite(0x30,0x38);
2554:Src/main.c    **** VXISI2CWrite(0x31,0x80);
2555:Src/main.c    **** //VXISI2CWrite(0x32,0x80);
2556:Src/main.c    **** VXISI2CWrite(0x33,0x80);
2557:Src/main.c    **** VXISI2CWrite(0x34,0xA0);
2558:Src/main.c    **** VXISI2CWrite(0x35,0x18);
2559:Src/main.c    **** VXISI2CWrite(0x36,0x46);
2560:Src/main.c    **** VXISI2CWrite(0x37,0x64);
2561:Src/main.c    **** VXISI2CWrite(0x38,0x00);
2562:Src/main.c    **** VXISI2CWrite(0x39,0xFF);
2563:Src/main.c    **** VXISI2CWrite(0x3A,0x1B);
2564:Src/main.c    **** VXISI2CWrite(0x3B,0x80);
2565:Src/main.c    **** VXISI2CWrite(0x3C,0x80);
2566:Src/main.c    **** VXISI2CWrite(0x3D,0x80);
2567:Src/main.c    **** VXISI2CWrite(0x3E,0x80);
2568:Src/main.c    **** VXISI2CWrite(0x3F,0x80);
2569:Src/main.c    **** VXISI2CWrite(0x40,0x80);
2570:Src/main.c    **** VXISI2CWrite(0x41,0x60);
2571:Src/main.c    **** VXISI2CWrite(0x42,0x5F);
2572:Src/main.c    **** VXISI2CWrite(0x43,0x37);
2573:Src/main.c    **** VXISI2CWrite(0x44,0x14);
2574:Src/main.c    **** VXISI2CWrite(0x45,0x06);
2575:Src/main.c    **** VXISI2CWrite(0x46,0x00);
2576:Src/main.c    **** VXISI2CWrite(0x47,0x00);
2577:Src/main.c    **** VXISI2CWrite(0x48,0x00);
2578:Src/main.c    **** VXISI2CWrite(0x49,0x00);
2579:Src/main.c    **** VXISI2CWrite(0x4B,0x20);
2580:Src/main.c    **** VXISI2CWrite(0x4C,0x00);
2581:Src/main.c    **** VXISI2CWrite(0x4D,0x00);
2582:Src/main.c    **** VXISI2CWrite(0x4E,0x00);
2583:Src/main.c    **** VXISI2CWrite(0x4F,0x7F);
2584:Src/main.c    **** VXISI2CWrite(0x50,0x20);
2585:Src/main.c    **** VXISI2CWrite(0x51,0x20);
2586:Src/main.c    **** VXISI2CWrite(0x52,0x00);
2587:Src/main.c    **** VXISI2CWrite(0x53,0x04);
2588:Src/main.c    **** VXISI2CWrite(0x54,0x00);
2589:Src/main.c    **** VXISI2CWrite(0x55,0xA0);
2590:Src/main.c    **** VXISI2CWrite(0x56,0x40);
2591:Src/main.c    **** VXISI2CWrite(0x57,0x04);
2592:Src/main.c    **** VXISI2CWrite(0x58,0x10);
2593:Src/main.c    **** VXISI2CWrite(0x59,0x08);
2594:Src/main.c    **** VXISI2CWrite(0x5A,0x10);
2595:Src/main.c    **** VXISI2CWrite(0x5B,0x00);
2596:Src/main.c    **** VXISI2CWrite(0x5C,0x68);
2597:Src/main.c    **** VXISI2CWrite(0x5D,0x84);
2598:Src/main.c    **** VXISI2CWrite(0x5E,0x08);
2599:Src/main.c    **** VXISI2CWrite(0x5F,0x21);
ARM GAS  /tmp/ccUr6nXF.s 			page 47


2600:Src/main.c    **** VXISI2CWrite(0x60,0x20);
2601:Src/main.c    **** VXISI2CWrite(0x61,0xB0);
2602:Src/main.c    **** VXISI2CWrite(0x62,0x33);
2603:Src/main.c    **** VXISI2CWrite(0x63,0x01);
2604:Src/main.c    **** VXISI2CWrite(0x64,0xFF);
2605:Src/main.c    **** VXISI2CWrite(0x65,0x01);
2606:Src/main.c    **** VXISI2CWrite(0x66,0xFF);
2607:Src/main.c    **** VXISI2CWrite(0x67,0x89);
2608:Src/main.c    **** VXISI2CWrite(0x68,0xAB);
2609:Src/main.c    **** VXISI2CWrite(0x69,0x28);
2610:Src/main.c    **** VXISI2CWrite(0x6A,0x6E);
2611:Src/main.c    **** VXISI2CWrite(0x6B,0x6E);
2612:Src/main.c    **** VXISI2CWrite(0x6C,0x6E);
2613:Src/main.c    **** VXISI2CWrite(0x6D,0x00);
2614:Src/main.c    **** VXISI2CWrite(0x6E,0x00);
2615:Src/main.c    **** VXISI2CWrite(0x6F,0x00);
2616:Src/main.c    **** VXISI2CWrite(0x70,0x00);
2617:Src/main.c    **** VXISI2CWrite(0x71,0x00);
2618:Src/main.c    **** VXISI2CWrite(0x72,0x00);
2619:Src/main.c    **** VXISI2CWrite(0x73,0x00);
2620:Src/main.c    **** VXISI2CWrite(0x74,0x00);
2621:Src/main.c    **** VXISI2CWrite(0x75,0xFF);
2622:Src/main.c    **** VXISI2CWrite(0x76,0xFF);
2623:Src/main.c    **** VXISI2CWrite(0x77,0xFF);
2624:Src/main.c    **** VXISI2CWrite(0x78,0xFF);
2625:Src/main.c    **** VXISI2CWrite(0x79,0xFF);
2626:Src/main.c    **** VXISI2CWrite(0x7A,0xFF);
2627:Src/main.c    **** VXISI2CWrite(0x7B,0xFF);
2628:Src/main.c    **** VXISI2CWrite(0x7C,0xFF);
2629:Src/main.c    **** VXISI2CWrite(0x7D,0xF0);
2630:Src/main.c    **** VXISI2CWrite(0x7E,0x80);
2631:Src/main.c    **** VXISI2CWrite(0x7F,0x00);
2632:Src/main.c    **** VXISI2CWrite(0x80,0x00);
2633:Src/main.c    **** VXISI2CWrite(0x81,0x34);
2634:Src/main.c    **** VXISI2CWrite(0x82,0x40);
2635:Src/main.c    **** VXISI2CWrite(0x83,0x05);
2636:Src/main.c    **** VXISI2CWrite(0x84,0x57);
2637:Src/main.c    **** VXISI2CWrite(0x85,0xFD);
2638:Src/main.c    **** VXISI2CWrite(0x86,0x04);
2639:Src/main.c    **** VXISI2CWrite(0x87,0x24);
2640:Src/main.c    **** VXISI2CWrite(0x88,0x94);
2641:Src/main.c    **** VXISI2CWrite(0x89,0x58);
2642:Src/main.c    **** VXISI2CWrite(0x8A,0x00);
2643:Src/main.c    **** VXISI2CWrite(0x8B,0x7E);
2644:Src/main.c    **** VXISI2CWrite(0x8C,0x03);
2645:Src/main.c    **** VXISI2CWrite(0x8D,0x2C);
2646:Src/main.c    **** VXISI2CWrite(0x8E,0x8C);
2647:Src/main.c    **** VXISI2CWrite(0x8F,0x00);
2648:Src/main.c    **** VXISI2CWrite(0x90,0xCC);
2649:Src/main.c    **** VXISI2CWrite(0x91,0x41);
2650:Src/main.c    **** VXISI2CWrite(0x92,0xC4);
2651:Src/main.c    **** VXISI2CWrite(0x93,0x84);
2652:Src/main.c    **** VXISI2CWrite(0x94,0x98);
2653:Src/main.c    **** VXISI2CWrite(0x95,0x80);
2654:Src/main.c    **** VXISI2CWrite(0x96,0x65);
2655:Src/main.c    **** VXISI2CWrite(0x97,0x70);
2656:Src/main.c    **** VXISI2CWrite(0x98,0x29);
ARM GAS  /tmp/ccUr6nXF.s 			page 48


2657:Src/main.c    **** VXISI2CWrite(0x99,0x90);
2658:Src/main.c    **** VXISI2CWrite(0x9A,0x00);
2659:Src/main.c    **** VXISI2CWrite(0x9B,0x04);
2660:Src/main.c    **** //VXISI2CWrite(0x9C,0x0A);
2661:Src/main.c    **** VXISI2CWrite(0x9D,0x00);
2662:Src/main.c    **** VXISI2CWrite(0x9E,0x04);
2663:Src/main.c    **** VXISI2CWrite(0x9F,0x65);
2664:Src/main.c    **** VXISI2CWrite(0xA0,0x80);
2665:Src/main.c    **** VXISI2CWrite(0xA1,0xD8);
2666:Src/main.c    **** VXISI2CWrite(0xA2,0x98);
2667:Src/main.c    **** VXISI2CWrite(0xA3,0x87);
2668:Src/main.c    **** VXISI2CWrite(0xA4,0x00);
2669:Src/main.c    **** VXISI2CWrite(0xA5,0x80);
2670:Src/main.c    **** VXISI2CWrite(0xA6,0x00);
2671:Src/main.c    **** VXISI2CWrite(0xA7,0x70);
2672:Src/main.c    **** VXISI2CWrite(0xA8,0x40);
2673:Src/main.c    **** VXISI2CWrite(0xA9,0x1E);
2674:Src/main.c    **** VXISI2CWrite(0xAA,0x2C);
2675:Src/main.c    **** VXISI2CWrite(0xAB,0x00);
2676:Src/main.c    **** VXISI2CWrite(0xAC,0x90);
2677:Src/main.c    **** VXISI2CWrite(0xAD,0x65);
2678:Src/main.c    **** VXISI2CWrite(0xAE,0x65);
2679:Src/main.c    **** VXISI2CWrite(0xAF,0x99);
2680:Src/main.c    **** VXISI2CWrite(0xB0,0x00);
2681:Src/main.c    **** VXISI2CWrite(0xB1,0x00);
2682:Src/main.c    **** VXISI2CWrite(0xB2,0x00);
2683:Src/main.c    **** VXISI2CWrite(0xB3,0x00);
2684:Src/main.c    **** VXISI2CWrite(0xB4,0x00);
2685:Src/main.c    **** VXISI2CWrite(0xB5,0x00);
2686:Src/main.c    **** VXISI2CWrite(0xB6,0x00);
2687:Src/main.c    **** VXISI2CWrite(0xB8,0x00);
2688:Src/main.c    **** VXISI2CWrite(0xB9,0x00);
2689:Src/main.c    **** VXISI2CWrite(0xBA,0x00);
2690:Src/main.c    **** VXISI2CWrite(0xBB,0x00);
2691:Src/main.c    **** VXISI2CWrite(0xBC,0x90);
2692:Src/main.c    **** VXISI2CWrite(0xBD,0x01);
2693:Src/main.c    **** VXISI2CWrite(0xBE,0xA5);
2694:Src/main.c    **** VXISI2CWrite(0xC0,0x00);
2695:Src/main.c    **** VXISI2CWrite(0xC1,0x20);
2696:Src/main.c    **** VXISI2CWrite(0xC2,0x20);
2697:Src/main.c    **** VXISI2CWrite(0xC3,0x20);
2698:Src/main.c    **** VXISI2CWrite(0xC4,0x20);
2699:Src/main.c    **** VXISI2CWrite(0xC5,0x20);
2700:Src/main.c    **** VXISI2CWrite(0xD0,0xFF);
2701:Src/main.c    **** VXISI2CWrite(0xD1,0x3F);
2702:Src/main.c    **** VXISI2CWrite(0xD2,0xC2);
2703:Src/main.c    **** VXISI2CWrite(0xD3,0x3F);
2704:Src/main.c    **** VXISI2CWrite(0xD4,0x00);
2705:Src/main.c    **** VXISI2CWrite(0xD5,0x00);
2706:Src/main.c    **** VXISI2CWrite(0xD6,0x00);
2707:Src/main.c    **** VXISI2CWrite(0xD7,0x00);
2708:Src/main.c    **** VXISI2CWrite(0xD8,0x00);
2709:Src/main.c    **** VXISI2CWrite(0xDC,0x77);
2710:Src/main.c    **** VXISI2CWrite(0xDD,0x01);
2711:Src/main.c    **** VXISI2CWrite(0xDE,0xA5);
2712:Src/main.c    **** VXISI2CWrite(0xDF,0xE5);
2713:Src/main.c    **** VXISI2CWrite(0xE0,0x00);
ARM GAS  /tmp/ccUr6nXF.s 			page 49


2714:Src/main.c    **** VXISI2CWrite(0xE1,0x00);
2715:Src/main.c    **** VXISI2CWrite(0xE2,0x00);
2716:Src/main.c    **** VXISI2CWrite(0xE3,0x47);
2717:Src/main.c    **** VXISI2CWrite(0xE4,0x3C);
2718:Src/main.c    **** VXISI2CWrite(0xE5,0x80);
2719:Src/main.c    **** VXISI2CWrite(0xE6,0x00);
2720:Src/main.c    **** VXISI2CWrite(0xE7,0x00);
2721:Src/main.c    **** VXISI2CWrite(0xE8,0x00);
2722:Src/main.c    **** VXISI2CWrite(0xE9,0x00);
2723:Src/main.c    **** VXISI2CWrite(0xEA,0x00);
2724:Src/main.c    **** VXISI2CWrite(0xEB,0x00);
2725:Src/main.c    **** VXISI2CWrite(0xEC,0x88);
2726:Src/main.c    **** VXISI2CWrite(0xED,0x00);
2727:Src/main.c    **** VXISI2CWrite(0xEE,0x00);
2728:Src/main.c    **** VXISI2CWrite(0xEF,0x00);
2729:Src/main.c    **** VXISI2CWrite(0xF0,0x35);
2730:Src/main.c    **** VXISI2CWrite(0xF1,0x43);
2731:Src/main.c    **** VXISI2CWrite(0xF2,0x1F);
2732:Src/main.c    **** VXISI2CWrite(0xF3,0x1F);
2733:Src/main.c    **** VXISI2CWrite(0xF4,0x22);
2734:Src/main.c    **** VXISI2CWrite(0xF5,0x73);
2735:Src/main.c    **** VXISI2CWrite(0xF6,0x53);
2736:Src/main.c    **** VXISI2CWrite(0xF7,0x80);
2737:Src/main.c    **** VXISI2CWrite(0xF8,0x01);
2738:Src/main.c    **** VXISI2CWrite(0xF9,0x01);
2739:Src/main.c    **** VXISI2CWrite(0xFA,0x00);
2740:Src/main.c    **** VXISI2CWrite(0xFB,0x00);
2741:Src/main.c    **** VXISI2CWrite(0xFC,0x00);
2742:Src/main.c    **** VXISI2CWrite(0xFD,0x00);
2743:Src/main.c    **** VXISI2CWrite(0xFE,0x00);
2744:Src/main.c    **** VXISI2CWrite(0xFF,0x00);
2745:Src/main.c    **** */
2746:Src/main.c    **** #endif
2747:Src/main.c    **** 
2748:Src/main.c    **** }
2749:Src/main.c    **** 
2750:Src/main.c    **** void TP_bt1120_720P_1080P_mode0_w0(void)
2751:Src/main.c    **** {
2752:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table 720P... ");
2753:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_720P_1080P_mode0_w0_88param);
2754:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
2755:Src/main.c    **** 
2756:Src/main.c    **** }
2757:Src/main.c    **** 
2758:Src/main.c    **** void TP_bt1120_NTSC_1080P_mode0_w0(void)
2759:Src/main.c    **** {
2760:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table NTSC... ");
2761:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param);
2762:Src/main.c    **** }
2763:Src/main.c    **** 
2764:Src/main.c    **** void TP_bt1120_PAL_1080P_mode0_w0(void)
2765:Src/main.c    **** {
2766:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table PAL... ");
2767:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param);
2768:Src/main.c    **** 	#if 0
2769:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);	
2770:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);	
ARM GAS  /tmp/ccUr6nXF.s 			page 50


2771:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);	
2772:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);	
2773:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);	
2774:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);	
2775:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);	
2776:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);	
2777:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);	
2778:Src/main.c    **** 	VXISI2CWrite(0x0A,0x40);	
2779:Src/main.c    **** 	VXISI2CWrite(0x0B,0x09);	
2780:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);	
2781:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);	
2782:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);	
2783:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);	
2784:Src/main.c    **** 	VXISI2CWrite(0x10,0xA1);	
2785:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);	
2786:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);	
2787:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);	
2788:Src/main.c    **** 	VXISI2CWrite(0x14,0x20);	
2789:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);	
2790:Src/main.c    **** 	VXISI2CWrite(0x16,0xFF);	
2791:Src/main.c    **** 	VXISI2CWrite(0x17,0x01);	
2792:Src/main.c    **** 	VXISI2CWrite(0x18,0xC0);	
2793:Src/main.c    **** 	VXISI2CWrite(0x19,0x01);	
2794:Src/main.c    **** 	VXISI2CWrite(0x1A,0x26);	
2795:Src/main.c    **** 	VXISI2CWrite(0x1B,0x14);	
2796:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);	
2797:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);	
2798:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);	
2799:Src/main.c    **** 	VXISI2CWrite(0x1F,0x31);	
2800:Src/main.c    **** 	VXISI2CWrite(0x20,0x60);	
2801:Src/main.c    **** 	VXISI2CWrite(0x21,0x39);	
2802:Src/main.c    **** 	VXISI2CWrite(0x22,0x97);	
2803:Src/main.c    **** 	VXISI2CWrite(0x23,0x48);	
2804:Src/main.c    **** 	VXISI2CWrite(0x24,0xBC);	
2805:Src/main.c    **** 	VXISI2CWrite(0x25,0x11);	
2806:Src/main.c    **** 	VXISI2CWrite(0x26,0x38);	
2807:Src/main.c    **** 	VXISI2CWrite(0x27,0x20);	
2808:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);	
2809:Src/main.c    **** 	VXISI2CWrite(0x29,0x40);	
2810:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);	
2811:Src/main.c    **** 	VXISI2CWrite(0x2B,0x00);	
2812:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);	
2813:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);	
2814:Src/main.c    **** 	VXISI2CWrite(0x2E,0x17);	
2815:Src/main.c    **** 	VXISI2CWrite(0x2F,0xBC);	
2816:Src/main.c    **** 	VXISI2CWrite(0x30,0x20);	
2817:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);	
2818:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);	
2819:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);	
2820:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);	
2821:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);	
2822:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);	
2823:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);	
2824:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);	
2825:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);	
2826:Src/main.c    **** 	VXISI2CWrite(0x3A,0x15);	
2827:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);	
ARM GAS  /tmp/ccUr6nXF.s 			page 51


2828:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);	
2829:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);	
2830:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);	
2831:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);	
2832:Src/main.c    **** 	//VXISI2CWrite(0xVXI);SI2CWr
2833:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);	
2834:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);	
2835:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);	
2836:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);	
2837:Src/main.c    **** 	VXISI2CWrite(0x45,0x05);	
2838:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);	
2839:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);	
2840:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);	
2841:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);	
2842:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);	
2843:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);	
2844:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);	
2845:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);	
2846:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);	
2847:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);	
2848:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);	
2849:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);	
2850:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);	
2851:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);	
2852:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);	
2853:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);	
2854:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);	
2855:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);	
2856:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);	
2857:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);	
2858:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);	
2859:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);	
2860:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);	
2861:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);	
2862:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);	
2863:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);	
2864:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);	
2865:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);	
2866:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);	
2867:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);	
2868:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);	
2869:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);	
2870:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);	
2871:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);	
2872:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);	
2873:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);	
2874:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);	
2875:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);	
2876:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);	
2877:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);	
2878:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);	
2879:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);	
2880:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);	
2881:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);	
2882:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);	
2883:Src/main.c    **** 	VXISI2CWrite(0x74,0x06);	
2884:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);	
ARM GAS  /tmp/ccUr6nXF.s 			page 52


2885:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);	
2886:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);	
2887:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);	
2888:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);	
2889:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);	
2890:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);	
2891:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);	
2892:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);	
2893:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);	
2894:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);	
2895:Src/main.c    **** 	VXISI2CWrite(0x80,0x01);	
2896:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);	
2897:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);	
2898:Src/main.c    **** 	VXISI2CWrite(0x83,0x2D);	
2899:Src/main.c    **** 	VXISI2CWrite(0x84,0x6F);	
2900:Src/main.c    **** 	VXISI2CWrite(0x85,0x00);	
2901:Src/main.c    **** 	VXISI2CWrite(0x86,0x00);	
2902:Src/main.c    **** 	VXISI2CWrite(0x87,0x00);	
2903:Src/main.c    **** 	VXISI2CWrite(0x88,0x13);	
2904:Src/main.c    **** 	VXISI2CWrite(0x89,0x1B);	
2905:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);	
2906:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);	
2907:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);	
2908:Src/main.c    **** 	VXISI2CWrite(0x8D,0x17);	
2909:Src/main.c    **** 	VXISI2CWrite(0x8E,0xB0);	
2910:Src/main.c    **** 	VXISI2CWrite(0x8F,0x14);	
2911:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);	
2912:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);	
2913:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);	
2914:Src/main.c    **** 	VXISI2CWrite(0x93,0x81);	
2915:Src/main.c    **** 	VXISI2CWrite(0x94,0xC9);	
2916:Src/main.c    **** 	VXISI2CWrite(0x95,0xBC);	
2917:Src/main.c    **** 	VXISI2CWrite(0x96,0xF5);	
2918:Src/main.c    **** 	VXISI2CWrite(0x97,0x70);	
2919:Src/main.c    **** 	VXISI2CWrite(0x98,0x15);	
2920:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);	
2921:Src/main.c    **** 	VXISI2CWrite(0x9A,0x80);	
2922:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);	
2923:Src/main.c    **** 	VXISI2CWrite(0x9C,0x00);	
2924:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);	
2925:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);	
2926:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);	
2927:Src/main.c    **** 	VXISI2CWrite(0xA0,0x3B);	
2928:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD0);	
2929:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);	
2930:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);	
2931:Src/main.c    **** 	VXISI2CWrite(0xA4,0x20);	
2932:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);	
2933:Src/main.c    **** 	VXISI2CWrite(0xA6,0xFD);	
2934:Src/main.c    **** 	VXISI2CWrite(0xA7,0x50);	
2935:Src/main.c    **** 	VXISI2CWrite(0xA8,0x40);	
2936:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);	
2937:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);	
2938:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);	
2939:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);	
2940:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF5);	
2941:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);	
ARM GAS  /tmp/ccUr6nXF.s 			page 53


2942:Src/main.c    **** 	VXISI2CWrite(0xAF,0x9B);	
2943:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);	
2944:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);	
2945:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);	
2946:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);	
2947:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);	
2948:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);	
2949:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);	
2950:Src/main.c    **** 	VXISI2CWrite(0xB8,0x01);	
2951:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);	
2952:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);	
2953:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);	
2954:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);	
2955:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);	
2956:Src/main.c    **** 	VXISI2CWrite(0xBE,0x1D);	
2957:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);	
2958:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);	
2959:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);	
2960:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);	
2961:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);	
2962:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);	
2963:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);	
2964:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);	
2965:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);	
2966:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);	
2967:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);	
2968:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);	
2969:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);	
2970:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);	
2971:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);	
2972:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);	
2973:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);	
2974:Src/main.c    **** 	VXISI2CWrite(0xDE,0xD3);	
2975:Src/main.c    **** 	VXISI2CWrite(0xDF,0x49);	
2976:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);	
2977:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);	
2978:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);	
2979:Src/main.c    **** 	VXISI2CWrite(0xE3,0x17);	
2980:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE0);	
2981:Src/main.c    **** 	VXISI2CWrite(0xE5,0xBC);	
2982:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);	
2983:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);	
2984:Src/main.c    **** 	VXISI2CWrite(0xE8,0x00);	
2985:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);	
2986:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);	
2987:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);	
2988:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);	
2989:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);	
2990:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);	
2991:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);	
2992:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);	
2993:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);	
2994:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);	
2995:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);	
2996:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);	
2997:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);	
2998:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);	
ARM GAS  /tmp/ccUr6nXF.s 			page 54


2999:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);	
3000:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);	
3001:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);	
3002:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);	
3003:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);	
3004:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);	
3005:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);	
3006:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);	
3007:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);	
3008:Src/main.c    **** #endif
3009:Src/main.c    **** 
3010:Src/main.c    **** }
3011:Src/main.c    **** void SET_VS4210_720_480_out(void)
3012:Src/main.c    **** {
3013:Src/main.c    **** 	Printf("\r\nSET_VS4210_720_480_out ");
3014:Src/main.c    **** 
3015:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);
3016:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
3017:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
3018:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
3019:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
3020:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
3021:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);
3022:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
3023:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
3024:Src/main.c    **** 	VXISI2CWrite(0x0A,0x41);
3025:Src/main.c    **** 	VXISI2CWrite(0x0B,0x07);
3026:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
3027:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
3028:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
3029:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
3030:Src/main.c    **** 	VXISI2CWrite(0x10,0x80);
3031:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
3032:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);
3033:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);
3034:Src/main.c    **** 	VXISI2CWrite(0x14,0xE0);
3035:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
3036:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
3037:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
3038:Src/main.c    **** 	VXISI2CWrite(0x18,0xC8);
3039:Src/main.c    **** 	VXISI2CWrite(0x19,0x00);
3040:Src/main.c    **** 	VXISI2CWrite(0x1A,0x23);
3041:Src/main.c    **** 	VXISI2CWrite(0x1B,0x00);
3042:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
3043:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
3044:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
3045:Src/main.c    **** 	VXISI2CWrite(0x1F,0x32);
3046:Src/main.c    **** 	VXISI2CWrite(0x20,0x5A);
3047:Src/main.c    **** 	VXISI2CWrite(0x21,0x0D);
3048:Src/main.c    **** 	VXISI2CWrite(0x22,0x32);
3049:Src/main.c    **** 	VXISI2CWrite(0x23,0x5A);
3050:Src/main.c    **** 	VXISI2CWrite(0x24,0xD0);
3051:Src/main.c    **** 	VXISI2CWrite(0x25,0x21);
3052:Src/main.c    **** 	VXISI2CWrite(0x26,0x0D);
3053:Src/main.c    **** 	VXISI2CWrite(0x27,0xE0);
3054:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
3055:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
ARM GAS  /tmp/ccUr6nXF.s 			page 55


3056:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
3057:Src/main.c    **** 	VXISI2CWrite(0x2B,0x01);
3058:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);
3059:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
3060:Src/main.c    **** 	VXISI2CWrite(0x2E,0x12);
3061:Src/main.c    **** 	VXISI2CWrite(0x2F,0xD0);
3062:Src/main.c    **** 	VXISI2CWrite(0x30,0xE0);
3063:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
3064:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
3065:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
3066:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
3067:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
3068:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
3069:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
3070:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
3071:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
3072:Src/main.c    **** 	VXISI2CWrite(0x3A,0x03);
3073:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
3074:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
3075:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
3076:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
3077:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
3078:Src/main.c    **** 	//VXISI2CWrite(0xVXISI);2CWrite(0x80
3079:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);
3080:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
3081:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
3082:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
3083:Src/main.c    **** 	VXISI2CWrite(0x45,0x04);
3084:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
3085:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
3086:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
3087:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
3088:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
3089:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
3090:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
3091:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
3092:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
3093:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
3094:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
3095:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);
3096:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);
3097:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);
3098:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);
3099:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);
3100:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
3101:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
3102:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
3103:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
3104:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
3105:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
3106:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);
3107:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);
3108:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);
3109:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
3110:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);
3111:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
3112:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
ARM GAS  /tmp/ccUr6nXF.s 			page 56


3113:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
3114:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
3115:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
3116:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
3117:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
3118:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
3119:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
3120:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
3121:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
3122:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
3123:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
3124:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
3125:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
3126:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
3127:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
3128:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
3129:Src/main.c    **** 	VXISI2CWrite(0x74,0x00);
3130:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
3131:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
3132:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
3133:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
3134:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
3135:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
3136:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
3137:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
3138:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
3139:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
3140:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
3141:Src/main.c    **** 	VXISI2CWrite(0x80,0x00);
3142:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);
3143:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
3144:Src/main.c    **** 	VXISI2CWrite(0x83,0x05);
3145:Src/main.c    **** 	VXISI2CWrite(0x84,0x59);
3146:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
3147:Src/main.c    **** 	VXISI2CWrite(0x86,0x04);
3148:Src/main.c    **** 	VXISI2CWrite(0x87,0x24);
3149:Src/main.c    **** 	VXISI2CWrite(0x88,0x94);
3150:Src/main.c    **** 	VXISI2CWrite(0x89,0x58);
3151:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
3152:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
3153:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
3154:Src/main.c    **** 	VXISI2CWrite(0x8D,0x2C);
3155:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
3156:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
3157:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
3158:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
3159:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
3160:Src/main.c    **** 	VXISI2CWrite(0x93,0x31);
3161:Src/main.c    **** 	VXISI2CWrite(0x94,0x87);
3162:Src/main.c    **** 	VXISI2CWrite(0x95,0xD0);
3163:Src/main.c    **** 	VXISI2CWrite(0x96,0xF3);
3164:Src/main.c    **** 	VXISI2CWrite(0x97,0x20);
3165:Src/main.c    **** 	VXISI2CWrite(0x98,0x11);
3166:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
3167:Src/main.c    **** 	VXISI2CWrite(0x9A,0xFF);
3168:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
3169:Src/main.c    **** 	VXISI2CWrite(0x9C,0x0A);
ARM GAS  /tmp/ccUr6nXF.s 			page 57


3170:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
3171:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
3172:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
3173:Src/main.c    **** 	VXISI2CWrite(0xA0,0x2F);
3174:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD9);
3175:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
3176:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
3177:Src/main.c    **** 	VXISI2CWrite(0xA4,0xE1);
3178:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);
3179:Src/main.c    **** 	VXISI2CWrite(0xA6,0xC2);
3180:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
3181:Src/main.c    **** 	VXISI2CWrite(0xA8,0x00);
3182:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
3183:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);
3184:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
3185:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);
3186:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF3);
3187:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
3188:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
3189:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
3190:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
3191:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
3192:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
3193:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
3194:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
3195:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
3196:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
3197:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
3198:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
3199:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
3200:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
3201:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
3202:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
3203:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
3204:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
3205:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
3206:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
3207:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
3208:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
3209:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
3210:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
3211:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
3212:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
3213:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
3214:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
3215:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
3216:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
3217:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
3218:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
3219:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);
3220:Src/main.c    **** 	VXISI2CWrite(0xDE,0xAF);
3221:Src/main.c    **** 	VXISI2CWrite(0xDF,0xEF);
3222:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
3223:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
3224:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
3225:Src/main.c    **** 	VXISI2CWrite(0xE3,0x12);
3226:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE2);
ARM GAS  /tmp/ccUr6nXF.s 			page 58


3227:Src/main.c    **** 	VXISI2CWrite(0xE5,0xD0);
3228:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
3229:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
3230:Src/main.c    **** 	VXISI2CWrite(0xE8,0x0F);
3231:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
3232:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
3233:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
3234:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
3235:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
3236:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
3237:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
3238:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
3239:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
3240:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
3241:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
3242:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
3243:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
3244:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
3245:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
3246:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
3247:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
3248:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
3249:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
3250:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
3251:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
3252:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
3253:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
3254:Src/main.c    **** 					 
3255:Src/main.c    **** 
3256:Src/main.c    **** 
3257:Src/main.c    **** }
3258:Src/main.c    **** 
3259:Src/main.c    **** void SET_VS4210_1280_720_out(void)
3260:Src/main.c    **** {
3261:Src/main.c    **** 	Printf("\r\nSET_VS4210_1280_720_out");
3262:Src/main.c    **** 
3263:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);
3264:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
3265:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
3266:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
3267:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
3268:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
3269:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);
3270:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
3271:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
3272:Src/main.c    **** 	VXISI2CWrite(0x0A,0x41);
3273:Src/main.c    **** 	VXISI2CWrite(0x0B,0x07);
3274:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
3275:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
3276:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
3277:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
3278:Src/main.c    **** 	VXISI2CWrite(0x10,0x80);
3279:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
3280:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);
3281:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);
3282:Src/main.c    **** 	VXISI2CWrite(0x14,0xE0);
3283:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
ARM GAS  /tmp/ccUr6nXF.s 			page 59


3284:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
3285:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
3286:Src/main.c    **** 	VXISI2CWrite(0x18,0xC8);
3287:Src/main.c    **** 	VXISI2CWrite(0x19,0x00);
3288:Src/main.c    **** 	VXISI2CWrite(0x1A,0x23);
3289:Src/main.c    **** 	VXISI2CWrite(0x1B,0x00);
3290:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
3291:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
3292:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
3293:Src/main.c    **** 	VXISI2CWrite(0x1F,0x32);
3294:Src/main.c    **** 	VXISI2CWrite(0x20,0x5A);
3295:Src/main.c    **** 	VXISI2CWrite(0x21,0x0D);
3296:Src/main.c    **** 	VXISI2CWrite(0x22,0x32);
3297:Src/main.c    **** 	VXISI2CWrite(0x23,0x5A);
3298:Src/main.c    **** 	VXISI2CWrite(0x24,0xD0);
3299:Src/main.c    **** 	VXISI2CWrite(0x25,0x21);
3300:Src/main.c    **** 	VXISI2CWrite(0x26,0x0D);
3301:Src/main.c    **** 	VXISI2CWrite(0x27,0xE0);
3302:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
3303:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
3304:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
3305:Src/main.c    **** 	VXISI2CWrite(0x2B,0x01);
3306:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);
3307:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
3308:Src/main.c    **** 	VXISI2CWrite(0x2E,0x12);
3309:Src/main.c    **** 	VXISI2CWrite(0x2F,0xD0);
3310:Src/main.c    **** 	VXISI2CWrite(0x30,0xE0);
3311:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
3312:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
3313:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
3314:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
3315:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
3316:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
3317:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
3318:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
3319:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
3320:Src/main.c    **** 	VXISI2CWrite(0x3A,0x03);
3321:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
3322:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
3323:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
3324:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
3325:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
3326:Src/main.c    **** 	//VXISI2CWrite(0xVXISI);2CWrite(0x80
3327:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);
3328:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
3329:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
3330:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
3331:Src/main.c    **** 	VXISI2CWrite(0x45,0x04);
3332:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
3333:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
3334:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
3335:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
3336:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
3337:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
3338:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
3339:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
3340:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
ARM GAS  /tmp/ccUr6nXF.s 			page 60


3341:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
3342:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
3343:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);
3344:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);
3345:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);
3346:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);
3347:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);
3348:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
3349:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
3350:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
3351:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
3352:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
3353:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
3354:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);
3355:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);
3356:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);
3357:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
3358:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);
3359:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
3360:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
3361:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
3362:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
3363:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
3364:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
3365:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
3366:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
3367:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
3368:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
3369:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
3370:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
3371:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
3372:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
3373:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
3374:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
3375:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
3376:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
3377:Src/main.c    **** 	VXISI2CWrite(0x74,0x00);
3378:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
3379:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
3380:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
3381:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
3382:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
3383:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
3384:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
3385:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
3386:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
3387:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
3388:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
3389:Src/main.c    **** 	VXISI2CWrite(0x80,0x00);
3390:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);
3391:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
3392:Src/main.c    **** 	VXISI2CWrite(0x83,0x05);
3393:Src/main.c    **** 	VXISI2CWrite(0x84,0x59);
3394:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
3395:Src/main.c    **** 	VXISI2CWrite(0x86,0x04);
3396:Src/main.c    **** 	VXISI2CWrite(0x87,0x24);
3397:Src/main.c    **** 	VXISI2CWrite(0x88,0x94);
ARM GAS  /tmp/ccUr6nXF.s 			page 61


3398:Src/main.c    **** 	VXISI2CWrite(0x89,0x58);
3399:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
3400:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
3401:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
3402:Src/main.c    **** 	VXISI2CWrite(0x8D,0x2C);
3403:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
3404:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
3405:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
3406:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
3407:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
3408:Src/main.c    **** 	VXISI2CWrite(0x93,0x31);
3409:Src/main.c    **** 	VXISI2CWrite(0x94,0x87);
3410:Src/main.c    **** 	VXISI2CWrite(0x95,0xD0);
3411:Src/main.c    **** 	VXISI2CWrite(0x96,0xF3);
3412:Src/main.c    **** 	VXISI2CWrite(0x97,0x20);
3413:Src/main.c    **** 	VXISI2CWrite(0x98,0x11);
3414:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
3415:Src/main.c    **** 	VXISI2CWrite(0x9A,0xFF);
3416:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
3417:Src/main.c    **** 	VXISI2CWrite(0x9C,0x0A);
3418:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
3419:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
3420:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
3421:Src/main.c    **** 	VXISI2CWrite(0xA0,0x2F);
3422:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD9);
3423:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
3424:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
3425:Src/main.c    **** 	VXISI2CWrite(0xA4,0xE1);
3426:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);
3427:Src/main.c    **** 	VXISI2CWrite(0xA6,0xC2);
3428:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
3429:Src/main.c    **** 	VXISI2CWrite(0xA8,0x00);
3430:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
3431:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);
3432:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
3433:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);
3434:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF3);
3435:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
3436:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
3437:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
3438:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
3439:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
3440:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
3441:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
3442:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
3443:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
3444:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
3445:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
3446:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
3447:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
3448:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
3449:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
3450:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
3451:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
3452:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
3453:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
3454:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
ARM GAS  /tmp/ccUr6nXF.s 			page 62


3455:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
3456:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
3457:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
3458:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
3459:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
3460:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
3461:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
3462:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
3463:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
3464:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
3465:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
3466:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
3467:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);
3468:Src/main.c    **** 	VXISI2CWrite(0xDE,0xAF);
3469:Src/main.c    **** 	VXISI2CWrite(0xDF,0xEF);
3470:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
3471:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
3472:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
3473:Src/main.c    **** 	VXISI2CWrite(0xE3,0x12);
3474:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE2);
3475:Src/main.c    **** 	VXISI2CWrite(0xE5,0xD0);
3476:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
3477:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
3478:Src/main.c    **** 	VXISI2CWrite(0xE8,0x0F);
3479:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
3480:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
3481:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
3482:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
3483:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
3484:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
3485:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
3486:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
3487:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
3488:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
3489:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
3490:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
3491:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
3492:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
3493:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
3494:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
3495:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
3496:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
3497:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
3498:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
3499:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
3500:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
3501:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
3502:Src/main.c    **** 			 
3503:Src/main.c    **** }
3504:Src/main.c    **** 
3505:Src/main.c    **** void SET_AHD_MDOE(void)
3506:Src/main.c    **** {
3507:Src/main.c    **** 	Printf("\r\nSET_AHD_MDOE...");
3508:Src/main.c    **** 
3509:Src/main.c    **** 	VXISI2CWrite(0x00,0x42);
3510:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);
3511:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
ARM GAS  /tmp/ccUr6nXF.s 			page 63


3512:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
3513:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
3514:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
3515:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
3516:Src/main.c    **** 	VXISI2CWrite(0x07,0x0C);
3517:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
3518:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
3519:Src/main.c    **** 	VXISI2CWrite(0x0A,0x40);
3520:Src/main.c    **** 	VXISI2CWrite(0x0B,0x0A);
3521:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
3522:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
3523:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
3524:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
3525:Src/main.c    **** 	VXISI2CWrite(0x10,0x81);
3526:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
3527:Src/main.c    **** 	VXISI2CWrite(0x12,0x74);
3528:Src/main.c    **** 	VXISI2CWrite(0x13,0x80);
3529:Src/main.c    **** 	VXISI2CWrite(0x14,0x38);
3530:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
3531:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
3532:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
3533:Src/main.c    **** 	VXISI2CWrite(0x18,0xC0);
3534:Src/main.c    **** 	VXISI2CWrite(0x19,0x01);
3535:Src/main.c    **** 	VXISI2CWrite(0x1A,0x20);
3536:Src/main.c    **** 	VXISI2CWrite(0x1B,0x30);
3537:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
3538:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
3539:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
3540:Src/main.c    **** 	VXISI2CWrite(0x1F,0xA4);
3541:Src/main.c    **** 	VXISI2CWrite(0x20,0x50);
3542:Src/main.c    **** 	VXISI2CWrite(0x21,0xE2);
3543:Src/main.c    **** 	VXISI2CWrite(0x22,0x87);
3544:Src/main.c    **** 	VXISI2CWrite(0x23,0x98);
3545:Src/main.c    **** 	VXISI2CWrite(0x24,0x80);
3546:Src/main.c    **** 	VXISI2CWrite(0x25,0x44);
3547:Src/main.c    **** 	VXISI2CWrite(0x26,0x65);
3548:Src/main.c    **** 	VXISI2CWrite(0x27,0x38);
3549:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
3550:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
3551:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
3552:Src/main.c    **** 	VXISI2CWrite(0x2B,0x11);
3553:Src/main.c    **** 	VXISI2CWrite(0x2C,0x00);
3554:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
3555:Src/main.c    **** 	VXISI2CWrite(0x2E,0x47);
3556:Src/main.c    **** 	VXISI2CWrite(0x2F,0x80);
3557:Src/main.c    **** 	VXISI2CWrite(0x30,0x38);
3558:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
3559:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
3560:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
3561:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
3562:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
3563:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
3564:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
3565:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
3566:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
3567:Src/main.c    **** 	VXISI2CWrite(0x3A,0x73);
3568:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
ARM GAS  /tmp/ccUr6nXF.s 			page 64


3569:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
3570:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
3571:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
3572:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
3573:Src/main.c    **** 	VXISI2CWrite(0x40,0x80);
3574:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);
3575:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
3576:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
3577:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
3578:Src/main.c    **** 	VXISI2CWrite(0x45,0x00);
3579:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
3580:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
3581:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
3582:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
3583:Src/main.c    **** 	VXISI2CWrite(0x4A,0x00);
3584:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
3585:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
3586:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
3587:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
3588:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
3589:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
3590:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
3591:Src/main.c    **** 	VXISI2CWrite(0x52,0xA4);
3592:Src/main.c    **** 	VXISI2CWrite(0x53,0xC0);
3593:Src/main.c    **** 	VXISI2CWrite(0x54,0x42);
3594:Src/main.c    **** 	VXISI2CWrite(0x55,0x60);
3595:Src/main.c    **** 	VXISI2CWrite(0x56,0x5C);
3596:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
3597:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
3598:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
3599:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
3600:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
3601:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
3602:Src/main.c    **** 	VXISI2CWrite(0x5D,0xA8);
3603:Src/main.c    **** 	VXISI2CWrite(0x5E,0xC0);
3604:Src/main.c    **** 	VXISI2CWrite(0x5F,0x53);
3605:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
3606:Src/main.c    **** 	VXISI2CWrite(0x61,0xCC);
3607:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
3608:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
3609:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
3610:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
3611:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
3612:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
3613:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
3614:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
3615:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
3616:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
3617:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
3618:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
3619:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
3620:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
3621:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
3622:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
3623:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
3624:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
3625:Src/main.c    **** 	VXISI2CWrite(0x74,0x06);
ARM GAS  /tmp/ccUr6nXF.s 			page 65


3626:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
3627:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
3628:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
3629:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
3630:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
3631:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
3632:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
3633:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
3634:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
3635:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
3636:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
3637:Src/main.c    **** 	VXISI2CWrite(0x80,0x01);
3638:Src/main.c    **** 	VXISI2CWrite(0x81,0x15);
3639:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
3640:Src/main.c    **** 	VXISI2CWrite(0x83,0x2D);
3641:Src/main.c    **** 	VXISI2CWrite(0x84,0x57);
3642:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
3643:Src/main.c    **** 	VXISI2CWrite(0x86,0x00);
3644:Src/main.c    **** 	VXISI2CWrite(0x87,0x00);
3645:Src/main.c    **** 	VXISI2CWrite(0x88,0x00);
3646:Src/main.c    **** 	VXISI2CWrite(0x89,0x00);
3647:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
3648:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
3649:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
3650:Src/main.c    **** 	VXISI2CWrite(0x8D,0x17);
3651:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
3652:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
3653:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
3654:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
3655:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
3656:Src/main.c    **** 	VXISI2CWrite(0x93,0x84);
3657:Src/main.c    **** 	VXISI2CWrite(0x94,0x98);
3658:Src/main.c    **** 	VXISI2CWrite(0x95,0x80);
3659:Src/main.c    **** 	VXISI2CWrite(0x96,0x65);
3660:Src/main.c    **** 	VXISI2CWrite(0x97,0x70);
3661:Src/main.c    **** 	VXISI2CWrite(0x98,0x29);
3662:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
3663:Src/main.c    **** 	VXISI2CWrite(0x9A,0x00);
3664:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
3665:Src/main.c    **** 	VXISI2CWrite(0x9C,0x00);
3666:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
3667:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
3668:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
3669:Src/main.c    **** 	VXISI2CWrite(0xA0,0x80);
3670:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD8);
3671:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
3672:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
3673:Src/main.c    **** 	VXISI2CWrite(0xA4,0x00);
3674:Src/main.c    **** 	VXISI2CWrite(0xA5,0x80);
3675:Src/main.c    **** 	VXISI2CWrite(0xA6,0x00);
3676:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
3677:Src/main.c    **** 	VXISI2CWrite(0xA8,0x40);
3678:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
3679:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2C);
3680:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
3681:Src/main.c    **** 	VXISI2CWrite(0xAC,0x90);
3682:Src/main.c    **** 	VXISI2CWrite(0xAD,0x65);
ARM GAS  /tmp/ccUr6nXF.s 			page 66


3683:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
3684:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
3685:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
3686:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
3687:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
3688:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
3689:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
3690:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
3691:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
3692:Src/main.c    **** 	VXISI2CWrite(0xB7,0x00);
3693:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
3694:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
3695:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
3696:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
3697:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
3698:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
3699:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
3700:Src/main.c    **** 	VXISI2CWrite(0xBF,0x00);
3701:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
3702:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
3703:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
3704:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
3705:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
3706:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
3707:Src/main.c    **** 	VXISI2CWrite(0xC6,0x00);
3708:Src/main.c    **** 	VXISI2CWrite(0xC7,0x00);
3709:Src/main.c    **** 	VXISI2CWrite(0xC8,0x00);
3710:Src/main.c    **** 	VXISI2CWrite(0xC9,0x00);
3711:Src/main.c    **** 	VXISI2CWrite(0xCA,0x00);
3712:Src/main.c    **** 	VXISI2CWrite(0xCB,0x00);
3713:Src/main.c    **** 	VXISI2CWrite(0xCC,0x00);
3714:Src/main.c    **** 	VXISI2CWrite(0xCD,0x00);
3715:Src/main.c    **** 	VXISI2CWrite(0xCE,0x00);
3716:Src/main.c    **** 	VXISI2CWrite(0xCF,0x00);
3717:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
3718:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
3719:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
3720:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
3721:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
3722:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
3723:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
3724:Src/main.c    **** 	VXISI2CWrite(0xD7,0x0F);
3725:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
3726:Src/main.c    **** 	VXISI2CWrite(0xD9,0x00);
3727:Src/main.c    **** 	VXISI2CWrite(0xDA,0x00);
3728:Src/main.c    **** 	VXISI2CWrite(0xDB,0x00);
3729:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
3730:Src/main.c    **** 	VXISI2CWrite(0xDD,0x01);
3731:Src/main.c    **** 	VXISI2CWrite(0xDE,0x5F);
3732:Src/main.c    **** 	VXISI2CWrite(0xDF,0x96);
3733:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
3734:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
3735:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
3736:Src/main.c    **** 	VXISI2CWrite(0xE3,0x47);
3737:Src/main.c    **** 	VXISI2CWrite(0xE4,0x3C);
3738:Src/main.c    **** 	VXISI2CWrite(0xE5,0x80);
3739:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
ARM GAS  /tmp/ccUr6nXF.s 			page 67


3740:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
3741:Src/main.c    **** 	VXISI2CWrite(0xE8,0x00);
3742:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
3743:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
3744:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
3745:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
3746:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
3747:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
3748:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
3749:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
3750:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
3751:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
3752:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
3753:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
3754:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
3755:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
3756:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
3757:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
3758:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
3759:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
3760:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
3761:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
3762:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
3763:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
3764:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
3765:Src/main.c    **** 
3766:Src/main.c    **** }
3767:Src/main.c    **** /**
3768:Src/main.c    ****   * @brief System Clock Configuration
3769:Src/main.c    ****   * @retval None
3770:Src/main.c    ****   */
3771:Src/main.c    ****   #if 0//crystal
3772:Src/main.c    **** 
3773:Src/main.c    ****   void SystemClock_Config(void)
3774:Src/main.c    ****   {
3775:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
3776:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
3777:Src/main.c    ****   
3778:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks 
3779:Src/main.c    **** 	*/
3780:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
3781:Src/main.c    **** 	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
3782:Src/main.c    **** 	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
3783:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
3784:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
3785:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
3786:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
3787:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3788:Src/main.c    **** 	{
3789:Src/main.c    **** 	  Error_Handler();
3790:Src/main.c    **** 	}
3791:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks 
3792:Src/main.c    **** 	*/
3793:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
3794:Src/main.c    **** 								|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
3795:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
3796:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/ccUr6nXF.s 			page 68


3797:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
3798:Src/main.c    **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
3799:Src/main.c    ****   
3800:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
3801:Src/main.c    **** 	{
3802:Src/main.c    **** 	  Error_Handler();
3803:Src/main.c    **** 	}
3804:Src/main.c    ****   }
3805:Src/main.c    **** 
3806:Src/main.c    ****   #else
3807:Src/main.c    **** void SystemClock_Config(void)
3808:Src/main.c    **** {
3809:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
3810:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
3811:Src/main.c    **** 
3812:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
3813:Src/main.c    ****   */
3814:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
3815:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
3816:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
3817:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
3818:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
3819:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
3820:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3821:Src/main.c    ****   {
3822:Src/main.c    ****     Error_Handler();
3823:Src/main.c    ****   }
3824:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
3825:Src/main.c    ****   */
3826:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
3827:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
3828:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
3829:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
3830:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
3831:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
3832:Src/main.c    **** 
3833:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
3834:Src/main.c    ****   {
3835:Src/main.c    ****     Error_Handler();
3836:Src/main.c    ****   }
3837:Src/main.c    **** }
3838:Src/main.c    **** #endif
3839:Src/main.c    **** /**
3840:Src/main.c    ****   * @brief ADC1 Initialization Function.
3841:Src/main.c    ****   * @param None
3842:Src/main.c    ****   * @retval None
3843:Src/main.c    ****   */
3844:Src/main.c    ****   #if 0
3845:Src/main.c    **** static void MX_ADC1_Init(void)
3846:Src/main.c    **** {
3847:Src/main.c    **** 
3848:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
3849:Src/main.c    **** 
3850:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
3851:Src/main.c    **** 
3852:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
3853:Src/main.c    **** 
ARM GAS  /tmp/ccUr6nXF.s 			page 69


3854:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
3855:Src/main.c    **** 
3856:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
3857:Src/main.c    ****   /** Common config 
3858:Src/main.c    ****   */
3859:Src/main.c    ****   hadc1.Instance = ADC1;
3860:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
3861:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
3862:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
3863:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
3864:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
3865:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
3866:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
3867:Src/main.c    ****   {
3868:Src/main.c    ****     Error_Handler();
3869:Src/main.c    ****   }
3870:Src/main.c    ****   /** Configure Regular Channel 
3871:Src/main.c    ****   */
3872:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_13;
3873:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
3874:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
3875:Src/main.c    ****   /*
3876:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
3877:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
3878:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
3879:Src/main.c    ****   sConfig.Offset = 0;
3880:Src/main.c    ****   */
3881:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
3882:Src/main.c    ****   {
3883:Src/main.c    ****     Error_Handler();
3884:Src/main.c    ****   }
3885:Src/main.c    **** 
3886:Src/main.c    **** 
3887:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
3888:Src/main.c    **** HAL_ADC_MspInit(&hadc1);
3889:Src/main.c    **** 
3890:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
3891:Src/main.c    **** 
3892:Src/main.c    **** }
3893:Src/main.c    **** #endif
3894:Src/main.c    **** /**
3895:Src/main.c    ****   * @brief TIM2 Initialization Function
3896:Src/main.c    ****   * @param None
3897:Src/main.c    ****   * @retval None
3898:Src/main.c    ****   */
3899:Src/main.c    ****   #if 0
3900:Src/main.c    **** static void MX_TIM2_Init(void)
3901:Src/main.c    **** {
3902:Src/main.c    **** 
3903:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
3904:Src/main.c    **** 
3905:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
3906:Src/main.c    ****   ///TIM_ClockConfigTypeDef sClockSourceConfig = {0};
3907:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
3908:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
3909:Src/main.c    **** 
3910:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
ARM GAS  /tmp/ccUr6nXF.s 			page 70


3911:Src/main.c    **** 
3912:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
3913:Src/main.c    ****   htim2.Instance = TIM2;
3914:Src/main.c    ****   htim2.Init.Prescaler = (35/4);
3915:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
3916:Src/main.c    ****   htim2.Init.Period = 4000;
3917:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
3918:Src/main.c    ****  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE; 
3919:Src/main.c    **** /*
3920:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
3921:Src/main.c    **** 	{
3922:Src/main.c    **** 	  Error_Handler();
3923:Src/main.c    **** 	}
3924:Src/main.c    **** 	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
3925:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
3926:Src/main.c    **** 	{
3927:Src/main.c    **** 	  Error_Handler();
3928:Src/main.c    **** 	}
3929:Src/main.c    **** */
3930:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
3931:Src/main.c    ****   {
3932:Src/main.c    ****    Error_Handler();
3933:Src/main.c    ****   }
3934:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
3935:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
3936:Src/main.c    **** 
3937:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
3938:Src/main.c    ****   {
3939:Src/main.c    ****    Error_Handler();
3940:Src/main.c    ****   }
3941:Src/main.c    ****   
3942:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
3943:Src/main.c    **** //  sConfigOC.Pulse = 4000;
3944:Src/main.c    ****   sConfigOC.Pulse = 0;
3945:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
3946:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
3947:Src/main.c    **** 
3948:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
3949:Src/main.c    ****   {
3950:Src/main.c    ****    Error_Handler();
3951:Src/main.c    ****   }
3952:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
3953:Src/main.c    **** 
3954:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
3955:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
3956:Src/main.c    **** 
3957:Src/main.c    **** //TIMOCInitStructure.TIM_Pulse =(period); 						   
3958:Src/main.c    **** 
3959:Src/main.c    **** //TIMOCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;	   
3960:Src/main.c    **** //TIMOCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
3961:Src/main.c    **** //TIM_OC3Init(TIM3, &TIMOCInitStructure); 				   
3962:Src/main.c    **** 				   
3963:Src/main.c    **** 
3964:Src/main.c    **** //TIM_Cmd(TIM3, ENABLE);
3965:Src/main.c    **** 
3966:Src/main.c    **** }
3967:Src/main.c    **** #endif
ARM GAS  /tmp/ccUr6nXF.s 			page 71


3968:Src/main.c    **** /**
3969:Src/main.c    ****   * @brief TIM3 Initialization Function
3970:Src/main.c    ****   * @param None
3971:Src/main.c    ****   * @retval None
3972:Src/main.c    ****   */
3973:Src/main.c    **** static void MX_TIM3_Init(void)
3974:Src/main.c    **** {
3975:Src/main.c    **** 
3976:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
3977:Src/main.c    **** 
3978:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
3979:Src/main.c    **** 
3980:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
3981:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
3982:Src/main.c    **** 
3983:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
3984:Src/main.c    **** 
3985:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
3986:Src/main.c    ****   htim3.Instance = TIM3;
3987:Src/main.c    ****   htim3.Init.Prescaler = 35;
3988:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
3989:Src/main.c    ****   htim3.Init.Period = 9;
3990:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
3991:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
3992:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
3993:Src/main.c    ****   {
3994:Src/main.c    ****     Error_Handler();
3995:Src/main.c    ****   }
3996:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
3997:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
3998:Src/main.c    ****   {
3999:Src/main.c    ****     Error_Handler();
4000:Src/main.c    ****   }
4001:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
4002:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
4003:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
4004:Src/main.c    ****   {
4005:Src/main.c    ****     Error_Handler();
4006:Src/main.c    ****   }
4007:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
4008:Src/main.c    **** 
4009:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
4010:Src/main.c    **** 
4011:Src/main.c    **** }
4012:Src/main.c    **** 
4013:Src/main.c    **** /**
4014:Src/main.c    ****   * @brief USART1 Initialization Function
4015:Src/main.c    ****   * @param None
4016:Src/main.c    ****   * @retval None
4017:Src/main.c    ****   */
4018:Src/main.c    **** static void MX_USART1_UART_Init(void)
4019:Src/main.c    **** {
4020:Src/main.c    **** 
4021:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
4022:Src/main.c    **** 
4023:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
4024:Src/main.c    **** 
ARM GAS  /tmp/ccUr6nXF.s 			page 72


4025:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
4026:Src/main.c    **** 
4027:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
4028:Src/main.c    ****   huart1.Instance = USART1;
4029:Src/main.c    **** //  huart1.Init.BaudRate = 9600;
4030:Src/main.c    ****   huart1.Init.BaudRate = 115200;
4031:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
4032:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
4033:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
4034:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
4035:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
4036:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
4037:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
4038:Src/main.c    ****   {
4039:Src/main.c    ****     Error_Handler();
4040:Src/main.c    ****   }
4041:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
4042:Src/main.c    **** 
4043:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
4044:Src/main.c    **** 
4045:Src/main.c    **** }
4046:Src/main.c    **** 
4047:Src/main.c    **** /**
4048:Src/main.c    ****   * @brief USART2 Initialization Function
4049:Src/main.c    ****   * @param None
4050:Src/main.c    ****   * @retval None
4051:Src/main.c    ****   */
4052:Src/main.c    **** static void MX_USART2_UART_Init(void)
4053:Src/main.c    **** {
4054:Src/main.c    **** 
4055:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
4056:Src/main.c    **** 
4057:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
4058:Src/main.c    **** 
4059:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
4060:Src/main.c    **** 
4061:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
4062:Src/main.c    ****   huart2.Instance = USART2;
4063:Src/main.c    ****   huart2.Init.BaudRate = 38400;
4064:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
4065:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
4066:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
4067:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
4068:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
4069:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
4070:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
4071:Src/main.c    ****   {
4072:Src/main.c    ****     Error_Handler();
4073:Src/main.c    ****   }
4074:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
4075:Src/main.c    **** 
4076:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
4077:Src/main.c    **** 
4078:Src/main.c    **** }
4079:Src/main.c    **** 
4080:Src/main.c    **** /**
4081:Src/main.c    ****   * @brief GPIO Initialization Function
ARM GAS  /tmp/ccUr6nXF.s 			page 73


4082:Src/main.c    ****   * @param None
4083:Src/main.c    ****   * @retval None
4084:Src/main.c    ****   */
4085:Src/main.c    **** static void MX_GPIO_Init(void)
4086:Src/main.c    **** {
  25              		.loc 1 4086 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 89B0     		sub	sp, sp, #36
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 56
4087:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 4087 0
  41 0004 0025     		movs	r5, #0
  42 0006 0495     		str	r5, [sp, #16]
  43 0008 0595     		str	r5, [sp, #20]
  44 000a 0695     		str	r5, [sp, #24]
  45 000c 0795     		str	r5, [sp, #28]
  46              	.LBB2:
4088:Src/main.c    **** 
4089:Src/main.c    ****   /* GPIO Ports Clock Enable */
4090:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  47              		.loc 1 4090 0
  48 000e 2E4B     		ldr	r3, .L3
  49 0010 9A69     		ldr	r2, [r3, #24]
  50 0012 42F00402 		orr	r2, r2, #4
  51 0016 9A61     		str	r2, [r3, #24]
  52 0018 9A69     		ldr	r2, [r3, #24]
  53 001a 02F00402 		and	r2, r2, #4
  54 001e 0092     		str	r2, [sp]
  55 0020 009A     		ldr	r2, [sp]
  56              	.LBE2:
  57              	.LBB3:
4091:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  58              		.loc 1 4091 0
  59 0022 9A69     		ldr	r2, [r3, #24]
  60 0024 42F00802 		orr	r2, r2, #8
  61 0028 9A61     		str	r2, [r3, #24]
  62 002a 9A69     		ldr	r2, [r3, #24]
  63 002c 02F00802 		and	r2, r2, #8
  64 0030 0192     		str	r2, [sp, #4]
  65 0032 019A     		ldr	r2, [sp, #4]
  66              	.LBE3:
  67              	.LBB4:
4092:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  68              		.loc 1 4092 0
  69 0034 9A69     		ldr	r2, [r3, #24]
  70 0036 42F01002 		orr	r2, r2, #16
ARM GAS  /tmp/ccUr6nXF.s 			page 74


  71 003a 9A61     		str	r2, [r3, #24]
  72 003c 9A69     		ldr	r2, [r3, #24]
  73 003e 02F01002 		and	r2, r2, #16
  74 0042 0292     		str	r2, [sp, #8]
  75 0044 029A     		ldr	r2, [sp, #8]
  76              	.LBE4:
  77              	.LBB5:
4093:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  78              		.loc 1 4093 0
  79 0046 9A69     		ldr	r2, [r3, #24]
  80 0048 42F02002 		orr	r2, r2, #32
  81 004c 9A61     		str	r2, [r3, #24]
  82 004e 9B69     		ldr	r3, [r3, #24]
  83 0050 03F02003 		and	r3, r3, #32
  84 0054 0393     		str	r3, [sp, #12]
  85 0056 039B     		ldr	r3, [sp, #12]
  86              	.LBE5:
4094:Src/main.c    **** 
4095:Src/main.c    ****   /*Configure GPIO pin Output Level */
4096:Src/main.c    **** HAL_GPIO_WritePin(GPIOA, /*TX_RST_Pin|TP2824_RST_Pin|*/VS_RST_Pin, GPIO_PIN_SET);
  87              		.loc 1 4096 0
  88 0058 1C4F     		ldr	r7, .L3+4
  89 005a 0122     		movs	r2, #1
  90 005c 4FF48051 		mov	r1, #4096
  91 0060 3846     		mov	r0, r7
  92 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
  93              	.LVL0:
4097:Src/main.c    **** 
4098:Src/main.c    ****   /*Configure GPIO pins : TX_RST_Pin TP2824_RST_Pin VS_RST_Pin */
4099:Src/main.c    ****   GPIO_InitStruct.Pin = VIDEO_LOSS;
  94              		.loc 1 4099 0
  95 0066 2023     		movs	r3, #32
  96 0068 0493     		str	r3, [sp, #16]
4100:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  97              		.loc 1 4100 0
  98 006a 0124     		movs	r4, #1
  99 006c 0594     		str	r4, [sp, #20]
4101:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 100              		.loc 1 4101 0
 101 006e 0694     		str	r4, [sp, #24]
4102:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 102              		.loc 1 4102 0
 103 0070 0226     		movs	r6, #2
 104 0072 0796     		str	r6, [sp, #28]
4103:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 105              		.loc 1 4103 0
 106 0074 04A9     		add	r1, sp, #16
 107 0076 3846     		mov	r0, r7
 108 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 109              	.LVL1:
4104:Src/main.c    **** 
4105:Src/main.c    ****   GPIO_InitStruct.Pin = HDMI_SELECT;
 110              		.loc 1 4105 0
 111 007c 1023     		movs	r3, #16
 112 007e 0493     		str	r3, [sp, #16]
4106:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 113              		.loc 1 4106 0
ARM GAS  /tmp/ccUr6nXF.s 			page 75


 114 0080 0595     		str	r5, [sp, #20]
4107:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 115              		.loc 1 4107 0
 116 0082 0694     		str	r4, [sp, #24]
4108:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 117              		.loc 1 4108 0
 118 0084 0DEB0301 		add	r1, sp, r3
 119 0088 3846     		mov	r0, r7
 120 008a FFF7FEFF 		bl	HAL_GPIO_Init
 121              	.LVL2:
4109:Src/main.c    **** 
4110:Src/main.c    **** 
4111:Src/main.c    ****   /*Configure GPIO pin : IR_IN_Pin */
4112:Src/main.c    **** /*
4113:Src/main.c    ****   GPIO_InitStruct.Pin = IR_IN_Pin;
4114:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
4115:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
4116:Src/main.c    ****   HAL_GPIO_Init(IR_IN_GPIO_Port, &GPIO_InitStruct);
4117:Src/main.c    **** */
4118:Src/main.c    ****   /*Configure GPIO pin : RX1_Pin */
4119:Src/main.c    ****   /*
4120:Src/main.c    ****   GPIO_InitStruct.Pin = RX1_Pin;
4121:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
4122:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
4123:Src/main.c    ****   HAL_GPIO_Init(RX1_GPIO_Port, &GPIO_InitStruct);
4124:Src/main.c    **** */
4125:Src/main.c    **** #if 0
4126:Src/main.c    ****    GPIO_InitStruct.Pin =DOWN_KEY_Pin|UP_KEY_Pin|MENU_KEY_Pin|POWER_KEY_Pin/*|TOUCH_INT*/;
4127:Src/main.c    ****   // GPIO_InitStruct.Pin =MENU_KEY_Pin|POWER_KEY_Pin;
4128:Src/main.c    ****    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
4129:Src/main.c    ****    GPIO_InitStruct.Pull = GPIO_PULLUP;
4130:Src/main.c    ****    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
4131:Src/main.c    **** #endif
4132:Src/main.c    **** 
4133:Src/main.c    ****   GPIO_InitStruct.Pin =(/*PANEL_EN_Pin|*//*TOUCH_RESET|*/VS_RST_Pin|STM_SCL_Pin|STM_SDA_Pin);
 122              		.loc 1 4133 0
 123 008e 4FF4E053 		mov	r3, #7168
 124 0092 0493     		str	r3, [sp, #16]
4134:Src/main.c    **** //  GPIO_InitStruct.Pin =(PANEL_EN_Pin|TOUCH_RESET);
4135:Src/main.c    **** //  GPIO_InitStruct.Pin =(PANEL_EN_Pin|BL_PWM_Pin);
4136:Src/main.c    ****    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;//GPIO_MODE_OUTPUT_PP;///GPIO_MODE_OUTPUT_OD;
 125              		.loc 1 4136 0
 126 0094 0594     		str	r4, [sp, #20]
4137:Src/main.c    ****    GPIO_InitStruct.Pull =GPIO_PULLUP;// GPIO_PULLUP;
 127              		.loc 1 4137 0
 128 0096 0694     		str	r4, [sp, #24]
4138:Src/main.c    ****    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 129              		.loc 1 4138 0
 130 0098 0796     		str	r6, [sp, #28]
4139:Src/main.c    ****    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 131              		.loc 1 4139 0
 132 009a 04A9     		add	r1, sp, #16
 133 009c 0C48     		ldr	r0, .L3+8
 134 009e FFF7FEFF 		bl	HAL_GPIO_Init
 135              	.LVL3:
4140:Src/main.c    ****   /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin 
4141:Src/main.c    ****                            SW5_Pin SW6_Pin SW7_Pin */
ARM GAS  /tmp/ccUr6nXF.s 			page 76


4142:Src/main.c    **** //  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin 
4143:Src/main.c    ****    //                      |SW5_Pin|SW6_Pin|SW7_Pin|DOWN_KEY_Pin|UP_KEY_Pin|MENU_KEY_Pin|POWER_KEY_
4144:Src/main.c    ****   /*
4145:Src/main.c    **** 
4146:Src/main.c    ****   GPIO_InitStruct.Pin =DOWN_KEY_Pin|UP_KEY_Pin|MENU_KEY_Pin|POWER_KEY_Pin|TOUCH_INT;
4147:Src/main.c    ****  // GPIO_InitStruct.Pin =MENU_KEY_Pin|POWER_KEY_Pin;
4148:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
4149:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
4150:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
4151:Src/main.c    **** */
4152:Src/main.c    **** /*
4153:Src/main.c    ****   GPIO_InitStruct.Pin =DOWN_KEY_Pin|UP_KEY_Pin;
4154:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
4155:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
4156:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
4157:Src/main.c    **** */
4158:Src/main.c    ****   GPIO_InitStruct.Pin =TP2824_REST/*LCD_PWR_Pin|TTLI1_RES_Pin|AUD_SEL2_Pin|GREEN_LED_Pin |RED_LED_P
 136              		.loc 1 4158 0
 137 00a2 0496     		str	r6, [sp, #16]
4159:Src/main.c    **** //  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
4160:Src/main.c    **** //   GPIO_InitStruct.Pull = GPIO_PULLUP;
4161:Src/main.c    ****    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 138              		.loc 1 4161 0
 139 00a4 0594     		str	r4, [sp, #20]
4162:Src/main.c    ****    GPIO_InitStruct.Pull = GPIO_PULLUP;
 140              		.loc 1 4162 0
 141 00a6 0694     		str	r4, [sp, #24]
4163:Src/main.c    **** 
4164:Src/main.c    ****    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 142              		.loc 1 4164 0
 143 00a8 0796     		str	r6, [sp, #28]
4165:Src/main.c    ****    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 144              		.loc 1 4165 0
 145 00aa 0A4E     		ldr	r6, .L3+12
 146 00ac 04A9     		add	r1, sp, #16
 147 00ae 3046     		mov	r0, r6
 148 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 149              	.LVL4:
4166:Src/main.c    **** 
4167:Src/main.c    **** 
4168:Src/main.c    **** //  GPIO_InitStruct.Pin =GREEN_LED_Pin|RED_LED_Pin;
4169:Src/main.c    ****   // GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
4170:Src/main.c    ****    //GPIO_InitStruct.Pull = GPIO_NOPULL;
4171:Src/main.c    ****    //GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
4172:Src/main.c    ****    //HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
4173:Src/main.c    **** 
4174:Src/main.c    ****   GPIO_InitStruct.Pin = TP2824_IRQ|MCU_WAKEUP|AUD_I2C_MUTE_Pin/*| JUMP_KEY_Pin*/;
 150              		.loc 1 4174 0
 151 00b4 4923     		movs	r3, #73
 152 00b6 0493     		str	r3, [sp, #16]
4175:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 153              		.loc 1 4175 0
 154 00b8 0595     		str	r5, [sp, #20]
4176:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 155              		.loc 1 4176 0
 156 00ba 0694     		str	r4, [sp, #24]
4177:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
ARM GAS  /tmp/ccUr6nXF.s 			page 77


 157              		.loc 1 4177 0
 158 00bc 04A9     		add	r1, sp, #16
 159 00be 3046     		mov	r0, r6
 160 00c0 FFF7FEFF 		bl	HAL_GPIO_Init
 161              	.LVL5:
4178:Src/main.c    **** 
4179:Src/main.c    **** /*
4180:Src/main.c    ****   GPIO_InitStruct.Pin =AUD_SEL1_Pin;
4181:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
4182:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
4183:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
4184:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
4185:Src/main.c    ****   */
4186:Src/main.c    **** 
4187:Src/main.c    **** 
4188:Src/main.c    **** 	
4189:Src/main.c    **** 
4190:Src/main.c    ****   /* EXTI interrupt init*/
4191:Src/main.c    **** /*
4192:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
4193:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI2_IRQn);
4194:Src/main.c    **** */
4195:Src/main.c    **** }
 162              		.loc 1 4195 0
 163 00c4 09B0     		add	sp, sp, #36
 164              	.LCFI2:
 165              		.cfi_def_cfa_offset 20
 166              		@ sp needed
 167 00c6 F0BD     		pop	{r4, r5, r6, r7, pc}
 168              	.L4:
 169              		.align	2
 170              	.L3:
 171 00c8 00100240 		.word	1073876992
 172 00cc 00080140 		.word	1073809408
 173 00d0 000C0140 		.word	1073810432
 174 00d4 00100140 		.word	1073811456
 175              		.cfi_endproc
 176              	.LFE98:
 178              		.section	.text.MX_TIM3_Init,"ax",%progbits
 179              		.align	1
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 183              		.fpu softvfp
 185              	MX_TIM3_Init:
 186              	.LFB95:
3974:Src/main.c    **** 
 187              		.loc 1 3974 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 24
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191 0000 30B5     		push	{r4, r5, lr}
 192              	.LCFI3:
 193              		.cfi_def_cfa_offset 12
 194              		.cfi_offset 4, -12
 195              		.cfi_offset 5, -8
 196              		.cfi_offset 14, -4
ARM GAS  /tmp/ccUr6nXF.s 			page 78


 197 0002 87B0     		sub	sp, sp, #28
 198              	.LCFI4:
 199              		.cfi_def_cfa_offset 40
3980:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 200              		.loc 1 3980 0
 201 0004 0024     		movs	r4, #0
 202 0006 0294     		str	r4, [sp, #8]
 203 0008 0394     		str	r4, [sp, #12]
 204 000a 0494     		str	r4, [sp, #16]
 205 000c 0594     		str	r4, [sp, #20]
3981:Src/main.c    **** 
 206              		.loc 1 3981 0
 207 000e 0094     		str	r4, [sp]
 208 0010 0194     		str	r4, [sp, #4]
3986:Src/main.c    ****   htim3.Init.Prescaler = 35;
 209              		.loc 1 3986 0
 210 0012 0E4D     		ldr	r5, .L7
 211 0014 0E4B     		ldr	r3, .L7+4
 212 0016 2B60     		str	r3, [r5]
3987:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 213              		.loc 1 3987 0
 214 0018 2323     		movs	r3, #35
 215 001a 6B60     		str	r3, [r5, #4]
3988:Src/main.c    ****   htim3.Init.Period = 9;
 216              		.loc 1 3988 0
 217 001c AC60     		str	r4, [r5, #8]
3989:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 218              		.loc 1 3989 0
 219 001e 0923     		movs	r3, #9
 220 0020 EB60     		str	r3, [r5, #12]
3990:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 221              		.loc 1 3990 0
 222 0022 2C61     		str	r4, [r5, #16]
3991:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 223              		.loc 1 3991 0
 224 0024 8023     		movs	r3, #128
 225 0026 AB61     		str	r3, [r5, #24]
3992:Src/main.c    ****   {
 226              		.loc 1 3992 0
 227 0028 2846     		mov	r0, r5
 228 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 229              	.LVL6:
3996:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 230              		.loc 1 3996 0
 231 002e 4FF48053 		mov	r3, #4096
 232 0032 0293     		str	r3, [sp, #8]
3997:Src/main.c    ****   {
 233              		.loc 1 3997 0
 234 0034 02A9     		add	r1, sp, #8
 235 0036 2846     		mov	r0, r5
 236 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 237              	.LVL7:
4001:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 238              		.loc 1 4001 0
 239 003c 0094     		str	r4, [sp]
4002:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 240              		.loc 1 4002 0
ARM GAS  /tmp/ccUr6nXF.s 			page 79


 241 003e 0194     		str	r4, [sp, #4]
4003:Src/main.c    ****   {
 242              		.loc 1 4003 0
 243 0040 6946     		mov	r1, sp
 244 0042 2846     		mov	r0, r5
 245 0044 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 246              	.LVL8:
4011:Src/main.c    **** 
 247              		.loc 1 4011 0
 248 0048 07B0     		add	sp, sp, #28
 249              	.LCFI5:
 250              		.cfi_def_cfa_offset 12
 251              		@ sp needed
 252 004a 30BD     		pop	{r4, r5, pc}
 253              	.L8:
 254              		.align	2
 255              	.L7:
 256 004c 00000000 		.word	htim3
 257 0050 00040040 		.word	1073742848
 258              		.cfi_endproc
 259              	.LFE95:
 261              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 262              		.align	1
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 266              		.fpu softvfp
 268              	MX_USART1_UART_Init:
 269              	.LFB96:
4019:Src/main.c    **** 
 270              		.loc 1 4019 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274 0000 08B5     		push	{r3, lr}
 275              	.LCFI6:
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 3, -8
 278              		.cfi_offset 14, -4
4028:Src/main.c    **** //  huart1.Init.BaudRate = 9600;
 279              		.loc 1 4028 0
 280 0002 0848     		ldr	r0, .L11
 281 0004 084B     		ldr	r3, .L11+4
 282 0006 0360     		str	r3, [r0]
4030:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 283              		.loc 1 4030 0
 284 0008 4FF4E133 		mov	r3, #115200
 285 000c 4360     		str	r3, [r0, #4]
4031:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 286              		.loc 1 4031 0
 287 000e 0023     		movs	r3, #0
 288 0010 8360     		str	r3, [r0, #8]
4032:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 289              		.loc 1 4032 0
 290 0012 C360     		str	r3, [r0, #12]
4033:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 291              		.loc 1 4033 0
ARM GAS  /tmp/ccUr6nXF.s 			page 80


 292 0014 0361     		str	r3, [r0, #16]
4034:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 293              		.loc 1 4034 0
 294 0016 0C22     		movs	r2, #12
 295 0018 4261     		str	r2, [r0, #20]
4035:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 296              		.loc 1 4035 0
 297 001a 8361     		str	r3, [r0, #24]
4036:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 298              		.loc 1 4036 0
 299 001c C361     		str	r3, [r0, #28]
4037:Src/main.c    ****   {
 300              		.loc 1 4037 0
 301 001e FFF7FEFF 		bl	HAL_UART_Init
 302              	.LVL9:
4045:Src/main.c    **** 
 303              		.loc 1 4045 0
 304 0022 08BD     		pop	{r3, pc}
 305              	.L12:
 306              		.align	2
 307              	.L11:
 308 0024 00000000 		.word	huart1
 309 0028 00380140 		.word	1073821696
 310              		.cfi_endproc
 311              	.LFE96:
 313              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 314              		.align	1
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu softvfp
 320              	MX_USART2_UART_Init:
 321              	.LFB97:
4053:Src/main.c    **** 
 322              		.loc 1 4053 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326 0000 08B5     		push	{r3, lr}
 327              	.LCFI7:
 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 3, -8
 330              		.cfi_offset 14, -4
4062:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 331              		.loc 1 4062 0
 332 0002 0848     		ldr	r0, .L15
 333 0004 084B     		ldr	r3, .L15+4
 334 0006 0360     		str	r3, [r0]
4063:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 335              		.loc 1 4063 0
 336 0008 4FF41643 		mov	r3, #38400
 337 000c 4360     		str	r3, [r0, #4]
4064:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 338              		.loc 1 4064 0
 339 000e 0023     		movs	r3, #0
 340 0010 8360     		str	r3, [r0, #8]
4065:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
ARM GAS  /tmp/ccUr6nXF.s 			page 81


 341              		.loc 1 4065 0
 342 0012 C360     		str	r3, [r0, #12]
4066:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 343              		.loc 1 4066 0
 344 0014 0361     		str	r3, [r0, #16]
4067:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 345              		.loc 1 4067 0
 346 0016 0C22     		movs	r2, #12
 347 0018 4261     		str	r2, [r0, #20]
4068:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 348              		.loc 1 4068 0
 349 001a 8361     		str	r3, [r0, #24]
4069:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 350              		.loc 1 4069 0
 351 001c C361     		str	r3, [r0, #28]
4070:Src/main.c    ****   {
 352              		.loc 1 4070 0
 353 001e FFF7FEFF 		bl	HAL_UART_Init
 354              	.LVL10:
4078:Src/main.c    **** 
 355              		.loc 1 4078 0
 356 0022 08BD     		pop	{r3, pc}
 357              	.L16:
 358              		.align	2
 359              	.L15:
 360 0024 00000000 		.word	huart2
 361 0028 00440040 		.word	1073759232
 362              		.cfi_endproc
 363              	.LFE97:
 365              		.section	.text.HDMI_AudioModeDetect,"ax",%progbits
 366              		.align	1
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 370              		.fpu softvfp
 372              	HDMI_AudioModeDetect:
 373              	.LFB75:
1282:Src/main.c    ****     tByte pbAudioSampleFreq, pbValidCh ;
 374              		.loc 1 1282 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 8
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378 0000 00B5     		push	{lr}
 379              	.LCFI8:
 380              		.cfi_def_cfa_offset 4
 381              		.cfi_offset 14, -4
 382 0002 83B0     		sub	sp, sp, #12
 383              	.LCFI9:
 384              		.cfi_def_cfa_offset 16
1284:Src/main.c    **** 
 385              		.loc 1 1284 0
 386 0004 0023     		movs	r3, #0
 387 0006 8DF80730 		strb	r3, [sp, #7]
1286:Src/main.c    **** 
 388              		.loc 1 1286 0
 389 000a 0DF10601 		add	r1, sp, #6
 390 000e 0DF10700 		add	r0, sp, #7
ARM GAS  /tmp/ccUr6nXF.s 			page 82


 391 0012 FFF7FEFF 		bl	getHDMIRXAudioInfo
 392              	.LVL11:
1288:Src/main.c    ****     {
 393              		.loc 1 1288 0
 394 0016 0E4B     		ldr	r3, .L21
 395 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 396 001a 042B     		cmp	r3, #4
 397 001c 03D0     		beq	.L18
1290:Src/main.c    ****         {
 398              		.loc 1 1290 0
 399 001e 0D4A     		ldr	r2, .L21+4
 400 0020 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 401 0022 9342     		cmp	r3, r2
 402 0024 08D0     		beq	.L20
 403              	.L18:
1299:Src/main.c    **** }
 404              		.loc 1 1299 0
 405 0026 0B4B     		ldr	r3, .L21+4
 406 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 407 002a 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 408 002e 0A4A     		ldr	r2, .L21+8
 409 0030 D154     		strb	r1, [r2, r3]
1300:Src/main.c    **** 
 410              		.loc 1 1300 0
 411 0032 03B0     		add	sp, sp, #12
 412              	.LCFI10:
 413              		.cfi_remember_state
 414              		.cfi_def_cfa_offset 4
 415              		@ sp needed
 416 0034 5DF804FB 		ldr	pc, [sp], #4
 417              	.L20:
 418              	.LCFI11:
 419              		.cfi_restore_state
1292:Src/main.c    ****             {
 420              		.loc 1 1292 0
 421 0038 084B     		ldr	r3, .L21+12
 422 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 423 003c 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 424 0040 8342     		cmp	r3, r0
 425 0042 F0D0     		beq	.L18
1294:Src/main.c    ****                 HDMI_Tx_SetAudioFs(gPreAudioSampleFreq )  ;
 426              		.loc 1 1294 0
 427 0044 054B     		ldr	r3, .L21+12
 428 0046 1870     		strb	r0, [r3]
1295:Src/main.c    ****             }
 429              		.loc 1 1295 0
 430 0048 FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 431              	.LVL12:
 432 004c EBE7     		b	.L18
 433              	.L22:
 434 004e 00BF     		.align	2
 435              	.L21:
 436 0050 00000000 		.word	.LANCHOR0
 437 0054 00000000 		.word	gHDMI_Index
 438 0058 00000000 		.word	.LANCHOR1
 439 005c 00000000 		.word	gPreAudioSampleFreq
 440              		.cfi_endproc
ARM GAS  /tmp/ccUr6nXF.s 			page 83


 441              	.LFE75:
 443              		.section	.text._write,"ax",%progbits
 444              		.align	1
 445              		.global	_write
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu softvfp
 451              	_write:
 452              	.LFB68:
 256:Src/main.c    ****     if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 453              		.loc 1 256 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              	.LVL13:
 458 0000 10B5     		push	{r4, lr}
 459              	.LCFI12:
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 4, -8
 462              		.cfi_offset 14, -4
 257:Src/main.c    ****     {
 463              		.loc 1 257 0
 464 0002 0138     		subs	r0, r0, #1
 465              	.LVL14:
 466 0004 0128     		cmp	r0, #1
 467 0006 09D8     		bhi	.L28
 468 0008 1446     		mov	r4, r2
 263:Src/main.c    ****         HAL_UART_Transmit(&huart1, (uint8_t*)data, (uint16_t)len, 1000);
 469              		.loc 1 263 0
 470 000a 4FF47A73 		mov	r3, #1000
 471 000e 92B2     		uxth	r2, r2
 472              	.LVL15:
 473 0010 0748     		ldr	r0, .L30
 474              	.LVL16:
 475 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 476              	.LVL17:
 266:Src/main.c    **** }
 477              		.loc 1 266 0
 478 0016 40B1     		cbz	r0, .L29
 479 0018 0020     		movs	r0, #0
 480              	.LVL18:
 481              	.L23:
 267:Src/main.c    **** #else
 482              		.loc 1 267 0
 483 001a 10BD     		pop	{r4, pc}
 484              	.LVL19:
 485              	.L28:
 259:Src/main.c    ****         return -1;
 486              		.loc 1 259 0
 487 001c FFF7FEFF 		bl	__errno
 488              	.LVL20:
 489 0020 0923     		movs	r3, #9
 490 0022 0360     		str	r3, [r0]
 260:Src/main.c    ****     }
 491              		.loc 1 260 0
 492 0024 4FF0FF30 		mov	r0, #-1
ARM GAS  /tmp/ccUr6nXF.s 			page 84


 493 0028 F7E7     		b	.L23
 494              	.LVL21:
 495              	.L29:
 266:Src/main.c    **** }
 496              		.loc 1 266 0
 497 002a 2046     		mov	r0, r4
 498              	.LVL22:
 499 002c F5E7     		b	.L23
 500              	.L31:
 501 002e 00BF     		.align	2
 502              	.L30:
 503 0030 00000000 		.word	huart1
 504              		.cfi_endproc
 505              	.LFE68:
 507              		.section	.text.Audio_Sel,"ax",%progbits
 508              		.align	1
 509              		.global	Audio_Sel
 510              		.syntax unified
 511              		.thumb
 512              		.thumb_func
 513              		.fpu softvfp
 515              	Audio_Sel:
 516              	.LFB69:
 279:Src/main.c    ****     gbAUDO_INDEX = mode ;
 517              		.loc 1 279 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              	.LVL23:
 522 0000 38B5     		push	{r3, r4, r5, lr}
 523              	.LCFI13:
 524              		.cfi_def_cfa_offset 16
 525              		.cfi_offset 3, -16
 526              		.cfi_offset 4, -12
 527              		.cfi_offset 5, -8
 528              		.cfi_offset 14, -4
 280:Src/main.c    ****     switch(mode)
 529              		.loc 1 280 0
 530 0002 5B4B     		ldr	r3, .L41
 531 0004 1870     		strb	r0, [r3]
 281:Src/main.c    ****     {
 532              		.loc 1 281 0
 533 0006 0428     		cmp	r0, #4
 534 0008 20D8     		bhi	.L32
 535 000a DFE800F0 		tbb	[pc, r0]
 536              	.L35:
 537 000e 20       		.byte	(.L34-.L35)/2
 538 000f 44       		.byte	(.L36-.L35)/2
 539 0010 68       		.byte	(.L37-.L35)/2
 540 0011 8C       		.byte	(.L38-.L35)/2
 541 0012 03       		.byte	(.L39-.L35)/2
 542 0013 00       		.p2align 1
 543              	.L39:
 291:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 544              		.loc 1 291 0
 545 0014 574D     		ldr	r5, .L41+4
 546 0016 0122     		movs	r2, #1
ARM GAS  /tmp/ccUr6nXF.s 			page 85


 547 0018 4021     		movs	r1, #64
 548 001a 2846     		mov	r0, r5
 549              	.LVL24:
 550 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 551              	.LVL25:
 292:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 552              		.loc 1 292 0
 553 0020 554C     		ldr	r4, .L41+8
 554 0022 0122     		movs	r2, #1
 555 0024 2021     		movs	r1, #32
 556 0026 2046     		mov	r0, r4
 557 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 558              	.LVL26:
 293:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 559              		.loc 1 293 0
 560 002c 0122     		movs	r2, #1
 561 002e 1021     		movs	r1, #16
 562 0030 2046     		mov	r0, r4
 563 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 564              	.LVL27:
 294:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 565              		.loc 1 294 0
 566 0036 0122     		movs	r2, #1
 567 0038 0821     		movs	r1, #8
 568 003a 2046     		mov	r0, r4
 569 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 570              	.LVL28:
 295:Src/main.c    ****         break ;
 571              		.loc 1 295 0
 572 0040 0122     		movs	r2, #1
 573 0042 4FF40041 		mov	r1, #32768
 574 0046 2846     		mov	r0, r5
 575 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 576              	.LVL29:
 577              	.L32:
 372:Src/main.c    **** 
 578              		.loc 1 372 0
 579 004c 38BD     		pop	{r3, r4, r5, pc}
 580              	.LVL30:
 581              	.L34:
 307:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_RESET);
 582              		.loc 1 307 0
 583 004e 494D     		ldr	r5, .L41+4
 584 0050 0122     		movs	r2, #1
 585 0052 4021     		movs	r1, #64
 586 0054 2846     		mov	r0, r5
 587              	.LVL31:
 588 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 589              	.LVL32:
 308:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 590              		.loc 1 308 0
 591 005a 474C     		ldr	r4, .L41+8
 592 005c 0022     		movs	r2, #0
 593 005e 2021     		movs	r1, #32
 594 0060 2046     		mov	r0, r4
 595 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 596              	.LVL33:
ARM GAS  /tmp/ccUr6nXF.s 			page 86


 309:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 597              		.loc 1 309 0
 598 0066 0122     		movs	r2, #1
 599 0068 1021     		movs	r1, #16
 600 006a 2046     		mov	r0, r4
 601 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 602              	.LVL34:
 310:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 603              		.loc 1 310 0
 604 0070 0122     		movs	r2, #1
 605 0072 0821     		movs	r1, #8
 606 0074 2046     		mov	r0, r4
 607 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 608              	.LVL35:
 311:Src/main.c    **** 
 609              		.loc 1 311 0
 610 007a 0122     		movs	r2, #1
 611 007c 4FF40041 		mov	r1, #32768
 612 0080 2846     		mov	r0, r5
 613 0082 FFF7FEFF 		bl	HAL_GPIO_WritePin
 614              	.LVL36:
 313:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[0] ;
 615              		.loc 1 313 0
 616 0086 3D4C     		ldr	r4, .L41+12
 617 0088 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 618 008a FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 619              	.LVL37:
 314:Src/main.c    ****         break ;
 620              		.loc 1 314 0
 621 008e 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 622 0090 3B4B     		ldr	r3, .L41+16
 623 0092 1A70     		strb	r2, [r3]
 315:Src/main.c    **** 
 624              		.loc 1 315 0
 625 0094 DAE7     		b	.L32
 626              	.LVL38:
 627              	.L36:
 326:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 628              		.loc 1 326 0
 629 0096 374D     		ldr	r5, .L41+4
 630 0098 0122     		movs	r2, #1
 631 009a 4021     		movs	r1, #64
 632 009c 2846     		mov	r0, r5
 633              	.LVL39:
 634 009e FFF7FEFF 		bl	HAL_GPIO_WritePin
 635              	.LVL40:
 327:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_RESET);
 636              		.loc 1 327 0
 637 00a2 354C     		ldr	r4, .L41+8
 638 00a4 0122     		movs	r2, #1
 639 00a6 2021     		movs	r1, #32
 640 00a8 2046     		mov	r0, r4
 641 00aa FFF7FEFF 		bl	HAL_GPIO_WritePin
 642              	.LVL41:
 328:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 643              		.loc 1 328 0
 644 00ae 0022     		movs	r2, #0
ARM GAS  /tmp/ccUr6nXF.s 			page 87


 645 00b0 1021     		movs	r1, #16
 646 00b2 2046     		mov	r0, r4
 647 00b4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 648              	.LVL42:
 329:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 649              		.loc 1 329 0
 650 00b8 0122     		movs	r2, #1
 651 00ba 0821     		movs	r1, #8
 652 00bc 2046     		mov	r0, r4
 653 00be FFF7FEFF 		bl	HAL_GPIO_WritePin
 654              	.LVL43:
 330:Src/main.c    **** 
 655              		.loc 1 330 0
 656 00c2 0122     		movs	r2, #1
 657 00c4 4FF40041 		mov	r1, #32768
 658 00c8 2846     		mov	r0, r5
 659 00ca FFF7FEFF 		bl	HAL_GPIO_WritePin
 660              	.LVL44:
 332:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[1] ;
 661              		.loc 1 332 0
 662 00ce 2B4C     		ldr	r4, .L41+12
 663 00d0 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 664 00d2 FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 665              	.LVL45:
 333:Src/main.c    ****         break ;
 666              		.loc 1 333 0
 667 00d6 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 668 00d8 294B     		ldr	r3, .L41+16
 669 00da 1A70     		strb	r2, [r3]
 334:Src/main.c    **** 
 670              		.loc 1 334 0
 671 00dc B6E7     		b	.L32
 672              	.LVL46:
 673              	.L37:
 344:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 674              		.loc 1 344 0
 675 00de 254D     		ldr	r5, .L41+4
 676 00e0 0022     		movs	r2, #0
 677 00e2 4021     		movs	r1, #64
 678 00e4 2846     		mov	r0, r5
 679              	.LVL47:
 680 00e6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 681              	.LVL48:
 345:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 682              		.loc 1 345 0
 683 00ea 234C     		ldr	r4, .L41+8
 684 00ec 0122     		movs	r2, #1
 685 00ee 2021     		movs	r1, #32
 686 00f0 2046     		mov	r0, r4
 687 00f2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 688              	.LVL49:
 346:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_RESET);
 689              		.loc 1 346 0
 690 00f6 0122     		movs	r2, #1
 691 00f8 1021     		movs	r1, #16
 692 00fa 2046     		mov	r0, r4
 693 00fc FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccUr6nXF.s 			page 88


 694              	.LVL50:
 347:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_SET);
 695              		.loc 1 347 0
 696 0100 0022     		movs	r2, #0
 697 0102 0821     		movs	r1, #8
 698 0104 2046     		mov	r0, r4
 699 0106 FFF7FEFF 		bl	HAL_GPIO_WritePin
 700              	.LVL51:
 348:Src/main.c    **** 
 701              		.loc 1 348 0
 702 010a 0122     		movs	r2, #1
 703 010c 4FF40041 		mov	r1, #32768
 704 0110 2846     		mov	r0, r5
 705 0112 FFF7FEFF 		bl	HAL_GPIO_WritePin
 706              	.LVL52:
 350:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[2] ;
 707              		.loc 1 350 0
 708 0116 194C     		ldr	r4, .L41+12
 709 0118 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 710 011a FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 711              	.LVL53:
 351:Src/main.c    ****         break ;
 712              		.loc 1 351 0
 713 011e A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 714 0120 174B     		ldr	r3, .L41+16
 715 0122 1A70     		strb	r2, [r3]
 352:Src/main.c    **** 
 716              		.loc 1 352 0
 717 0124 92E7     		b	.L32
 718              	.LVL54:
 719              	.L38:
 362:Src/main.c    ****         HAL_GPIO_WritePin(H1_AUDIO_GPIO_Port, H1_AUDIO_Pin, GPIO_PIN_SET);
 720              		.loc 1 362 0
 721 0126 134D     		ldr	r5, .L41+4
 722 0128 0022     		movs	r2, #0
 723 012a 4021     		movs	r1, #64
 724 012c 2846     		mov	r0, r5
 725              	.LVL55:
 726 012e FFF7FEFF 		bl	HAL_GPIO_WritePin
 727              	.LVL56:
 363:Src/main.c    ****         HAL_GPIO_WritePin(H2_AUDIO_GPIO_Port, H2_AUDIO_Pin, GPIO_PIN_SET);
 728              		.loc 1 363 0
 729 0132 114C     		ldr	r4, .L41+8
 730 0134 0122     		movs	r2, #1
 731 0136 2021     		movs	r1, #32
 732 0138 2046     		mov	r0, r4
 733 013a FFF7FEFF 		bl	HAL_GPIO_WritePin
 734              	.LVL57:
 364:Src/main.c    ****         HAL_GPIO_WritePin(H3_AUDIO_GPIO_Port, H3_AUDIO_Pin, GPIO_PIN_SET);
 735              		.loc 1 364 0
 736 013e 0122     		movs	r2, #1
 737 0140 1021     		movs	r1, #16
 738 0142 2046     		mov	r0, r4
 739 0144 FFF7FEFF 		bl	HAL_GPIO_WritePin
 740              	.LVL58:
 365:Src/main.c    ****         HAL_GPIO_WritePin(H4_AUDIO_GPIO_Port, H4_AUDIO_Pin, GPIO_PIN_RESET);
 741              		.loc 1 365 0
ARM GAS  /tmp/ccUr6nXF.s 			page 89


 742 0148 0122     		movs	r2, #1
 743 014a 0821     		movs	r1, #8
 744 014c 2046     		mov	r0, r4
 745 014e FFF7FEFF 		bl	HAL_GPIO_WritePin
 746              	.LVL59:
 366:Src/main.c    **** 
 747              		.loc 1 366 0
 748 0152 0022     		movs	r2, #0
 749 0154 4FF40041 		mov	r1, #32768
 750 0158 2846     		mov	r0, r5
 751 015a FFF7FEFF 		bl	HAL_GPIO_WritePin
 752              	.LVL60:
 368:Src/main.c    ****         gPreAudioSampleFreq = gAudioSampleFreq[3] ;
 753              		.loc 1 368 0
 754 015e 074C     		ldr	r4, .L41+12
 755 0160 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 756 0162 FFF7FEFF 		bl	HDMI_Tx_SetAudioFs
 757              	.LVL61:
 369:Src/main.c    ****         break ;
 758              		.loc 1 369 0
 759 0166 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 760 0168 054B     		ldr	r3, .L41+16
 761 016a 1A70     		strb	r2, [r3]
 372:Src/main.c    **** 
 762              		.loc 1 372 0
 763 016c 6EE7     		b	.L32
 764              	.L42:
 765 016e 00BF     		.align	2
 766              	.L41:
 767 0170 00000000 		.word	.LANCHOR0
 768 0174 00080140 		.word	1073809408
 769 0178 000C0140 		.word	1073810432
 770 017c 00000000 		.word	.LANCHOR1
 771 0180 00000000 		.word	gPreAudioSampleFreq
 772              		.cfi_endproc
 773              	.LFE69:
 775              		.section	.text.SET_Audio_Mute,"ax",%progbits
 776              		.align	1
 777              		.global	SET_Audio_Mute
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu softvfp
 783              	SET_Audio_Mute:
 784              	.LFB70:
 375:Src/main.c    **** 
 785              		.loc 1 375 0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              	.LVL62:
 790 0000 10B5     		push	{r4, lr}
 791              	.LCFI14:
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 4, -8
 794              		.cfi_offset 14, -4
 795 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccUr6nXF.s 			page 90


 377:Src/main.c    **** 	HAL_GPIO_WritePin(AUD_I2C_MUTE_Port,AUD_I2C_MUTE_Pin, GPIO_PIN_RESET);
 796              		.loc 1 377 0
 797 0004 0128     		cmp	r0, #1
 798 0006 09D0     		beq	.L47
 380:Src/main.c    **** 
 799              		.loc 1 380 0
 800 0008 0122     		movs	r2, #1
 801 000a 0821     		movs	r1, #8
 802 000c 0648     		ldr	r0, .L48
 803              	.LVL63:
 804 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 805              	.LVL64:
 806              	.L45:
 382:Src/main.c    **** 
 807              		.loc 1 382 0
 808 0012 2146     		mov	r1, r4
 809 0014 0548     		ldr	r0, .L48+4
 810 0016 FFF7FEFF 		bl	Printf
 811              	.LVL65:
 384:Src/main.c    **** 
 812              		.loc 1 384 0
 813 001a 10BD     		pop	{r4, pc}
 814              	.LVL66:
 815              	.L47:
 378:Src/main.c    **** else
 816              		.loc 1 378 0
 817 001c 0022     		movs	r2, #0
 818 001e 0821     		movs	r1, #8
 819 0020 0148     		ldr	r0, .L48
 820              	.LVL67:
 821 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 822              	.LVL68:
 823 0026 F4E7     		b	.L45
 824              	.L49:
 825              		.align	2
 826              	.L48:
 827 0028 00100140 		.word	1073811456
 828 002c 00000000 		.word	.LC0
 829              		.cfi_endproc
 830              	.LFE70:
 832              		.section	.text.HDMI_VideoModeDetect,"ax",%progbits
 833              		.align	1
 834              		.syntax unified
 835              		.thumb
 836              		.thumb_func
 837              		.fpu softvfp
 839              	HDMI_VideoModeDetect:
 840              	.LFB74:
1165:Src/main.c    **** 		tByte i  ;
 841              		.loc 1 1165 0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 0
 844              		@ frame_needed = 0, uses_anonymous_args = 0
 845 0000 30B5     		push	{r4, r5, lr}
 846              	.LCFI15:
 847              		.cfi_def_cfa_offset 12
 848              		.cfi_offset 4, -12
ARM GAS  /tmp/ccUr6nXF.s 			page 91


 849              		.cfi_offset 5, -8
 850              		.cfi_offset 14, -4
 851 0002 83B0     		sub	sp, sp, #12
 852              	.LCFI16:
 853              		.cfi_def_cfa_offset 24
 854              	.LVL69:
1168:Src/main.c    **** 		{
 855              		.loc 1 1168 0
 856 0004 0024     		movs	r4, #0
 857 0006 58E0     		b	.L51
 858              	.LVL70:
 859              	.L74:
1174:Src/main.c    **** 					bSignal[gHDMI_Index] = 0;
 860              		.loc 1 1174 0
 861 0008 6E4B     		ldr	r3, .L78
 862 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 863 000c 142B     		cmp	r3, #20
 864 000e 03D0     		beq	.L68
1177:Src/main.c    **** 			}
 865              		.loc 1 1177 0
 866 0010 6D4B     		ldr	r3, .L78+4
 867 0012 0122     		movs	r2, #1
 868 0014 1A55     		strb	r2, [r3, r4]
 869 0016 5CE0     		b	.L54
 870              	.L68:
1175:Src/main.c    **** 				else
 871              		.loc 1 1175 0
 872 0018 6B4B     		ldr	r3, .L78+4
 873 001a 0022     		movs	r2, #0
 874 001c 1A55     		strb	r2, [r3, r4]
 875 001e 58E0     		b	.L54
 876              	.L75:
1199:Src/main.c    **** 					dbg_Printf("##ch%d, VS4210_Rx_NoSignal\r\n", (int)(i+1) ) ;
 877              		.loc 1 1199 0
 878 0020 2046     		mov	r0, r4
 879 0022 FFF7FEFF 		bl	VS4210_Rx_NoSignal
 880              	.LVL71:
1200:Src/main.c    **** 					if (pVS4210_MutiWindows1.DrawOSDFlg != 0)
 881              		.loc 1 1200 0
 882 0026 631C     		adds	r3, r4, #1
 883 0028 0093     		str	r3, [sp]
 884 002a 4FF49663 		mov	r3, #1200
 885 002e 674A     		ldr	r2, .L78+8
 886 0030 6749     		ldr	r1, .L78+12
 887 0032 6848     		ldr	r0, .L78+16
 888 0034 FFF7FEFF 		bl	printf
 889              	.LVL72:
1201:Src/main.c    **** 					{
 890              		.loc 1 1201 0
 891 0038 674B     		ldr	r3, .L78+20
 892 003a DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 893 003c 4BB1     		cbz	r3, .L57
1203:Src/main.c    **** 						Tim1_count = 0 ;
 894              		.loc 1 1203 0
 895 003e 0122     		movs	r2, #1
 896 0040 664B     		ldr	r3, .L78+24
 897 0042 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccUr6nXF.s 			page 92


1204:Src/main.c    **** 						OSDStateFlg = 1 ;
 898              		.loc 1 1204 0
 899 0044 0023     		movs	r3, #0
 900 0046 6649     		ldr	r1, .L78+28
 901 0048 0B60     		str	r3, [r1]
1205:Src/main.c    **** 						OSDSecCount = 0 ;
 902              		.loc 1 1205 0
 903 004a 6649     		ldr	r1, .L78+32
 904 004c 0A70     		strb	r2, [r1]
1206:Src/main.c    **** 					}
 905              		.loc 1 1206 0
 906 004e 664A     		ldr	r2, .L78+36
 907 0050 1370     		strb	r3, [r2]
 908              	.L57:
1208:Src/main.c    **** 					PrebVXIS_InputMode[gHDMI_Index] = _OSD_No_Signal ;
 909              		.loc 1 1208 0
 910 0052 664B     		ldr	r3, .L78+40
 911 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 912 0056 1422     		movs	r2, #20
 913 0058 6549     		ldr	r1, .L78+44
 914 005a CA54     		strb	r2, [r1, r3]
1209:Src/main.c    **** 
 915              		.loc 1 1209 0
 916 005c 6549     		ldr	r1, .L78+48
 917 005e CA54     		strb	r2, [r1, r3]
1211:Src/main.c    **** 						Set_Video_Loss_OSD(0,ON);
 918              		.loc 1 1211 0
 919 0060 654A     		ldr	r2, .L78+52
 920 0062 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 921 0064 02B9     		cbnz	r2, .L58
1211:Src/main.c    **** 						Set_Video_Loss_OSD(0,ON);
 922              		.loc 1 1211 0 is_stmt 0 discriminator 1
 923 0066 1BB1     		cbz	r3, .L69
 924              	.L58:
1215:Src/main.c    **** 				}
 925              		.loc 1 1215 0 is_stmt 1
 926 0068 0120     		movs	r0, #1
 927 006a FFF7FEFF 		bl	SET_Audio_Mute
 928              	.LVL73:
 929 006e 44E0     		b	.L56
 930              	.L69:
1212:Src/main.c    **** 					//MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);	
 931              		.loc 1 1212 0
 932 0070 0121     		movs	r1, #1
 933 0072 0020     		movs	r0, #0
 934 0074 FFF7FEFF 		bl	Set_Video_Loss_OSD
 935              	.LVL74:
 936 0078 F6E7     		b	.L58
 937              	.L76:
1222:Src/main.c    **** 					gbVXIS_InputMode[gHDMI_Index] = newInRes[0];
 938              		.loc 1 1222 0
 939 007a 012C     		cmp	r4, #1
 940 007c 05D0     		beq	.L70
1226:Src/main.c    **** 
 941              		.loc 1 1226 0
 942 007e 2846     		mov	r0, r5
 943 0080 FFF7FEFF 		bl	GetHDMI_InputMode
ARM GAS  /tmp/ccUr6nXF.s 			page 93


 944              	.LVL75:
 945 0084 5A4B     		ldr	r3, .L78+44
 946 0086 5855     		strb	r0, [r3, r5]
 947 0088 3DE0     		b	.L59
 948              	.L70:
1223:Src/main.c    **** 				else
 949              		.loc 1 1223 0
 950 008a 4E4B     		ldr	r3, .L78
 951 008c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 952 008e 584B     		ldr	r3, .L78+44
 953 0090 5A55     		strb	r2, [r3, r5]
 954 0092 38E0     		b	.L59
 955              	.L77:
1238:Src/main.c    **** 					VXISI2CWrite( 0x19, 0x01 );
 956              		.loc 1 1238 0 discriminator 1
 957 0094 554B     		ldr	r3, .L78+40
 958 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 959 0098 012B     		cmp	r3, #1
 960 009a 4CD1     		bne	.L62
1239:Src/main.c    **** 							
 961              		.loc 1 1239 0
 962 009c 0121     		movs	r1, #1
 963 009e 1920     		movs	r0, #25
 964 00a0 FFF7FEFF 		bl	VXISI2CWrite
 965              	.LVL76:
 966 00a4 47E0     		b	.L62
 967              	.L64:
1268:Src/main.c    **** 							{
 968              		.loc 1 1268 0
 969 00a6 544B     		ldr	r3, .L78+52
 970 00a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 971 00aa 012B     		cmp	r3, #1
 972 00ac 79D0     		beq	.L71
 973              	.L65:
1273:Src/main.c    **** 						SET_Audio_Mute(OFF);	
 974              		.loc 1 1273 0
 975 00ae 4F4B     		ldr	r3, .L78+40
 976 00b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 977 00b2 002B     		cmp	r3, #0
 978 00b4 7FD0     		beq	.L72
 979              	.L61:
1168:Src/main.c    **** 		{
 980              		.loc 1 1168 0 discriminator 2
 981 00b6 0134     		adds	r4, r4, #1
 982              	.LVL77:
 983 00b8 E4B2     		uxtb	r4, r4
 984              	.LVL78:
 985              	.L51:
1168:Src/main.c    **** 		{
 986              		.loc 1 1168 0 is_stmt 0 discriminator 1
 987 00ba 012C     		cmp	r4, #1
 988 00bc 7FD8     		bhi	.L73
1170:Src/main.c    **** 			//--- Start --- 20201214-01
 989              		.loc 1 1170 0 is_stmt 1
 990 00be 4B4B     		ldr	r3, .L78+40
 991 00c0 1C70     		strb	r4, [r3]
1172:Src/main.c    **** 			{
ARM GAS  /tmp/ccUr6nXF.s 			page 94


 992              		.loc 1 1172 0
 993 00c2 012C     		cmp	r4, #1
 994 00c4 A0D0     		beq	.L74
1181:Src/main.c    **** 
 995              		.loc 1 1181 0
 996 00c6 FFF7FEFF 		bl	CheckHDMIRX
 997              	.LVL79:
 998 00ca 484B     		ldr	r3, .L78+40
 999 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1000 00ce 3E4A     		ldr	r2, .L78+4
 1001 00d0 D054     		strb	r0, [r2, r3]
 1002              	.L54:
1188:Src/main.c    **** 			{
 1003              		.loc 1 1188 0
 1004 00d2 464B     		ldr	r3, .L78+40
 1005 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1006 00d6 494A     		ldr	r2, .L78+56
 1007 00d8 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1008 00da 494A     		ldr	r2, .L78+60
 1009 00dc D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1010 00de 9142     		cmp	r1, r2
 1011 00e0 01D0     		beq	.L55
1190:Src/main.c    **** 			}
 1012              		.loc 1 1190 0
 1013 00e2 4649     		ldr	r1, .L78+56
 1014 00e4 CA54     		strb	r2, [r1, r3]
 1015              	.L55:
1193:Src/main.c    **** 			{
 1016              		.loc 1 1193 0
 1017 00e6 384A     		ldr	r2, .L78+4
 1018 00e8 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1019 00ea 4649     		ldr	r1, .L78+64
 1020 00ec C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 1021 00ee 8A42     		cmp	r2, r1
 1022 00f0 03D0     		beq	.L56
1195:Src/main.c    **** 	
 1023              		.loc 1 1195 0
 1024 00f2 4449     		ldr	r1, .L78+64
 1025 00f4 CA54     		strb	r2, [r1, r3]
1197:Src/main.c    **** 				{
 1026              		.loc 1 1197 0
 1027 00f6 002A     		cmp	r2, #0
 1028 00f8 92D0     		beq	.L75
 1029              	.L56:
1219:Src/main.c    **** 			{
 1030              		.loc 1 1219 0
 1031 00fa 3C4B     		ldr	r3, .L78+40
 1032 00fc 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 1033 00fe 324B     		ldr	r3, .L78+4
 1034 0100 5B5D     		ldrb	r3, [r3, r5]	@ zero_extendqisi2
 1035 0102 012B     		cmp	r3, #1
 1036 0104 B9D0     		beq	.L76
 1037              	.L59:
1230:Src/main.c    **** 			{
 1038              		.loc 1 1230 0
 1039 0106 394B     		ldr	r3, .L78+40
 1040 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccUr6nXF.s 			page 95


 1041 010a 394A     		ldr	r2, .L78+44
 1042 010c D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1043 010e 3949     		ldr	r1, .L78+48
 1044 0110 C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 1045 0112 8A42     		cmp	r2, r1
 1046 0114 CFD0     		beq	.L61
1232:Src/main.c    **** 	
 1047              		.loc 1 1232 0
 1048 0116 3749     		ldr	r1, .L78+48
 1049 0118 CA54     		strb	r2, [r1, r3]
1234:Src/main.c    **** 				{
 1050              		.loc 1 1234 0
 1051 011a 142A     		cmp	r2, #20
 1052 011c CBD0     		beq	.L61
1236:Src/main.c    **** 
 1053              		.loc 1 1236 0
 1054 011e 2546     		mov	r5, r4
 1055 0120 2D4B     		ldr	r3, .L78+20
 1056 0122 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1057 0124 324B     		ldr	r3, .L78+44
 1058 0126 195D     		ldrb	r1, [r3, r4]	@ zero_extendqisi2
 1059 0128 2046     		mov	r0, r4
 1060 012a FFF7FEFF 		bl	VS4210_SetInModeOutMode
 1061              	.LVL80:
1238:Src/main.c    **** 					VXISI2CWrite( 0x19, 0x01 );
 1062              		.loc 1 1238 0
 1063 012e 324B     		ldr	r3, .L78+52
 1064 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1065 0132 012B     		cmp	r3, #1
 1066 0134 AED0     		beq	.L77
 1067              	.L62:
1242:Src/main.c    **** 
 1068              		.loc 1 1242 0
 1069 0136 344B     		ldr	r3, .L78+68
 1070 0138 33F81530 		ldrh	r3, [r3, r5, lsl #1]
 1071 013c 334A     		ldr	r2, .L78+72
 1072 013e 32F81520 		ldrh	r2, [r2, r5, lsl #1]
 1073 0142 3349     		ldr	r1, .L78+76
 1074 0144 31F81510 		ldrh	r1, [r1, r5, lsl #1]
 1075 0148 3248     		ldr	r0, .L78+80
 1076 014a 30F81500 		ldrh	r0, [r0, r5, lsl #1]
 1077 014e 0090     		str	r0, [sp]
 1078 0150 2046     		mov	r0, r4
 1079 0152 FFF7FEFF 		bl	VS4210_SetInputSizeHV
 1080              	.LVL81:
1245:Src/main.c    **** 
 1081              		.loc 1 1245 0
 1082 0156 264B     		ldr	r3, .L78+44
 1083 0158 5B5D     		ldrb	r3, [r3, r5]	@ zero_extendqisi2
 1084 015a 0193     		str	r3, [sp, #4]
 1085 015c 0135     		adds	r5, r5, #1
 1086 015e 0095     		str	r5, [sp]
 1087 0160 40F2DD43 		movw	r3, #1245
 1088 0164 194A     		ldr	r2, .L78+8
 1089 0166 1A49     		ldr	r1, .L78+12
 1090 0168 2B48     		ldr	r0, .L78+84
 1091 016a FFF7FEFF 		bl	printf
ARM GAS  /tmp/ccUr6nXF.s 			page 96


 1092              	.LVL82:
1257:Src/main.c    **** 					{
 1093              		.loc 1 1257 0
 1094 016e 1A4B     		ldr	r3, .L78+20
 1095 0170 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1096 0172 4BB1     		cbz	r3, .L63
1259:Src/main.c    **** 						Tim1_count = 0 ;
 1097              		.loc 1 1259 0
 1098 0174 0122     		movs	r2, #1
 1099 0176 194B     		ldr	r3, .L78+24
 1100 0178 1A60     		str	r2, [r3]
1260:Src/main.c    **** 						OSDStateFlg = 1 ;
 1101              		.loc 1 1260 0
 1102 017a 0023     		movs	r3, #0
 1103 017c 1849     		ldr	r1, .L78+28
 1104 017e 0B60     		str	r3, [r1]
1261:Src/main.c    **** 						OSDSecCount = 0 ;
 1105              		.loc 1 1261 0
 1106 0180 1849     		ldr	r1, .L78+32
 1107 0182 0A70     		strb	r2, [r1]
1262:Src/main.c    **** 					}
 1108              		.loc 1 1262 0
 1109 0184 184A     		ldr	r2, .L78+36
 1110 0186 1370     		strb	r3, [r2]
 1111              	.L63:
1265:Src/main.c    **** 						Set_Video_Loss_OSD(0,OFF);	
 1112              		.loc 1 1265 0
 1113 0188 1B4B     		ldr	r3, .L78+52
 1114 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1115 018c 002B     		cmp	r3, #0
 1116 018e 8AD1     		bne	.L64
1265:Src/main.c    **** 						Set_Video_Loss_OSD(0,OFF);	
 1117              		.loc 1 1265 0 is_stmt 0 discriminator 1
 1118 0190 164B     		ldr	r3, .L78+40
 1119 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1120 0194 002B     		cmp	r3, #0
 1121 0196 86D1     		bne	.L64
1266:Src/main.c    **** 
 1122              		.loc 1 1266 0 is_stmt 1
 1123 0198 0021     		movs	r1, #0
 1124 019a 0846     		mov	r0, r1
 1125 019c FFF7FEFF 		bl	Set_Video_Loss_OSD
 1126              	.LVL83:
 1127 01a0 81E7     		b	.L64
 1128              	.L71:
1268:Src/main.c    **** 							{
 1129              		.loc 1 1268 0 discriminator 1
 1130 01a2 124B     		ldr	r3, .L78+40
 1131 01a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1132 01a6 012B     		cmp	r3, #1
 1133 01a8 81D1     		bne	.L65
1270:Src/main.c    **** 							}
 1134              		.loc 1 1270 0
 1135 01aa 4021     		movs	r1, #64
 1136 01ac 4FF47A70 		mov	r0, #1000
 1137 01b0 FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 1138              	.LVL84:
ARM GAS  /tmp/ccUr6nXF.s 			page 97


 1139 01b4 7BE7     		b	.L65
 1140              	.L72:
1274:Src/main.c    **** 						//MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS);
 1141              		.loc 1 1274 0
 1142 01b6 0020     		movs	r0, #0
 1143 01b8 FFF7FEFF 		bl	SET_Audio_Mute
 1144              	.LVL85:
 1145 01bc 7BE7     		b	.L61
 1146              	.L73:
1279:Src/main.c    **** 
 1147              		.loc 1 1279 0
 1148 01be 03B0     		add	sp, sp, #12
 1149              	.LCFI17:
 1150              		.cfi_def_cfa_offset 12
 1151              		@ sp needed
 1152 01c0 30BD     		pop	{r4, r5, pc}
 1153              	.LVL86:
 1154              	.L79:
 1155 01c2 00BF     		.align	2
 1156              	.L78:
 1157 01c4 00000000 		.word	newInRes
 1158 01c8 00000000 		.word	.LANCHOR2
 1159 01cc 00000000 		.word	.LANCHOR4
 1160 01d0 00000000 		.word	.LC1
 1161 01d4 0C000000 		.word	.LC2
 1162 01d8 00000000 		.word	pVS4210_MutiWindows1
 1163 01dc 00000000 		.word	.LANCHOR5
 1164 01e0 00000000 		.word	.LANCHOR6
 1165 01e4 00000000 		.word	.LANCHOR7
 1166 01e8 00000000 		.word	.LANCHOR8
 1167 01ec 00000000 		.word	gHDMI_Index
 1168 01f0 00000000 		.word	gbVXIS_InputMode
 1169 01f4 00000000 		.word	.LANCHOR9
 1170 01f8 00000000 		.word	.LANCHOR10
 1171 01fc 00000000 		.word	PreVState
 1172 0200 00000000 		.word	VState
 1173 0204 00000000 		.word	.LANCHOR3
 1174 0208 00000000 		.word	gHTotal
 1175 020c 00000000 		.word	gVActive
 1176 0210 00000000 		.word	gHActive
 1177 0214 00000000 		.word	gVTotal
 1178 0218 34000000 		.word	.LC3
 1179              		.cfi_endproc
 1180              	.LFE74:
 1182              		.section	.text.InitialTimerEvent,"ax",%progbits
 1183              		.align	1
 1184              		.global	InitialTimerEvent
 1185              		.syntax unified
 1186              		.thumb
 1187              		.thumb_func
 1188              		.fpu softvfp
 1190              	InitialTimerEvent:
 1191              	.LFB71:
 400:Src/main.c    **** 	MCUTimerInitialTimerEvent();  //clear all of timer event	
 1192              		.loc 1 400 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccUr6nXF.s 			page 98


 1195              		@ frame_needed = 0, uses_anonymous_args = 0
 1196 0000 08B5     		push	{r3, lr}
 1197              	.LCFI18:
 1198              		.cfi_def_cfa_offset 8
 1199              		.cfi_offset 3, -8
 1200              		.cfi_offset 14, -4
 401:Src/main.c    **** 
 1201              		.loc 1 401 0
 1202 0002 FFF7FEFF 		bl	MCUTimerInitialTimerEvent
 1203              	.LVL87:
 421:Src/main.c    **** 
 1204              		.loc 1 421 0
 1205 0006 08BD     		pop	{r3, pc}
 1206              		.cfi_endproc
 1207              	.LFE71:
 1209              		.section	.text.GetRS232_CMD,"ax",%progbits
 1210              		.align	1
 1211              		.global	GetRS232_CMD
 1212              		.syntax unified
 1213              		.thumb
 1214              		.thumb_func
 1215              		.fpu softvfp
 1217              	GetRS232_CMD:
 1218              	.LFB72:
 424:Src/main.c    ****     char achstr[3] ;
 1219              		.loc 1 424 0
 1220              		.cfi_startproc
 1221              		@ args = 0, pretend = 0, frame = 8
 1222              		@ frame_needed = 0, uses_anonymous_args = 0
 428:Src/main.c    ****     {
 1223              		.loc 1 428 0
 1224 0000 174B     		ldr	r3, .L90
 1225 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1226 0004 012B     		cmp	r3, #1
 1227 0006 00D0     		beq	.L88
 1228 0008 7047     		bx	lr
 1229              	.L88:
 424:Src/main.c    ****     char achstr[3] ;
 1230              		.loc 1 424 0
 1231 000a 10B5     		push	{r4, lr}
 1232              	.LCFI19:
 1233              		.cfi_def_cfa_offset 8
 1234              		.cfi_offset 4, -8
 1235              		.cfi_offset 14, -4
 1236 000c 82B0     		sub	sp, sp, #8
 1237              	.LCFI20:
 1238              		.cfi_def_cfa_offset 16
 430:Src/main.c    ****         printf("RxBufIndex=%d,str=%s\r\n",RxBufIndex, gRxbuf);
 1239              		.loc 1 430 0
 1240 000e 144B     		ldr	r3, .L90
 1241 0010 0022     		movs	r2, #0
 1242 0012 1A70     		strb	r2, [r3]
 431:Src/main.c    ****         if ( RxBufIndex >= 4 )
 1243              		.loc 1 431 0
 1244 0014 134C     		ldr	r4, .L90+4
 1245 0016 2168     		ldr	r1, [r4]
 1246 0018 134A     		ldr	r2, .L90+8
ARM GAS  /tmp/ccUr6nXF.s 			page 99


 1247 001a 1448     		ldr	r0, .L90+12
 1248 001c FFF7FEFF 		bl	printf
 1249              	.LVL88:
 432:Src/main.c    ****         {
 1250              		.loc 1 432 0
 1251 0020 2368     		ldr	r3, [r4]
 1252 0022 032B     		cmp	r3, #3
 1253 0024 03DD     		ble	.L82
 434:Src/main.c    ****             {
 1254              		.loc 1 434 0
 1255 0026 104B     		ldr	r3, .L90+8
 1256 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1257 002a 472B     		cmp	r3, #71
 1258 002c 01D0     		beq	.L89
 1259              	.L82:
 446:Src/main.c    **** 
 1260              		.loc 1 446 0
 1261 002e 02B0     		add	sp, sp, #8
 1262              	.LCFI21:
 1263              		.cfi_remember_state
 1264              		.cfi_def_cfa_offset 8
 1265              		@ sp needed
 1266 0030 10BD     		pop	{r4, pc}
 1267              	.L89:
 1268              	.LCFI22:
 1269              		.cfi_restore_state
 434:Src/main.c    ****             {
 1270              		.loc 1 434 0 discriminator 1
 1271 0032 0D4B     		ldr	r3, .L90+8
 1272 0034 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1273 0036 672B     		cmp	r3, #103
 1274 0038 F9D1     		bne	.L82
 436:Src/main.c    ****                 memcpy(&achstr[0], &gRxbuf[1], 2 ) ;
 1275              		.loc 1 436 0
 1276 003a 0023     		movs	r3, #0
 1277 003c 8DF80630 		strb	r3, [sp, #6]
 437:Src/main.c    ****                 IrNum = strtol(achstr, &endptr, 16) ;
 1278              		.loc 1 437 0
 1279 0040 094B     		ldr	r3, .L90+8
 1280 0042 B3F80130 		ldrh	r3, [r3, #1]	@ unaligned
 1281 0046 ADF80430 		strh	r3, [sp, #4]	@ movhi
 438:Src/main.c    ****                 printf("IrNum=0x%02x\r\n",(int)IrNum);
 1282              		.loc 1 438 0
 1283 004a 1022     		movs	r2, #16
 1284 004c 6946     		mov	r1, sp
 1285 004e 01A8     		add	r0, sp, #4
 1286 0050 FFF7FEFF 		bl	strtol
 1287              	.LVL89:
 439:Src/main.c    ****             }
 1288              		.loc 1 439 0
 1289 0054 0146     		mov	r1, r0
 1290 0056 0648     		ldr	r0, .L90+16
 1291              	.LVL90:
 1292 0058 FFF7FEFF 		bl	printf
 1293              	.LVL91:
 446:Src/main.c    **** 
 1294              		.loc 1 446 0
ARM GAS  /tmp/ccUr6nXF.s 			page 100


 1295 005c E7E7     		b	.L82
 1296              	.L91:
 1297 005e 00BF     		.align	2
 1298              	.L90:
 1299 0060 00000000 		.word	.LANCHOR11
 1300 0064 00000000 		.word	.LANCHOR12
 1301 0068 00000000 		.word	.LANCHOR13
 1302 006c 00000000 		.word	.LC4
 1303 0070 18000000 		.word	.LC5
 1304              		.cfi_endproc
 1305              	.LFE72:
 1307              		.section	.text.setloopoutmode,"ax",%progbits
 1308              		.align	1
 1309              		.global	setloopoutmode
 1310              		.syntax unified
 1311              		.thumb
 1312              		.thumb_func
 1313              		.fpu softvfp
 1315              	setloopoutmode:
 1316              	.LFB73:
 450:Src/main.c    **** /*
 1317              		.loc 1 450 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 0
 1320              		@ frame_needed = 0, uses_anonymous_args = 0
 1321              	.LVL92:
 1322 0000 70B5     		push	{r4, r5, r6, lr}
 1323              	.LCFI23:
 1324              		.cfi_def_cfa_offset 16
 1325              		.cfi_offset 4, -16
 1326              		.cfi_offset 5, -12
 1327              		.cfi_offset 6, -8
 1328              		.cfi_offset 14, -4
 1329 0002 0446     		mov	r4, r0
 458:Src/main.c    ****     {
 1330              		.loc 1 458 0
 1331 0004 1328     		cmp	r0, #19
 1332 0006 25D8     		bhi	.L93
 1333 0008 DFE810F0 		tbh	[pc, r0, lsl #1]
 1334              	.L95:
 1335 000c 1400     		.2byte	(.L94-.L95)/2
 1336 000e 3900     		.2byte	(.L96-.L95)/2
 1337 0010 4A00     		.2byte	(.L97-.L95)/2
 1338 0012 5C00     		.2byte	(.L98-.L95)/2
 1339 0014 6E00     		.2byte	(.L99-.L95)/2
 1340 0016 9500     		.2byte	(.L100-.L95)/2
 1341 0018 2400     		.2byte	(.L93-.L95)/2
 1342 001a 2400     		.2byte	(.L93-.L95)/2
 1343 001c 2400     		.2byte	(.L93-.L95)/2
 1344 001e A400     		.2byte	(.L101-.L95)/2
 1345 0020 BA01     		.2byte	(.L102-.L95)/2
 1346 0022 BD00     		.2byte	(.L103-.L95)/2
 1347 0024 D600     		.2byte	(.L104-.L95)/2
 1348 0026 F000     		.2byte	(.L105-.L95)/2
 1349 0028 0A01     		.2byte	(.L106-.L95)/2
 1350 002a 2501     		.2byte	(.L107-.L95)/2
 1351 002c 3F01     		.2byte	(.L108-.L95)/2
ARM GAS  /tmp/ccUr6nXF.s 			page 101


 1352 002e 5901     		.2byte	(.L109-.L95)/2
 1353 0030 D401     		.2byte	(.L110-.L95)/2
 1354 0032 A001     		.2byte	(.L111-.L95)/2
 1355              		.p2align 1
 1356              	.L94:
 462:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1357              		.loc 1 462 0
 1358 0034 AE4B     		ldr	r3, .L113
 1359 0036 0022     		movs	r2, #0
 1360 0038 1A70     		strb	r2, [r3]
 463:Src/main.c    **** 	 OSD_MIRROR[0]=CAMA_M;
 1361              		.loc 1 463 0
 1362 003a 0125     		movs	r5, #1
 1363 003c 5D70     		strb	r5, [r3, #1]
 464:Src/main.c    **** 	 gabVXIS_Input_mirrorH[0]=CAMA_M;
 1364              		.loc 1 464 0
 1365 003e AD4B     		ldr	r3, .L113+4
 1366 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1367 0042 AD4A     		ldr	r2, .L113+8
 1368 0044 1370     		strb	r3, [r2]
 465:Src/main.c    ****         printf("VS4210_MODE0_w0\r\n") ;
 1369              		.loc 1 465 0
 1370 0046 AD4A     		ldr	r2, .L113+12
 1371 0048 1370     		strb	r3, [r2]
 466:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1372              		.loc 1 466 0
 1373 004a AD48     		ldr	r0, .L113+16
 1374              	.LVL93:
 1375 004c FFF7FEFF 		bl	puts
 1376              	.LVL94:
 467:Src/main.c    ****         break ;
 1377              		.loc 1 467 0
 1378 0050 AC4B     		ldr	r3, .L113+20
 1379 0052 1D70     		strb	r5, [r3]
 1380              	.L93:
1100:Src/main.c    **** 
 1381              		.loc 1 1100 0
 1382 0054 A648     		ldr	r0, .L113
 1383 0056 FFF7FEFF 		bl	VS4210_SetMutiWindows
 1384              	.LVL95:
1103:Src/main.c    **** 
 1385              		.loc 1 1103 0
 1386 005a 0120     		movs	r0, #1
 1387 005c FFF7FEFF 		bl	AudioMute
 1388              	.LVL96:
1105:Src/main.c    **** MCUTimerActiveTimerEvent(SEC(1),  _SYSTEM_TIMER_EVENT_AUDIO_CHANNEL_SELECT);
 1389              		.loc 1 1105 0
 1390 0060 3B20     		movs	r0, #59
 1391 0062 FFF7FEFF 		bl	MCUTimerCancelTimerEvent
 1392              	.LVL97:
1106:Src/main.c    **** AUDIO_SELECT(index);
 1393              		.loc 1 1106 0
 1394 0066 3B21     		movs	r1, #59
 1395 0068 4FF47A70 		mov	r0, #1000
 1396 006c FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 1397              	.LVL98:
1107:Src/main.c    **** 
ARM GAS  /tmp/ccUr6nXF.s 			page 102


 1398              		.loc 1 1107 0
 1399 0070 E4B2     		uxtb	r4, r4
 1400              	.LVL99:
 1401 0072 2046     		mov	r0, r4
 1402 0074 FFF7FEFF 		bl	AUDIO_SELECT
 1403              	.LVL100:
1109:Src/main.c    **** 
 1404              		.loc 1 1109 0
 1405 0078 A34B     		ldr	r3, .L113+24
 1406 007a 1C70     		strb	r4, [r3]
1113:Src/main.c    **** 
 1407              		.loc 1 1113 0
 1408 007c 70BD     		pop	{r4, r5, r6, pc}
 1409              	.LVL101:
 1410              	.L96:
 472:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 1411              		.loc 1 472 0
 1412 007e 9C4A     		ldr	r2, .L113
 1413 0080 0123     		movs	r3, #1
 1414 0082 1370     		strb	r3, [r2]
 473:Src/main.c    ****    	 OSD_MIRROR[0]=CAMB_M;
 1415              		.loc 1 473 0
 1416 0084 0221     		movs	r1, #2
 1417 0086 5170     		strb	r1, [r2, #1]
 474:Src/main.c    **** 	 gabVXIS_Input_mirrorH[1]=CAMB_M; 
 1418              		.loc 1 474 0
 1419 0088 A04A     		ldr	r2, .L113+28
 1420 008a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1421 008c 9A49     		ldr	r1, .L113+8
 1422 008e 0A70     		strb	r2, [r1]
 475:Src/main.c    **** 	 OSD_SPEAKER[0]=ON;
 1423              		.loc 1 475 0
 1424 0090 9A49     		ldr	r1, .L113+12
 1425 0092 4A70     		strb	r2, [r1, #1]
 476:Src/main.c    ****         printf("VS4210_MODE0_w1\r\n") ;
 1426              		.loc 1 476 0
 1427 0094 9B4A     		ldr	r2, .L113+20
 1428 0096 1370     		strb	r3, [r2]
 477:Src/main.c    ****         break ;
 1429              		.loc 1 477 0
 1430 0098 9D48     		ldr	r0, .L113+32
 1431              	.LVL102:
 1432 009a FFF7FEFF 		bl	puts
 1433              	.LVL103:
 478:Src/main.c    ****     }
 1434              		.loc 1 478 0
 1435 009e D9E7     		b	.L93
 1436              	.LVL104:
 1437              	.L97:
 482:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 1438              		.loc 1 482 0
 1439 00a0 934B     		ldr	r3, .L113
 1440 00a2 0222     		movs	r2, #2
 1441 00a4 1A70     		strb	r2, [r3]
 483:Src/main.c    **** 	 OSD_MIRROR[0]=CAMC_M;	
 1442              		.loc 1 483 0
 1443 00a6 0322     		movs	r2, #3
ARM GAS  /tmp/ccUr6nXF.s 			page 103


 1444 00a8 5A70     		strb	r2, [r3, #1]
 484:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 	 
 1445              		.loc 1 484 0
 1446 00aa 9A4B     		ldr	r3, .L113+36
 1447 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1448 00ae 924A     		ldr	r2, .L113+8
 1449 00b0 1370     		strb	r3, [r2]
 485:Src/main.c    **** 	 OSD_SPEAKER[0]=ON;
 1450              		.loc 1 485 0
 1451 00b2 924A     		ldr	r2, .L113+12
 1452 00b4 9370     		strb	r3, [r2, #2]
 486:Src/main.c    ****         printf("VS4210_MODE0_w2\r\n") ;
 1453              		.loc 1 486 0
 1454 00b6 934B     		ldr	r3, .L113+20
 1455 00b8 0122     		movs	r2, #1
 1456 00ba 1A70     		strb	r2, [r3]
 487:Src/main.c    ****         break ;
 1457              		.loc 1 487 0
 1458 00bc 9648     		ldr	r0, .L113+40
 1459              	.LVL105:
 1460 00be FFF7FEFF 		bl	puts
 1461              	.LVL106:
 488:Src/main.c    ****     }
 1462              		.loc 1 488 0
 1463 00c2 C7E7     		b	.L93
 1464              	.LVL107:
 1465              	.L98:
 492:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 1466              		.loc 1 492 0
 1467 00c4 8A4B     		ldr	r3, .L113
 1468 00c6 0322     		movs	r2, #3
 1469 00c8 1A70     		strb	r2, [r3]
 493:Src/main.c    ****    	OSD_MIRROR[0]=CAMR_M;	
 1470              		.loc 1 493 0
 1471 00ca 0422     		movs	r2, #4
 1472 00cc 5A70     		strb	r2, [r3, #1]
 494:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 		
 1473              		.loc 1 494 0
 1474 00ce 934B     		ldr	r3, .L113+44
 1475 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1476 00d2 894A     		ldr	r2, .L113+8
 1477 00d4 1370     		strb	r3, [r2]
 495:Src/main.c    ****   	OSD_SPEAKER[0]=ON;
 1478              		.loc 1 495 0
 1479 00d6 894A     		ldr	r2, .L113+12
 1480 00d8 D370     		strb	r3, [r2, #3]
 496:Src/main.c    ****         printf("VS4210_MODE0_w3\r\n") ;
 1481              		.loc 1 496 0
 1482 00da 8A4B     		ldr	r3, .L113+20
 1483 00dc 0122     		movs	r2, #1
 1484 00de 1A70     		strb	r2, [r3]
 497:Src/main.c    ****         break ;
 1485              		.loc 1 497 0
 1486 00e0 8F48     		ldr	r0, .L113+48
 1487              	.LVL108:
 1488 00e2 FFF7FEFF 		bl	puts
 1489              	.LVL109:
ARM GAS  /tmp/ccUr6nXF.s 			page 104


 498:Src/main.c    ****     }
 1490              		.loc 1 498 0
 1491 00e6 B5E7     		b	.L93
 1492              	.LVL110:
 1493              	.L99:
 502:Src/main.c    **** 	
 1494              		.loc 1 502 0
 1495 00e8 814B     		ldr	r3, .L113
 1496 00ea 1022     		movs	r2, #16
 1497 00ec 1A70     		strb	r2, [r3]
 504:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1498              		.loc 1 504 0
 1499 00ee 0121     		movs	r1, #1
 1500 00f0 5970     		strb	r1, [r3, #1]
 505:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 1501              		.loc 1 505 0
 1502 00f2 0222     		movs	r2, #2
 1503 00f4 9A70     		strb	r2, [r3, #2]
 506:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 1504              		.loc 1 506 0
 1505 00f6 0322     		movs	r2, #3
 1506 00f8 DA70     		strb	r2, [r3, #3]
 507:Src/main.c    ****    	  OSD_MIRROR[0]=CAMA_M;	
 1507              		.loc 1 507 0
 1508 00fa 0422     		movs	r2, #4
 1509 00fc 1A71     		strb	r2, [r3, #4]
 508:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 1510              		.loc 1 508 0
 1511 00fe 7D4B     		ldr	r3, .L113+4
 1512 0100 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 1513 0102 7D4B     		ldr	r3, .L113+8
 1514 0104 1E70     		strb	r6, [r3]
 509:Src/main.c    ****    	  OSD_MIRROR[2]=CAMC_M;	
 1515              		.loc 1 509 0
 1516 0106 814A     		ldr	r2, .L113+28
 1517 0108 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 1518 010a 5D70     		strb	r5, [r3, #1]
 510:Src/main.c    ****    	  OSD_MIRROR[3]=CAMR_M;	
 1519              		.loc 1 510 0
 1520 010c 814A     		ldr	r2, .L113+36
 1521 010e 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 1522              	.LVL111:
 1523 0110 9870     		strb	r0, [r3, #2]
 511:Src/main.c    **** 	gabVXIS_Input_mirrorH[0]=CAMA_M; 		  
 1524              		.loc 1 511 0
 1525 0112 824A     		ldr	r2, .L113+44
 1526 0114 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1527 0116 DA70     		strb	r2, [r3, #3]
 512:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 		  
 1528              		.loc 1 512 0
 1529 0118 784B     		ldr	r3, .L113+12
 1530 011a 1E70     		strb	r6, [r3]
 513:Src/main.c    **** 	gabVXIS_Input_mirrorH[2]=CAMC_M; 		  
 1531              		.loc 1 513 0
 1532 011c 5D70     		strb	r5, [r3, #1]
 514:Src/main.c    **** 	gabVXIS_Input_mirrorH[3]=CAMR_M; 		  
 1533              		.loc 1 514 0
ARM GAS  /tmp/ccUr6nXF.s 			page 105


 1534 011e 9870     		strb	r0, [r3, #2]
 515:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 1535              		.loc 1 515 0
 1536 0120 DA70     		strb	r2, [r3, #3]
 516:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;
 1537              		.loc 1 516 0
 1538 0122 784B     		ldr	r3, .L113+20
 1539 0124 0022     		movs	r2, #0
 1540 0126 1A70     		strb	r2, [r3]
 517:Src/main.c    **** 	  OSD_SPEAKER[2]=OFF;
 1541              		.loc 1 517 0
 1542 0128 5A70     		strb	r2, [r3, #1]
 518:Src/main.c    **** 	  OSD_SPEAKER[3]=ON;
 1543              		.loc 1 518 0
 1544 012a 9A70     		strb	r2, [r3, #2]
 519:Src/main.c    **** 
 1545              		.loc 1 519 0
 1546 012c D970     		strb	r1, [r3, #3]
 521:Src/main.c    ****         break ;
 1547              		.loc 1 521 0
 1548 012e 7D48     		ldr	r0, .L113+52
 1549 0130 FFF7FEFF 		bl	puts
 1550              	.LVL112:
 522:Src/main.c    ****     }
 1551              		.loc 1 522 0
 1552 0134 8EE7     		b	.L93
 1553              	.LVL113:
 1554              	.L100:
 527:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1555              		.loc 1 527 0
 1556 0136 6E4B     		ldr	r3, .L113
 1557 0138 2022     		movs	r2, #32
 1558 013a 1A70     		strb	r2, [r3]
 528:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1559              		.loc 1 528 0
 1560 013c 0122     		movs	r2, #1
 1561 013e 5A70     		strb	r2, [r3, #1]
 529:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap2 =3 ;
 1562              		.loc 1 529 0
 1563 0140 0222     		movs	r2, #2
 1564 0142 9A70     		strb	r2, [r3, #2]
 530:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap3 =4 ;
 1565              		.loc 1 530 0
 1566 0144 0322     		movs	r2, #3
 1567 0146 DA70     		strb	r2, [r3, #3]
 531:Src/main.c    ****         printf("VS4210_MODE2\r\n") ;
 1568              		.loc 1 531 0
 1569 0148 0422     		movs	r2, #4
 1570 014a 1A71     		strb	r2, [r3, #4]
 532:Src/main.c    ****         break ;
 1571              		.loc 1 532 0
 1572 014c 7648     		ldr	r0, .L113+56
 1573              	.LVL114:
 1574 014e FFF7FEFF 		bl	puts
 1575              	.LVL115:
 533:Src/main.c    ****     }
 1576              		.loc 1 533 0
ARM GAS  /tmp/ccUr6nXF.s 			page 106


 1577 0152 7FE7     		b	.L93
 1578              	.LVL116:
 1579              	.L101:
 912:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1580              		.loc 1 912 0
 1581 0154 664B     		ldr	r3, .L113
 1582 0156 4022     		movs	r2, #64
 1583 0158 1A70     		strb	r2, [r3]
 913:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1584              		.loc 1 913 0
 1585 015a 0122     		movs	r2, #1
 1586 015c 5A70     		strb	r2, [r3, #1]
 914:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 1587              		.loc 1 914 0
 1588 015e 0221     		movs	r1, #2
 1589 0160 9970     		strb	r1, [r3, #2]
 915:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 1590              		.loc 1 915 0
 1591 0162 644B     		ldr	r3, .L113+4
 1592 0164 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1593              	.LVL117:
 1594 0166 644B     		ldr	r3, .L113+8
 1595 0168 1870     		strb	r0, [r3]
 916:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 1596              		.loc 1 916 0
 1597 016a 6849     		ldr	r1, .L113+28
 1598 016c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1599 016e 5970     		strb	r1, [r3, #1]
 917:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
 1600              		.loc 1 917 0
 1601 0170 624B     		ldr	r3, .L113+12
 1602 0172 1870     		strb	r0, [r3]
 918:Src/main.c    ****   	OSD_SPEAKER[0]=ON;
 1603              		.loc 1 918 0
 1604 0174 5970     		strb	r1, [r3, #1]
 919:Src/main.c    ****   	OSD_SPEAKER[1]=OFF;
 1605              		.loc 1 919 0
 1606 0176 634B     		ldr	r3, .L113+20
 1607 0178 1A70     		strb	r2, [r3]
 920:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch2\r\n") ;
 1608              		.loc 1 920 0
 1609 017a 0022     		movs	r2, #0
 1610 017c 5A70     		strb	r2, [r3, #1]
 921:Src/main.c    ****         break ;
 1611              		.loc 1 921 0
 1612 017e 6B48     		ldr	r0, .L113+60
 1613 0180 FFF7FEFF 		bl	puts
 1614              	.LVL118:
 922:Src/main.c    ****     }
 1615              		.loc 1 922 0
 1616 0184 66E7     		b	.L93
 1617              	.LVL119:
 1618              	.L103:
 926:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1619              		.loc 1 926 0
 1620 0186 5A4B     		ldr	r3, .L113
 1621 0188 4022     		movs	r2, #64
ARM GAS  /tmp/ccUr6nXF.s 			page 107


 1622 018a 1A70     		strb	r2, [r3]
 927:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
 1623              		.loc 1 927 0
 1624 018c 0122     		movs	r2, #1
 1625 018e 5A70     		strb	r2, [r3, #1]
 928:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 1626              		.loc 1 928 0
 1627 0190 0421     		movs	r1, #4
 1628 0192 9970     		strb	r1, [r3, #2]
 929:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;
 1629              		.loc 1 929 0
 1630 0194 574B     		ldr	r3, .L113+4
 1631 0196 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1632              	.LVL120:
 1633 0198 574B     		ldr	r3, .L113+8
 1634 019a 1870     		strb	r0, [r3]
 930:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 1635              		.loc 1 930 0
 1636 019c 5F49     		ldr	r1, .L113+44
 1637 019e 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1638 01a0 5970     		strb	r1, [r3, #1]
 931:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 1639              		.loc 1 931 0
 1640 01a2 564B     		ldr	r3, .L113+12
 1641 01a4 1870     		strb	r0, [r3]
 932:Src/main.c    ****   	OSD_SPEAKER[0]=OFF;
 1642              		.loc 1 932 0
 1643 01a6 5970     		strb	r1, [r3, #1]
 933:Src/main.c    ****   	OSD_SPEAKER[1]=ON;	  
 1644              		.loc 1 933 0
 1645 01a8 564B     		ldr	r3, .L113+20
 1646 01aa 0021     		movs	r1, #0
 1647 01ac 1970     		strb	r1, [r3]
 934:Src/main.c    ****         printf("VS4210_MODE12 ch1 ch4\r\n") ;	
 1648              		.loc 1 934 0
 1649 01ae 5A70     		strb	r2, [r3, #1]
 935:Src/main.c    **** 	break;
 1650              		.loc 1 935 0
 1651 01b0 5F48     		ldr	r0, .L113+64
 1652 01b2 FFF7FEFF 		bl	puts
 1653              	.LVL121:
 936:Src/main.c    ****     	}
 1654              		.loc 1 936 0
 1655 01b6 4DE7     		b	.L93
 1656              	.LVL122:
 1657              	.L104:
 940:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 1658              		.loc 1 940 0
 1659 01b8 4D4B     		ldr	r3, .L113
 1660 01ba 4022     		movs	r2, #64
 1661 01bc 1A70     		strb	r2, [r3]
 941:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1662              		.loc 1 941 0
 1663 01be 0422     		movs	r2, #4
 1664 01c0 5A70     		strb	r2, [r3, #1]
 942:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 1665              		.loc 1 942 0
ARM GAS  /tmp/ccUr6nXF.s 			page 108


 1666 01c2 0222     		movs	r2, #2
 1667 01c4 9A70     		strb	r2, [r3, #2]
 943:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 1668              		.loc 1 943 0
 1669 01c6 554B     		ldr	r3, .L113+44
 1670 01c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1671 01ca 4B4B     		ldr	r3, .L113+8
 1672 01cc 1970     		strb	r1, [r3]
 944:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMR_M;			  
 1673              		.loc 1 944 0
 1674 01ce 4F4A     		ldr	r2, .L113+28
 1675 01d0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1676 01d2 5A70     		strb	r2, [r3, #1]
 945:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
 1677              		.loc 1 945 0
 1678 01d4 494B     		ldr	r3, .L113+12
 1679 01d6 1970     		strb	r1, [r3]
 946:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1680              		.loc 1 946 0
 1681 01d8 5A70     		strb	r2, [r3, #1]
 947:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 1682              		.loc 1 947 0
 1683 01da 4A4B     		ldr	r3, .L113+20
 1684 01dc 0122     		movs	r2, #1
 1685 01de 1A70     		strb	r2, [r3]
 948:Src/main.c    ****         printf("VS4210_MODE12 ch4 ch2\r\n") ;	
 1686              		.loc 1 948 0
 1687 01e0 0022     		movs	r2, #0
 1688 01e2 5A70     		strb	r2, [r3, #1]
 949:Src/main.c    **** 	break;
 1689              		.loc 1 949 0
 1690 01e4 5348     		ldr	r0, .L113+68
 1691              	.LVL123:
 1692 01e6 FFF7FEFF 		bl	puts
 1693              	.LVL124:
 950:Src/main.c    ****     	}
 1694              		.loc 1 950 0
 1695 01ea 33E7     		b	.L93
 1696              	.LVL125:
 1697              	.L105:
 954:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =4 ;
 1698              		.loc 1 954 0
 1699 01ec 404B     		ldr	r3, .L113
 1700 01ee 4022     		movs	r2, #64
 1701 01f0 1A70     		strb	r2, [r3]
 955:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 1702              		.loc 1 955 0
 1703 01f2 0422     		movs	r2, #4
 1704 01f4 5A70     		strb	r2, [r3, #1]
 956:Src/main.c    **** 	  OSD_MIRROR[0]=CAMR_M;	
 1705              		.loc 1 956 0
 1706 01f6 0322     		movs	r2, #3
 1707 01f8 9A70     		strb	r2, [r3, #2]
 957:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 1708              		.loc 1 957 0
 1709 01fa 484B     		ldr	r3, .L113+44
 1710 01fc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccUr6nXF.s 			page 109


 1711 01fe 3E4B     		ldr	r3, .L113+8
 1712 0200 1970     		strb	r1, [r3]
 958:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMR_M;			  
 1713              		.loc 1 958 0
 1714 0202 444A     		ldr	r2, .L113+36
 1715 0204 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1716 0206 5A70     		strb	r2, [r3, #1]
 959:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 1717              		.loc 1 959 0
 1718 0208 3C4B     		ldr	r3, .L113+12
 1719 020a 1970     		strb	r1, [r3]
 960:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1720              		.loc 1 960 0
 1721 020c 5A70     		strb	r2, [r3, #1]
 961:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 1722              		.loc 1 961 0
 1723 020e 3D4B     		ldr	r3, .L113+20
 1724 0210 0122     		movs	r2, #1
 1725 0212 1A70     		strb	r2, [r3]
 962:Src/main.c    ****         printf("VS4210_MODE12 ch4 ch3\r\n") ;	
 1726              		.loc 1 962 0
 1727 0214 0022     		movs	r2, #0
 1728 0216 5A70     		strb	r2, [r3, #1]
 963:Src/main.c    **** 	break;
 1729              		.loc 1 963 0
 1730 0218 4748     		ldr	r0, .L113+72
 1731              	.LVL126:
 1732 021a FFF7FEFF 		bl	puts
 1733              	.LVL127:
 964:Src/main.c    ****     	}
 1734              		.loc 1 964 0
 1735 021e 19E7     		b	.L93
 1736              	.LVL128:
 1737              	.L106:
 969:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 1738              		.loc 1 969 0
 1739 0220 334B     		ldr	r3, .L113
 1740 0222 4022     		movs	r2, #64
 1741 0224 1A70     		strb	r2, [r3]
 970:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 1742              		.loc 1 970 0
 1743 0226 0222     		movs	r2, #2
 1744 0228 5A70     		strb	r2, [r3, #1]
 971:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 1745              		.loc 1 971 0
 1746 022a 0122     		movs	r2, #1
 1747 022c 9A70     		strb	r2, [r3, #2]
 972:Src/main.c    ****    	  OSD_MIRROR[1]=CAMA_M;	
 1748              		.loc 1 972 0
 1749 022e 374B     		ldr	r3, .L113+28
 1750 0230 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1751 0232 314B     		ldr	r3, .L113+8
 1752 0234 1970     		strb	r1, [r3]
 973:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 1753              		.loc 1 973 0
 1754 0236 2F48     		ldr	r0, .L113+4
 1755              	.LVL129:
ARM GAS  /tmp/ccUr6nXF.s 			page 110


 1756 0238 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1757 023a 5870     		strb	r0, [r3, #1]
 974:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 1758              		.loc 1 974 0
 1759 023c 2F4B     		ldr	r3, .L113+12
 1760 023e 1970     		strb	r1, [r3]
 975:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1761              		.loc 1 975 0
 1762 0240 3649     		ldr	r1, .L113+44
 1763 0242 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1764 0244 5970     		strb	r1, [r3, #1]
 976:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 1765              		.loc 1 976 0
 1766 0246 2F4B     		ldr	r3, .L113+20
 1767 0248 1A70     		strb	r2, [r3]
 977:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch1\r\n") ;	
 1768              		.loc 1 977 0
 1769 024a 0022     		movs	r2, #0
 1770 024c 5A70     		strb	r2, [r3, #1]
 978:Src/main.c    **** 	break;
 1771              		.loc 1 978 0
 1772 024e 3B48     		ldr	r0, .L113+76
 1773 0250 FFF7FEFF 		bl	puts
 1774              	.LVL130:
 979:Src/main.c    ****     	}
 1775              		.loc 1 979 0
 1776 0254 FEE6     		b	.L93
 1777              	.LVL131:
 1778              	.L107:
 983:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2 ;
 1779              		.loc 1 983 0
 1780 0256 264B     		ldr	r3, .L113
 1781 0258 4022     		movs	r2, #64
 1782 025a 1A70     		strb	r2, [r3]
 984:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 1783              		.loc 1 984 0
 1784 025c 0222     		movs	r2, #2
 1785 025e 5A70     		strb	r2, [r3, #1]
 985:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 1786              		.loc 1 985 0
 1787 0260 0322     		movs	r2, #3
 1788 0262 9A70     		strb	r2, [r3, #2]
 986:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 1789              		.loc 1 986 0
 1790 0264 294B     		ldr	r3, .L113+28
 1791 0266 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1792 0268 234B     		ldr	r3, .L113+8
 1793 026a 1970     		strb	r1, [r3]
 987:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 1794              		.loc 1 987 0
 1795 026c 294A     		ldr	r2, .L113+36
 1796 026e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1797 0270 5A70     		strb	r2, [r3, #1]
 988:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 1798              		.loc 1 988 0
 1799 0272 224B     		ldr	r3, .L113+12
 1800 0274 1970     		strb	r1, [r3]
ARM GAS  /tmp/ccUr6nXF.s 			page 111


 989:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1801              		.loc 1 989 0
 1802 0276 5A70     		strb	r2, [r3, #1]
 990:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;		  
 1803              		.loc 1 990 0
 1804 0278 224B     		ldr	r3, .L113+20
 1805 027a 0122     		movs	r2, #1
 1806 027c 1A70     		strb	r2, [r3]
 991:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch3\r\n") ;	
 1807              		.loc 1 991 0
 1808 027e 0022     		movs	r2, #0
 1809 0280 5A70     		strb	r2, [r3, #1]
 992:Src/main.c    **** 	break;
 1810              		.loc 1 992 0
 1811 0282 2F48     		ldr	r0, .L113+80
 1812              	.LVL132:
 1813 0284 FFF7FEFF 		bl	puts
 1814              	.LVL133:
 993:Src/main.c    ****     	}
 1815              		.loc 1 993 0
 1816 0288 E4E6     		b	.L93
 1817              	.LVL134:
 1818              	.L108:
 997:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =2;
 1819              		.loc 1 997 0
 1820 028a 194B     		ldr	r3, .L113
 1821 028c 4022     		movs	r2, #64
 1822 028e 1A70     		strb	r2, [r3]
 998:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
 1823              		.loc 1 998 0
 1824 0290 0222     		movs	r2, #2
 1825 0292 5A70     		strb	r2, [r3, #1]
 999:Src/main.c    **** 	  OSD_MIRROR[0]=CAMB_M;	
 1826              		.loc 1 999 0
 1827 0294 0422     		movs	r2, #4
 1828 0296 9A70     		strb	r2, [r3, #2]
1000:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;	
 1829              		.loc 1 1000 0
 1830 0298 1C4B     		ldr	r3, .L113+28
 1831 029a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1832 029c 164B     		ldr	r3, .L113+8
 1833 029e 1970     		strb	r1, [r3]
1001:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMB_M;			  
 1834              		.loc 1 1001 0
 1835 02a0 1E4A     		ldr	r2, .L113+44
 1836 02a2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1837 02a4 5A70     		strb	r2, [r3, #1]
1002:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 1838              		.loc 1 1002 0
 1839 02a6 154B     		ldr	r3, .L113+12
 1840 02a8 1970     		strb	r1, [r3]
1003:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 1841              		.loc 1 1003 0
 1842 02aa 5A70     		strb	r2, [r3, #1]
1004:Src/main.c    **** 	  OSD_SPEAKER[1]=ON;		  
 1843              		.loc 1 1004 0
 1844 02ac 154B     		ldr	r3, .L113+20
ARM GAS  /tmp/ccUr6nXF.s 			page 112


 1845 02ae 0022     		movs	r2, #0
 1846 02b0 1A70     		strb	r2, [r3]
1005:Src/main.c    ****         printf("VS4210_MODE12 ch2 ch4\r\n") ;	
 1847              		.loc 1 1005 0
 1848 02b2 0122     		movs	r2, #1
 1849 02b4 5A70     		strb	r2, [r3, #1]
1006:Src/main.c    **** 	break;
 1850              		.loc 1 1006 0
 1851 02b6 2348     		ldr	r0, .L113+84
 1852              	.LVL135:
 1853 02b8 FFF7FEFF 		bl	puts
 1854              	.LVL136:
1007:Src/main.c    ****     	}
 1855              		.loc 1 1007 0
 1856 02bc CAE6     		b	.L93
 1857              	.LVL137:
 1858              	.L109:
1013:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =1 ;
 1859              		.loc 1 1013 0
 1860 02be 0C4B     		ldr	r3, .L113
 1861 02c0 4022     		movs	r2, #64
 1862 02c2 1A70     		strb	r2, [r3]
1014:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =3 ;
 1863              		.loc 1 1014 0
 1864 02c4 0122     		movs	r2, #1
 1865 02c6 5A70     		strb	r2, [r3, #1]
1015:Src/main.c    **** 	  OSD_MIRROR[0]=CAMA_M;	
 1866              		.loc 1 1015 0
 1867 02c8 0321     		movs	r1, #3
 1868 02ca 9970     		strb	r1, [r3, #2]
1016:Src/main.c    ****    	  OSD_MIRROR[1]=CAMC_M;	
 1869              		.loc 1 1016 0
 1870 02cc 094B     		ldr	r3, .L113+4
 1871 02ce 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1872              	.LVL138:
 1873 02d0 094B     		ldr	r3, .L113+8
 1874 02d2 1870     		strb	r0, [r3]
1017:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMA_M;			  
 1875              		.loc 1 1017 0
 1876 02d4 0F49     		ldr	r1, .L113+36
 1877 02d6 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1878 02d8 5970     		strb	r1, [r3, #1]
1018:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMC_M; 	  
 1879              		.loc 1 1018 0
 1880 02da 084B     		ldr	r3, .L113+12
 1881 02dc 1870     		strb	r0, [r3]
1019:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1882              		.loc 1 1019 0
 1883 02de 5970     		strb	r1, [r3, #1]
1020:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
 1884              		.loc 1 1020 0
 1885 02e0 084B     		ldr	r3, .L113+20
 1886 02e2 1A70     		strb	r2, [r3]
1021:Src/main.c    **** 	  
 1887              		.loc 1 1021 0
 1888 02e4 0022     		movs	r2, #0
 1889 02e6 5A70     		strb	r2, [r3, #1]
ARM GAS  /tmp/ccUr6nXF.s 			page 113


1023:Src/main.c    **** 	break;
 1890              		.loc 1 1023 0
 1891 02e8 1748     		ldr	r0, .L113+88
 1892 02ea FFF7FEFF 		bl	puts
 1893              	.LVL139:
1024:Src/main.c    ****     	}
 1894              		.loc 1 1024 0
 1895 02ee B1E6     		b	.L93
 1896              	.L114:
 1897              		.align	2
 1898              	.L113:
 1899 02f0 00000000 		.word	pVS4210_JointKind1
 1900 02f4 00000000 		.word	CAMA_M
 1901 02f8 00000000 		.word	.LANCHOR14
 1902 02fc 00000000 		.word	gabVXIS_Input_mirrorH
 1903 0300 00000000 		.word	.LC6
 1904 0304 00000000 		.word	.LANCHOR15
 1905 0308 00000000 		.word	.LANCHOR16
 1906 030c 00000000 		.word	CAMB_M
 1907 0310 14000000 		.word	.LC7
 1908 0314 00000000 		.word	CAMC_M
 1909 0318 28000000 		.word	.LC8
 1910 031c 00000000 		.word	CAMR_M
 1911 0320 3C000000 		.word	.LC9
 1912 0324 50000000 		.word	.LC10
 1913 0328 60000000 		.word	.LC11
 1914 032c 70000000 		.word	.LC12
 1915 0330 88000000 		.word	.LC13
 1916 0334 A0000000 		.word	.LC14
 1917 0338 B8000000 		.word	.LC15
 1918 033c D0000000 		.word	.LC16
 1919 0340 E8000000 		.word	.LC17
 1920 0344 00010000 		.word	.LC18
 1921 0348 18010000 		.word	.LC19
 1922              	.LVL140:
 1923              	.L111:
1028:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 1924              		.loc 1 1028 0
 1925 034c 264B     		ldr	r3, .L115
 1926 034e 4022     		movs	r2, #64
 1927 0350 1A70     		strb	r2, [r3]
1029:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =2 ;
 1928              		.loc 1 1029 0
 1929 0352 0322     		movs	r2, #3
 1930 0354 5A70     		strb	r2, [r3, #1]
1030:Src/main.c    **** 	  OSD_MIRROR[0]=CAMC_M;	
 1931              		.loc 1 1030 0
 1932 0356 0222     		movs	r2, #2
 1933 0358 9A70     		strb	r2, [r3, #2]
1031:Src/main.c    ****    	  OSD_MIRROR[1]=CAMB_M;	
 1934              		.loc 1 1031 0
 1935 035a 244B     		ldr	r3, .L115+4
 1936 035c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1937 035e 244B     		ldr	r3, .L115+8
 1938 0360 1970     		strb	r1, [r3]
1032:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
 1939              		.loc 1 1032 0
ARM GAS  /tmp/ccUr6nXF.s 			page 114


 1940 0362 244A     		ldr	r2, .L115+12
 1941 0364 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1942 0366 5A70     		strb	r2, [r3, #1]
1033:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMB_M; 	  
 1943              		.loc 1 1033 0
 1944 0368 234B     		ldr	r3, .L115+16
 1945 036a 1970     		strb	r1, [r3]
1034:Src/main.c    **** 	  OSD_SPEAKER[0]=ON;
 1946              		.loc 1 1034 0
 1947 036c 5A70     		strb	r2, [r3, #1]
1035:Src/main.c    **** 	  OSD_SPEAKER[1]=OFF;	
 1948              		.loc 1 1035 0
 1949 036e 234B     		ldr	r3, .L115+20
 1950 0370 0122     		movs	r2, #1
 1951 0372 1A70     		strb	r2, [r3]
1036:Src/main.c    **** 	  
 1952              		.loc 1 1036 0
 1953 0374 0022     		movs	r2, #0
 1954 0376 5A70     		strb	r2, [r3, #1]
1038:Src/main.c    **** 	break;
 1955              		.loc 1 1038 0
 1956 0378 2148     		ldr	r0, .L115+24
 1957              	.LVL141:
 1958 037a FFF7FEFF 		bl	puts
 1959              	.LVL142:
1039:Src/main.c    ****     	}
 1960              		.loc 1 1039 0
 1961 037e 69E6     		b	.L93
 1962              	.LVL143:
 1963              	.L102:
1044:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 1964              		.loc 1 1044 0
 1965 0380 194B     		ldr	r3, .L115
 1966 0382 4022     		movs	r2, #64
 1967 0384 1A70     		strb	r2, [r3]
1045:Src/main.c    ****         pVS4210_JointKind1.WindowMap.WMap1 =4 ;
 1968              		.loc 1 1045 0
 1969 0386 0322     		movs	r2, #3
 1970 0388 5A70     		strb	r2, [r3, #1]
1046:Src/main.c    **** 	  OSD_MIRROR[0]=CAMC_M;	
 1971              		.loc 1 1046 0
 1972 038a 0422     		movs	r2, #4
 1973 038c 9A70     		strb	r2, [r3, #2]
1047:Src/main.c    ****    	  OSD_MIRROR[1]=CAMR_M;	
 1974              		.loc 1 1047 0
 1975 038e 174B     		ldr	r3, .L115+4
 1976 0390 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1977 0392 174B     		ldr	r3, .L115+8
 1978 0394 1970     		strb	r1, [r3]
1048:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
 1979              		.loc 1 1048 0
 1980 0396 1B4A     		ldr	r2, .L115+28
 1981 0398 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1982 039a 5A70     		strb	r2, [r3, #1]
1049:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMR_M; 	  
 1983              		.loc 1 1049 0
 1984 039c 164B     		ldr	r3, .L115+16
ARM GAS  /tmp/ccUr6nXF.s 			page 115


 1985 039e 1970     		strb	r1, [r3]
1050:Src/main.c    **** 	  OSD_SPEAKER[0]=OFF;
 1986              		.loc 1 1050 0
 1987 03a0 5A70     		strb	r2, [r3, #1]
1051:Src/main.c    **** 	  OSD_SPEAKER[1]=ON;	
 1988              		.loc 1 1051 0
 1989 03a2 164B     		ldr	r3, .L115+20
 1990 03a4 0022     		movs	r2, #0
 1991 03a6 1A70     		strb	r2, [r3]
1052:Src/main.c    **** 	  
 1992              		.loc 1 1052 0
 1993 03a8 0122     		movs	r2, #1
 1994 03aa 5A70     		strb	r2, [r3, #1]
1054:Src/main.c    ****         break ;
 1995              		.loc 1 1054 0
 1996 03ac 1648     		ldr	r0, .L115+32
 1997              	.LVL144:
 1998 03ae FFF7FEFF 		bl	puts
 1999              	.LVL145:
1055:Src/main.c    ****     }
 2000              		.loc 1 1055 0
 2001 03b2 4FE6     		b	.L93
 2002              	.LVL146:
 2003              	.L110:
1061:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap0 =3 ;
 2004              		.loc 1 1061 0
 2005 03b4 0C4B     		ldr	r3, .L115
 2006 03b6 4022     		movs	r2, #64
 2007 03b8 1A70     		strb	r2, [r3]
1062:Src/main.c    **** 	pVS4210_JointKind1.WindowMap.WMap1 =1 ;
 2008              		.loc 1 1062 0
 2009 03ba 0322     		movs	r2, #3
 2010 03bc 5A70     		strb	r2, [r3, #1]
1063:Src/main.c    ****   OSD_MIRROR[0]=CAMC_M; 
 2011              		.loc 1 1063 0
 2012 03be 0122     		movs	r2, #1
 2013 03c0 9A70     		strb	r2, [r3, #2]
1064:Src/main.c    ****   OSD_MIRROR[1]=CAMA_M; 
 2014              		.loc 1 1064 0
 2015 03c2 0A4B     		ldr	r3, .L115+4
 2016 03c4 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2017              	.LVL147:
 2018 03c6 0A4B     		ldr	r3, .L115+8
 2019 03c8 1870     		strb	r0, [r3]
1065:Src/main.c    ****        gabVXIS_Input_mirrorH[0]=CAMC_M;			  
 2020              		.loc 1 1065 0
 2021 03ca 1049     		ldr	r1, .L115+36
 2022 03cc 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2023 03ce 5970     		strb	r1, [r3, #1]
1066:Src/main.c    **** 	gabVXIS_Input_mirrorH[1]=CAMA_M;   
 2024              		.loc 1 1066 0
 2025 03d0 094B     		ldr	r3, .L115+16
 2026 03d2 1870     		strb	r0, [r3]
1067:Src/main.c    ****   OSD_SPEAKER[0]=ON;
 2027              		.loc 1 1067 0
 2028 03d4 5970     		strb	r1, [r3, #1]
1068:Src/main.c    ****   OSD_SPEAKER[1]=OFF;	
ARM GAS  /tmp/ccUr6nXF.s 			page 116


 2029              		.loc 1 1068 0
 2030 03d6 094B     		ldr	r3, .L115+20
 2031 03d8 1A70     		strb	r2, [r3]
1069:Src/main.c    ****   
 2032              		.loc 1 1069 0
 2033 03da 0022     		movs	r2, #0
 2034 03dc 5A70     		strb	r2, [r3, #1]
1071:Src/main.c    **** break;
 2035              		.loc 1 1071 0
 2036 03de 0C48     		ldr	r0, .L115+40
 2037 03e0 FFF7FEFF 		bl	puts
 2038              	.LVL148:
1072:Src/main.c    **** 	}
 2039              		.loc 1 1072 0
 2040 03e4 36E6     		b	.L93
 2041              	.L116:
 2042 03e6 00BF     		.align	2
 2043              	.L115:
 2044 03e8 00000000 		.word	pVS4210_JointKind1
 2045 03ec 00000000 		.word	CAMC_M
 2046 03f0 00000000 		.word	.LANCHOR14
 2047 03f4 00000000 		.word	CAMB_M
 2048 03f8 00000000 		.word	gabVXIS_Input_mirrorH
 2049 03fc 00000000 		.word	.LANCHOR15
 2050 0400 30010000 		.word	.LC20
 2051 0404 00000000 		.word	CAMR_M
 2052 0408 48010000 		.word	.LC21
 2053 040c 00000000 		.word	CAMA_M
 2054 0410 60010000 		.word	.LC22
 2055              		.cfi_endproc
 2056              	.LFE73:
 2058              		.section	.text.main_init,"ax",%progbits
 2059              		.align	1
 2060              		.global	main_init
 2061              		.syntax unified
 2062              		.thumb
 2063              		.thumb_func
 2064              		.fpu softvfp
 2066              	main_init:
 2067              	.LFB76:
1306:Src/main.c    **** 
 2068              		.loc 1 1306 0
 2069              		.cfi_startproc
 2070              		@ args = 0, pretend = 0, frame = 0
 2071              		@ frame_needed = 0, uses_anonymous_args = 0
 2072 0000 38B5     		push	{r3, r4, r5, lr}
 2073              	.LCFI24:
 2074              		.cfi_def_cfa_offset 16
 2075              		.cfi_offset 3, -16
 2076              		.cfi_offset 4, -12
 2077              		.cfi_offset 5, -8
 2078              		.cfi_offset 14, -4
1310:Src/main.c    **** 		Printf("\r\nPrev.FW:%04x\r\n", rev);
 2079              		.loc 1 1310 0
 2080 0002 FFF7FEFF 		bl	GetFWRevEE
 2081              	.LVL149:
 2082 0006 0446     		mov	r4, r0
ARM GAS  /tmp/ccUr6nXF.s 			page 117


 2083              	.LVL150:
1311:Src/main.c    **** 		
 2084              		.loc 1 1311 0
 2085 0008 0146     		mov	r1, r0
 2086 000a 1A48     		ldr	r0, .L125
 2087              	.LVL151:
 2088 000c FFF7FEFF 		bl	Printf
 2089              	.LVL152:
1313:Src/main.c    **** 		{					
 2090              		.loc 1 1313 0
 2091 0010 FFF7FEFF 		bl	GetFWRevEE
 2092              	.LVL153:
 2093 0014 B0F5805F 		cmp	r0, #4096
 2094 0018 0BD1     		bne	.L123
 2095              	.L118:
1320:Src/main.c    **** 		{					// exist EEPROM
 2096              		.loc 1 1320 0
 2097 001a FFF7FEFF 		bl	GetFWRevEE
 2098              	.LVL154:
 2099 001e B0F5805F 		cmp	r0, #4096
 2100 0022 1DD1     		bne	.L119
1322:Src/main.c    **** 				{
 2101              		.loc 1 1322 0
 2102 0024 B4F5805F 		cmp	r4, #4096
 2103 0028 14D1     		bne	.L124
 2104              	.L120:
1343:Src/main.c    **** 	
 2105              		.loc 1 1343 0
 2106 002a 6420     		movs	r0, #100
 2107 002c FFF7FEFF 		bl	delay
 2108              	.LVL155:
 2109              	.L117:
1349:Src/main.c    **** 
 2110              		.loc 1 1349 0
 2111 0030 38BD     		pop	{r3, r4, r5, pc}
 2112              	.LVL156:
 2113              	.L123:
1315:Src/main.c    **** 			SaveFWRevEE(FWVER);
 2114              		.loc 1 1315 0
 2115 0032 114D     		ldr	r5, .L125+4
 2116 0034 4FF48051 		mov	r1, #4096
 2117 0038 2846     		mov	r0, r5
 2118 003a FFF7FEFF 		bl	Printf
 2119              	.LVL157:
1316:Src/main.c    **** 			Printf("\r\nCurr.FW:%04x", (WORD)GetFWRevEE());
 2120              		.loc 1 1316 0
 2121 003e 4FF48050 		mov	r0, #4096
 2122 0042 FFF7FEFF 		bl	SaveFWRevEE
 2123              	.LVL158:
1317:Src/main.c    **** 		}
 2124              		.loc 1 1317 0
 2125 0046 FFF7FEFF 		bl	GetFWRevEE
 2126              	.LVL159:
 2127 004a 0146     		mov	r1, r0
 2128 004c 2846     		mov	r0, r5
 2129 004e FFF7FEFF 		bl	Printf
 2130              	.LVL160:
ARM GAS  /tmp/ccUr6nXF.s 			page 118


 2131 0052 E2E7     		b	.L118
 2132              	.L124:
1324:Src/main.c    **** 			
 2133              		.loc 1 1324 0
 2134 0054 FFF7FEFF 		bl	ClearBasicEE
 2135              	.LVL161:
1326:Src/main.c    **** 				}
 2136              		.loc 1 1326 0
 2137 0058 0848     		ldr	r0, .L125+8
 2138 005a FFF7FEFF 		bl	Printf
 2139              	.LVL162:
 2140 005e E4E7     		b	.L120
 2141              	.L119:
1336:Src/main.c    **** 			Printf("\r\nNo initialize");
 2142              		.loc 1 1336 0
 2143 0060 0748     		ldr	r0, .L125+12
 2144 0062 FFF7FEFF 		bl	Printf
 2145              	.LVL163:
1337:Src/main.c    **** 			DebugLevel = 0xff;
 2146              		.loc 1 1337 0
 2147 0066 0748     		ldr	r0, .L125+16
 2148 0068 FFF7FEFF 		bl	Printf
 2149              	.LVL164:
1338:Src/main.c    **** 			return;
 2150              		.loc 1 1338 0
 2151 006c 064B     		ldr	r3, .L125+20
 2152 006e FF22     		movs	r2, #255
 2153 0070 1A70     		strb	r2, [r3]
1339:Src/main.c    **** 		}
 2154              		.loc 1 1339 0
 2155 0072 DDE7     		b	.L117
 2156              	.L126:
 2157              		.align	2
 2158              	.L125:
 2159 0074 00000000 		.word	.LC23
 2160 0078 14000000 		.word	.LC24
 2161 007c 24000000 		.word	.LC25
 2162 0080 60000000 		.word	.LC26
 2163 0084 7C000000 		.word	.LC27
 2164 0088 00000000 		.word	DebugLevel
 2165              		.cfi_endproc
 2166              	.LFE76:
 2168              		.section	.text.LCDPowerON,"ax",%progbits
 2169              		.align	1
 2170              		.global	LCDPowerON
 2171              		.syntax unified
 2172              		.thumb
 2173              		.thumb_func
 2174              		.fpu softvfp
 2176              	LCDPowerON:
 2177              	.LFB78:
1448:Src/main.c    **** /*
 2178              		.loc 1 1448 0
 2179              		.cfi_startproc
 2180              		@ args = 0, pretend = 0, frame = 0
 2181              		@ frame_needed = 0, uses_anonymous_args = 0
 2182              		@ link register save eliminated.
ARM GAS  /tmp/ccUr6nXF.s 			page 119


1470:Src/main.c    **** 
 2183              		.loc 1 1470 0
 2184 0000 7047     		bx	lr
 2185              		.cfi_endproc
 2186              	.LFE78:
 2188              		.section	.text.LCDPowerOFF,"ax",%progbits
 2189              		.align	1
 2190              		.global	LCDPowerOFF
 2191              		.syntax unified
 2192              		.thumb
 2193              		.thumb_func
 2194              		.fpu softvfp
 2196              	LCDPowerOFF:
 2197              	.LFB79:
1473:Src/main.c    **** /*
 2198              		.loc 1 1473 0
 2199              		.cfi_startproc
 2200              		@ args = 0, pretend = 0, frame = 0
 2201              		@ frame_needed = 0, uses_anonymous_args = 0
 2202              		@ link register save eliminated.
1508:Src/main.c    **** 
 2203              		.loc 1 1508 0
 2204 0000 7047     		bx	lr
 2205              		.cfi_endproc
 2206              	.LFE79:
 2208              		.section	.text.uComOnChipInitial,"ax",%progbits
 2209              		.align	1
 2210              		.global	uComOnChipInitial
 2211              		.syntax unified
 2212              		.thumb
 2213              		.thumb_func
 2214              		.fpu softvfp
 2216              	uComOnChipInitial:
 2217              	.LFB80:
1519:Src/main.c    **** 
 2218              		.loc 1 1519 0
 2219              		.cfi_startproc
 2220              		@ args = 0, pretend = 0, frame = 0
 2221              		@ frame_needed = 0, uses_anonymous_args = 0
 2222 0000 10B5     		push	{r4, lr}
 2223              	.LCFI25:
 2224              		.cfi_def_cfa_offset 8
 2225              		.cfi_offset 4, -8
 2226              		.cfi_offset 14, -4
1524:Src/main.c    **** PCON1V2_TP(ON);      
 2227              		.loc 1 1524 0
 2228 0002 084C     		ldr	r4, .L131
 2229 0004 0022     		movs	r2, #0
 2230 0006 4021     		movs	r1, #64
 2231 0008 2046     		mov	r0, r4
 2232 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 2233              	.LVL165:
1525:Src/main.c    **** 
 2234              		.loc 1 1525 0
 2235 000e 0022     		movs	r2, #0
 2236 0010 2021     		movs	r1, #32
 2237 0012 2046     		mov	r0, r4
ARM GAS  /tmp/ccUr6nXF.s 			page 120


 2238 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2239              	.LVL166:
1527:Src/main.c    **** 
 2240              		.loc 1 1527 0
 2241 0018 0122     		movs	r2, #1
 2242 001a 1021     		movs	r1, #16
 2243 001c 2046     		mov	r0, r4
 2244 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 2245              	.LVL167:
1586:Src/main.c    **** 
 2246              		.loc 1 1586 0
 2247 0022 10BD     		pop	{r4, pc}
 2248              	.L132:
 2249              		.align	2
 2250              	.L131:
 2251 0024 00080140 		.word	1073809408
 2252              		.cfi_endproc
 2253              	.LFE80:
 2255              		.section	.text.user_pwm_setvalue,"ax",%progbits
 2256              		.align	1
 2257              		.global	user_pwm_setvalue
 2258              		.syntax unified
 2259              		.thumb
 2260              		.thumb_func
 2261              		.fpu softvfp
 2263              	user_pwm_setvalue:
 2264              	.LFB81:
1589:Src/main.c    ****     TIM_OC_InitTypeDef sConfigOC;
 2265              		.loc 1 1589 0
 2266              		.cfi_startproc
 2267              		@ args = 0, pretend = 0, frame = 32
 2268              		@ frame_needed = 0, uses_anonymous_args = 0
 2269              	.LVL168:
 2270 0000 10B5     		push	{r4, lr}
 2271              	.LCFI26:
 2272              		.cfi_def_cfa_offset 8
 2273              		.cfi_offset 4, -8
 2274              		.cfi_offset 14, -4
 2275 0002 88B0     		sub	sp, sp, #32
 2276              	.LCFI27:
 2277              		.cfi_def_cfa_offset 40
1592:Src/main.c    ****     sConfigOC.Pulse = value;
 2278              		.loc 1 1592 0
 2279 0004 6023     		movs	r3, #96
 2280 0006 0193     		str	r3, [sp, #4]
1593:Src/main.c    ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2281              		.loc 1 1593 0
 2282 0008 0290     		str	r0, [sp, #8]
1594:Src/main.c    ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2283              		.loc 1 1594 0
 2284 000a 0023     		movs	r3, #0
 2285 000c 0393     		str	r3, [sp, #12]
1595:Src/main.c    ****     HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 2286              		.loc 1 1595 0
 2287 000e 0593     		str	r3, [sp, #20]
1596:Src/main.c    ****     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  
 2288              		.loc 1 1596 0
ARM GAS  /tmp/ccUr6nXF.s 			page 121


 2289 0010 054C     		ldr	r4, .L135
 2290 0012 0822     		movs	r2, #8
 2291 0014 01A9     		add	r1, sp, #4
 2292 0016 2046     		mov	r0, r4
 2293              	.LVL169:
 2294 0018 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2295              	.LVL170:
1597:Src/main.c    **** }
 2296              		.loc 1 1597 0
 2297 001c 0821     		movs	r1, #8
 2298 001e 2046     		mov	r0, r4
 2299 0020 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2300              	.LVL171:
1598:Src/main.c    **** 
 2301              		.loc 1 1598 0
 2302 0024 08B0     		add	sp, sp, #32
 2303              	.LCFI28:
 2304              		.cfi_def_cfa_offset 8
 2305              		@ sp needed
 2306 0026 10BD     		pop	{r4, pc}
 2307              	.L136:
 2308              		.align	2
 2309              	.L135:
 2310 0028 00000000 		.word	htim2
 2311              		.cfi_endproc
 2312              	.LFE81:
 2314              		.section	.text.AdjustAutoDayNight,"ax",%progbits
 2315              		.align	1
 2316              		.global	AdjustAutoDayNight
 2317              		.syntax unified
 2318              		.thumb
 2319              		.thumb_func
 2320              		.fpu softvfp
 2322              	AdjustAutoDayNight:
 2323              	.LFB77:
1353:Src/main.c    **** //	BYTE page;
 2324              		.loc 1 1353 0
 2325              		.cfi_startproc
 2326              		@ args = 0, pretend = 0, frame = 0
 2327              		@ frame_needed = 0, uses_anonymous_args = 0
 2328              	.LVL172:
 2329 0000 08B5     		push	{r3, lr}
 2330              	.LCFI29:
 2331              		.cfi_def_cfa_offset 8
 2332              		.cfi_offset 3, -8
 2333              		.cfi_offset 14, -4
 2334              	.LVL173:
1356:Src/main.c    **** 
 2335              		.loc 1 1356 0
 2336 0002 C043     		mvns	r0, r0
 2337              	.LVL174:
 2338 0004 C0B2     		uxtb	r0, r0
 2339              	.LVL175:
1359:Src/main.c    **** 		PWMLevelTemp=0+70;
 2340              		.loc 1 1359 0
 2341 0006 6328     		cmp	r0, #99
 2342 0008 12D9     		bls	.L143
ARM GAS  /tmp/ccUr6nXF.s 			page 122


1361:Src/main.c    **** 		PWMLevelTemp=20+70;//20;
 2343              		.loc 1 1361 0
 2344 000a A0F16403 		sub	r3, r0, #100
 2345 000e DBB2     		uxtb	r3, r3
 2346 0010 272B     		cmp	r3, #39
 2347 0012 24D9     		bls	.L144
1363:Src/main.c    **** 		PWMLevelTemp=40+70;//50;
 2348              		.loc 1 1363 0
 2349 0014 00F17403 		add	r3, r0, #116
 2350 0018 DBB2     		uxtb	r3, r3
 2351 001a 272B     		cmp	r3, #39
 2352 001c 21D9     		bls	.L145
1365:Src/main.c    **** 		PWMLevelTemp=60+70;//65;
 2353              		.loc 1 1365 0
 2354 001e 00F14C03 		add	r3, r0, #76
 2355 0022 DBB2     		uxtb	r3, r3
 2356 0024 272B     		cmp	r3, #39
 2357 0026 1ED9     		bls	.L146
1367:Src/main.c    **** 	{
 2358              		.loc 1 1367 0
 2359 0028 DB28     		cmp	r0, #219
 2360 002a 1ED8     		bhi	.L147
1355:Src/main.c    **** 	val=0xff-val;
 2361              		.loc 1 1355 0
 2362 002c 0022     		movs	r2, #0
 2363 002e 00E0     		b	.L138
 2364              	.L143:
1360:Src/main.c    **** 	else if(val>=100&&val<140)
 2365              		.loc 1 1360 0
 2366 0030 4622     		movs	r2, #70
 2367              	.L138:
 2368              	.LVL176:
1399:Src/main.c    **** 	{
 2369              		.loc 1 1399 0
 2370 0032 164B     		ldr	r3, .L149
 2371 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2372 0036 012B     		cmp	r3, #1
 2373 0038 1FD1     		bne	.L139
1405:Src/main.c    **** 				PWMLevel-=1;
 2374              		.loc 1 1405 0
 2375 003a 154B     		ldr	r3, .L149+4
 2376 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2377 003e 9342     		cmp	r3, r2
 2378 0040 15D9     		bls	.L140
1406:Src/main.c    **** 			else if(PWMLevel < PWMLevelTemp)
 2379              		.loc 1 1406 0
 2380 0042 013B     		subs	r3, r3, #1
 2381 0044 124A     		ldr	r2, .L149+4
 2382              	.LVL177:
 2383 0046 1370     		strb	r3, [r2]
 2384              	.L141:
1410:Src/main.c    **** 		}
 2385              		.loc 1 1410 0
 2386 0048 124B     		ldr	r3, .L149+8
 2387 004a 0022     		movs	r2, #0
 2388 004c 1A70     		strb	r2, [r3]
1418:Src/main.c    **** 
ARM GAS  /tmp/ccUr6nXF.s 			page 123


 2389              		.loc 1 1418 0
 2390 004e 104B     		ldr	r3, .L149+4
 2391 0050 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2392              	.LVL178:
 2393 0052 C0EB0010 		rsb	r0, r0, r0, lsl #4
 2394 0056 80B2     		uxth	r0, r0
 2395 0058 FFF7FEFF 		bl	user_pwm_setvalue
 2396              	.LVL179:
 2397              	.L137:
1446:Src/main.c    **** void LCDPowerON(void)
 2398              		.loc 1 1446 0
 2399 005c 08BD     		pop	{r3, pc}
 2400              	.LVL180:
 2401              	.L144:
1362:Src/main.c    **** 	else if(val>=140&&val<180)
 2402              		.loc 1 1362 0
 2403 005e 5A22     		movs	r2, #90
 2404 0060 E7E7     		b	.L138
 2405              	.L145:
1364:Src/main.c    **** 	else if(val>=180&&val<220)
 2406              		.loc 1 1364 0
 2407 0062 6E22     		movs	r2, #110
 2408 0064 E5E7     		b	.L138
 2409              	.L146:
1366:Src/main.c    **** 	else if(val>=220&&val<=255)//andy 20110414
 2410              		.loc 1 1366 0
 2411 0066 8222     		movs	r2, #130
 2412 0068 E3E7     		b	.L138
 2413              	.L147:
1370:Src/main.c    **** 		//#else
 2414              		.loc 1 1370 0
 2415 006a 9122     		movs	r2, #145
 2416 006c E1E7     		b	.L138
 2417              	.LVL181:
 2418              	.L140:
1407:Src/main.c    **** 				PWMLevel+=1;
 2419              		.loc 1 1407 0
 2420 006e 9342     		cmp	r3, r2
 2421 0070 EAD2     		bcs	.L141
1408:Src/main.c    **** 
 2422              		.loc 1 1408 0
 2423 0072 0133     		adds	r3, r3, #1
 2424 0074 064A     		ldr	r2, .L149+4
 2425              	.LVL182:
 2426 0076 1370     		strb	r3, [r2]
 2427 0078 E6E7     		b	.L141
 2428              	.LVL183:
 2429              	.L139:
1424:Src/main.c    **** 	//		Printf("(PWMLevel2=%02x)",(WORD)PWMLevel);
 2430              		.loc 1 1424 0
 2431 007a 054B     		ldr	r3, .L149+4
 2432 007c FF22     		movs	r2, #255
 2433              	.LVL184:
 2434 007e 1A70     		strb	r2, [r3]
1426:Src/main.c    **** 	}
 2435              		.loc 1 1426 0
 2436 0080 4FF47A60 		mov	r0, #4000
ARM GAS  /tmp/ccUr6nXF.s 			page 124


 2437              	.LVL185:
 2438 0084 FFF7FEFF 		bl	user_pwm_setvalue
 2439              	.LVL186:
1446:Src/main.c    **** void LCDPowerON(void)
 2440              		.loc 1 1446 0
 2441 0088 E8E7     		b	.L137
 2442              	.L150:
 2443 008a 00BF     		.align	2
 2444              	.L149:
 2445 008c 00000000 		.word	.LANCHOR17
 2446 0090 00000000 		.word	.LANCHOR18
 2447 0094 00000000 		.word	.LANCHOR19
 2448              		.cfi_endproc
 2449              	.LFE77:
 2451              		.section	.text.LoadEEPROM,"ax",%progbits
 2452              		.align	1
 2453              		.global	LoadEEPROM
 2454              		.syntax unified
 2455              		.thumb
 2456              		.thumb_func
 2457              		.fpu softvfp
 2459              	LoadEEPROM:
 2460              	.LFB82:
1601:Src/main.c    **** #if 0
 2461              		.loc 1 1601 0
 2462              		.cfi_startproc
 2463              		@ args = 0, pretend = 0, frame = 0
 2464              		@ frame_needed = 0, uses_anonymous_args = 0
 2465              		@ link register save eliminated.
1623:Src/main.c    **** 
 2466              		.loc 1 1623 0
 2467 0000 7047     		bx	lr
 2468              		.cfi_endproc
 2469              	.LFE82:
 2471              		.section	.text.WaitPowerOn,"ax",%progbits
 2472              		.align	1
 2473              		.global	WaitPowerOn
 2474              		.syntax unified
 2475              		.thumb
 2476              		.thumb_func
 2477              		.fpu softvfp
 2479              	WaitPowerOn:
 2480              	.LFB83:
1626:Src/main.c    **** BYTE val;
 2481              		.loc 1 1626 0
 2482              		.cfi_startproc
 2483              		@ args = 0, pretend = 0, frame = 0
 2484              		@ frame_needed = 0, uses_anonymous_args = 0
 2485 0000 10B5     		push	{r4, lr}
 2486              	.LCFI30:
 2487              		.cfi_def_cfa_offset 8
 2488              		.cfi_offset 4, -8
 2489              		.cfi_offset 14, -4
1628:Src/main.c    **** 
 2490              		.loc 1 1628 0
 2491 0002 2C20     		movs	r0, #44
 2492 0004 FFF7FEFF 		bl	PowerLED
ARM GAS  /tmp/ccUr6nXF.s 			page 125


 2493              	.LVL187:
1632:Src/main.c    **** 
 2494              		.loc 1 1632 0
 2495 0008 1120     		movs	r0, #17
 2496 000a FFF7FEFF 		bl	MCUTimerCancelTimerEvent
 2497              	.LVL188:
1634:Src/main.c    **** 		
 2498              		.loc 1 1634 0
 2499 000e 1D48     		ldr	r0, .L162
 2500 0010 FFF7FEFF 		bl	Printf
 2501              	.LVL189:
 2502 0014 20E0     		b	.L156
 2503              	.L161:
1643:Src/main.c    **** 				break;		//poweron
 2504              		.loc 1 1643 0
 2505 0016 AB20     		movs	r0, #171
 2506 0018 FFF7FEFF 		bl	WriteEEP
 2507              	.LVL190:
1702:Src/main.c    **** //	SHOWOSDINFO();	
 2508              		.loc 1 1702 0
 2509 001c 2A20     		movs	r0, #42
 2510 001e FFF7FEFF 		bl	PowerLED
 2511              	.LVL191:
1708:Src/main.c    **** 	MCUTimerActiveTimerEvent(SEC(2),_USER_TIMER_EVENT_DISPLAY_DISABLE);
 2512              		.loc 1 1708 0
 2513 0022 0F20     		movs	r0, #15
 2514 0024 FFF7FEFF 		bl	MCUTimerCancelTimerEvent
 2515              	.LVL192:
1709:Src/main.c    **** 
 2516              		.loc 1 1709 0
 2517 0028 0F21     		movs	r1, #15
 2518 002a 4FF4FA60 		mov	r0, #2000
 2519 002e FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 2520              	.LVL193:
1713:Src/main.c    **** //LCDPowerON();
 2521              		.loc 1 1713 0
 2522 0032 1121     		movs	r1, #17
 2523 0034 4FF47A70 		mov	r0, #1000
 2524 0038 FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 2525              	.LVL194:
1715:Src/main.c    **** 
 2526              		.loc 1 1715 0
 2527 003c 1248     		ldr	r0, .L162+4
 2528 003e FFF7FEFF 		bl	Printf
 2529              	.LVL195:
1718:Src/main.c    **** 
 2530              		.loc 1 1718 0
 2531 0042 10BD     		pop	{r4, pc}
 2532              	.LVL196:
 2533              	.L154:
1670:Src/main.c    **** 
 2534              		.loc 1 1670 0
 2535 0044 FFF7FEFF 		bl	TriggerHandler
 2536              	.LVL197:
 2537              	.L155:
1692:Src/main.c    **** 		   	  EQ_Detect();	 
 2538              		.loc 1 1692 0
ARM GAS  /tmp/ccUr6nXF.s 			page 126


 2539 0048 FFF7FEFF 		bl	SysTimerHandler
 2540              	.LVL198:
1693:Src/main.c    **** 			  
 2541              		.loc 1 1693 0
 2542 004c FFF7FEFF 		bl	EQ_Detect
 2543              	.LVL199:
1696:Src/main.c    **** 
 2544              		.loc 1 1696 0
 2545 0050 0120     		movs	r0, #1
 2546 0052 FFF7FEFF 		bl	GT9147_Scan
 2547              	.LVL200:
 2548 0056 88B9     		cbnz	r0, .L160
 2549              	.L156:
1639:Src/main.c    **** 			if(PowerFlag==ON)
 2550              		.loc 1 1639 0
 2551 0058 FFF7FEFF 		bl	CheckKeyIn
 2552              	.LVL201:
1640:Src/main.c    **** 			{
 2553              		.loc 1 1640 0
 2554 005c 0B4B     		ldr	r3, .L162+8
 2555 005e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2556 0060 0129     		cmp	r1, #1
 2557 0062 D8D0     		beq	.L161
1647:Src/main.c    **** 		 
 2558              		.loc 1 1647 0
 2559 0064 FFF7FEFF 		bl	CheckTrigger
 2560              	.LVL202:
1651:Src/main.c    **** 		{	
 2561              		.loc 1 1651 0
 2562 0068 0446     		mov	r4, r0
 2563 006a 0028     		cmp	r0, #0
 2564 006c EAD0     		beq	.L154
1653:Src/main.c    **** 			TriggerHandler(val);
 2565              		.loc 1 1653 0
 2566 006e 2A20     		movs	r0, #42
 2567              	.LVL203:
 2568 0070 FFF7FEFF 		bl	PowerLED
 2569              	.LVL204:
1654:Src/main.c    **** 			//	AudioMute(OFF);
 2570              		.loc 1 1654 0
 2571 0074 2046     		mov	r0, r4
 2572 0076 FFF7FEFF 		bl	TriggerHandler
 2573              	.LVL205:
 2574 007a E5E7     		b	.L155
 2575              	.L160:
1698:Src/main.c    **** 					
 2576              		.loc 1 1698 0
 2577 007c 034B     		ldr	r3, .L162+8
 2578 007e 0122     		movs	r2, #1
 2579 0080 1A70     		strb	r2, [r3]
 2580 0082 E9E7     		b	.L156
 2581              	.L163:
 2582              		.align	2
 2583              	.L162:
 2584 0084 00000000 		.word	.LC28
 2585 0088 10000000 		.word	.LC29
 2586 008c 00000000 		.word	.LANCHOR20
ARM GAS  /tmp/ccUr6nXF.s 			page 127


 2587              		.cfi_endproc
 2588              	.LFE83:
 2590              		.section	.text.VS4210_FULL88init2,"ax",%progbits
 2591              		.align	1
 2592              		.global	VS4210_FULL88init2
 2593              		.syntax unified
 2594              		.thumb
 2595              		.thumb_func
 2596              		.fpu softvfp
 2598              	VS4210_FULL88init2:
 2599              	.LFB86:
2224:Src/main.c    **** 	 tByte i ;
 2600              		.loc 1 2224 0
 2601              		.cfi_startproc
 2602              		@ args = 0, pretend = 0, frame = 0
 2603              		@ frame_needed = 0, uses_anonymous_args = 0
 2604              	.LVL206:
 2605 0000 38B5     		push	{r3, r4, r5, lr}
 2606              	.LCFI31:
 2607              		.cfi_def_cfa_offset 16
 2608              		.cfi_offset 3, -16
 2609              		.cfi_offset 4, -12
 2610              		.cfi_offset 5, -8
 2611              		.cfi_offset 14, -4
 2612 0002 0546     		mov	r5, r0
 2613              	.LVL207:
2231:Src/main.c    **** 	 {
 2614              		.loc 1 2231 0
 2615 0004 0024     		movs	r4, #0
 2616 0006 06E0     		b	.L165
 2617              	.LVL208:
 2618              	.L166:
2235:Src/main.c    **** 	 }
 2619              		.loc 1 2235 0 discriminator 3
 2620 0008 295D     		ldrb	r1, [r5, r4]	@ zero_extendqisi2
 2621              	.LVL209:
 2622 000a 044B     		ldr	r3, .L168
 2623 000c 185D     		ldrb	r0, [r3, r4]	@ zero_extendqisi2
 2624              	.LVL210:
 2625 000e FFF7FEFF 		bl	VXISI2CWrite
 2626              	.LVL211:
2231:Src/main.c    **** 	 {
 2627              		.loc 1 2231 0 discriminator 3
 2628 0012 0134     		adds	r4, r4, #1
 2629              	.LVL212:
 2630 0014 E4B2     		uxtb	r4, r4
 2631              	.LVL213:
 2632              	.L165:
2231:Src/main.c    **** 	 {
 2633              		.loc 1 2231 0 is_stmt 0 discriminator 1
 2634 0016 572C     		cmp	r4, #87
 2635 0018 F6D9     		bls	.L166
2237:Src/main.c    **** 
 2636              		.loc 1 2237 0 is_stmt 1
 2637 001a 38BD     		pop	{r3, r4, r5, pc}
 2638              	.LVL214:
 2639              	.L169:
ARM GAS  /tmp/ccUr6nXF.s 			page 128


 2640              		.align	2
 2641              	.L168:
 2642 001c 00000000 		.word	VS4210_Addr_88param
 2643              		.cfi_endproc
 2644              	.LFE86:
 2646              		.section	.text.TP_bt1120_1080P_1080P_mode0_w0,"ax",%progbits
 2647              		.align	1
 2648              		.global	TP_bt1120_1080P_1080P_mode0_w0
 2649              		.syntax unified
 2650              		.thumb
 2651              		.thumb_func
 2652              		.fpu softvfp
 2654              	TP_bt1120_1080P_1080P_mode0_w0:
 2655              	.LFB87:
2240:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table 1080P... ");
 2656              		.loc 1 2240 0
 2657              		.cfi_startproc
 2658              		@ args = 0, pretend = 0, frame = 0
 2659              		@ frame_needed = 0, uses_anonymous_args = 0
 2660 0000 08B5     		push	{r3, lr}
 2661              	.LCFI32:
 2662              		.cfi_def_cfa_offset 8
 2663              		.cfi_offset 3, -8
 2664              		.cfi_offset 14, -4
2241:Src/main.c    **** #if 1
 2665              		.loc 1 2241 0
 2666 0002 0348     		ldr	r0, .L172
 2667 0004 FFF7FEFF 		bl	Printf
 2668              	.LVL215:
2244:Src/main.c    **** #else
 2669              		.loc 1 2244 0
 2670 0008 0248     		ldr	r0, .L172+4
 2671 000a FFF7FEFF 		bl	VS4210_FULL88init2
 2672              	.LVL216:
2748:Src/main.c    **** 
 2673              		.loc 1 2748 0
 2674 000e 08BD     		pop	{r3, pc}
 2675              	.L173:
 2676              		.align	2
 2677              	.L172:
 2678 0010 00000000 		.word	.LC30
 2679 0014 00000000 		.word	VS4210_TP_bt1120_1080P_1080P_mode0_w0_88param
 2680              		.cfi_endproc
 2681              	.LFE87:
 2683              		.section	.text.TP_bt1120_720P_1080P_mode0_w0,"ax",%progbits
 2684              		.align	1
 2685              		.global	TP_bt1120_720P_1080P_mode0_w0
 2686              		.syntax unified
 2687              		.thumb
 2688              		.thumb_func
 2689              		.fpu softvfp
 2691              	TP_bt1120_720P_1080P_mode0_w0:
 2692              	.LFB88:
2751:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table 720P... ");
 2693              		.loc 1 2751 0
 2694              		.cfi_startproc
 2695              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccUr6nXF.s 			page 129


 2696              		@ frame_needed = 0, uses_anonymous_args = 0
 2697 0000 08B5     		push	{r3, lr}
 2698              	.LCFI33:
 2699              		.cfi_def_cfa_offset 8
 2700              		.cfi_offset 3, -8
 2701              		.cfi_offset 14, -4
2752:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_720P_1080P_mode0_w0_88param);
 2702              		.loc 1 2752 0
 2703 0002 0548     		ldr	r0, .L176
 2704 0004 FFF7FEFF 		bl	Printf
 2705              	.LVL217:
2753:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
 2706              		.loc 1 2753 0
 2707 0008 0448     		ldr	r0, .L176+4
 2708 000a FFF7FEFF 		bl	VS4210_FULL88init2
 2709              	.LVL218:
2754:Src/main.c    **** 
 2710              		.loc 1 2754 0
 2711 000e 1021     		movs	r1, #16
 2712 0010 D720     		movs	r0, #215
 2713 0012 FFF7FEFF 		bl	VXISI2CWrite
 2714              	.LVL219:
2756:Src/main.c    **** 
 2715              		.loc 1 2756 0
 2716 0016 08BD     		pop	{r3, pc}
 2717              	.L177:
 2718              		.align	2
 2719              	.L176:
 2720 0018 00000000 		.word	.LC31
 2721 001c 00000000 		.word	VS4210_TP_bt1120_720P_1080P_mode0_w0_88param
 2722              		.cfi_endproc
 2723              	.LFE88:
 2725              		.section	.text.TP_bt1120_NTSC_1080P_mode0_w0,"ax",%progbits
 2726              		.align	1
 2727              		.global	TP_bt1120_NTSC_1080P_mode0_w0
 2728              		.syntax unified
 2729              		.thumb
 2730              		.thumb_func
 2731              		.fpu softvfp
 2733              	TP_bt1120_NTSC_1080P_mode0_w0:
 2734              	.LFB89:
2759:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table NTSC... ");
 2735              		.loc 1 2759 0
 2736              		.cfi_startproc
 2737              		@ args = 0, pretend = 0, frame = 0
 2738              		@ frame_needed = 0, uses_anonymous_args = 0
 2739 0000 08B5     		push	{r3, lr}
 2740              	.LCFI34:
 2741              		.cfi_def_cfa_offset 8
 2742              		.cfi_offset 3, -8
 2743              		.cfi_offset 14, -4
2760:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param);
 2744              		.loc 1 2760 0
 2745 0002 0348     		ldr	r0, .L180
 2746 0004 FFF7FEFF 		bl	Printf
 2747              	.LVL220:
2761:Src/main.c    **** }
ARM GAS  /tmp/ccUr6nXF.s 			page 130


 2748              		.loc 1 2761 0
 2749 0008 0248     		ldr	r0, .L180+4
 2750 000a FFF7FEFF 		bl	VS4210_FULL88init2
 2751              	.LVL221:
2762:Src/main.c    **** 
 2752              		.loc 1 2762 0
 2753 000e 08BD     		pop	{r3, pc}
 2754              	.L181:
 2755              		.align	2
 2756              	.L180:
 2757 0010 00000000 		.word	.LC32
 2758 0014 00000000 		.word	VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param
 2759              		.cfi_endproc
 2760              	.LFE89:
 2762              		.section	.text.TP_bt1120_PAL_1080P_mode0_w0,"ax",%progbits
 2763              		.align	1
 2764              		.global	TP_bt1120_PAL_1080P_mode0_w0
 2765              		.syntax unified
 2766              		.thumb
 2767              		.thumb_func
 2768              		.fpu softvfp
 2770              	TP_bt1120_PAL_1080P_mode0_w0:
 2771              	.LFB90:
2765:Src/main.c    **** 	Printf("\r\nLoading VS4210 AHD table PAL... ");
 2772              		.loc 1 2765 0
 2773              		.cfi_startproc
 2774              		@ args = 0, pretend = 0, frame = 0
 2775              		@ frame_needed = 0, uses_anonymous_args = 0
 2776 0000 08B5     		push	{r3, lr}
 2777              	.LCFI35:
 2778              		.cfi_def_cfa_offset 8
 2779              		.cfi_offset 3, -8
 2780              		.cfi_offset 14, -4
2766:Src/main.c    **** 	VS4210_FULL88init2(VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param);
 2781              		.loc 1 2766 0
 2782 0002 0348     		ldr	r0, .L184
 2783 0004 FFF7FEFF 		bl	Printf
 2784              	.LVL222:
2767:Src/main.c    **** 	#if 0
 2785              		.loc 1 2767 0
 2786 0008 0248     		ldr	r0, .L184+4
 2787 000a FFF7FEFF 		bl	VS4210_FULL88init2
 2788              	.LVL223:
3010:Src/main.c    **** void SET_VS4210_720_480_out(void)
 2789              		.loc 1 3010 0
 2790 000e 08BD     		pop	{r3, pc}
 2791              	.L185:
 2792              		.align	2
 2793              	.L184:
 2794 0010 00000000 		.word	.LC33
 2795 0014 00000000 		.word	VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param
 2796              		.cfi_endproc
 2797              	.LFE90:
 2799              		.section	.text.SET_VS4210_720_480_out,"ax",%progbits
 2800              		.align	1
 2801              		.global	SET_VS4210_720_480_out
 2802              		.syntax unified
ARM GAS  /tmp/ccUr6nXF.s 			page 131


 2803              		.thumb
 2804              		.thumb_func
 2805              		.fpu softvfp
 2807              	SET_VS4210_720_480_out:
 2808              	.LFB91:
3012:Src/main.c    **** 	Printf("\r\nSET_VS4210_720_480_out ");
 2809              		.loc 1 3012 0
 2810              		.cfi_startproc
 2811              		@ args = 0, pretend = 0, frame = 0
 2812              		@ frame_needed = 0, uses_anonymous_args = 0
 2813 0000 08B5     		push	{r3, lr}
 2814              	.LCFI36:
 2815              		.cfi_def_cfa_offset 8
 2816              		.cfi_offset 3, -8
 2817              		.cfi_offset 14, -4
3013:Src/main.c    **** 
 2818              		.loc 1 3013 0
 2819 0002 FE48     		ldr	r0, .L188
 2820 0004 FFF7FEFF 		bl	Printf
 2821              	.LVL224:
3015:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
 2822              		.loc 1 3015 0
 2823 0008 0021     		movs	r1, #0
 2824 000a 0120     		movs	r0, #1
 2825 000c FFF7FEFF 		bl	VXISI2CWrite
 2826              	.LVL225:
3016:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
 2827              		.loc 1 3016 0
 2828 0010 0021     		movs	r1, #0
 2829 0012 0220     		movs	r0, #2
 2830 0014 FFF7FEFF 		bl	VXISI2CWrite
 2831              	.LVL226:
3017:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
 2832              		.loc 1 3017 0
 2833 0018 7521     		movs	r1, #117
 2834 001a 0320     		movs	r0, #3
 2835 001c FFF7FEFF 		bl	VXISI2CWrite
 2836              	.LVL227:
3018:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
 2837              		.loc 1 3018 0
 2838 0020 1821     		movs	r1, #24
 2839 0022 0420     		movs	r0, #4
 2840 0024 FFF7FEFF 		bl	VXISI2CWrite
 2841              	.LVL228:
3019:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
 2842              		.loc 1 3019 0
 2843 0028 8021     		movs	r1, #128
 2844 002a 0520     		movs	r0, #5
 2845 002c FFF7FEFF 		bl	VXISI2CWrite
 2846              	.LVL229:
3020:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);
 2847              		.loc 1 3020 0
 2848 0030 2021     		movs	r1, #32
 2849 0032 0620     		movs	r0, #6
 2850 0034 FFF7FEFF 		bl	VXISI2CWrite
 2851              	.LVL230:
3021:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
ARM GAS  /tmp/ccUr6nXF.s 			page 132


 2852              		.loc 1 3021 0
 2853 0038 0821     		movs	r1, #8
 2854 003a 0720     		movs	r0, #7
 2855 003c FFF7FEFF 		bl	VXISI2CWrite
 2856              	.LVL231:
3022:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
 2857              		.loc 1 3022 0
 2858 0040 4021     		movs	r1, #64
 2859 0042 0820     		movs	r0, #8
 2860 0044 FFF7FEFF 		bl	VXISI2CWrite
 2861              	.LVL232:
3023:Src/main.c    **** 	VXISI2CWrite(0x0A,0x41);
 2862              		.loc 1 3023 0
 2863 0048 0A21     		movs	r1, #10
 2864 004a 0920     		movs	r0, #9
 2865 004c FFF7FEFF 		bl	VXISI2CWrite
 2866              	.LVL233:
3024:Src/main.c    **** 	VXISI2CWrite(0x0B,0x07);
 2867              		.loc 1 3024 0
 2868 0050 4121     		movs	r1, #65
 2869 0052 0A20     		movs	r0, #10
 2870 0054 FFF7FEFF 		bl	VXISI2CWrite
 2871              	.LVL234:
3025:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
 2872              		.loc 1 3025 0
 2873 0058 0721     		movs	r1, #7
 2874 005a 0B20     		movs	r0, #11
 2875 005c FFF7FEFF 		bl	VXISI2CWrite
 2876              	.LVL235:
3026:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
 2877              		.loc 1 3026 0
 2878 0060 0021     		movs	r1, #0
 2879 0062 0C20     		movs	r0, #12
 2880 0064 FFF7FEFF 		bl	VXISI2CWrite
 2881              	.LVL236:
3027:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
 2882              		.loc 1 3027 0
 2883 0068 2021     		movs	r1, #32
 2884 006a 0D20     		movs	r0, #13
 2885 006c FFF7FEFF 		bl	VXISI2CWrite
 2886              	.LVL237:
3028:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
 2887              		.loc 1 3028 0
 2888 0070 1021     		movs	r1, #16
 2889 0072 0E20     		movs	r0, #14
 2890 0074 FFF7FEFF 		bl	VXISI2CWrite
 2891              	.LVL238:
3029:Src/main.c    **** 	VXISI2CWrite(0x10,0x80);
 2892              		.loc 1 3029 0
 2893 0078 0021     		movs	r1, #0
 2894 007a 0F20     		movs	r0, #15
 2895 007c FFF7FEFF 		bl	VXISI2CWrite
 2896              	.LVL239:
3030:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
 2897              		.loc 1 3030 0
 2898 0080 8021     		movs	r1, #128
 2899 0082 1020     		movs	r0, #16
ARM GAS  /tmp/ccUr6nXF.s 			page 133


 2900 0084 FFF7FEFF 		bl	VXISI2CWrite
 2901              	.LVL240:
3031:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);
 2902              		.loc 1 3031 0
 2903 0088 8221     		movs	r1, #130
 2904 008a 1120     		movs	r0, #17
 2905 008c FFF7FEFF 		bl	VXISI2CWrite
 2906              	.LVL241:
3032:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);
 2907              		.loc 1 3032 0
 2908 0090 2121     		movs	r1, #33
 2909 0092 1220     		movs	r0, #18
 2910 0094 FFF7FEFF 		bl	VXISI2CWrite
 2911              	.LVL242:
3033:Src/main.c    **** 	VXISI2CWrite(0x14,0xE0);
 2912              		.loc 1 3033 0
 2913 0098 D021     		movs	r1, #208
 2914 009a 1320     		movs	r0, #19
 2915 009c FFF7FEFF 		bl	VXISI2CWrite
 2916              	.LVL243:
3034:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
 2917              		.loc 1 3034 0
 2918 00a0 E021     		movs	r1, #224
 2919 00a2 1420     		movs	r0, #20
 2920 00a4 FFF7FEFF 		bl	VXISI2CWrite
 2921              	.LVL244:
3035:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
 2922              		.loc 1 3035 0
 2923 00a8 7821     		movs	r1, #120
 2924 00aa 1520     		movs	r0, #21
 2925 00ac FFF7FEFF 		bl	VXISI2CWrite
 2926              	.LVL245:
3036:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
 2927              		.loc 1 3036 0
 2928 00b0 FE21     		movs	r1, #254
 2929 00b2 1620     		movs	r0, #22
 2930 00b4 FFF7FEFF 		bl	VXISI2CWrite
 2931              	.LVL246:
3037:Src/main.c    **** 	VXISI2CWrite(0x18,0xC8);
 2932              		.loc 1 3037 0
 2933 00b8 0021     		movs	r1, #0
 2934 00ba 1720     		movs	r0, #23
 2935 00bc FFF7FEFF 		bl	VXISI2CWrite
 2936              	.LVL247:
3038:Src/main.c    **** 	VXISI2CWrite(0x19,0x00);
 2937              		.loc 1 3038 0
 2938 00c0 C821     		movs	r1, #200
 2939 00c2 1820     		movs	r0, #24
 2940 00c4 FFF7FEFF 		bl	VXISI2CWrite
 2941              	.LVL248:
3039:Src/main.c    **** 	VXISI2CWrite(0x1A,0x23);
 2942              		.loc 1 3039 0
 2943 00c8 0021     		movs	r1, #0
 2944 00ca 1920     		movs	r0, #25
 2945 00cc FFF7FEFF 		bl	VXISI2CWrite
 2946              	.LVL249:
3040:Src/main.c    **** 	VXISI2CWrite(0x1B,0x00);
ARM GAS  /tmp/ccUr6nXF.s 			page 134


 2947              		.loc 1 3040 0
 2948 00d0 2321     		movs	r1, #35
 2949 00d2 1A20     		movs	r0, #26
 2950 00d4 FFF7FEFF 		bl	VXISI2CWrite
 2951              	.LVL250:
3041:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
 2952              		.loc 1 3041 0
 2953 00d8 0021     		movs	r1, #0
 2954 00da 1B20     		movs	r0, #27
 2955 00dc FFF7FEFF 		bl	VXISI2CWrite
 2956              	.LVL251:
3042:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
 2957              		.loc 1 3042 0
 2958 00e0 0021     		movs	r1, #0
 2959 00e2 1C20     		movs	r0, #28
 2960 00e4 FFF7FEFF 		bl	VXISI2CWrite
 2961              	.LVL252:
3043:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
 2962              		.loc 1 3043 0
 2963 00e8 0021     		movs	r1, #0
 2964 00ea 1D20     		movs	r0, #29
 2965 00ec FFF7FEFF 		bl	VXISI2CWrite
 2966              	.LVL253:
3044:Src/main.c    **** 	VXISI2CWrite(0x1F,0x32);
 2967              		.loc 1 3044 0
 2968 00f0 2021     		movs	r1, #32
 2969 00f2 1E20     		movs	r0, #30
 2970 00f4 FFF7FEFF 		bl	VXISI2CWrite
 2971              	.LVL254:
3045:Src/main.c    **** 	VXISI2CWrite(0x20,0x5A);
 2972              		.loc 1 3045 0
 2973 00f8 3221     		movs	r1, #50
 2974 00fa 1F20     		movs	r0, #31
 2975 00fc FFF7FEFF 		bl	VXISI2CWrite
 2976              	.LVL255:
3046:Src/main.c    **** 	VXISI2CWrite(0x21,0x0D);
 2977              		.loc 1 3046 0
 2978 0100 5A21     		movs	r1, #90
 2979 0102 2020     		movs	r0, #32
 2980 0104 FFF7FEFF 		bl	VXISI2CWrite
 2981              	.LVL256:
3047:Src/main.c    **** 	VXISI2CWrite(0x22,0x32);
 2982              		.loc 1 3047 0
 2983 0108 0D21     		movs	r1, #13
 2984 010a 2120     		movs	r0, #33
 2985 010c FFF7FEFF 		bl	VXISI2CWrite
 2986              	.LVL257:
3048:Src/main.c    **** 	VXISI2CWrite(0x23,0x5A);
 2987              		.loc 1 3048 0
 2988 0110 3221     		movs	r1, #50
 2989 0112 2220     		movs	r0, #34
 2990 0114 FFF7FEFF 		bl	VXISI2CWrite
 2991              	.LVL258:
3049:Src/main.c    **** 	VXISI2CWrite(0x24,0xD0);
 2992              		.loc 1 3049 0
 2993 0118 5A21     		movs	r1, #90
 2994 011a 2320     		movs	r0, #35
ARM GAS  /tmp/ccUr6nXF.s 			page 135


 2995 011c FFF7FEFF 		bl	VXISI2CWrite
 2996              	.LVL259:
3050:Src/main.c    **** 	VXISI2CWrite(0x25,0x21);
 2997              		.loc 1 3050 0
 2998 0120 D021     		movs	r1, #208
 2999 0122 2420     		movs	r0, #36
 3000 0124 FFF7FEFF 		bl	VXISI2CWrite
 3001              	.LVL260:
3051:Src/main.c    **** 	VXISI2CWrite(0x26,0x0D);
 3002              		.loc 1 3051 0
 3003 0128 2121     		movs	r1, #33
 3004 012a 2520     		movs	r0, #37
 3005 012c FFF7FEFF 		bl	VXISI2CWrite
 3006              	.LVL261:
3052:Src/main.c    **** 	VXISI2CWrite(0x27,0xE0);
 3007              		.loc 1 3052 0
 3008 0130 0D21     		movs	r1, #13
 3009 0132 2620     		movs	r0, #38
 3010 0134 FFF7FEFF 		bl	VXISI2CWrite
 3011              	.LVL262:
3053:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
 3012              		.loc 1 3053 0
 3013 0138 E021     		movs	r1, #224
 3014 013a 2720     		movs	r0, #39
 3015 013c FFF7FEFF 		bl	VXISI2CWrite
 3016              	.LVL263:
3054:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
 3017              		.loc 1 3054 0
 3018 0140 F021     		movs	r1, #240
 3019 0142 2820     		movs	r0, #40
 3020 0144 FFF7FEFF 		bl	VXISI2CWrite
 3021              	.LVL264:
3055:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
 3022              		.loc 1 3055 0
 3023 0148 0021     		movs	r1, #0
 3024 014a 2920     		movs	r0, #41
 3025 014c FFF7FEFF 		bl	VXISI2CWrite
 3026              	.LVL265:
3056:Src/main.c    **** 	VXISI2CWrite(0x2B,0x01);
 3027              		.loc 1 3056 0
 3028 0150 0021     		movs	r1, #0
 3029 0152 2A20     		movs	r0, #42
 3030 0154 FFF7FEFF 		bl	VXISI2CWrite
 3031              	.LVL266:
3057:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);
 3032              		.loc 1 3057 0
 3033 0158 0121     		movs	r1, #1
 3034 015a 2B20     		movs	r0, #43
 3035 015c FFF7FEFF 		bl	VXISI2CWrite
 3036              	.LVL267:
3058:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
 3037              		.loc 1 3058 0
 3038 0160 FF21     		movs	r1, #255
 3039 0162 2C20     		movs	r0, #44
 3040 0164 FFF7FEFF 		bl	VXISI2CWrite
 3041              	.LVL268:
3059:Src/main.c    **** 	VXISI2CWrite(0x2E,0x12);
ARM GAS  /tmp/ccUr6nXF.s 			page 136


 3042              		.loc 1 3059 0
 3043 0168 0021     		movs	r1, #0
 3044 016a 2D20     		movs	r0, #45
 3045 016c FFF7FEFF 		bl	VXISI2CWrite
 3046              	.LVL269:
3060:Src/main.c    **** 	VXISI2CWrite(0x2F,0xD0);
 3047              		.loc 1 3060 0
 3048 0170 1221     		movs	r1, #18
 3049 0172 2E20     		movs	r0, #46
 3050 0174 FFF7FEFF 		bl	VXISI2CWrite
 3051              	.LVL270:
3061:Src/main.c    **** 	VXISI2CWrite(0x30,0xE0);
 3052              		.loc 1 3061 0
 3053 0178 D021     		movs	r1, #208
 3054 017a 2F20     		movs	r0, #47
 3055 017c FFF7FEFF 		bl	VXISI2CWrite
 3056              	.LVL271:
3062:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
 3057              		.loc 1 3062 0
 3058 0180 E021     		movs	r1, #224
 3059 0182 3020     		movs	r0, #48
 3060 0184 FFF7FEFF 		bl	VXISI2CWrite
 3061              	.LVL272:
3063:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
 3062              		.loc 1 3063 0
 3063 0188 8021     		movs	r1, #128
 3064 018a 3120     		movs	r0, #49
 3065 018c FFF7FEFF 		bl	VXISI2CWrite
 3066              	.LVL273:
3064:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
 3067              		.loc 1 3064 0
 3068 0190 8021     		movs	r1, #128
 3069 0192 3220     		movs	r0, #50
 3070 0194 FFF7FEFF 		bl	VXISI2CWrite
 3071              	.LVL274:
3065:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
 3072              		.loc 1 3065 0
 3073 0198 8021     		movs	r1, #128
 3074 019a 3320     		movs	r0, #51
 3075 019c FFF7FEFF 		bl	VXISI2CWrite
 3076              	.LVL275:
3066:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
 3077              		.loc 1 3066 0
 3078 01a0 A021     		movs	r1, #160
 3079 01a2 3420     		movs	r0, #52
 3080 01a4 FFF7FEFF 		bl	VXISI2CWrite
 3081              	.LVL276:
3067:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
 3082              		.loc 1 3067 0
 3083 01a8 1821     		movs	r1, #24
 3084 01aa 3520     		movs	r0, #53
 3085 01ac FFF7FEFF 		bl	VXISI2CWrite
 3086              	.LVL277:
3068:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
 3087              		.loc 1 3068 0
 3088 01b0 4621     		movs	r1, #70
 3089 01b2 3620     		movs	r0, #54
ARM GAS  /tmp/ccUr6nXF.s 			page 137


 3090 01b4 FFF7FEFF 		bl	VXISI2CWrite
 3091              	.LVL278:
3069:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
 3092              		.loc 1 3069 0
 3093 01b8 6421     		movs	r1, #100
 3094 01ba 3720     		movs	r0, #55
 3095 01bc FFF7FEFF 		bl	VXISI2CWrite
 3096              	.LVL279:
3070:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
 3097              		.loc 1 3070 0
 3098 01c0 0021     		movs	r1, #0
 3099 01c2 3820     		movs	r0, #56
 3100 01c4 FFF7FEFF 		bl	VXISI2CWrite
 3101              	.LVL280:
3071:Src/main.c    **** 	VXISI2CWrite(0x3A,0x03);
 3102              		.loc 1 3071 0
 3103 01c8 FF21     		movs	r1, #255
 3104 01ca 3920     		movs	r0, #57
 3105 01cc FFF7FEFF 		bl	VXISI2CWrite
 3106              	.LVL281:
3072:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
 3107              		.loc 1 3072 0
 3108 01d0 0321     		movs	r1, #3
 3109 01d2 3A20     		movs	r0, #58
 3110 01d4 FFF7FEFF 		bl	VXISI2CWrite
 3111              	.LVL282:
3073:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
 3112              		.loc 1 3073 0
 3113 01d8 8021     		movs	r1, #128
 3114 01da 3B20     		movs	r0, #59
 3115 01dc FFF7FEFF 		bl	VXISI2CWrite
 3116              	.LVL283:
3074:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
 3117              		.loc 1 3074 0
 3118 01e0 8021     		movs	r1, #128
 3119 01e2 3C20     		movs	r0, #60
 3120 01e4 FFF7FEFF 		bl	VXISI2CWrite
 3121              	.LVL284:
3075:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
 3122              		.loc 1 3075 0
 3123 01e8 8021     		movs	r1, #128
 3124 01ea 3D20     		movs	r0, #61
 3125 01ec FFF7FEFF 		bl	VXISI2CWrite
 3126              	.LVL285:
3076:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
 3127              		.loc 1 3076 0
 3128 01f0 8021     		movs	r1, #128
 3129 01f2 3E20     		movs	r0, #62
 3130 01f4 FFF7FEFF 		bl	VXISI2CWrite
 3131              	.LVL286:
3077:Src/main.c    **** 	//VXISI2CWrite(0xVXISI);2CWrite(0x80
 3132              		.loc 1 3077 0
 3133 01f8 8021     		movs	r1, #128
 3134 01fa 3F20     		movs	r0, #63
 3135 01fc FFF7FEFF 		bl	VXISI2CWrite
 3136              	.LVL287:
3079:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
ARM GAS  /tmp/ccUr6nXF.s 			page 138


 3137              		.loc 1 3079 0
 3138 0200 6021     		movs	r1, #96
 3139 0202 4120     		movs	r0, #65
 3140 0204 FFF7FEFF 		bl	VXISI2CWrite
 3141              	.LVL288:
3080:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
 3142              		.loc 1 3080 0
 3143 0208 5F21     		movs	r1, #95
 3144 020a 4220     		movs	r0, #66
 3145 020c FFF7FEFF 		bl	VXISI2CWrite
 3146              	.LVL289:
3081:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
 3147              		.loc 1 3081 0
 3148 0210 3721     		movs	r1, #55
 3149 0212 4320     		movs	r0, #67
 3150 0214 FFF7FEFF 		bl	VXISI2CWrite
 3151              	.LVL290:
3082:Src/main.c    **** 	VXISI2CWrite(0x45,0x04);
 3152              		.loc 1 3082 0
 3153 0218 1421     		movs	r1, #20
 3154 021a 4420     		movs	r0, #68
 3155 021c FFF7FEFF 		bl	VXISI2CWrite
 3156              	.LVL291:
3083:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
 3157              		.loc 1 3083 0
 3158 0220 0421     		movs	r1, #4
 3159 0222 4520     		movs	r0, #69
 3160 0224 FFF7FEFF 		bl	VXISI2CWrite
 3161              	.LVL292:
3084:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
 3162              		.loc 1 3084 0
 3163 0228 0021     		movs	r1, #0
 3164 022a 4620     		movs	r0, #70
 3165 022c FFF7FEFF 		bl	VXISI2CWrite
 3166              	.LVL293:
3085:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
 3167              		.loc 1 3085 0
 3168 0230 0021     		movs	r1, #0
 3169 0232 4720     		movs	r0, #71
 3170 0234 FFF7FEFF 		bl	VXISI2CWrite
 3171              	.LVL294:
3086:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
 3172              		.loc 1 3086 0
 3173 0238 0021     		movs	r1, #0
 3174 023a 4820     		movs	r0, #72
 3175 023c FFF7FEFF 		bl	VXISI2CWrite
 3176              	.LVL295:
3087:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
 3177              		.loc 1 3087 0
 3178 0240 0021     		movs	r1, #0
 3179 0242 4920     		movs	r0, #73
 3180 0244 FFF7FEFF 		bl	VXISI2CWrite
 3181              	.LVL296:
3088:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
 3182              		.loc 1 3088 0
 3183 0248 2021     		movs	r1, #32
 3184 024a 4B20     		movs	r0, #75
ARM GAS  /tmp/ccUr6nXF.s 			page 139


 3185 024c FFF7FEFF 		bl	VXISI2CWrite
 3186              	.LVL297:
3089:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
 3187              		.loc 1 3089 0
 3188 0250 0021     		movs	r1, #0
 3189 0252 4C20     		movs	r0, #76
 3190 0254 FFF7FEFF 		bl	VXISI2CWrite
 3191              	.LVL298:
3090:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
 3192              		.loc 1 3090 0
 3193 0258 0021     		movs	r1, #0
 3194 025a 4D20     		movs	r0, #77
 3195 025c FFF7FEFF 		bl	VXISI2CWrite
 3196              	.LVL299:
3091:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
 3197              		.loc 1 3091 0
 3198 0260 0021     		movs	r1, #0
 3199 0262 4E20     		movs	r0, #78
 3200 0264 FFF7FEFF 		bl	VXISI2CWrite
 3201              	.LVL300:
3092:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
 3202              		.loc 1 3092 0
 3203 0268 7F21     		movs	r1, #127
 3204 026a 4F20     		movs	r0, #79
 3205 026c FFF7FEFF 		bl	VXISI2CWrite
 3206              	.LVL301:
3093:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
 3207              		.loc 1 3093 0
 3208 0270 2021     		movs	r1, #32
 3209 0272 5020     		movs	r0, #80
 3210 0274 FFF7FEFF 		bl	VXISI2CWrite
 3211              	.LVL302:
3094:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);
 3212              		.loc 1 3094 0
 3213 0278 0021     		movs	r1, #0
 3214 027a 5120     		movs	r0, #81
 3215 027c FFF7FEFF 		bl	VXISI2CWrite
 3216              	.LVL303:
3095:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);
 3217              		.loc 1 3095 0
 3218 0280 0021     		movs	r1, #0
 3219 0282 5220     		movs	r0, #82
 3220 0284 FFF7FEFF 		bl	VXISI2CWrite
 3221              	.LVL304:
3096:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);
 3222              		.loc 1 3096 0
 3223 0288 0421     		movs	r1, #4
 3224 028a 5320     		movs	r0, #83
 3225 028c FFF7FEFF 		bl	VXISI2CWrite
 3226              	.LVL305:
3097:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);
 3227              		.loc 1 3097 0
 3228 0290 0021     		movs	r1, #0
 3229 0292 5420     		movs	r0, #84
 3230 0294 FFF7FEFF 		bl	VXISI2CWrite
 3231              	.LVL306:
3098:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);
ARM GAS  /tmp/ccUr6nXF.s 			page 140


 3232              		.loc 1 3098 0
 3233 0298 E021     		movs	r1, #224
 3234 029a 5520     		movs	r0, #85
 3235 029c FFF7FEFF 		bl	VXISI2CWrite
 3236              	.LVL307:
3099:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
 3237              		.loc 1 3099 0
 3238 02a0 4021     		movs	r1, #64
 3239 02a2 5620     		movs	r0, #86
 3240 02a4 FFF7FEFF 		bl	VXISI2CWrite
 3241              	.LVL308:
3100:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
 3242              		.loc 1 3100 0
 3243 02a8 0421     		movs	r1, #4
 3244 02aa 5720     		movs	r0, #87
 3245 02ac FFF7FEFF 		bl	VXISI2CWrite
 3246              	.LVL309:
3101:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
 3247              		.loc 1 3101 0
 3248 02b0 0021     		movs	r1, #0
 3249 02b2 5820     		movs	r0, #88
 3250 02b4 FFF7FEFF 		bl	VXISI2CWrite
 3251              	.LVL310:
3102:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
 3252              		.loc 1 3102 0
 3253 02b8 0821     		movs	r1, #8
 3254 02ba 5920     		movs	r0, #89
 3255 02bc FFF7FEFF 		bl	VXISI2CWrite
 3256              	.LVL311:
3103:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
 3257              		.loc 1 3103 0
 3258 02c0 1021     		movs	r1, #16
 3259 02c2 5A20     		movs	r0, #90
 3260 02c4 FFF7FEFF 		bl	VXISI2CWrite
 3261              	.LVL312:
3104:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
 3262              		.loc 1 3104 0
 3263 02c8 0021     		movs	r1, #0
 3264 02ca 5B20     		movs	r0, #91
 3265 02cc FFF7FEFF 		bl	VXISI2CWrite
 3266              	.LVL313:
3105:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);
 3267              		.loc 1 3105 0
 3268 02d0 6821     		movs	r1, #104
 3269 02d2 5C20     		movs	r0, #92
 3270 02d4 FFF7FEFF 		bl	VXISI2CWrite
 3271              	.LVL314:
3106:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);
 3272              		.loc 1 3106 0
 3273 02d8 4021     		movs	r1, #64
 3274 02da 5D20     		movs	r0, #93
 3275 02dc FFF7FEFF 		bl	VXISI2CWrite
 3276              	.LVL315:
3107:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);
 3277              		.loc 1 3107 0
 3278 02e0 0821     		movs	r1, #8
 3279 02e2 5E20     		movs	r0, #94
ARM GAS  /tmp/ccUr6nXF.s 			page 141


 3280 02e4 FFF7FEFF 		bl	VXISI2CWrite
 3281              	.LVL316:
3108:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
 3282              		.loc 1 3108 0
 3283 02e8 0021     		movs	r1, #0
 3284 02ea 5F20     		movs	r0, #95
 3285 02ec FFF7FEFF 		bl	VXISI2CWrite
 3286              	.LVL317:
3109:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);
 3287              		.loc 1 3109 0
 3288 02f0 E021     		movs	r1, #224
 3289 02f2 6020     		movs	r0, #96
 3290 02f4 FFF7FEFF 		bl	VXISI2CWrite
 3291              	.LVL318:
3110:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
 3292              		.loc 1 3110 0
 3293 02f8 5421     		movs	r1, #84
 3294 02fa 6120     		movs	r0, #97
 3295 02fc FFF7FEFF 		bl	VXISI2CWrite
 3296              	.LVL319:
3111:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
 3297              		.loc 1 3111 0
 3298 0300 3321     		movs	r1, #51
 3299 0302 6220     		movs	r0, #98
 3300 0304 FFF7FEFF 		bl	VXISI2CWrite
 3301              	.LVL320:
3112:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
 3302              		.loc 1 3112 0
 3303 0308 0121     		movs	r1, #1
 3304 030a 6320     		movs	r0, #99
 3305 030c FFF7FEFF 		bl	VXISI2CWrite
 3306              	.LVL321:
3113:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
 3307              		.loc 1 3113 0
 3308 0310 FF21     		movs	r1, #255
 3309 0312 6420     		movs	r0, #100
 3310 0314 FFF7FEFF 		bl	VXISI2CWrite
 3311              	.LVL322:
3114:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
 3312              		.loc 1 3114 0
 3313 0318 0121     		movs	r1, #1
 3314 031a 6520     		movs	r0, #101
 3315 031c FFF7FEFF 		bl	VXISI2CWrite
 3316              	.LVL323:
3115:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
 3317              		.loc 1 3115 0
 3318 0320 FF21     		movs	r1, #255
 3319 0322 6620     		movs	r0, #102
 3320 0324 FFF7FEFF 		bl	VXISI2CWrite
 3321              	.LVL324:
3116:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
 3322              		.loc 1 3116 0
 3323 0328 8921     		movs	r1, #137
 3324 032a 6720     		movs	r0, #103
 3325 032c FFF7FEFF 		bl	VXISI2CWrite
 3326              	.LVL325:
3117:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
ARM GAS  /tmp/ccUr6nXF.s 			page 142


 3327              		.loc 1 3117 0
 3328 0330 AB21     		movs	r1, #171
 3329 0332 6820     		movs	r0, #104
 3330 0334 FFF7FEFF 		bl	VXISI2CWrite
 3331              	.LVL326:
3118:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
 3332              		.loc 1 3118 0
 3333 0338 8821     		movs	r1, #136
 3334 033a 6920     		movs	r0, #105
 3335 033c FFF7FEFF 		bl	VXISI2CWrite
 3336              	.LVL327:
3119:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
 3337              		.loc 1 3119 0
 3338 0340 6E21     		movs	r1, #110
 3339 0342 6A20     		movs	r0, #106
 3340 0344 FFF7FEFF 		bl	VXISI2CWrite
 3341              	.LVL328:
3120:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
 3342              		.loc 1 3120 0
 3343 0348 6E21     		movs	r1, #110
 3344 034a 6B20     		movs	r0, #107
 3345 034c FFF7FEFF 		bl	VXISI2CWrite
 3346              	.LVL329:
3121:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
 3347              		.loc 1 3121 0
 3348 0350 6E21     		movs	r1, #110
 3349 0352 6C20     		movs	r0, #108
 3350 0354 FFF7FEFF 		bl	VXISI2CWrite
 3351              	.LVL330:
3122:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
 3352              		.loc 1 3122 0
 3353 0358 0021     		movs	r1, #0
 3354 035a 6D20     		movs	r0, #109
 3355 035c FFF7FEFF 		bl	VXISI2CWrite
 3356              	.LVL331:
3123:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
 3357              		.loc 1 3123 0
 3358 0360 0021     		movs	r1, #0
 3359 0362 6E20     		movs	r0, #110
 3360 0364 FFF7FEFF 		bl	VXISI2CWrite
 3361              	.LVL332:
3124:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
 3362              		.loc 1 3124 0
 3363 0368 0021     		movs	r1, #0
 3364 036a 6F20     		movs	r0, #111
 3365 036c FFF7FEFF 		bl	VXISI2CWrite
 3366              	.LVL333:
3125:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
 3367              		.loc 1 3125 0
 3368 0370 0021     		movs	r1, #0
 3369 0372 7020     		movs	r0, #112
 3370 0374 FFF7FEFF 		bl	VXISI2CWrite
 3371              	.LVL334:
3126:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
 3372              		.loc 1 3126 0
 3373 0378 0021     		movs	r1, #0
 3374 037a 7120     		movs	r0, #113
ARM GAS  /tmp/ccUr6nXF.s 			page 143


 3375 037c FFF7FEFF 		bl	VXISI2CWrite
 3376              	.LVL335:
3127:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
 3377              		.loc 1 3127 0
 3378 0380 0021     		movs	r1, #0
 3379 0382 7220     		movs	r0, #114
 3380 0384 FFF7FEFF 		bl	VXISI2CWrite
 3381              	.LVL336:
3128:Src/main.c    **** 	VXISI2CWrite(0x74,0x00);
 3382              		.loc 1 3128 0
 3383 0388 0021     		movs	r1, #0
 3384 038a 7320     		movs	r0, #115
 3385 038c FFF7FEFF 		bl	VXISI2CWrite
 3386              	.LVL337:
3129:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
 3387              		.loc 1 3129 0
 3388 0390 0021     		movs	r1, #0
 3389 0392 7420     		movs	r0, #116
 3390 0394 FFF7FEFF 		bl	VXISI2CWrite
 3391              	.LVL338:
3130:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
 3392              		.loc 1 3130 0
 3393 0398 FF21     		movs	r1, #255
 3394 039a 7520     		movs	r0, #117
 3395 039c FFF7FEFF 		bl	VXISI2CWrite
 3396              	.LVL339:
3131:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
 3397              		.loc 1 3131 0
 3398 03a0 FF21     		movs	r1, #255
 3399 03a2 7620     		movs	r0, #118
 3400 03a4 FFF7FEFF 		bl	VXISI2CWrite
 3401              	.LVL340:
3132:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
 3402              		.loc 1 3132 0
 3403 03a8 FF21     		movs	r1, #255
 3404 03aa 7720     		movs	r0, #119
 3405 03ac FFF7FEFF 		bl	VXISI2CWrite
 3406              	.LVL341:
3133:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
 3407              		.loc 1 3133 0
 3408 03b0 FF21     		movs	r1, #255
 3409 03b2 7820     		movs	r0, #120
 3410 03b4 FFF7FEFF 		bl	VXISI2CWrite
 3411              	.LVL342:
3134:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
 3412              		.loc 1 3134 0
 3413 03b8 FF21     		movs	r1, #255
 3414 03ba 7920     		movs	r0, #121
 3415 03bc FFF7FEFF 		bl	VXISI2CWrite
 3416              	.LVL343:
3135:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
 3417              		.loc 1 3135 0
 3418 03c0 FF21     		movs	r1, #255
 3419 03c2 7A20     		movs	r0, #122
 3420 03c4 FFF7FEFF 		bl	VXISI2CWrite
 3421              	.LVL344:
3136:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
ARM GAS  /tmp/ccUr6nXF.s 			page 144


 3422              		.loc 1 3136 0
 3423 03c8 FF21     		movs	r1, #255
 3424 03ca 7B20     		movs	r0, #123
 3425 03cc FFF7FEFF 		bl	VXISI2CWrite
 3426              	.LVL345:
3137:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
 3427              		.loc 1 3137 0
 3428 03d0 FF21     		movs	r1, #255
 3429 03d2 7C20     		movs	r0, #124
 3430 03d4 FFF7FEFF 		bl	VXISI2CWrite
 3431              	.LVL346:
3138:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
 3432              		.loc 1 3138 0
 3433 03d8 F021     		movs	r1, #240
 3434 03da 7D20     		movs	r0, #125
 3435 03dc FFF7FEFF 		bl	VXISI2CWrite
 3436              	.LVL347:
3139:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
 3437              		.loc 1 3139 0
 3438 03e0 8021     		movs	r1, #128
 3439 03e2 7E20     		movs	r0, #126
 3440 03e4 FFF7FEFF 		bl	VXISI2CWrite
 3441              	.LVL348:
3140:Src/main.c    **** 	VXISI2CWrite(0x80,0x00);
 3442              		.loc 1 3140 0
 3443 03e8 0021     		movs	r1, #0
 3444 03ea 7F20     		movs	r0, #127
 3445 03ec FFF7FEFF 		bl	VXISI2CWrite
 3446              	.LVL349:
3141:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);
 3447              		.loc 1 3141 0
 3448 03f0 0021     		movs	r1, #0
 3449 03f2 8020     		movs	r0, #128
 3450 03f4 FFF7FEFF 		bl	VXISI2CWrite
 3451              	.LVL350:
 3452 03f8 02E0     		b	.L189
 3453              	.L190:
 3454 03fa 00BF     		.align	2
 3455              	.L188:
 3456 03fc 00000000 		.word	.LC34
 3457              	.L189:
3142:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
 3458              		.loc 1 3142 0
 3459 0400 3421     		movs	r1, #52
 3460 0402 8120     		movs	r0, #129
 3461 0404 FFF7FEFF 		bl	VXISI2CWrite
 3462              	.LVL351:
3143:Src/main.c    **** 	VXISI2CWrite(0x83,0x05);
 3463              		.loc 1 3143 0
 3464 0408 4021     		movs	r1, #64
 3465 040a 8220     		movs	r0, #130
 3466 040c FFF7FEFF 		bl	VXISI2CWrite
 3467              	.LVL352:
3144:Src/main.c    **** 	VXISI2CWrite(0x84,0x59);
 3468              		.loc 1 3144 0
 3469 0410 0521     		movs	r1, #5
 3470 0412 8320     		movs	r0, #131
ARM GAS  /tmp/ccUr6nXF.s 			page 145


 3471 0414 FFF7FEFF 		bl	VXISI2CWrite
 3472              	.LVL353:
3145:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
 3473              		.loc 1 3145 0
 3474 0418 5921     		movs	r1, #89
 3475 041a 8420     		movs	r0, #132
 3476 041c FFF7FEFF 		bl	VXISI2CWrite
 3477              	.LVL354:
3146:Src/main.c    **** 	VXISI2CWrite(0x86,0x04);
 3478              		.loc 1 3146 0
 3479 0420 FD21     		movs	r1, #253
 3480 0422 8520     		movs	r0, #133
 3481 0424 FFF7FEFF 		bl	VXISI2CWrite
 3482              	.LVL355:
3147:Src/main.c    **** 	VXISI2CWrite(0x87,0x24);
 3483              		.loc 1 3147 0
 3484 0428 0421     		movs	r1, #4
 3485 042a 8620     		movs	r0, #134
 3486 042c FFF7FEFF 		bl	VXISI2CWrite
 3487              	.LVL356:
3148:Src/main.c    **** 	VXISI2CWrite(0x88,0x94);
 3488              		.loc 1 3148 0
 3489 0430 2421     		movs	r1, #36
 3490 0432 8720     		movs	r0, #135
 3491 0434 FFF7FEFF 		bl	VXISI2CWrite
 3492              	.LVL357:
3149:Src/main.c    **** 	VXISI2CWrite(0x89,0x58);
 3493              		.loc 1 3149 0
 3494 0438 9421     		movs	r1, #148
 3495 043a 8820     		movs	r0, #136
 3496 043c FFF7FEFF 		bl	VXISI2CWrite
 3497              	.LVL358:
3150:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
 3498              		.loc 1 3150 0
 3499 0440 5821     		movs	r1, #88
 3500 0442 8920     		movs	r0, #137
 3501 0444 FFF7FEFF 		bl	VXISI2CWrite
 3502              	.LVL359:
3151:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
 3503              		.loc 1 3151 0
 3504 0448 0021     		movs	r1, #0
 3505 044a 8A20     		movs	r0, #138
 3506 044c FFF7FEFF 		bl	VXISI2CWrite
 3507              	.LVL360:
3152:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
 3508              		.loc 1 3152 0
 3509 0450 7E21     		movs	r1, #126
 3510 0452 8B20     		movs	r0, #139
 3511 0454 FFF7FEFF 		bl	VXISI2CWrite
 3512              	.LVL361:
3153:Src/main.c    **** 	VXISI2CWrite(0x8D,0x2C);
 3513              		.loc 1 3153 0
 3514 0458 0321     		movs	r1, #3
 3515 045a 8C20     		movs	r0, #140
 3516 045c FFF7FEFF 		bl	VXISI2CWrite
 3517              	.LVL362:
3154:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
ARM GAS  /tmp/ccUr6nXF.s 			page 146


 3518              		.loc 1 3154 0
 3519 0460 2C21     		movs	r1, #44
 3520 0462 8D20     		movs	r0, #141
 3521 0464 FFF7FEFF 		bl	VXISI2CWrite
 3522              	.LVL363:
3155:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
 3523              		.loc 1 3155 0
 3524 0468 8C21     		movs	r1, #140
 3525 046a 8E20     		movs	r0, #142
 3526 046c FFF7FEFF 		bl	VXISI2CWrite
 3527              	.LVL364:
3156:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
 3528              		.loc 1 3156 0
 3529 0470 0021     		movs	r1, #0
 3530 0472 8F20     		movs	r0, #143
 3531 0474 FFF7FEFF 		bl	VXISI2CWrite
 3532              	.LVL365:
3157:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
 3533              		.loc 1 3157 0
 3534 0478 CC21     		movs	r1, #204
 3535 047a 9020     		movs	r0, #144
 3536 047c FFF7FEFF 		bl	VXISI2CWrite
 3537              	.LVL366:
3158:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
 3538              		.loc 1 3158 0
 3539 0480 4121     		movs	r1, #65
 3540 0482 9120     		movs	r0, #145
 3541 0484 FFF7FEFF 		bl	VXISI2CWrite
 3542              	.LVL367:
3159:Src/main.c    **** 	VXISI2CWrite(0x93,0x31);
 3543              		.loc 1 3159 0
 3544 0488 C421     		movs	r1, #196
 3545 048a 9220     		movs	r0, #146
 3546 048c FFF7FEFF 		bl	VXISI2CWrite
 3547              	.LVL368:
3160:Src/main.c    **** 	VXISI2CWrite(0x94,0x87);
 3548              		.loc 1 3160 0
 3549 0490 3121     		movs	r1, #49
 3550 0492 9320     		movs	r0, #147
 3551 0494 FFF7FEFF 		bl	VXISI2CWrite
 3552              	.LVL369:
3161:Src/main.c    **** 	VXISI2CWrite(0x95,0xD0);
 3553              		.loc 1 3161 0
 3554 0498 8721     		movs	r1, #135
 3555 049a 9420     		movs	r0, #148
 3556 049c FFF7FEFF 		bl	VXISI2CWrite
 3557              	.LVL370:
3162:Src/main.c    **** 	VXISI2CWrite(0x96,0xF3);
 3558              		.loc 1 3162 0
 3559 04a0 D021     		movs	r1, #208
 3560 04a2 9520     		movs	r0, #149
 3561 04a4 FFF7FEFF 		bl	VXISI2CWrite
 3562              	.LVL371:
3163:Src/main.c    **** 	VXISI2CWrite(0x97,0x20);
 3563              		.loc 1 3163 0
 3564 04a8 F321     		movs	r1, #243
 3565 04aa 9620     		movs	r0, #150
ARM GAS  /tmp/ccUr6nXF.s 			page 147


 3566 04ac FFF7FEFF 		bl	VXISI2CWrite
 3567              	.LVL372:
3164:Src/main.c    **** 	VXISI2CWrite(0x98,0x11);
 3568              		.loc 1 3164 0
 3569 04b0 2021     		movs	r1, #32
 3570 04b2 9720     		movs	r0, #151
 3571 04b4 FFF7FEFF 		bl	VXISI2CWrite
 3572              	.LVL373:
3165:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
 3573              		.loc 1 3165 0
 3574 04b8 1121     		movs	r1, #17
 3575 04ba 9820     		movs	r0, #152
 3576 04bc FFF7FEFF 		bl	VXISI2CWrite
 3577              	.LVL374:
3166:Src/main.c    **** 	VXISI2CWrite(0x9A,0xFF);
 3578              		.loc 1 3166 0
 3579 04c0 9021     		movs	r1, #144
 3580 04c2 9920     		movs	r0, #153
 3581 04c4 FFF7FEFF 		bl	VXISI2CWrite
 3582              	.LVL375:
3167:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
 3583              		.loc 1 3167 0
 3584 04c8 FF21     		movs	r1, #255
 3585 04ca 9A20     		movs	r0, #154
 3586 04cc FFF7FEFF 		bl	VXISI2CWrite
 3587              	.LVL376:
3168:Src/main.c    **** 	VXISI2CWrite(0x9C,0x0A);
 3588              		.loc 1 3168 0
 3589 04d0 0421     		movs	r1, #4
 3590 04d2 9B20     		movs	r0, #155
 3591 04d4 FFF7FEFF 		bl	VXISI2CWrite
 3592              	.LVL377:
3169:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
 3593              		.loc 1 3169 0
 3594 04d8 0A21     		movs	r1, #10
 3595 04da 9C20     		movs	r0, #156
 3596 04dc FFF7FEFF 		bl	VXISI2CWrite
 3597              	.LVL378:
3170:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
 3598              		.loc 1 3170 0
 3599 04e0 0021     		movs	r1, #0
 3600 04e2 9D20     		movs	r0, #157
 3601 04e4 FFF7FEFF 		bl	VXISI2CWrite
 3602              	.LVL379:
3171:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
 3603              		.loc 1 3171 0
 3604 04e8 0421     		movs	r1, #4
 3605 04ea 9E20     		movs	r0, #158
 3606 04ec FFF7FEFF 		bl	VXISI2CWrite
 3607              	.LVL380:
3172:Src/main.c    **** 	VXISI2CWrite(0xA0,0x2F);
 3608              		.loc 1 3172 0
 3609 04f0 6521     		movs	r1, #101
 3610 04f2 9F20     		movs	r0, #159
 3611 04f4 FFF7FEFF 		bl	VXISI2CWrite
 3612              	.LVL381:
3173:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD9);
ARM GAS  /tmp/ccUr6nXF.s 			page 148


 3613              		.loc 1 3173 0
 3614 04f8 2F21     		movs	r1, #47
 3615 04fa A020     		movs	r0, #160
 3616 04fc FFF7FEFF 		bl	VXISI2CWrite
 3617              	.LVL382:
3174:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
 3618              		.loc 1 3174 0
 3619 0500 D921     		movs	r1, #217
 3620 0502 A120     		movs	r0, #161
 3621 0504 FFF7FEFF 		bl	VXISI2CWrite
 3622              	.LVL383:
3175:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
 3623              		.loc 1 3175 0
 3624 0508 9821     		movs	r1, #152
 3625 050a A220     		movs	r0, #162
 3626 050c FFF7FEFF 		bl	VXISI2CWrite
 3627              	.LVL384:
3176:Src/main.c    **** 	VXISI2CWrite(0xA4,0xE1);
 3628              		.loc 1 3176 0
 3629 0510 8721     		movs	r1, #135
 3630 0512 A320     		movs	r0, #163
 3631 0514 FFF7FEFF 		bl	VXISI2CWrite
 3632              	.LVL385:
3177:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);
 3633              		.loc 1 3177 0
 3634 0518 E121     		movs	r1, #225
 3635 051a A420     		movs	r0, #164
 3636 051c FFF7FEFF 		bl	VXISI2CWrite
 3637              	.LVL386:
3178:Src/main.c    **** 	VXISI2CWrite(0xA6,0xC2);
 3638              		.loc 1 3178 0
 3639 0520 3821     		movs	r1, #56
 3640 0522 A520     		movs	r0, #165
 3641 0524 FFF7FEFF 		bl	VXISI2CWrite
 3642              	.LVL387:
3179:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
 3643              		.loc 1 3179 0
 3644 0528 C221     		movs	r1, #194
 3645 052a A620     		movs	r0, #166
 3646 052c FFF7FEFF 		bl	VXISI2CWrite
 3647              	.LVL388:
3180:Src/main.c    **** 	VXISI2CWrite(0xA8,0x00);
 3648              		.loc 1 3180 0
 3649 0530 7021     		movs	r1, #112
 3650 0532 A720     		movs	r0, #167
 3651 0534 FFF7FEFF 		bl	VXISI2CWrite
 3652              	.LVL389:
3181:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
 3653              		.loc 1 3181 0
 3654 0538 0021     		movs	r1, #0
 3655 053a A820     		movs	r0, #168
 3656 053c FFF7FEFF 		bl	VXISI2CWrite
 3657              	.LVL390:
3182:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);
 3658              		.loc 1 3182 0
 3659 0540 1E21     		movs	r1, #30
 3660 0542 A920     		movs	r0, #169
ARM GAS  /tmp/ccUr6nXF.s 			page 149


 3661 0544 FFF7FEFF 		bl	VXISI2CWrite
 3662              	.LVL391:
3183:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
 3663              		.loc 1 3183 0
 3664 0548 2E21     		movs	r1, #46
 3665 054a AA20     		movs	r0, #170
 3666 054c FFF7FEFF 		bl	VXISI2CWrite
 3667              	.LVL392:
3184:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);
 3668              		.loc 1 3184 0
 3669 0550 0021     		movs	r1, #0
 3670 0552 AB20     		movs	r0, #171
 3671 0554 FFF7FEFF 		bl	VXISI2CWrite
 3672              	.LVL393:
3185:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF3);
 3673              		.loc 1 3185 0
 3674 0558 8421     		movs	r1, #132
 3675 055a AC20     		movs	r0, #172
 3676 055c FFF7FEFF 		bl	VXISI2CWrite
 3677              	.LVL394:
3186:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
 3678              		.loc 1 3186 0
 3679 0560 F321     		movs	r1, #243
 3680 0562 AD20     		movs	r0, #173
 3681 0564 FFF7FEFF 		bl	VXISI2CWrite
 3682              	.LVL395:
3187:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
 3683              		.loc 1 3187 0
 3684 0568 6521     		movs	r1, #101
 3685 056a AE20     		movs	r0, #174
 3686 056c FFF7FEFF 		bl	VXISI2CWrite
 3687              	.LVL396:
3188:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
 3688              		.loc 1 3188 0
 3689 0570 9921     		movs	r1, #153
 3690 0572 AF20     		movs	r0, #175
 3691 0574 FFF7FEFF 		bl	VXISI2CWrite
 3692              	.LVL397:
3189:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
 3693              		.loc 1 3189 0
 3694 0578 0021     		movs	r1, #0
 3695 057a B020     		movs	r0, #176
 3696 057c FFF7FEFF 		bl	VXISI2CWrite
 3697              	.LVL398:
3190:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
 3698              		.loc 1 3190 0
 3699 0580 0021     		movs	r1, #0
 3700 0582 B120     		movs	r0, #177
 3701 0584 FFF7FEFF 		bl	VXISI2CWrite
 3702              	.LVL399:
3191:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
 3703              		.loc 1 3191 0
 3704 0588 0021     		movs	r1, #0
 3705 058a B220     		movs	r0, #178
 3706 058c FFF7FEFF 		bl	VXISI2CWrite
 3707              	.LVL400:
3192:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
ARM GAS  /tmp/ccUr6nXF.s 			page 150


 3708              		.loc 1 3192 0
 3709 0590 0021     		movs	r1, #0
 3710 0592 B320     		movs	r0, #179
 3711 0594 FFF7FEFF 		bl	VXISI2CWrite
 3712              	.LVL401:
3193:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
 3713              		.loc 1 3193 0
 3714 0598 0021     		movs	r1, #0
 3715 059a B420     		movs	r0, #180
 3716 059c FFF7FEFF 		bl	VXISI2CWrite
 3717              	.LVL402:
3194:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
 3718              		.loc 1 3194 0
 3719 05a0 0021     		movs	r1, #0
 3720 05a2 B520     		movs	r0, #181
 3721 05a4 FFF7FEFF 		bl	VXISI2CWrite
 3722              	.LVL403:
3195:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
 3723              		.loc 1 3195 0
 3724 05a8 0021     		movs	r1, #0
 3725 05aa B620     		movs	r0, #182
 3726 05ac FFF7FEFF 		bl	VXISI2CWrite
 3727              	.LVL404:
3196:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
 3728              		.loc 1 3196 0
 3729 05b0 8021     		movs	r1, #128
 3730 05b2 B820     		movs	r0, #184
 3731 05b4 FFF7FEFF 		bl	VXISI2CWrite
 3732              	.LVL405:
3197:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
 3733              		.loc 1 3197 0
 3734 05b8 0021     		movs	r1, #0
 3735 05ba B920     		movs	r0, #185
 3736 05bc FFF7FEFF 		bl	VXISI2CWrite
 3737              	.LVL406:
3198:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
 3738              		.loc 1 3198 0
 3739 05c0 0121     		movs	r1, #1
 3740 05c2 BA20     		movs	r0, #186
 3741 05c4 FFF7FEFF 		bl	VXISI2CWrite
 3742              	.LVL407:
3199:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
 3743              		.loc 1 3199 0
 3744 05c8 0021     		movs	r1, #0
 3745 05ca BB20     		movs	r0, #187
 3746 05cc FFF7FEFF 		bl	VXISI2CWrite
 3747              	.LVL408:
3200:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
 3748              		.loc 1 3200 0
 3749 05d0 9021     		movs	r1, #144
 3750 05d2 BC20     		movs	r0, #188
 3751 05d4 FFF7FEFF 		bl	VXISI2CWrite
 3752              	.LVL409:
3201:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
 3753              		.loc 1 3201 0
 3754 05d8 0121     		movs	r1, #1
 3755 05da BD20     		movs	r0, #189
ARM GAS  /tmp/ccUr6nXF.s 			page 151


 3756 05dc FFF7FEFF 		bl	VXISI2CWrite
 3757              	.LVL410:
3202:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
 3758              		.loc 1 3202 0
 3759 05e0 2C21     		movs	r1, #44
 3760 05e2 BE20     		movs	r0, #190
 3761 05e4 FFF7FEFF 		bl	VXISI2CWrite
 3762              	.LVL411:
3203:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
 3763              		.loc 1 3203 0
 3764 05e8 0021     		movs	r1, #0
 3765 05ea C020     		movs	r0, #192
 3766 05ec FFF7FEFF 		bl	VXISI2CWrite
 3767              	.LVL412:
3204:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
 3768              		.loc 1 3204 0
 3769 05f0 2021     		movs	r1, #32
 3770 05f2 C120     		movs	r0, #193
 3771 05f4 FFF7FEFF 		bl	VXISI2CWrite
 3772              	.LVL413:
3205:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
 3773              		.loc 1 3205 0
 3774 05f8 2021     		movs	r1, #32
 3775 05fa C220     		movs	r0, #194
 3776 05fc FFF7FEFF 		bl	VXISI2CWrite
 3777              	.LVL414:
3206:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
 3778              		.loc 1 3206 0
 3779 0600 2021     		movs	r1, #32
 3780 0602 C320     		movs	r0, #195
 3781 0604 FFF7FEFF 		bl	VXISI2CWrite
 3782              	.LVL415:
3207:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
 3783              		.loc 1 3207 0
 3784 0608 2021     		movs	r1, #32
 3785 060a C420     		movs	r0, #196
 3786 060c FFF7FEFF 		bl	VXISI2CWrite
 3787              	.LVL416:
3208:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
 3788              		.loc 1 3208 0
 3789 0610 2021     		movs	r1, #32
 3790 0612 C520     		movs	r0, #197
 3791 0614 FFF7FEFF 		bl	VXISI2CWrite
 3792              	.LVL417:
3209:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
 3793              		.loc 1 3209 0
 3794 0618 FF21     		movs	r1, #255
 3795 061a D020     		movs	r0, #208
 3796 061c FFF7FEFF 		bl	VXISI2CWrite
 3797              	.LVL418:
3210:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
 3798              		.loc 1 3210 0
 3799 0620 3F21     		movs	r1, #63
 3800 0622 D120     		movs	r0, #209
 3801 0624 FFF7FEFF 		bl	VXISI2CWrite
 3802              	.LVL419:
3211:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
ARM GAS  /tmp/ccUr6nXF.s 			page 152


 3803              		.loc 1 3211 0
 3804 0628 C221     		movs	r1, #194
 3805 062a D220     		movs	r0, #210
 3806 062c FFF7FEFF 		bl	VXISI2CWrite
 3807              	.LVL420:
3212:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
 3808              		.loc 1 3212 0
 3809 0630 3F21     		movs	r1, #63
 3810 0632 D320     		movs	r0, #211
 3811 0634 FFF7FEFF 		bl	VXISI2CWrite
 3812              	.LVL421:
3213:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
 3813              		.loc 1 3213 0
 3814 0638 0021     		movs	r1, #0
 3815 063a D420     		movs	r0, #212
 3816 063c FFF7FEFF 		bl	VXISI2CWrite
 3817              	.LVL422:
3214:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
 3818              		.loc 1 3214 0
 3819 0640 0021     		movs	r1, #0
 3820 0642 D520     		movs	r0, #213
 3821 0644 FFF7FEFF 		bl	VXISI2CWrite
 3822              	.LVL423:
3215:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
 3823              		.loc 1 3215 0
 3824 0648 0021     		movs	r1, #0
 3825 064a D620     		movs	r0, #214
 3826 064c FFF7FEFF 		bl	VXISI2CWrite
 3827              	.LVL424:
3216:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
 3828              		.loc 1 3216 0
 3829 0650 1021     		movs	r1, #16
 3830 0652 D720     		movs	r0, #215
 3831 0654 FFF7FEFF 		bl	VXISI2CWrite
 3832              	.LVL425:
3217:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
 3833              		.loc 1 3217 0
 3834 0658 0021     		movs	r1, #0
 3835 065a D820     		movs	r0, #216
 3836 065c FFF7FEFF 		bl	VXISI2CWrite
 3837              	.LVL426:
3218:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);
 3838              		.loc 1 3218 0
 3839 0660 7721     		movs	r1, #119
 3840 0662 DC20     		movs	r0, #220
 3841 0664 FFF7FEFF 		bl	VXISI2CWrite
 3842              	.LVL427:
3219:Src/main.c    **** 	VXISI2CWrite(0xDE,0xAF);
 3843              		.loc 1 3219 0
 3844 0668 0021     		movs	r1, #0
 3845 066a DD20     		movs	r0, #221
 3846 066c FFF7FEFF 		bl	VXISI2CWrite
 3847              	.LVL428:
3220:Src/main.c    **** 	VXISI2CWrite(0xDF,0xEF);
 3848              		.loc 1 3220 0
 3849 0670 AF21     		movs	r1, #175
 3850 0672 DE20     		movs	r0, #222
ARM GAS  /tmp/ccUr6nXF.s 			page 153


 3851 0674 FFF7FEFF 		bl	VXISI2CWrite
 3852              	.LVL429:
3221:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
 3853              		.loc 1 3221 0
 3854 0678 EF21     		movs	r1, #239
 3855 067a DF20     		movs	r0, #223
 3856 067c FFF7FEFF 		bl	VXISI2CWrite
 3857              	.LVL430:
3222:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
 3858              		.loc 1 3222 0
 3859 0680 0021     		movs	r1, #0
 3860 0682 E020     		movs	r0, #224
 3861 0684 FFF7FEFF 		bl	VXISI2CWrite
 3862              	.LVL431:
3223:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
 3863              		.loc 1 3223 0
 3864 0688 0021     		movs	r1, #0
 3865 068a E120     		movs	r0, #225
 3866 068c FFF7FEFF 		bl	VXISI2CWrite
 3867              	.LVL432:
3224:Src/main.c    **** 	VXISI2CWrite(0xE3,0x12);
 3868              		.loc 1 3224 0
 3869 0690 0021     		movs	r1, #0
 3870 0692 E220     		movs	r0, #226
 3871 0694 FFF7FEFF 		bl	VXISI2CWrite
 3872              	.LVL433:
3225:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE2);
 3873              		.loc 1 3225 0
 3874 0698 1221     		movs	r1, #18
 3875 069a E320     		movs	r0, #227
 3876 069c FFF7FEFF 		bl	VXISI2CWrite
 3877              	.LVL434:
3226:Src/main.c    **** 	VXISI2CWrite(0xE5,0xD0);
 3878              		.loc 1 3226 0
 3879 06a0 E221     		movs	r1, #226
 3880 06a2 E420     		movs	r0, #228
 3881 06a4 FFF7FEFF 		bl	VXISI2CWrite
 3882              	.LVL435:
3227:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
 3883              		.loc 1 3227 0
 3884 06a8 D021     		movs	r1, #208
 3885 06aa E520     		movs	r0, #229
 3886 06ac FFF7FEFF 		bl	VXISI2CWrite
 3887              	.LVL436:
3228:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
 3888              		.loc 1 3228 0
 3889 06b0 0021     		movs	r1, #0
 3890 06b2 E620     		movs	r0, #230
 3891 06b4 FFF7FEFF 		bl	VXISI2CWrite
 3892              	.LVL437:
3229:Src/main.c    **** 	VXISI2CWrite(0xE8,0x0F);
 3893              		.loc 1 3229 0
 3894 06b8 0021     		movs	r1, #0
 3895 06ba E720     		movs	r0, #231
 3896 06bc FFF7FEFF 		bl	VXISI2CWrite
 3897              	.LVL438:
3230:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
ARM GAS  /tmp/ccUr6nXF.s 			page 154


 3898              		.loc 1 3230 0
 3899 06c0 0F21     		movs	r1, #15
 3900 06c2 E820     		movs	r0, #232
 3901 06c4 FFF7FEFF 		bl	VXISI2CWrite
 3902              	.LVL439:
3231:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
 3903              		.loc 1 3231 0
 3904 06c8 0021     		movs	r1, #0
 3905 06ca E920     		movs	r0, #233
 3906 06cc FFF7FEFF 		bl	VXISI2CWrite
 3907              	.LVL440:
3232:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
 3908              		.loc 1 3232 0
 3909 06d0 0021     		movs	r1, #0
 3910 06d2 EA20     		movs	r0, #234
 3911 06d4 FFF7FEFF 		bl	VXISI2CWrite
 3912              	.LVL441:
3233:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
 3913              		.loc 1 3233 0
 3914 06d8 0021     		movs	r1, #0
 3915 06da EB20     		movs	r0, #235
 3916 06dc FFF7FEFF 		bl	VXISI2CWrite
 3917              	.LVL442:
3234:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
 3918              		.loc 1 3234 0
 3919 06e0 8821     		movs	r1, #136
 3920 06e2 EC20     		movs	r0, #236
 3921 06e4 FFF7FEFF 		bl	VXISI2CWrite
 3922              	.LVL443:
3235:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
 3923              		.loc 1 3235 0
 3924 06e8 0021     		movs	r1, #0
 3925 06ea ED20     		movs	r0, #237
 3926 06ec FFF7FEFF 		bl	VXISI2CWrite
 3927              	.LVL444:
3236:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
 3928              		.loc 1 3236 0
 3929 06f0 0021     		movs	r1, #0
 3930 06f2 EE20     		movs	r0, #238
 3931 06f4 FFF7FEFF 		bl	VXISI2CWrite
 3932              	.LVL445:
3237:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
 3933              		.loc 1 3237 0
 3934 06f8 0021     		movs	r1, #0
 3935 06fa EF20     		movs	r0, #239
 3936 06fc FFF7FEFF 		bl	VXISI2CWrite
 3937              	.LVL446:
3238:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
 3938              		.loc 1 3238 0
 3939 0700 3021     		movs	r1, #48
 3940 0702 F020     		movs	r0, #240
 3941 0704 FFF7FEFF 		bl	VXISI2CWrite
 3942              	.LVL447:
3239:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
 3943              		.loc 1 3239 0
 3944 0708 4321     		movs	r1, #67
 3945 070a F120     		movs	r0, #241
ARM GAS  /tmp/ccUr6nXF.s 			page 155


 3946 070c FFF7FEFF 		bl	VXISI2CWrite
 3947              	.LVL448:
3240:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
 3948              		.loc 1 3240 0
 3949 0710 1F21     		movs	r1, #31
 3950 0712 F220     		movs	r0, #242
 3951 0714 FFF7FEFF 		bl	VXISI2CWrite
 3952              	.LVL449:
3241:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
 3953              		.loc 1 3241 0
 3954 0718 1F21     		movs	r1, #31
 3955 071a F320     		movs	r0, #243
 3956 071c FFF7FEFF 		bl	VXISI2CWrite
 3957              	.LVL450:
3242:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
 3958              		.loc 1 3242 0
 3959 0720 2221     		movs	r1, #34
 3960 0722 F420     		movs	r0, #244
 3961 0724 FFF7FEFF 		bl	VXISI2CWrite
 3962              	.LVL451:
3243:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
 3963              		.loc 1 3243 0
 3964 0728 7321     		movs	r1, #115
 3965 072a F520     		movs	r0, #245
 3966 072c FFF7FEFF 		bl	VXISI2CWrite
 3967              	.LVL452:
3244:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
 3968              		.loc 1 3244 0
 3969 0730 5321     		movs	r1, #83
 3970 0732 F620     		movs	r0, #246
 3971 0734 FFF7FEFF 		bl	VXISI2CWrite
 3972              	.LVL453:
3245:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
 3973              		.loc 1 3245 0
 3974 0738 8021     		movs	r1, #128
 3975 073a F720     		movs	r0, #247
 3976 073c FFF7FEFF 		bl	VXISI2CWrite
 3977              	.LVL454:
3246:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
 3978              		.loc 1 3246 0
 3979 0740 0121     		movs	r1, #1
 3980 0742 F820     		movs	r0, #248
 3981 0744 FFF7FEFF 		bl	VXISI2CWrite
 3982              	.LVL455:
3247:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
 3983              		.loc 1 3247 0
 3984 0748 0121     		movs	r1, #1
 3985 074a F920     		movs	r0, #249
 3986 074c FFF7FEFF 		bl	VXISI2CWrite
 3987              	.LVL456:
3248:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
 3988              		.loc 1 3248 0
 3989 0750 0021     		movs	r1, #0
 3990 0752 FA20     		movs	r0, #250
 3991 0754 FFF7FEFF 		bl	VXISI2CWrite
 3992              	.LVL457:
3249:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
ARM GAS  /tmp/ccUr6nXF.s 			page 156


 3993              		.loc 1 3249 0
 3994 0758 0021     		movs	r1, #0
 3995 075a FB20     		movs	r0, #251
 3996 075c FFF7FEFF 		bl	VXISI2CWrite
 3997              	.LVL458:
3250:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
 3998              		.loc 1 3250 0
 3999 0760 0021     		movs	r1, #0
 4000 0762 FC20     		movs	r0, #252
 4001 0764 FFF7FEFF 		bl	VXISI2CWrite
 4002              	.LVL459:
3251:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
 4003              		.loc 1 3251 0
 4004 0768 7021     		movs	r1, #112
 4005 076a FD20     		movs	r0, #253
 4006 076c FFF7FEFF 		bl	VXISI2CWrite
 4007              	.LVL460:
3252:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
 4008              		.loc 1 3252 0
 4009 0770 4021     		movs	r1, #64
 4010 0772 FE20     		movs	r0, #254
 4011 0774 FFF7FEFF 		bl	VXISI2CWrite
 4012              	.LVL461:
3253:Src/main.c    **** 					 
 4013              		.loc 1 3253 0
 4014 0778 0721     		movs	r1, #7
 4015 077a FF20     		movs	r0, #255
 4016 077c FFF7FEFF 		bl	VXISI2CWrite
 4017              	.LVL462:
3257:Src/main.c    **** 
 4018              		.loc 1 3257 0
 4019 0780 08BD     		pop	{r3, pc}
 4020              		.cfi_endproc
 4021              	.LFE91:
 4023 0782 00BF     		.section	.text.SET_VS4210_1280_720_out,"ax",%progbits
 4024              		.align	1
 4025              		.global	SET_VS4210_1280_720_out
 4026              		.syntax unified
 4027              		.thumb
 4028              		.thumb_func
 4029              		.fpu softvfp
 4031              	SET_VS4210_1280_720_out:
 4032              	.LFB92:
3260:Src/main.c    **** 	Printf("\r\nSET_VS4210_1280_720_out");
 4033              		.loc 1 3260 0
 4034              		.cfi_startproc
 4035              		@ args = 0, pretend = 0, frame = 0
 4036              		@ frame_needed = 0, uses_anonymous_args = 0
 4037 0000 08B5     		push	{r3, lr}
 4038              	.LCFI37:
 4039              		.cfi_def_cfa_offset 8
 4040              		.cfi_offset 3, -8
 4041              		.cfi_offset 14, -4
3261:Src/main.c    **** 
 4042              		.loc 1 3261 0
 4043 0002 FE48     		ldr	r0, .L193
 4044 0004 FFF7FEFF 		bl	Printf
ARM GAS  /tmp/ccUr6nXF.s 			page 157


 4045              	.LVL463:
3263:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
 4046              		.loc 1 3263 0
 4047 0008 0021     		movs	r1, #0
 4048 000a 0120     		movs	r0, #1
 4049 000c FFF7FEFF 		bl	VXISI2CWrite
 4050              	.LVL464:
3264:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
 4051              		.loc 1 3264 0
 4052 0010 0021     		movs	r1, #0
 4053 0012 0220     		movs	r0, #2
 4054 0014 FFF7FEFF 		bl	VXISI2CWrite
 4055              	.LVL465:
3265:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
 4056              		.loc 1 3265 0
 4057 0018 7521     		movs	r1, #117
 4058 001a 0320     		movs	r0, #3
 4059 001c FFF7FEFF 		bl	VXISI2CWrite
 4060              	.LVL466:
3266:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
 4061              		.loc 1 3266 0
 4062 0020 1821     		movs	r1, #24
 4063 0022 0420     		movs	r0, #4
 4064 0024 FFF7FEFF 		bl	VXISI2CWrite
 4065              	.LVL467:
3267:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
 4066              		.loc 1 3267 0
 4067 0028 8021     		movs	r1, #128
 4068 002a 0520     		movs	r0, #5
 4069 002c FFF7FEFF 		bl	VXISI2CWrite
 4070              	.LVL468:
3268:Src/main.c    **** 	VXISI2CWrite(0x07,0x08);
 4071              		.loc 1 3268 0
 4072 0030 2021     		movs	r1, #32
 4073 0032 0620     		movs	r0, #6
 4074 0034 FFF7FEFF 		bl	VXISI2CWrite
 4075              	.LVL469:
3269:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
 4076              		.loc 1 3269 0
 4077 0038 0821     		movs	r1, #8
 4078 003a 0720     		movs	r0, #7
 4079 003c FFF7FEFF 		bl	VXISI2CWrite
 4080              	.LVL470:
3270:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
 4081              		.loc 1 3270 0
 4082 0040 4021     		movs	r1, #64
 4083 0042 0820     		movs	r0, #8
 4084 0044 FFF7FEFF 		bl	VXISI2CWrite
 4085              	.LVL471:
3271:Src/main.c    **** 	VXISI2CWrite(0x0A,0x41);
 4086              		.loc 1 3271 0
 4087 0048 0A21     		movs	r1, #10
 4088 004a 0920     		movs	r0, #9
 4089 004c FFF7FEFF 		bl	VXISI2CWrite
 4090              	.LVL472:
3272:Src/main.c    **** 	VXISI2CWrite(0x0B,0x07);
 4091              		.loc 1 3272 0
ARM GAS  /tmp/ccUr6nXF.s 			page 158


 4092 0050 4121     		movs	r1, #65
 4093 0052 0A20     		movs	r0, #10
 4094 0054 FFF7FEFF 		bl	VXISI2CWrite
 4095              	.LVL473:
3273:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
 4096              		.loc 1 3273 0
 4097 0058 0721     		movs	r1, #7
 4098 005a 0B20     		movs	r0, #11
 4099 005c FFF7FEFF 		bl	VXISI2CWrite
 4100              	.LVL474:
3274:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
 4101              		.loc 1 3274 0
 4102 0060 0021     		movs	r1, #0
 4103 0062 0C20     		movs	r0, #12
 4104 0064 FFF7FEFF 		bl	VXISI2CWrite
 4105              	.LVL475:
3275:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
 4106              		.loc 1 3275 0
 4107 0068 2021     		movs	r1, #32
 4108 006a 0D20     		movs	r0, #13
 4109 006c FFF7FEFF 		bl	VXISI2CWrite
 4110              	.LVL476:
3276:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
 4111              		.loc 1 3276 0
 4112 0070 1021     		movs	r1, #16
 4113 0072 0E20     		movs	r0, #14
 4114 0074 FFF7FEFF 		bl	VXISI2CWrite
 4115              	.LVL477:
3277:Src/main.c    **** 	VXISI2CWrite(0x10,0x80);
 4116              		.loc 1 3277 0
 4117 0078 0021     		movs	r1, #0
 4118 007a 0F20     		movs	r0, #15
 4119 007c FFF7FEFF 		bl	VXISI2CWrite
 4120              	.LVL478:
3278:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
 4121              		.loc 1 3278 0
 4122 0080 8021     		movs	r1, #128
 4123 0082 1020     		movs	r0, #16
 4124 0084 FFF7FEFF 		bl	VXISI2CWrite
 4125              	.LVL479:
3279:Src/main.c    **** 	VXISI2CWrite(0x12,0x21);
 4126              		.loc 1 3279 0
 4127 0088 8221     		movs	r1, #130
 4128 008a 1120     		movs	r0, #17
 4129 008c FFF7FEFF 		bl	VXISI2CWrite
 4130              	.LVL480:
3280:Src/main.c    **** 	VXISI2CWrite(0x13,0xD0);
 4131              		.loc 1 3280 0
 4132 0090 2121     		movs	r1, #33
 4133 0092 1220     		movs	r0, #18
 4134 0094 FFF7FEFF 		bl	VXISI2CWrite
 4135              	.LVL481:
3281:Src/main.c    **** 	VXISI2CWrite(0x14,0xE0);
 4136              		.loc 1 3281 0
 4137 0098 D021     		movs	r1, #208
 4138 009a 1320     		movs	r0, #19
 4139 009c FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/ccUr6nXF.s 			page 159


 4140              	.LVL482:
3282:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
 4141              		.loc 1 3282 0
 4142 00a0 E021     		movs	r1, #224
 4143 00a2 1420     		movs	r0, #20
 4144 00a4 FFF7FEFF 		bl	VXISI2CWrite
 4145              	.LVL483:
3283:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
 4146              		.loc 1 3283 0
 4147 00a8 7821     		movs	r1, #120
 4148 00aa 1520     		movs	r0, #21
 4149 00ac FFF7FEFF 		bl	VXISI2CWrite
 4150              	.LVL484:
3284:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
 4151              		.loc 1 3284 0
 4152 00b0 FE21     		movs	r1, #254
 4153 00b2 1620     		movs	r0, #22
 4154 00b4 FFF7FEFF 		bl	VXISI2CWrite
 4155              	.LVL485:
3285:Src/main.c    **** 	VXISI2CWrite(0x18,0xC8);
 4156              		.loc 1 3285 0
 4157 00b8 0021     		movs	r1, #0
 4158 00ba 1720     		movs	r0, #23
 4159 00bc FFF7FEFF 		bl	VXISI2CWrite
 4160              	.LVL486:
3286:Src/main.c    **** 	VXISI2CWrite(0x19,0x00);
 4161              		.loc 1 3286 0
 4162 00c0 C821     		movs	r1, #200
 4163 00c2 1820     		movs	r0, #24
 4164 00c4 FFF7FEFF 		bl	VXISI2CWrite
 4165              	.LVL487:
3287:Src/main.c    **** 	VXISI2CWrite(0x1A,0x23);
 4166              		.loc 1 3287 0
 4167 00c8 0021     		movs	r1, #0
 4168 00ca 1920     		movs	r0, #25
 4169 00cc FFF7FEFF 		bl	VXISI2CWrite
 4170              	.LVL488:
3288:Src/main.c    **** 	VXISI2CWrite(0x1B,0x00);
 4171              		.loc 1 3288 0
 4172 00d0 2321     		movs	r1, #35
 4173 00d2 1A20     		movs	r0, #26
 4174 00d4 FFF7FEFF 		bl	VXISI2CWrite
 4175              	.LVL489:
3289:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
 4176              		.loc 1 3289 0
 4177 00d8 0021     		movs	r1, #0
 4178 00da 1B20     		movs	r0, #27
 4179 00dc FFF7FEFF 		bl	VXISI2CWrite
 4180              	.LVL490:
3290:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
 4181              		.loc 1 3290 0
 4182 00e0 0021     		movs	r1, #0
 4183 00e2 1C20     		movs	r0, #28
 4184 00e4 FFF7FEFF 		bl	VXISI2CWrite
 4185              	.LVL491:
3291:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
 4186              		.loc 1 3291 0
ARM GAS  /tmp/ccUr6nXF.s 			page 160


 4187 00e8 0021     		movs	r1, #0
 4188 00ea 1D20     		movs	r0, #29
 4189 00ec FFF7FEFF 		bl	VXISI2CWrite
 4190              	.LVL492:
3292:Src/main.c    **** 	VXISI2CWrite(0x1F,0x32);
 4191              		.loc 1 3292 0
 4192 00f0 2021     		movs	r1, #32
 4193 00f2 1E20     		movs	r0, #30
 4194 00f4 FFF7FEFF 		bl	VXISI2CWrite
 4195              	.LVL493:
3293:Src/main.c    **** 	VXISI2CWrite(0x20,0x5A);
 4196              		.loc 1 3293 0
 4197 00f8 3221     		movs	r1, #50
 4198 00fa 1F20     		movs	r0, #31
 4199 00fc FFF7FEFF 		bl	VXISI2CWrite
 4200              	.LVL494:
3294:Src/main.c    **** 	VXISI2CWrite(0x21,0x0D);
 4201              		.loc 1 3294 0
 4202 0100 5A21     		movs	r1, #90
 4203 0102 2020     		movs	r0, #32
 4204 0104 FFF7FEFF 		bl	VXISI2CWrite
 4205              	.LVL495:
3295:Src/main.c    **** 	VXISI2CWrite(0x22,0x32);
 4206              		.loc 1 3295 0
 4207 0108 0D21     		movs	r1, #13
 4208 010a 2120     		movs	r0, #33
 4209 010c FFF7FEFF 		bl	VXISI2CWrite
 4210              	.LVL496:
3296:Src/main.c    **** 	VXISI2CWrite(0x23,0x5A);
 4211              		.loc 1 3296 0
 4212 0110 3221     		movs	r1, #50
 4213 0112 2220     		movs	r0, #34
 4214 0114 FFF7FEFF 		bl	VXISI2CWrite
 4215              	.LVL497:
3297:Src/main.c    **** 	VXISI2CWrite(0x24,0xD0);
 4216              		.loc 1 3297 0
 4217 0118 5A21     		movs	r1, #90
 4218 011a 2320     		movs	r0, #35
 4219 011c FFF7FEFF 		bl	VXISI2CWrite
 4220              	.LVL498:
3298:Src/main.c    **** 	VXISI2CWrite(0x25,0x21);
 4221              		.loc 1 3298 0
 4222 0120 D021     		movs	r1, #208
 4223 0122 2420     		movs	r0, #36
 4224 0124 FFF7FEFF 		bl	VXISI2CWrite
 4225              	.LVL499:
3299:Src/main.c    **** 	VXISI2CWrite(0x26,0x0D);
 4226              		.loc 1 3299 0
 4227 0128 2121     		movs	r1, #33
 4228 012a 2520     		movs	r0, #37
 4229 012c FFF7FEFF 		bl	VXISI2CWrite
 4230              	.LVL500:
3300:Src/main.c    **** 	VXISI2CWrite(0x27,0xE0);
 4231              		.loc 1 3300 0
 4232 0130 0D21     		movs	r1, #13
 4233 0132 2620     		movs	r0, #38
 4234 0134 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/ccUr6nXF.s 			page 161


 4235              	.LVL501:
3301:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
 4236              		.loc 1 3301 0
 4237 0138 E021     		movs	r1, #224
 4238 013a 2720     		movs	r0, #39
 4239 013c FFF7FEFF 		bl	VXISI2CWrite
 4240              	.LVL502:
3302:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
 4241              		.loc 1 3302 0
 4242 0140 F021     		movs	r1, #240
 4243 0142 2820     		movs	r0, #40
 4244 0144 FFF7FEFF 		bl	VXISI2CWrite
 4245              	.LVL503:
3303:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
 4246              		.loc 1 3303 0
 4247 0148 0021     		movs	r1, #0
 4248 014a 2920     		movs	r0, #41
 4249 014c FFF7FEFF 		bl	VXISI2CWrite
 4250              	.LVL504:
3304:Src/main.c    **** 	VXISI2CWrite(0x2B,0x01);
 4251              		.loc 1 3304 0
 4252 0150 0021     		movs	r1, #0
 4253 0152 2A20     		movs	r0, #42
 4254 0154 FFF7FEFF 		bl	VXISI2CWrite
 4255              	.LVL505:
3305:Src/main.c    **** 	VXISI2CWrite(0x2C,0xFF);
 4256              		.loc 1 3305 0
 4257 0158 0121     		movs	r1, #1
 4258 015a 2B20     		movs	r0, #43
 4259 015c FFF7FEFF 		bl	VXISI2CWrite
 4260              	.LVL506:
3306:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
 4261              		.loc 1 3306 0
 4262 0160 FF21     		movs	r1, #255
 4263 0162 2C20     		movs	r0, #44
 4264 0164 FFF7FEFF 		bl	VXISI2CWrite
 4265              	.LVL507:
3307:Src/main.c    **** 	VXISI2CWrite(0x2E,0x12);
 4266              		.loc 1 3307 0
 4267 0168 0021     		movs	r1, #0
 4268 016a 2D20     		movs	r0, #45
 4269 016c FFF7FEFF 		bl	VXISI2CWrite
 4270              	.LVL508:
3308:Src/main.c    **** 	VXISI2CWrite(0x2F,0xD0);
 4271              		.loc 1 3308 0
 4272 0170 1221     		movs	r1, #18
 4273 0172 2E20     		movs	r0, #46
 4274 0174 FFF7FEFF 		bl	VXISI2CWrite
 4275              	.LVL509:
3309:Src/main.c    **** 	VXISI2CWrite(0x30,0xE0);
 4276              		.loc 1 3309 0
 4277 0178 D021     		movs	r1, #208
 4278 017a 2F20     		movs	r0, #47
 4279 017c FFF7FEFF 		bl	VXISI2CWrite
 4280              	.LVL510:
3310:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
 4281              		.loc 1 3310 0
ARM GAS  /tmp/ccUr6nXF.s 			page 162


 4282 0180 E021     		movs	r1, #224
 4283 0182 3020     		movs	r0, #48
 4284 0184 FFF7FEFF 		bl	VXISI2CWrite
 4285              	.LVL511:
3311:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
 4286              		.loc 1 3311 0
 4287 0188 8021     		movs	r1, #128
 4288 018a 3120     		movs	r0, #49
 4289 018c FFF7FEFF 		bl	VXISI2CWrite
 4290              	.LVL512:
3312:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
 4291              		.loc 1 3312 0
 4292 0190 8021     		movs	r1, #128
 4293 0192 3220     		movs	r0, #50
 4294 0194 FFF7FEFF 		bl	VXISI2CWrite
 4295              	.LVL513:
3313:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
 4296              		.loc 1 3313 0
 4297 0198 8021     		movs	r1, #128
 4298 019a 3320     		movs	r0, #51
 4299 019c FFF7FEFF 		bl	VXISI2CWrite
 4300              	.LVL514:
3314:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
 4301              		.loc 1 3314 0
 4302 01a0 A021     		movs	r1, #160
 4303 01a2 3420     		movs	r0, #52
 4304 01a4 FFF7FEFF 		bl	VXISI2CWrite
 4305              	.LVL515:
3315:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
 4306              		.loc 1 3315 0
 4307 01a8 1821     		movs	r1, #24
 4308 01aa 3520     		movs	r0, #53
 4309 01ac FFF7FEFF 		bl	VXISI2CWrite
 4310              	.LVL516:
3316:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
 4311              		.loc 1 3316 0
 4312 01b0 4621     		movs	r1, #70
 4313 01b2 3620     		movs	r0, #54
 4314 01b4 FFF7FEFF 		bl	VXISI2CWrite
 4315              	.LVL517:
3317:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
 4316              		.loc 1 3317 0
 4317 01b8 6421     		movs	r1, #100
 4318 01ba 3720     		movs	r0, #55
 4319 01bc FFF7FEFF 		bl	VXISI2CWrite
 4320              	.LVL518:
3318:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
 4321              		.loc 1 3318 0
 4322 01c0 0021     		movs	r1, #0
 4323 01c2 3820     		movs	r0, #56
 4324 01c4 FFF7FEFF 		bl	VXISI2CWrite
 4325              	.LVL519:
3319:Src/main.c    **** 	VXISI2CWrite(0x3A,0x03);
 4326              		.loc 1 3319 0
 4327 01c8 FF21     		movs	r1, #255
 4328 01ca 3920     		movs	r0, #57
 4329 01cc FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/ccUr6nXF.s 			page 163


 4330              	.LVL520:
3320:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
 4331              		.loc 1 3320 0
 4332 01d0 0321     		movs	r1, #3
 4333 01d2 3A20     		movs	r0, #58
 4334 01d4 FFF7FEFF 		bl	VXISI2CWrite
 4335              	.LVL521:
3321:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
 4336              		.loc 1 3321 0
 4337 01d8 8021     		movs	r1, #128
 4338 01da 3B20     		movs	r0, #59
 4339 01dc FFF7FEFF 		bl	VXISI2CWrite
 4340              	.LVL522:
3322:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
 4341              		.loc 1 3322 0
 4342 01e0 8021     		movs	r1, #128
 4343 01e2 3C20     		movs	r0, #60
 4344 01e4 FFF7FEFF 		bl	VXISI2CWrite
 4345              	.LVL523:
3323:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
 4346              		.loc 1 3323 0
 4347 01e8 8021     		movs	r1, #128
 4348 01ea 3D20     		movs	r0, #61
 4349 01ec FFF7FEFF 		bl	VXISI2CWrite
 4350              	.LVL524:
3324:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
 4351              		.loc 1 3324 0
 4352 01f0 8021     		movs	r1, #128
 4353 01f2 3E20     		movs	r0, #62
 4354 01f4 FFF7FEFF 		bl	VXISI2CWrite
 4355              	.LVL525:
3325:Src/main.c    **** 	//VXISI2CWrite(0xVXISI);2CWrite(0x80
 4356              		.loc 1 3325 0
 4357 01f8 8021     		movs	r1, #128
 4358 01fa 3F20     		movs	r0, #63
 4359 01fc FFF7FEFF 		bl	VXISI2CWrite
 4360              	.LVL526:
3327:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
 4361              		.loc 1 3327 0
 4362 0200 6021     		movs	r1, #96
 4363 0202 4120     		movs	r0, #65
 4364 0204 FFF7FEFF 		bl	VXISI2CWrite
 4365              	.LVL527:
3328:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
 4366              		.loc 1 3328 0
 4367 0208 5F21     		movs	r1, #95
 4368 020a 4220     		movs	r0, #66
 4369 020c FFF7FEFF 		bl	VXISI2CWrite
 4370              	.LVL528:
3329:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
 4371              		.loc 1 3329 0
 4372 0210 3721     		movs	r1, #55
 4373 0212 4320     		movs	r0, #67
 4374 0214 FFF7FEFF 		bl	VXISI2CWrite
 4375              	.LVL529:
3330:Src/main.c    **** 	VXISI2CWrite(0x45,0x04);
 4376              		.loc 1 3330 0
ARM GAS  /tmp/ccUr6nXF.s 			page 164


 4377 0218 1421     		movs	r1, #20
 4378 021a 4420     		movs	r0, #68
 4379 021c FFF7FEFF 		bl	VXISI2CWrite
 4380              	.LVL530:
3331:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
 4381              		.loc 1 3331 0
 4382 0220 0421     		movs	r1, #4
 4383 0222 4520     		movs	r0, #69
 4384 0224 FFF7FEFF 		bl	VXISI2CWrite
 4385              	.LVL531:
3332:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
 4386              		.loc 1 3332 0
 4387 0228 0021     		movs	r1, #0
 4388 022a 4620     		movs	r0, #70
 4389 022c FFF7FEFF 		bl	VXISI2CWrite
 4390              	.LVL532:
3333:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
 4391              		.loc 1 3333 0
 4392 0230 0021     		movs	r1, #0
 4393 0232 4720     		movs	r0, #71
 4394 0234 FFF7FEFF 		bl	VXISI2CWrite
 4395              	.LVL533:
3334:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
 4396              		.loc 1 3334 0
 4397 0238 0021     		movs	r1, #0
 4398 023a 4820     		movs	r0, #72
 4399 023c FFF7FEFF 		bl	VXISI2CWrite
 4400              	.LVL534:
3335:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
 4401              		.loc 1 3335 0
 4402 0240 0021     		movs	r1, #0
 4403 0242 4920     		movs	r0, #73
 4404 0244 FFF7FEFF 		bl	VXISI2CWrite
 4405              	.LVL535:
3336:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
 4406              		.loc 1 3336 0
 4407 0248 2021     		movs	r1, #32
 4408 024a 4B20     		movs	r0, #75
 4409 024c FFF7FEFF 		bl	VXISI2CWrite
 4410              	.LVL536:
3337:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
 4411              		.loc 1 3337 0
 4412 0250 0021     		movs	r1, #0
 4413 0252 4C20     		movs	r0, #76
 4414 0254 FFF7FEFF 		bl	VXISI2CWrite
 4415              	.LVL537:
3338:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
 4416              		.loc 1 3338 0
 4417 0258 0021     		movs	r1, #0
 4418 025a 4D20     		movs	r0, #77
 4419 025c FFF7FEFF 		bl	VXISI2CWrite
 4420              	.LVL538:
3339:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
 4421              		.loc 1 3339 0
 4422 0260 0021     		movs	r1, #0
 4423 0262 4E20     		movs	r0, #78
 4424 0264 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/ccUr6nXF.s 			page 165


 4425              	.LVL539:
3340:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
 4426              		.loc 1 3340 0
 4427 0268 7F21     		movs	r1, #127
 4428 026a 4F20     		movs	r0, #79
 4429 026c FFF7FEFF 		bl	VXISI2CWrite
 4430              	.LVL540:
3341:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
 4431              		.loc 1 3341 0
 4432 0270 2021     		movs	r1, #32
 4433 0272 5020     		movs	r0, #80
 4434 0274 FFF7FEFF 		bl	VXISI2CWrite
 4435              	.LVL541:
3342:Src/main.c    **** 	VXISI2CWrite(0x52,0x00);
 4436              		.loc 1 3342 0
 4437 0278 0021     		movs	r1, #0
 4438 027a 5120     		movs	r0, #81
 4439 027c FFF7FEFF 		bl	VXISI2CWrite
 4440              	.LVL542:
3343:Src/main.c    **** 	VXISI2CWrite(0x53,0x04);
 4441              		.loc 1 3343 0
 4442 0280 0021     		movs	r1, #0
 4443 0282 5220     		movs	r0, #82
 4444 0284 FFF7FEFF 		bl	VXISI2CWrite
 4445              	.LVL543:
3344:Src/main.c    **** 	VXISI2CWrite(0x54,0x00);
 4446              		.loc 1 3344 0
 4447 0288 0421     		movs	r1, #4
 4448 028a 5320     		movs	r0, #83
 4449 028c FFF7FEFF 		bl	VXISI2CWrite
 4450              	.LVL544:
3345:Src/main.c    **** 	VXISI2CWrite(0x55,0xE0);
 4451              		.loc 1 3345 0
 4452 0290 0021     		movs	r1, #0
 4453 0292 5420     		movs	r0, #84
 4454 0294 FFF7FEFF 		bl	VXISI2CWrite
 4455              	.LVL545:
3346:Src/main.c    **** 	VXISI2CWrite(0x56,0x40);
 4456              		.loc 1 3346 0
 4457 0298 E021     		movs	r1, #224
 4458 029a 5520     		movs	r0, #85
 4459 029c FFF7FEFF 		bl	VXISI2CWrite
 4460              	.LVL546:
3347:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
 4461              		.loc 1 3347 0
 4462 02a0 4021     		movs	r1, #64
 4463 02a2 5620     		movs	r0, #86
 4464 02a4 FFF7FEFF 		bl	VXISI2CWrite
 4465              	.LVL547:
3348:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
 4466              		.loc 1 3348 0
 4467 02a8 0421     		movs	r1, #4
 4468 02aa 5720     		movs	r0, #87
 4469 02ac FFF7FEFF 		bl	VXISI2CWrite
 4470              	.LVL548:
3349:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
 4471              		.loc 1 3349 0
ARM GAS  /tmp/ccUr6nXF.s 			page 166


 4472 02b0 0021     		movs	r1, #0
 4473 02b2 5820     		movs	r0, #88
 4474 02b4 FFF7FEFF 		bl	VXISI2CWrite
 4475              	.LVL549:
3350:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
 4476              		.loc 1 3350 0
 4477 02b8 0821     		movs	r1, #8
 4478 02ba 5920     		movs	r0, #89
 4479 02bc FFF7FEFF 		bl	VXISI2CWrite
 4480              	.LVL550:
3351:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
 4481              		.loc 1 3351 0
 4482 02c0 1021     		movs	r1, #16
 4483 02c2 5A20     		movs	r0, #90
 4484 02c4 FFF7FEFF 		bl	VXISI2CWrite
 4485              	.LVL551:
3352:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
 4486              		.loc 1 3352 0
 4487 02c8 0021     		movs	r1, #0
 4488 02ca 5B20     		movs	r0, #91
 4489 02cc FFF7FEFF 		bl	VXISI2CWrite
 4490              	.LVL552:
3353:Src/main.c    **** 	VXISI2CWrite(0x5D,0x40);
 4491              		.loc 1 3353 0
 4492 02d0 6821     		movs	r1, #104
 4493 02d2 5C20     		movs	r0, #92
 4494 02d4 FFF7FEFF 		bl	VXISI2CWrite
 4495              	.LVL553:
3354:Src/main.c    **** 	VXISI2CWrite(0x5E,0x08);
 4496              		.loc 1 3354 0
 4497 02d8 4021     		movs	r1, #64
 4498 02da 5D20     		movs	r0, #93
 4499 02dc FFF7FEFF 		bl	VXISI2CWrite
 4500              	.LVL554:
3355:Src/main.c    **** 	VXISI2CWrite(0x5F,0x00);
 4501              		.loc 1 3355 0
 4502 02e0 0821     		movs	r1, #8
 4503 02e2 5E20     		movs	r0, #94
 4504 02e4 FFF7FEFF 		bl	VXISI2CWrite
 4505              	.LVL555:
3356:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
 4506              		.loc 1 3356 0
 4507 02e8 0021     		movs	r1, #0
 4508 02ea 5F20     		movs	r0, #95
 4509 02ec FFF7FEFF 		bl	VXISI2CWrite
 4510              	.LVL556:
3357:Src/main.c    **** 	VXISI2CWrite(0x61,0x54);
 4511              		.loc 1 3357 0
 4512 02f0 E021     		movs	r1, #224
 4513 02f2 6020     		movs	r0, #96
 4514 02f4 FFF7FEFF 		bl	VXISI2CWrite
 4515              	.LVL557:
3358:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
 4516              		.loc 1 3358 0
 4517 02f8 5421     		movs	r1, #84
 4518 02fa 6120     		movs	r0, #97
 4519 02fc FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/ccUr6nXF.s 			page 167


 4520              	.LVL558:
3359:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
 4521              		.loc 1 3359 0
 4522 0300 3321     		movs	r1, #51
 4523 0302 6220     		movs	r0, #98
 4524 0304 FFF7FEFF 		bl	VXISI2CWrite
 4525              	.LVL559:
3360:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
 4526              		.loc 1 3360 0
 4527 0308 0121     		movs	r1, #1
 4528 030a 6320     		movs	r0, #99
 4529 030c FFF7FEFF 		bl	VXISI2CWrite
 4530              	.LVL560:
3361:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
 4531              		.loc 1 3361 0
 4532 0310 FF21     		movs	r1, #255
 4533 0312 6420     		movs	r0, #100
 4534 0314 FFF7FEFF 		bl	VXISI2CWrite
 4535              	.LVL561:
3362:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
 4536              		.loc 1 3362 0
 4537 0318 0121     		movs	r1, #1
 4538 031a 6520     		movs	r0, #101
 4539 031c FFF7FEFF 		bl	VXISI2CWrite
 4540              	.LVL562:
3363:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
 4541              		.loc 1 3363 0
 4542 0320 FF21     		movs	r1, #255
 4543 0322 6620     		movs	r0, #102
 4544 0324 FFF7FEFF 		bl	VXISI2CWrite
 4545              	.LVL563:
3364:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
 4546              		.loc 1 3364 0
 4547 0328 8921     		movs	r1, #137
 4548 032a 6720     		movs	r0, #103
 4549 032c FFF7FEFF 		bl	VXISI2CWrite
 4550              	.LVL564:
3365:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
 4551              		.loc 1 3365 0
 4552 0330 AB21     		movs	r1, #171
 4553 0332 6820     		movs	r0, #104
 4554 0334 FFF7FEFF 		bl	VXISI2CWrite
 4555              	.LVL565:
3366:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
 4556              		.loc 1 3366 0
 4557 0338 8821     		movs	r1, #136
 4558 033a 6920     		movs	r0, #105
 4559 033c FFF7FEFF 		bl	VXISI2CWrite
 4560              	.LVL566:
3367:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
 4561              		.loc 1 3367 0
 4562 0340 6E21     		movs	r1, #110
 4563 0342 6A20     		movs	r0, #106
 4564 0344 FFF7FEFF 		bl	VXISI2CWrite
 4565              	.LVL567:
3368:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
 4566              		.loc 1 3368 0
ARM GAS  /tmp/ccUr6nXF.s 			page 168


 4567 0348 6E21     		movs	r1, #110
 4568 034a 6B20     		movs	r0, #107
 4569 034c FFF7FEFF 		bl	VXISI2CWrite
 4570              	.LVL568:
3369:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
 4571              		.loc 1 3369 0
 4572 0350 6E21     		movs	r1, #110
 4573 0352 6C20     		movs	r0, #108
 4574 0354 FFF7FEFF 		bl	VXISI2CWrite
 4575              	.LVL569:
3370:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
 4576              		.loc 1 3370 0
 4577 0358 0021     		movs	r1, #0
 4578 035a 6D20     		movs	r0, #109
 4579 035c FFF7FEFF 		bl	VXISI2CWrite
 4580              	.LVL570:
3371:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
 4581              		.loc 1 3371 0
 4582 0360 0021     		movs	r1, #0
 4583 0362 6E20     		movs	r0, #110
 4584 0364 FFF7FEFF 		bl	VXISI2CWrite
 4585              	.LVL571:
3372:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
 4586              		.loc 1 3372 0
 4587 0368 0021     		movs	r1, #0
 4588 036a 6F20     		movs	r0, #111
 4589 036c FFF7FEFF 		bl	VXISI2CWrite
 4590              	.LVL572:
3373:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
 4591              		.loc 1 3373 0
 4592 0370 0021     		movs	r1, #0
 4593 0372 7020     		movs	r0, #112
 4594 0374 FFF7FEFF 		bl	VXISI2CWrite
 4595              	.LVL573:
3374:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
 4596              		.loc 1 3374 0
 4597 0378 0021     		movs	r1, #0
 4598 037a 7120     		movs	r0, #113
 4599 037c FFF7FEFF 		bl	VXISI2CWrite
 4600              	.LVL574:
3375:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
 4601              		.loc 1 3375 0
 4602 0380 0021     		movs	r1, #0
 4603 0382 7220     		movs	r0, #114
 4604 0384 FFF7FEFF 		bl	VXISI2CWrite
 4605              	.LVL575:
3376:Src/main.c    **** 	VXISI2CWrite(0x74,0x00);
 4606              		.loc 1 3376 0
 4607 0388 0021     		movs	r1, #0
 4608 038a 7320     		movs	r0, #115
 4609 038c FFF7FEFF 		bl	VXISI2CWrite
 4610              	.LVL576:
3377:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
 4611              		.loc 1 3377 0
 4612 0390 0021     		movs	r1, #0
 4613 0392 7420     		movs	r0, #116
 4614 0394 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/ccUr6nXF.s 			page 169


 4615              	.LVL577:
3378:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
 4616              		.loc 1 3378 0
 4617 0398 FF21     		movs	r1, #255
 4618 039a 7520     		movs	r0, #117
 4619 039c FFF7FEFF 		bl	VXISI2CWrite
 4620              	.LVL578:
3379:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
 4621              		.loc 1 3379 0
 4622 03a0 FF21     		movs	r1, #255
 4623 03a2 7620     		movs	r0, #118
 4624 03a4 FFF7FEFF 		bl	VXISI2CWrite
 4625              	.LVL579:
3380:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
 4626              		.loc 1 3380 0
 4627 03a8 FF21     		movs	r1, #255
 4628 03aa 7720     		movs	r0, #119
 4629 03ac FFF7FEFF 		bl	VXISI2CWrite
 4630              	.LVL580:
3381:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
 4631              		.loc 1 3381 0
 4632 03b0 FF21     		movs	r1, #255
 4633 03b2 7820     		movs	r0, #120
 4634 03b4 FFF7FEFF 		bl	VXISI2CWrite
 4635              	.LVL581:
3382:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
 4636              		.loc 1 3382 0
 4637 03b8 FF21     		movs	r1, #255
 4638 03ba 7920     		movs	r0, #121
 4639 03bc FFF7FEFF 		bl	VXISI2CWrite
 4640              	.LVL582:
3383:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
 4641              		.loc 1 3383 0
 4642 03c0 FF21     		movs	r1, #255
 4643 03c2 7A20     		movs	r0, #122
 4644 03c4 FFF7FEFF 		bl	VXISI2CWrite
 4645              	.LVL583:
3384:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
 4646              		.loc 1 3384 0
 4647 03c8 FF21     		movs	r1, #255
 4648 03ca 7B20     		movs	r0, #123
 4649 03cc FFF7FEFF 		bl	VXISI2CWrite
 4650              	.LVL584:
3385:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
 4651              		.loc 1 3385 0
 4652 03d0 FF21     		movs	r1, #255
 4653 03d2 7C20     		movs	r0, #124
 4654 03d4 FFF7FEFF 		bl	VXISI2CWrite
 4655              	.LVL585:
3386:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
 4656              		.loc 1 3386 0
 4657 03d8 F021     		movs	r1, #240
 4658 03da 7D20     		movs	r0, #125
 4659 03dc FFF7FEFF 		bl	VXISI2CWrite
 4660              	.LVL586:
3387:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
 4661              		.loc 1 3387 0
ARM GAS  /tmp/ccUr6nXF.s 			page 170


 4662 03e0 8021     		movs	r1, #128
 4663 03e2 7E20     		movs	r0, #126
 4664 03e4 FFF7FEFF 		bl	VXISI2CWrite
 4665              	.LVL587:
3388:Src/main.c    **** 	VXISI2CWrite(0x80,0x00);
 4666              		.loc 1 3388 0
 4667 03e8 0021     		movs	r1, #0
 4668 03ea 7F20     		movs	r0, #127
 4669 03ec FFF7FEFF 		bl	VXISI2CWrite
 4670              	.LVL588:
3389:Src/main.c    **** 	VXISI2CWrite(0x81,0x34);
 4671              		.loc 1 3389 0
 4672 03f0 0021     		movs	r1, #0
 4673 03f2 8020     		movs	r0, #128
 4674 03f4 FFF7FEFF 		bl	VXISI2CWrite
 4675              	.LVL589:
 4676 03f8 02E0     		b	.L194
 4677              	.L195:
 4678 03fa 00BF     		.align	2
 4679              	.L193:
 4680 03fc 00000000 		.word	.LC35
 4681              	.L194:
3390:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
 4682              		.loc 1 3390 0
 4683 0400 3421     		movs	r1, #52
 4684 0402 8120     		movs	r0, #129
 4685 0404 FFF7FEFF 		bl	VXISI2CWrite
 4686              	.LVL590:
3391:Src/main.c    **** 	VXISI2CWrite(0x83,0x05);
 4687              		.loc 1 3391 0
 4688 0408 4021     		movs	r1, #64
 4689 040a 8220     		movs	r0, #130
 4690 040c FFF7FEFF 		bl	VXISI2CWrite
 4691              	.LVL591:
3392:Src/main.c    **** 	VXISI2CWrite(0x84,0x59);
 4692              		.loc 1 3392 0
 4693 0410 0521     		movs	r1, #5
 4694 0412 8320     		movs	r0, #131
 4695 0414 FFF7FEFF 		bl	VXISI2CWrite
 4696              	.LVL592:
3393:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
 4697              		.loc 1 3393 0
 4698 0418 5921     		movs	r1, #89
 4699 041a 8420     		movs	r0, #132
 4700 041c FFF7FEFF 		bl	VXISI2CWrite
 4701              	.LVL593:
3394:Src/main.c    **** 	VXISI2CWrite(0x86,0x04);
 4702              		.loc 1 3394 0
 4703 0420 FD21     		movs	r1, #253
 4704 0422 8520     		movs	r0, #133
 4705 0424 FFF7FEFF 		bl	VXISI2CWrite
 4706              	.LVL594:
3395:Src/main.c    **** 	VXISI2CWrite(0x87,0x24);
 4707              		.loc 1 3395 0
 4708 0428 0421     		movs	r1, #4
 4709 042a 8620     		movs	r0, #134
 4710 042c FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/ccUr6nXF.s 			page 171


 4711              	.LVL595:
3396:Src/main.c    **** 	VXISI2CWrite(0x88,0x94);
 4712              		.loc 1 3396 0
 4713 0430 2421     		movs	r1, #36
 4714 0432 8720     		movs	r0, #135
 4715 0434 FFF7FEFF 		bl	VXISI2CWrite
 4716              	.LVL596:
3397:Src/main.c    **** 	VXISI2CWrite(0x89,0x58);
 4717              		.loc 1 3397 0
 4718 0438 9421     		movs	r1, #148
 4719 043a 8820     		movs	r0, #136
 4720 043c FFF7FEFF 		bl	VXISI2CWrite
 4721              	.LVL597:
3398:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
 4722              		.loc 1 3398 0
 4723 0440 5821     		movs	r1, #88
 4724 0442 8920     		movs	r0, #137
 4725 0444 FFF7FEFF 		bl	VXISI2CWrite
 4726              	.LVL598:
3399:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
 4727              		.loc 1 3399 0
 4728 0448 0021     		movs	r1, #0
 4729 044a 8A20     		movs	r0, #138
 4730 044c FFF7FEFF 		bl	VXISI2CWrite
 4731              	.LVL599:
3400:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
 4732              		.loc 1 3400 0
 4733 0450 7E21     		movs	r1, #126
 4734 0452 8B20     		movs	r0, #139
 4735 0454 FFF7FEFF 		bl	VXISI2CWrite
 4736              	.LVL600:
3401:Src/main.c    **** 	VXISI2CWrite(0x8D,0x2C);
 4737              		.loc 1 3401 0
 4738 0458 0321     		movs	r1, #3
 4739 045a 8C20     		movs	r0, #140
 4740 045c FFF7FEFF 		bl	VXISI2CWrite
 4741              	.LVL601:
3402:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
 4742              		.loc 1 3402 0
 4743 0460 2C21     		movs	r1, #44
 4744 0462 8D20     		movs	r0, #141
 4745 0464 FFF7FEFF 		bl	VXISI2CWrite
 4746              	.LVL602:
3403:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
 4747              		.loc 1 3403 0
 4748 0468 8C21     		movs	r1, #140
 4749 046a 8E20     		movs	r0, #142
 4750 046c FFF7FEFF 		bl	VXISI2CWrite
 4751              	.LVL603:
3404:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
 4752              		.loc 1 3404 0
 4753 0470 0021     		movs	r1, #0
 4754 0472 8F20     		movs	r0, #143
 4755 0474 FFF7FEFF 		bl	VXISI2CWrite
 4756              	.LVL604:
3405:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
 4757              		.loc 1 3405 0
ARM GAS  /tmp/ccUr6nXF.s 			page 172


 4758 0478 CC21     		movs	r1, #204
 4759 047a 9020     		movs	r0, #144
 4760 047c FFF7FEFF 		bl	VXISI2CWrite
 4761              	.LVL605:
3406:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
 4762              		.loc 1 3406 0
 4763 0480 4121     		movs	r1, #65
 4764 0482 9120     		movs	r0, #145
 4765 0484 FFF7FEFF 		bl	VXISI2CWrite
 4766              	.LVL606:
3407:Src/main.c    **** 	VXISI2CWrite(0x93,0x31);
 4767              		.loc 1 3407 0
 4768 0488 C421     		movs	r1, #196
 4769 048a 9220     		movs	r0, #146
 4770 048c FFF7FEFF 		bl	VXISI2CWrite
 4771              	.LVL607:
3408:Src/main.c    **** 	VXISI2CWrite(0x94,0x87);
 4772              		.loc 1 3408 0
 4773 0490 3121     		movs	r1, #49
 4774 0492 9320     		movs	r0, #147
 4775 0494 FFF7FEFF 		bl	VXISI2CWrite
 4776              	.LVL608:
3409:Src/main.c    **** 	VXISI2CWrite(0x95,0xD0);
 4777              		.loc 1 3409 0
 4778 0498 8721     		movs	r1, #135
 4779 049a 9420     		movs	r0, #148
 4780 049c FFF7FEFF 		bl	VXISI2CWrite
 4781              	.LVL609:
3410:Src/main.c    **** 	VXISI2CWrite(0x96,0xF3);
 4782              		.loc 1 3410 0
 4783 04a0 D021     		movs	r1, #208
 4784 04a2 9520     		movs	r0, #149
 4785 04a4 FFF7FEFF 		bl	VXISI2CWrite
 4786              	.LVL610:
3411:Src/main.c    **** 	VXISI2CWrite(0x97,0x20);
 4787              		.loc 1 3411 0
 4788 04a8 F321     		movs	r1, #243
 4789 04aa 9620     		movs	r0, #150
 4790 04ac FFF7FEFF 		bl	VXISI2CWrite
 4791              	.LVL611:
3412:Src/main.c    **** 	VXISI2CWrite(0x98,0x11);
 4792              		.loc 1 3412 0
 4793 04b0 2021     		movs	r1, #32
 4794 04b2 9720     		movs	r0, #151
 4795 04b4 FFF7FEFF 		bl	VXISI2CWrite
 4796              	.LVL612:
3413:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
 4797              		.loc 1 3413 0
 4798 04b8 1121     		movs	r1, #17
 4799 04ba 9820     		movs	r0, #152
 4800 04bc FFF7FEFF 		bl	VXISI2CWrite
 4801              	.LVL613:
3414:Src/main.c    **** 	VXISI2CWrite(0x9A,0xFF);
 4802              		.loc 1 3414 0
 4803 04c0 9021     		movs	r1, #144
 4804 04c2 9920     		movs	r0, #153
 4805 04c4 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/ccUr6nXF.s 			page 173


 4806              	.LVL614:
3415:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
 4807              		.loc 1 3415 0
 4808 04c8 FF21     		movs	r1, #255
 4809 04ca 9A20     		movs	r0, #154
 4810 04cc FFF7FEFF 		bl	VXISI2CWrite
 4811              	.LVL615:
3416:Src/main.c    **** 	VXISI2CWrite(0x9C,0x0A);
 4812              		.loc 1 3416 0
 4813 04d0 0421     		movs	r1, #4
 4814 04d2 9B20     		movs	r0, #155
 4815 04d4 FFF7FEFF 		bl	VXISI2CWrite
 4816              	.LVL616:
3417:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
 4817              		.loc 1 3417 0
 4818 04d8 0A21     		movs	r1, #10
 4819 04da 9C20     		movs	r0, #156
 4820 04dc FFF7FEFF 		bl	VXISI2CWrite
 4821              	.LVL617:
3418:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
 4822              		.loc 1 3418 0
 4823 04e0 0021     		movs	r1, #0
 4824 04e2 9D20     		movs	r0, #157
 4825 04e4 FFF7FEFF 		bl	VXISI2CWrite
 4826              	.LVL618:
3419:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
 4827              		.loc 1 3419 0
 4828 04e8 0421     		movs	r1, #4
 4829 04ea 9E20     		movs	r0, #158
 4830 04ec FFF7FEFF 		bl	VXISI2CWrite
 4831              	.LVL619:
3420:Src/main.c    **** 	VXISI2CWrite(0xA0,0x2F);
 4832              		.loc 1 3420 0
 4833 04f0 6521     		movs	r1, #101
 4834 04f2 9F20     		movs	r0, #159
 4835 04f4 FFF7FEFF 		bl	VXISI2CWrite
 4836              	.LVL620:
3421:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD9);
 4837              		.loc 1 3421 0
 4838 04f8 2F21     		movs	r1, #47
 4839 04fa A020     		movs	r0, #160
 4840 04fc FFF7FEFF 		bl	VXISI2CWrite
 4841              	.LVL621:
3422:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
 4842              		.loc 1 3422 0
 4843 0500 D921     		movs	r1, #217
 4844 0502 A120     		movs	r0, #161
 4845 0504 FFF7FEFF 		bl	VXISI2CWrite
 4846              	.LVL622:
3423:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
 4847              		.loc 1 3423 0
 4848 0508 9821     		movs	r1, #152
 4849 050a A220     		movs	r0, #162
 4850 050c FFF7FEFF 		bl	VXISI2CWrite
 4851              	.LVL623:
3424:Src/main.c    **** 	VXISI2CWrite(0xA4,0xE1);
 4852              		.loc 1 3424 0
ARM GAS  /tmp/ccUr6nXF.s 			page 174


 4853 0510 8721     		movs	r1, #135
 4854 0512 A320     		movs	r0, #163
 4855 0514 FFF7FEFF 		bl	VXISI2CWrite
 4856              	.LVL624:
3425:Src/main.c    **** 	VXISI2CWrite(0xA5,0x38);
 4857              		.loc 1 3425 0
 4858 0518 E121     		movs	r1, #225
 4859 051a A420     		movs	r0, #164
 4860 051c FFF7FEFF 		bl	VXISI2CWrite
 4861              	.LVL625:
3426:Src/main.c    **** 	VXISI2CWrite(0xA6,0xC2);
 4862              		.loc 1 3426 0
 4863 0520 3821     		movs	r1, #56
 4864 0522 A520     		movs	r0, #165
 4865 0524 FFF7FEFF 		bl	VXISI2CWrite
 4866              	.LVL626:
3427:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
 4867              		.loc 1 3427 0
 4868 0528 C221     		movs	r1, #194
 4869 052a A620     		movs	r0, #166
 4870 052c FFF7FEFF 		bl	VXISI2CWrite
 4871              	.LVL627:
3428:Src/main.c    **** 	VXISI2CWrite(0xA8,0x00);
 4872              		.loc 1 3428 0
 4873 0530 7021     		movs	r1, #112
 4874 0532 A720     		movs	r0, #167
 4875 0534 FFF7FEFF 		bl	VXISI2CWrite
 4876              	.LVL628:
3429:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
 4877              		.loc 1 3429 0
 4878 0538 0021     		movs	r1, #0
 4879 053a A820     		movs	r0, #168
 4880 053c FFF7FEFF 		bl	VXISI2CWrite
 4881              	.LVL629:
3430:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2E);
 4882              		.loc 1 3430 0
 4883 0540 1E21     		movs	r1, #30
 4884 0542 A920     		movs	r0, #169
 4885 0544 FFF7FEFF 		bl	VXISI2CWrite
 4886              	.LVL630:
3431:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
 4887              		.loc 1 3431 0
 4888 0548 2E21     		movs	r1, #46
 4889 054a AA20     		movs	r0, #170
 4890 054c FFF7FEFF 		bl	VXISI2CWrite
 4891              	.LVL631:
3432:Src/main.c    **** 	VXISI2CWrite(0xAC,0x84);
 4892              		.loc 1 3432 0
 4893 0550 0021     		movs	r1, #0
 4894 0552 AB20     		movs	r0, #171
 4895 0554 FFF7FEFF 		bl	VXISI2CWrite
 4896              	.LVL632:
3433:Src/main.c    **** 	VXISI2CWrite(0xAD,0xF3);
 4897              		.loc 1 3433 0
 4898 0558 8421     		movs	r1, #132
 4899 055a AC20     		movs	r0, #172
 4900 055c FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/ccUr6nXF.s 			page 175


 4901              	.LVL633:
3434:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
 4902              		.loc 1 3434 0
 4903 0560 F321     		movs	r1, #243
 4904 0562 AD20     		movs	r0, #173
 4905 0564 FFF7FEFF 		bl	VXISI2CWrite
 4906              	.LVL634:
3435:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
 4907              		.loc 1 3435 0
 4908 0568 6521     		movs	r1, #101
 4909 056a AE20     		movs	r0, #174
 4910 056c FFF7FEFF 		bl	VXISI2CWrite
 4911              	.LVL635:
3436:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
 4912              		.loc 1 3436 0
 4913 0570 9921     		movs	r1, #153
 4914 0572 AF20     		movs	r0, #175
 4915 0574 FFF7FEFF 		bl	VXISI2CWrite
 4916              	.LVL636:
3437:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
 4917              		.loc 1 3437 0
 4918 0578 0021     		movs	r1, #0
 4919 057a B020     		movs	r0, #176
 4920 057c FFF7FEFF 		bl	VXISI2CWrite
 4921              	.LVL637:
3438:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
 4922              		.loc 1 3438 0
 4923 0580 0021     		movs	r1, #0
 4924 0582 B120     		movs	r0, #177
 4925 0584 FFF7FEFF 		bl	VXISI2CWrite
 4926              	.LVL638:
3439:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
 4927              		.loc 1 3439 0
 4928 0588 0021     		movs	r1, #0
 4929 058a B220     		movs	r0, #178
 4930 058c FFF7FEFF 		bl	VXISI2CWrite
 4931              	.LVL639:
3440:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
 4932              		.loc 1 3440 0
 4933 0590 0021     		movs	r1, #0
 4934 0592 B320     		movs	r0, #179
 4935 0594 FFF7FEFF 		bl	VXISI2CWrite
 4936              	.LVL640:
3441:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
 4937              		.loc 1 3441 0
 4938 0598 0021     		movs	r1, #0
 4939 059a B420     		movs	r0, #180
 4940 059c FFF7FEFF 		bl	VXISI2CWrite
 4941              	.LVL641:
3442:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
 4942              		.loc 1 3442 0
 4943 05a0 0021     		movs	r1, #0
 4944 05a2 B520     		movs	r0, #181
 4945 05a4 FFF7FEFF 		bl	VXISI2CWrite
 4946              	.LVL642:
3443:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
 4947              		.loc 1 3443 0
ARM GAS  /tmp/ccUr6nXF.s 			page 176


 4948 05a8 0021     		movs	r1, #0
 4949 05aa B620     		movs	r0, #182
 4950 05ac FFF7FEFF 		bl	VXISI2CWrite
 4951              	.LVL643:
3444:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
 4952              		.loc 1 3444 0
 4953 05b0 8021     		movs	r1, #128
 4954 05b2 B820     		movs	r0, #184
 4955 05b4 FFF7FEFF 		bl	VXISI2CWrite
 4956              	.LVL644:
3445:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
 4957              		.loc 1 3445 0
 4958 05b8 0021     		movs	r1, #0
 4959 05ba B920     		movs	r0, #185
 4960 05bc FFF7FEFF 		bl	VXISI2CWrite
 4961              	.LVL645:
3446:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
 4962              		.loc 1 3446 0
 4963 05c0 0121     		movs	r1, #1
 4964 05c2 BA20     		movs	r0, #186
 4965 05c4 FFF7FEFF 		bl	VXISI2CWrite
 4966              	.LVL646:
3447:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
 4967              		.loc 1 3447 0
 4968 05c8 0021     		movs	r1, #0
 4969 05ca BB20     		movs	r0, #187
 4970 05cc FFF7FEFF 		bl	VXISI2CWrite
 4971              	.LVL647:
3448:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
 4972              		.loc 1 3448 0
 4973 05d0 9021     		movs	r1, #144
 4974 05d2 BC20     		movs	r0, #188
 4975 05d4 FFF7FEFF 		bl	VXISI2CWrite
 4976              	.LVL648:
3449:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
 4977              		.loc 1 3449 0
 4978 05d8 0121     		movs	r1, #1
 4979 05da BD20     		movs	r0, #189
 4980 05dc FFF7FEFF 		bl	VXISI2CWrite
 4981              	.LVL649:
3450:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
 4982              		.loc 1 3450 0
 4983 05e0 2C21     		movs	r1, #44
 4984 05e2 BE20     		movs	r0, #190
 4985 05e4 FFF7FEFF 		bl	VXISI2CWrite
 4986              	.LVL650:
3451:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
 4987              		.loc 1 3451 0
 4988 05e8 0021     		movs	r1, #0
 4989 05ea C020     		movs	r0, #192
 4990 05ec FFF7FEFF 		bl	VXISI2CWrite
 4991              	.LVL651:
3452:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
 4992              		.loc 1 3452 0
 4993 05f0 2021     		movs	r1, #32
 4994 05f2 C120     		movs	r0, #193
 4995 05f4 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/ccUr6nXF.s 			page 177


 4996              	.LVL652:
3453:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
 4997              		.loc 1 3453 0
 4998 05f8 2021     		movs	r1, #32
 4999 05fa C220     		movs	r0, #194
 5000 05fc FFF7FEFF 		bl	VXISI2CWrite
 5001              	.LVL653:
3454:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
 5002              		.loc 1 3454 0
 5003 0600 2021     		movs	r1, #32
 5004 0602 C320     		movs	r0, #195
 5005 0604 FFF7FEFF 		bl	VXISI2CWrite
 5006              	.LVL654:
3455:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
 5007              		.loc 1 3455 0
 5008 0608 2021     		movs	r1, #32
 5009 060a C420     		movs	r0, #196
 5010 060c FFF7FEFF 		bl	VXISI2CWrite
 5011              	.LVL655:
3456:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
 5012              		.loc 1 3456 0
 5013 0610 2021     		movs	r1, #32
 5014 0612 C520     		movs	r0, #197
 5015 0614 FFF7FEFF 		bl	VXISI2CWrite
 5016              	.LVL656:
3457:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
 5017              		.loc 1 3457 0
 5018 0618 FF21     		movs	r1, #255
 5019 061a D020     		movs	r0, #208
 5020 061c FFF7FEFF 		bl	VXISI2CWrite
 5021              	.LVL657:
3458:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
 5022              		.loc 1 3458 0
 5023 0620 3F21     		movs	r1, #63
 5024 0622 D120     		movs	r0, #209
 5025 0624 FFF7FEFF 		bl	VXISI2CWrite
 5026              	.LVL658:
3459:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
 5027              		.loc 1 3459 0
 5028 0628 C221     		movs	r1, #194
 5029 062a D220     		movs	r0, #210
 5030 062c FFF7FEFF 		bl	VXISI2CWrite
 5031              	.LVL659:
3460:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
 5032              		.loc 1 3460 0
 5033 0630 3F21     		movs	r1, #63
 5034 0632 D320     		movs	r0, #211
 5035 0634 FFF7FEFF 		bl	VXISI2CWrite
 5036              	.LVL660:
3461:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
 5037              		.loc 1 3461 0
 5038 0638 0021     		movs	r1, #0
 5039 063a D420     		movs	r0, #212
 5040 063c FFF7FEFF 		bl	VXISI2CWrite
 5041              	.LVL661:
3462:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
 5042              		.loc 1 3462 0
ARM GAS  /tmp/ccUr6nXF.s 			page 178


 5043 0640 0021     		movs	r1, #0
 5044 0642 D520     		movs	r0, #213
 5045 0644 FFF7FEFF 		bl	VXISI2CWrite
 5046              	.LVL662:
3463:Src/main.c    **** 	VXISI2CWrite(0xD7,0x10);
 5047              		.loc 1 3463 0
 5048 0648 0021     		movs	r1, #0
 5049 064a D620     		movs	r0, #214
 5050 064c FFF7FEFF 		bl	VXISI2CWrite
 5051              	.LVL663:
3464:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
 5052              		.loc 1 3464 0
 5053 0650 1021     		movs	r1, #16
 5054 0652 D720     		movs	r0, #215
 5055 0654 FFF7FEFF 		bl	VXISI2CWrite
 5056              	.LVL664:
3465:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
 5057              		.loc 1 3465 0
 5058 0658 0021     		movs	r1, #0
 5059 065a D820     		movs	r0, #216
 5060 065c FFF7FEFF 		bl	VXISI2CWrite
 5061              	.LVL665:
3466:Src/main.c    **** 	VXISI2CWrite(0xDD,0x00);
 5062              		.loc 1 3466 0
 5063 0660 7721     		movs	r1, #119
 5064 0662 DC20     		movs	r0, #220
 5065 0664 FFF7FEFF 		bl	VXISI2CWrite
 5066              	.LVL666:
3467:Src/main.c    **** 	VXISI2CWrite(0xDE,0xAF);
 5067              		.loc 1 3467 0
 5068 0668 0021     		movs	r1, #0
 5069 066a DD20     		movs	r0, #221
 5070 066c FFF7FEFF 		bl	VXISI2CWrite
 5071              	.LVL667:
3468:Src/main.c    **** 	VXISI2CWrite(0xDF,0xEF);
 5072              		.loc 1 3468 0
 5073 0670 AF21     		movs	r1, #175
 5074 0672 DE20     		movs	r0, #222
 5075 0674 FFF7FEFF 		bl	VXISI2CWrite
 5076              	.LVL668:
3469:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
 5077              		.loc 1 3469 0
 5078 0678 EF21     		movs	r1, #239
 5079 067a DF20     		movs	r0, #223
 5080 067c FFF7FEFF 		bl	VXISI2CWrite
 5081              	.LVL669:
3470:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
 5082              		.loc 1 3470 0
 5083 0680 0021     		movs	r1, #0
 5084 0682 E020     		movs	r0, #224
 5085 0684 FFF7FEFF 		bl	VXISI2CWrite
 5086              	.LVL670:
3471:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
 5087              		.loc 1 3471 0
 5088 0688 0021     		movs	r1, #0
 5089 068a E120     		movs	r0, #225
 5090 068c FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/ccUr6nXF.s 			page 179


 5091              	.LVL671:
3472:Src/main.c    **** 	VXISI2CWrite(0xE3,0x12);
 5092              		.loc 1 3472 0
 5093 0690 0021     		movs	r1, #0
 5094 0692 E220     		movs	r0, #226
 5095 0694 FFF7FEFF 		bl	VXISI2CWrite
 5096              	.LVL672:
3473:Src/main.c    **** 	VXISI2CWrite(0xE4,0xE2);
 5097              		.loc 1 3473 0
 5098 0698 1221     		movs	r1, #18
 5099 069a E320     		movs	r0, #227
 5100 069c FFF7FEFF 		bl	VXISI2CWrite
 5101              	.LVL673:
3474:Src/main.c    **** 	VXISI2CWrite(0xE5,0xD0);
 5102              		.loc 1 3474 0
 5103 06a0 E221     		movs	r1, #226
 5104 06a2 E420     		movs	r0, #228
 5105 06a4 FFF7FEFF 		bl	VXISI2CWrite
 5106              	.LVL674:
3475:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
 5107              		.loc 1 3475 0
 5108 06a8 D021     		movs	r1, #208
 5109 06aa E520     		movs	r0, #229
 5110 06ac FFF7FEFF 		bl	VXISI2CWrite
 5111              	.LVL675:
3476:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
 5112              		.loc 1 3476 0
 5113 06b0 0021     		movs	r1, #0
 5114 06b2 E620     		movs	r0, #230
 5115 06b4 FFF7FEFF 		bl	VXISI2CWrite
 5116              	.LVL676:
3477:Src/main.c    **** 	VXISI2CWrite(0xE8,0x0F);
 5117              		.loc 1 3477 0
 5118 06b8 0021     		movs	r1, #0
 5119 06ba E720     		movs	r0, #231
 5120 06bc FFF7FEFF 		bl	VXISI2CWrite
 5121              	.LVL677:
3478:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
 5122              		.loc 1 3478 0
 5123 06c0 0F21     		movs	r1, #15
 5124 06c2 E820     		movs	r0, #232
 5125 06c4 FFF7FEFF 		bl	VXISI2CWrite
 5126              	.LVL678:
3479:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
 5127              		.loc 1 3479 0
 5128 06c8 0021     		movs	r1, #0
 5129 06ca E920     		movs	r0, #233
 5130 06cc FFF7FEFF 		bl	VXISI2CWrite
 5131              	.LVL679:
3480:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
 5132              		.loc 1 3480 0
 5133 06d0 0021     		movs	r1, #0
 5134 06d2 EA20     		movs	r0, #234
 5135 06d4 FFF7FEFF 		bl	VXISI2CWrite
 5136              	.LVL680:
3481:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
 5137              		.loc 1 3481 0
ARM GAS  /tmp/ccUr6nXF.s 			page 180


 5138 06d8 0021     		movs	r1, #0
 5139 06da EB20     		movs	r0, #235
 5140 06dc FFF7FEFF 		bl	VXISI2CWrite
 5141              	.LVL681:
3482:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
 5142              		.loc 1 3482 0
 5143 06e0 8821     		movs	r1, #136
 5144 06e2 EC20     		movs	r0, #236
 5145 06e4 FFF7FEFF 		bl	VXISI2CWrite
 5146              	.LVL682:
3483:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
 5147              		.loc 1 3483 0
 5148 06e8 0021     		movs	r1, #0
 5149 06ea ED20     		movs	r0, #237
 5150 06ec FFF7FEFF 		bl	VXISI2CWrite
 5151              	.LVL683:
3484:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
 5152              		.loc 1 3484 0
 5153 06f0 0021     		movs	r1, #0
 5154 06f2 EE20     		movs	r0, #238
 5155 06f4 FFF7FEFF 		bl	VXISI2CWrite
 5156              	.LVL684:
3485:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
 5157              		.loc 1 3485 0
 5158 06f8 0021     		movs	r1, #0
 5159 06fa EF20     		movs	r0, #239
 5160 06fc FFF7FEFF 		bl	VXISI2CWrite
 5161              	.LVL685:
3486:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
 5162              		.loc 1 3486 0
 5163 0700 3021     		movs	r1, #48
 5164 0702 F020     		movs	r0, #240
 5165 0704 FFF7FEFF 		bl	VXISI2CWrite
 5166              	.LVL686:
3487:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
 5167              		.loc 1 3487 0
 5168 0708 4321     		movs	r1, #67
 5169 070a F120     		movs	r0, #241
 5170 070c FFF7FEFF 		bl	VXISI2CWrite
 5171              	.LVL687:
3488:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
 5172              		.loc 1 3488 0
 5173 0710 1F21     		movs	r1, #31
 5174 0712 F220     		movs	r0, #242
 5175 0714 FFF7FEFF 		bl	VXISI2CWrite
 5176              	.LVL688:
3489:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
 5177              		.loc 1 3489 0
 5178 0718 1F21     		movs	r1, #31
 5179 071a F320     		movs	r0, #243
 5180 071c FFF7FEFF 		bl	VXISI2CWrite
 5181              	.LVL689:
3490:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
 5182              		.loc 1 3490 0
 5183 0720 2221     		movs	r1, #34
 5184 0722 F420     		movs	r0, #244
 5185 0724 FFF7FEFF 		bl	VXISI2CWrite
ARM GAS  /tmp/ccUr6nXF.s 			page 181


 5186              	.LVL690:
3491:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
 5187              		.loc 1 3491 0
 5188 0728 7321     		movs	r1, #115
 5189 072a F520     		movs	r0, #245
 5190 072c FFF7FEFF 		bl	VXISI2CWrite
 5191              	.LVL691:
3492:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
 5192              		.loc 1 3492 0
 5193 0730 5321     		movs	r1, #83
 5194 0732 F620     		movs	r0, #246
 5195 0734 FFF7FEFF 		bl	VXISI2CWrite
 5196              	.LVL692:
3493:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
 5197              		.loc 1 3493 0
 5198 0738 8021     		movs	r1, #128
 5199 073a F720     		movs	r0, #247
 5200 073c FFF7FEFF 		bl	VXISI2CWrite
 5201              	.LVL693:
3494:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
 5202              		.loc 1 3494 0
 5203 0740 0121     		movs	r1, #1
 5204 0742 F820     		movs	r0, #248
 5205 0744 FFF7FEFF 		bl	VXISI2CWrite
 5206              	.LVL694:
3495:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
 5207              		.loc 1 3495 0
 5208 0748 0121     		movs	r1, #1
 5209 074a F920     		movs	r0, #249
 5210 074c FFF7FEFF 		bl	VXISI2CWrite
 5211              	.LVL695:
3496:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
 5212              		.loc 1 3496 0
 5213 0750 0021     		movs	r1, #0
 5214 0752 FA20     		movs	r0, #250
 5215 0754 FFF7FEFF 		bl	VXISI2CWrite
 5216              	.LVL696:
3497:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
 5217              		.loc 1 3497 0
 5218 0758 0021     		movs	r1, #0
 5219 075a FB20     		movs	r0, #251
 5220 075c FFF7FEFF 		bl	VXISI2CWrite
 5221              	.LVL697:
3498:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
 5222              		.loc 1 3498 0
 5223 0760 0021     		movs	r1, #0
 5224 0762 FC20     		movs	r0, #252
 5225 0764 FFF7FEFF 		bl	VXISI2CWrite
 5226              	.LVL698:
3499:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
 5227              		.loc 1 3499 0
 5228 0768 7021     		movs	r1, #112
 5229 076a FD20     		movs	r0, #253
 5230 076c FFF7FEFF 		bl	VXISI2CWrite
 5231              	.LVL699:
3500:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
 5232              		.loc 1 3500 0
ARM GAS  /tmp/ccUr6nXF.s 			page 182


 5233 0770 4021     		movs	r1, #64
 5234 0772 FE20     		movs	r0, #254
 5235 0774 FFF7FEFF 		bl	VXISI2CWrite
 5236              	.LVL700:
3501:Src/main.c    **** 			 
 5237              		.loc 1 3501 0
 5238 0778 0721     		movs	r1, #7
 5239 077a FF20     		movs	r0, #255
 5240 077c FFF7FEFF 		bl	VXISI2CWrite
 5241              	.LVL701:
3503:Src/main.c    **** 
 5242              		.loc 1 3503 0
 5243 0780 08BD     		pop	{r3, pc}
 5244              		.cfi_endproc
 5245              	.LFE92:
 5247 0782 00BF     		.section	.text.SET_AHD_MDOE,"ax",%progbits
 5248              		.align	1
 5249              		.global	SET_AHD_MDOE
 5250              		.syntax unified
 5251              		.thumb
 5252              		.thumb_func
 5253              		.fpu softvfp
 5255              	SET_AHD_MDOE:
 5256              	.LFB93:
3506:Src/main.c    **** 	Printf("\r\nSET_AHD_MDOE...");
 5257              		.loc 1 3506 0
 5258              		.cfi_startproc
 5259              		@ args = 0, pretend = 0, frame = 0
 5260              		@ frame_needed = 0, uses_anonymous_args = 0
 5261 0000 08B5     		push	{r3, lr}
 5262              	.LCFI38:
 5263              		.cfi_def_cfa_offset 8
 5264              		.cfi_offset 3, -8
 5265              		.cfi_offset 14, -4
3507:Src/main.c    **** 
 5266              		.loc 1 3507 0
 5267 0002 FE48     		ldr	r0, .L198
 5268 0004 FFF7FEFF 		bl	Printf
 5269              	.LVL702:
3509:Src/main.c    **** 	VXISI2CWrite(0x01,0x00);
 5270              		.loc 1 3509 0
 5271 0008 4221     		movs	r1, #66
 5272 000a 0020     		movs	r0, #0
 5273 000c FFF7FEFF 		bl	VXISI2CWrite
 5274              	.LVL703:
3510:Src/main.c    **** 	VXISI2CWrite(0x02,0x00);
 5275              		.loc 1 3510 0
 5276 0010 0021     		movs	r1, #0
 5277 0012 0120     		movs	r0, #1
 5278 0014 FFF7FEFF 		bl	VXISI2CWrite
 5279              	.LVL704:
3511:Src/main.c    **** 	VXISI2CWrite(0x03,0x75);
 5280              		.loc 1 3511 0
 5281 0018 0021     		movs	r1, #0
 5282 001a 0220     		movs	r0, #2
 5283 001c FFF7FEFF 		bl	VXISI2CWrite
 5284              	.LVL705:
ARM GAS  /tmp/ccUr6nXF.s 			page 183


3512:Src/main.c    **** 	VXISI2CWrite(0x04,0x18);
 5285              		.loc 1 3512 0
 5286 0020 7521     		movs	r1, #117
 5287 0022 0320     		movs	r0, #3
 5288 0024 FFF7FEFF 		bl	VXISI2CWrite
 5289              	.LVL706:
3513:Src/main.c    **** 	VXISI2CWrite(0x05,0x80);
 5290              		.loc 1 3513 0
 5291 0028 1821     		movs	r1, #24
 5292 002a 0420     		movs	r0, #4
 5293 002c FFF7FEFF 		bl	VXISI2CWrite
 5294              	.LVL707:
3514:Src/main.c    **** 	VXISI2CWrite(0x06,0x20);
 5295              		.loc 1 3514 0
 5296 0030 8021     		movs	r1, #128
 5297 0032 0520     		movs	r0, #5
 5298 0034 FFF7FEFF 		bl	VXISI2CWrite
 5299              	.LVL708:
3515:Src/main.c    **** 	VXISI2CWrite(0x07,0x0C);
 5300              		.loc 1 3515 0
 5301 0038 2021     		movs	r1, #32
 5302 003a 0620     		movs	r0, #6
 5303 003c FFF7FEFF 		bl	VXISI2CWrite
 5304              	.LVL709:
3516:Src/main.c    **** 	VXISI2CWrite(0x08,0x40);
 5305              		.loc 1 3516 0
 5306 0040 0C21     		movs	r1, #12
 5307 0042 0720     		movs	r0, #7
 5308 0044 FFF7FEFF 		bl	VXISI2CWrite
 5309              	.LVL710:
3517:Src/main.c    **** 	VXISI2CWrite(0x09,0x0A);
 5310              		.loc 1 3517 0
 5311 0048 4021     		movs	r1, #64
 5312 004a 0820     		movs	r0, #8
 5313 004c FFF7FEFF 		bl	VXISI2CWrite
 5314              	.LVL711:
3518:Src/main.c    **** 	VXISI2CWrite(0x0A,0x40);
 5315              		.loc 1 3518 0
 5316 0050 0A21     		movs	r1, #10
 5317 0052 0920     		movs	r0, #9
 5318 0054 FFF7FEFF 		bl	VXISI2CWrite
 5319              	.LVL712:
3519:Src/main.c    **** 	VXISI2CWrite(0x0B,0x0A);
 5320              		.loc 1 3519 0
 5321 0058 4021     		movs	r1, #64
 5322 005a 0A20     		movs	r0, #10
 5323 005c FFF7FEFF 		bl	VXISI2CWrite
 5324              	.LVL713:
3520:Src/main.c    **** 	VXISI2CWrite(0x0C,0x00);
 5325              		.loc 1 3520 0
 5326 0060 0A21     		movs	r1, #10
 5327 0062 0B20     		movs	r0, #11
 5328 0064 FFF7FEFF 		bl	VXISI2CWrite
 5329              	.LVL714:
3521:Src/main.c    **** 	VXISI2CWrite(0x0D,0x20);
 5330              		.loc 1 3521 0
 5331 0068 0021     		movs	r1, #0
ARM GAS  /tmp/ccUr6nXF.s 			page 184


 5332 006a 0C20     		movs	r0, #12
 5333 006c FFF7FEFF 		bl	VXISI2CWrite
 5334              	.LVL715:
3522:Src/main.c    **** 	VXISI2CWrite(0x0E,0x10);
 5335              		.loc 1 3522 0
 5336 0070 2021     		movs	r1, #32
 5337 0072 0D20     		movs	r0, #13
 5338 0074 FFF7FEFF 		bl	VXISI2CWrite
 5339              	.LVL716:
3523:Src/main.c    **** 	VXISI2CWrite(0x0F,0x00);
 5340              		.loc 1 3523 0
 5341 0078 1021     		movs	r1, #16
 5342 007a 0E20     		movs	r0, #14
 5343 007c FFF7FEFF 		bl	VXISI2CWrite
 5344              	.LVL717:
3524:Src/main.c    **** 	VXISI2CWrite(0x10,0x81);
 5345              		.loc 1 3524 0
 5346 0080 0021     		movs	r1, #0
 5347 0082 0F20     		movs	r0, #15
 5348 0084 FFF7FEFF 		bl	VXISI2CWrite
 5349              	.LVL718:
3525:Src/main.c    **** 	VXISI2CWrite(0x11,0x82);
 5350              		.loc 1 3525 0
 5351 0088 8121     		movs	r1, #129
 5352 008a 1020     		movs	r0, #16
 5353 008c FFF7FEFF 		bl	VXISI2CWrite
 5354              	.LVL719:
3526:Src/main.c    **** 	VXISI2CWrite(0x12,0x74);
 5355              		.loc 1 3526 0
 5356 0090 8221     		movs	r1, #130
 5357 0092 1120     		movs	r0, #17
 5358 0094 FFF7FEFF 		bl	VXISI2CWrite
 5359              	.LVL720:
3527:Src/main.c    **** 	VXISI2CWrite(0x13,0x80);
 5360              		.loc 1 3527 0
 5361 0098 7421     		movs	r1, #116
 5362 009a 1220     		movs	r0, #18
 5363 009c FFF7FEFF 		bl	VXISI2CWrite
 5364              	.LVL721:
3528:Src/main.c    **** 	VXISI2CWrite(0x14,0x38);
 5365              		.loc 1 3528 0
 5366 00a0 8021     		movs	r1, #128
 5367 00a2 1320     		movs	r0, #19
 5368 00a4 FFF7FEFF 		bl	VXISI2CWrite
 5369              	.LVL722:
3529:Src/main.c    **** 	VXISI2CWrite(0x15,0x78);
 5370              		.loc 1 3529 0
 5371 00a8 3821     		movs	r1, #56
 5372 00aa 1420     		movs	r0, #20
 5373 00ac FFF7FEFF 		bl	VXISI2CWrite
 5374              	.LVL723:
3530:Src/main.c    **** 	VXISI2CWrite(0x16,0xFE);
 5375              		.loc 1 3530 0
 5376 00b0 7821     		movs	r1, #120
 5377 00b2 1520     		movs	r0, #21
 5378 00b4 FFF7FEFF 		bl	VXISI2CWrite
 5379              	.LVL724:
ARM GAS  /tmp/ccUr6nXF.s 			page 185


3531:Src/main.c    **** 	VXISI2CWrite(0x17,0x00);
 5380              		.loc 1 3531 0
 5381 00b8 FE21     		movs	r1, #254
 5382 00ba 1620     		movs	r0, #22
 5383 00bc FFF7FEFF 		bl	VXISI2CWrite
 5384              	.LVL725:
3532:Src/main.c    **** 	VXISI2CWrite(0x18,0xC0);
 5385              		.loc 1 3532 0
 5386 00c0 0021     		movs	r1, #0
 5387 00c2 1720     		movs	r0, #23
 5388 00c4 FFF7FEFF 		bl	VXISI2CWrite
 5389              	.LVL726:
3533:Src/main.c    **** 	VXISI2CWrite(0x19,0x01);
 5390              		.loc 1 3533 0
 5391 00c8 C021     		movs	r1, #192
 5392 00ca 1820     		movs	r0, #24
 5393 00cc FFF7FEFF 		bl	VXISI2CWrite
 5394              	.LVL727:
3534:Src/main.c    **** 	VXISI2CWrite(0x1A,0x20);
 5395              		.loc 1 3534 0
 5396 00d0 0121     		movs	r1, #1
 5397 00d2 1920     		movs	r0, #25
 5398 00d4 FFF7FEFF 		bl	VXISI2CWrite
 5399              	.LVL728:
3535:Src/main.c    **** 	VXISI2CWrite(0x1B,0x30);
 5400              		.loc 1 3535 0
 5401 00d8 2021     		movs	r1, #32
 5402 00da 1A20     		movs	r0, #26
 5403 00dc FFF7FEFF 		bl	VXISI2CWrite
 5404              	.LVL729:
3536:Src/main.c    **** 	VXISI2CWrite(0x1C,0x00);
 5405              		.loc 1 3536 0
 5406 00e0 3021     		movs	r1, #48
 5407 00e2 1B20     		movs	r0, #27
 5408 00e4 FFF7FEFF 		bl	VXISI2CWrite
 5409              	.LVL730:
3537:Src/main.c    **** 	VXISI2CWrite(0x1D,0x00);
 5410              		.loc 1 3537 0
 5411 00e8 0021     		movs	r1, #0
 5412 00ea 1C20     		movs	r0, #28
 5413 00ec FFF7FEFF 		bl	VXISI2CWrite
 5414              	.LVL731:
3538:Src/main.c    **** 	VXISI2CWrite(0x1E,0x20);
 5415              		.loc 1 3538 0
 5416 00f0 0021     		movs	r1, #0
 5417 00f2 1D20     		movs	r0, #29
 5418 00f4 FFF7FEFF 		bl	VXISI2CWrite
 5419              	.LVL732:
3539:Src/main.c    **** 	VXISI2CWrite(0x1F,0xA4);
 5420              		.loc 1 3539 0
 5421 00f8 2021     		movs	r1, #32
 5422 00fa 1E20     		movs	r0, #30
 5423 00fc FFF7FEFF 		bl	VXISI2CWrite
 5424              	.LVL733:
3540:Src/main.c    **** 	VXISI2CWrite(0x20,0x50);
 5425              		.loc 1 3540 0
 5426 0100 A421     		movs	r1, #164
ARM GAS  /tmp/ccUr6nXF.s 			page 186


 5427 0102 1F20     		movs	r0, #31
 5428 0104 FFF7FEFF 		bl	VXISI2CWrite
 5429              	.LVL734:
3541:Src/main.c    **** 	VXISI2CWrite(0x21,0xE2);
 5430              		.loc 1 3541 0
 5431 0108 5021     		movs	r1, #80
 5432 010a 2020     		movs	r0, #32
 5433 010c FFF7FEFF 		bl	VXISI2CWrite
 5434              	.LVL735:
3542:Src/main.c    **** 	VXISI2CWrite(0x22,0x87);
 5435              		.loc 1 3542 0
 5436 0110 E221     		movs	r1, #226
 5437 0112 2120     		movs	r0, #33
 5438 0114 FFF7FEFF 		bl	VXISI2CWrite
 5439              	.LVL736:
3543:Src/main.c    **** 	VXISI2CWrite(0x23,0x98);
 5440              		.loc 1 3543 0
 5441 0118 8721     		movs	r1, #135
 5442 011a 2220     		movs	r0, #34
 5443 011c FFF7FEFF 		bl	VXISI2CWrite
 5444              	.LVL737:
3544:Src/main.c    **** 	VXISI2CWrite(0x24,0x80);
 5445              		.loc 1 3544 0
 5446 0120 9821     		movs	r1, #152
 5447 0122 2320     		movs	r0, #35
 5448 0124 FFF7FEFF 		bl	VXISI2CWrite
 5449              	.LVL738:
3545:Src/main.c    **** 	VXISI2CWrite(0x25,0x44);
 5450              		.loc 1 3545 0
 5451 0128 8021     		movs	r1, #128
 5452 012a 2420     		movs	r0, #36
 5453 012c FFF7FEFF 		bl	VXISI2CWrite
 5454              	.LVL739:
3546:Src/main.c    **** 	VXISI2CWrite(0x26,0x65);
 5455              		.loc 1 3546 0
 5456 0130 4421     		movs	r1, #68
 5457 0132 2520     		movs	r0, #37
 5458 0134 FFF7FEFF 		bl	VXISI2CWrite
 5459              	.LVL740:
3547:Src/main.c    **** 	VXISI2CWrite(0x27,0x38);
 5460              		.loc 1 3547 0
 5461 0138 6521     		movs	r1, #101
 5462 013a 2620     		movs	r0, #38
 5463 013c FFF7FEFF 		bl	VXISI2CWrite
 5464              	.LVL741:
3548:Src/main.c    **** 	VXISI2CWrite(0x28,0xF0);
 5465              		.loc 1 3548 0
 5466 0140 3821     		movs	r1, #56
 5467 0142 2720     		movs	r0, #39
 5468 0144 FFF7FEFF 		bl	VXISI2CWrite
 5469              	.LVL742:
3549:Src/main.c    **** 	VXISI2CWrite(0x29,0x00);
 5470              		.loc 1 3549 0
 5471 0148 F021     		movs	r1, #240
 5472 014a 2820     		movs	r0, #40
 5473 014c FFF7FEFF 		bl	VXISI2CWrite
 5474              	.LVL743:
ARM GAS  /tmp/ccUr6nXF.s 			page 187


3550:Src/main.c    **** 	VXISI2CWrite(0x2A,0x00);
 5475              		.loc 1 3550 0
 5476 0150 0021     		movs	r1, #0
 5477 0152 2920     		movs	r0, #41
 5478 0154 FFF7FEFF 		bl	VXISI2CWrite
 5479              	.LVL744:
3551:Src/main.c    **** 	VXISI2CWrite(0x2B,0x11);
 5480              		.loc 1 3551 0
 5481 0158 0021     		movs	r1, #0
 5482 015a 2A20     		movs	r0, #42
 5483 015c FFF7FEFF 		bl	VXISI2CWrite
 5484              	.LVL745:
3552:Src/main.c    **** 	VXISI2CWrite(0x2C,0x00);
 5485              		.loc 1 3552 0
 5486 0160 1121     		movs	r1, #17
 5487 0162 2B20     		movs	r0, #43
 5488 0164 FFF7FEFF 		bl	VXISI2CWrite
 5489              	.LVL746:
3553:Src/main.c    **** 	VXISI2CWrite(0x2D,0x00);
 5490              		.loc 1 3553 0
 5491 0168 0021     		movs	r1, #0
 5492 016a 2C20     		movs	r0, #44
 5493 016c FFF7FEFF 		bl	VXISI2CWrite
 5494              	.LVL747:
3554:Src/main.c    **** 	VXISI2CWrite(0x2E,0x47);
 5495              		.loc 1 3554 0
 5496 0170 0021     		movs	r1, #0
 5497 0172 2D20     		movs	r0, #45
 5498 0174 FFF7FEFF 		bl	VXISI2CWrite
 5499              	.LVL748:
3555:Src/main.c    **** 	VXISI2CWrite(0x2F,0x80);
 5500              		.loc 1 3555 0
 5501 0178 4721     		movs	r1, #71
 5502 017a 2E20     		movs	r0, #46
 5503 017c FFF7FEFF 		bl	VXISI2CWrite
 5504              	.LVL749:
3556:Src/main.c    **** 	VXISI2CWrite(0x30,0x38);
 5505              		.loc 1 3556 0
 5506 0180 8021     		movs	r1, #128
 5507 0182 2F20     		movs	r0, #47
 5508 0184 FFF7FEFF 		bl	VXISI2CWrite
 5509              	.LVL750:
3557:Src/main.c    **** 	VXISI2CWrite(0x31,0x80);
 5510              		.loc 1 3557 0
 5511 0188 3821     		movs	r1, #56
 5512 018a 3020     		movs	r0, #48
 5513 018c FFF7FEFF 		bl	VXISI2CWrite
 5514              	.LVL751:
3558:Src/main.c    **** 	VXISI2CWrite(0x32,0x80);
 5515              		.loc 1 3558 0
 5516 0190 8021     		movs	r1, #128
 5517 0192 3120     		movs	r0, #49
 5518 0194 FFF7FEFF 		bl	VXISI2CWrite
 5519              	.LVL752:
3559:Src/main.c    **** 	VXISI2CWrite(0x33,0x80);
 5520              		.loc 1 3559 0
 5521 0198 8021     		movs	r1, #128
ARM GAS  /tmp/ccUr6nXF.s 			page 188


 5522 019a 3220     		movs	r0, #50
 5523 019c FFF7FEFF 		bl	VXISI2CWrite
 5524              	.LVL753:
3560:Src/main.c    **** 	VXISI2CWrite(0x34,0xA0);
 5525              		.loc 1 3560 0
 5526 01a0 8021     		movs	r1, #128
 5527 01a2 3320     		movs	r0, #51
 5528 01a4 FFF7FEFF 		bl	VXISI2CWrite
 5529              	.LVL754:
3561:Src/main.c    **** 	VXISI2CWrite(0x35,0x18);
 5530              		.loc 1 3561 0
 5531 01a8 A021     		movs	r1, #160
 5532 01aa 3420     		movs	r0, #52
 5533 01ac FFF7FEFF 		bl	VXISI2CWrite
 5534              	.LVL755:
3562:Src/main.c    **** 	VXISI2CWrite(0x36,0x46);
 5535              		.loc 1 3562 0
 5536 01b0 1821     		movs	r1, #24
 5537 01b2 3520     		movs	r0, #53
 5538 01b4 FFF7FEFF 		bl	VXISI2CWrite
 5539              	.LVL756:
3563:Src/main.c    **** 	VXISI2CWrite(0x37,0x64);
 5540              		.loc 1 3563 0
 5541 01b8 4621     		movs	r1, #70
 5542 01ba 3620     		movs	r0, #54
 5543 01bc FFF7FEFF 		bl	VXISI2CWrite
 5544              	.LVL757:
3564:Src/main.c    **** 	VXISI2CWrite(0x38,0x00);
 5545              		.loc 1 3564 0
 5546 01c0 6421     		movs	r1, #100
 5547 01c2 3720     		movs	r0, #55
 5548 01c4 FFF7FEFF 		bl	VXISI2CWrite
 5549              	.LVL758:
3565:Src/main.c    **** 	VXISI2CWrite(0x39,0xFF);
 5550              		.loc 1 3565 0
 5551 01c8 0021     		movs	r1, #0
 5552 01ca 3820     		movs	r0, #56
 5553 01cc FFF7FEFF 		bl	VXISI2CWrite
 5554              	.LVL759:
3566:Src/main.c    **** 	VXISI2CWrite(0x3A,0x73);
 5555              		.loc 1 3566 0
 5556 01d0 FF21     		movs	r1, #255
 5557 01d2 3920     		movs	r0, #57
 5558 01d4 FFF7FEFF 		bl	VXISI2CWrite
 5559              	.LVL760:
3567:Src/main.c    **** 	VXISI2CWrite(0x3B,0x80);
 5560              		.loc 1 3567 0
 5561 01d8 7321     		movs	r1, #115
 5562 01da 3A20     		movs	r0, #58
 5563 01dc FFF7FEFF 		bl	VXISI2CWrite
 5564              	.LVL761:
3568:Src/main.c    **** 	VXISI2CWrite(0x3C,0x80);
 5565              		.loc 1 3568 0
 5566 01e0 8021     		movs	r1, #128
 5567 01e2 3B20     		movs	r0, #59
 5568 01e4 FFF7FEFF 		bl	VXISI2CWrite
 5569              	.LVL762:
ARM GAS  /tmp/ccUr6nXF.s 			page 189


3569:Src/main.c    **** 	VXISI2CWrite(0x3D,0x80);
 5570              		.loc 1 3569 0
 5571 01e8 8021     		movs	r1, #128
 5572 01ea 3C20     		movs	r0, #60
 5573 01ec FFF7FEFF 		bl	VXISI2CWrite
 5574              	.LVL763:
3570:Src/main.c    **** 	VXISI2CWrite(0x3E,0x80);
 5575              		.loc 1 3570 0
 5576 01f0 8021     		movs	r1, #128
 5577 01f2 3D20     		movs	r0, #61
 5578 01f4 FFF7FEFF 		bl	VXISI2CWrite
 5579              	.LVL764:
3571:Src/main.c    **** 	VXISI2CWrite(0x3F,0x80);
 5580              		.loc 1 3571 0
 5581 01f8 8021     		movs	r1, #128
 5582 01fa 3E20     		movs	r0, #62
 5583 01fc FFF7FEFF 		bl	VXISI2CWrite
 5584              	.LVL765:
3572:Src/main.c    **** 	VXISI2CWrite(0x40,0x80);
 5585              		.loc 1 3572 0
 5586 0200 8021     		movs	r1, #128
 5587 0202 3F20     		movs	r0, #63
 5588 0204 FFF7FEFF 		bl	VXISI2CWrite
 5589              	.LVL766:
3573:Src/main.c    **** 	VXISI2CWrite(0x41,0x60);
 5590              		.loc 1 3573 0
 5591 0208 8021     		movs	r1, #128
 5592 020a 4020     		movs	r0, #64
 5593 020c FFF7FEFF 		bl	VXISI2CWrite
 5594              	.LVL767:
3574:Src/main.c    **** 	VXISI2CWrite(0x42,0x5F);
 5595              		.loc 1 3574 0
 5596 0210 6021     		movs	r1, #96
 5597 0212 4120     		movs	r0, #65
 5598 0214 FFF7FEFF 		bl	VXISI2CWrite
 5599              	.LVL768:
3575:Src/main.c    **** 	VXISI2CWrite(0x43,0x37);
 5600              		.loc 1 3575 0
 5601 0218 5F21     		movs	r1, #95
 5602 021a 4220     		movs	r0, #66
 5603 021c FFF7FEFF 		bl	VXISI2CWrite
 5604              	.LVL769:
3576:Src/main.c    **** 	VXISI2CWrite(0x44,0x14);
 5605              		.loc 1 3576 0
 5606 0220 3721     		movs	r1, #55
 5607 0222 4320     		movs	r0, #67
 5608 0224 FFF7FEFF 		bl	VXISI2CWrite
 5609              	.LVL770:
3577:Src/main.c    **** 	VXISI2CWrite(0x45,0x00);
 5610              		.loc 1 3577 0
 5611 0228 1421     		movs	r1, #20
 5612 022a 4420     		movs	r0, #68
 5613 022c FFF7FEFF 		bl	VXISI2CWrite
 5614              	.LVL771:
3578:Src/main.c    **** 	VXISI2CWrite(0x46,0x00);
 5615              		.loc 1 3578 0
 5616 0230 0021     		movs	r1, #0
ARM GAS  /tmp/ccUr6nXF.s 			page 190


 5617 0232 4520     		movs	r0, #69
 5618 0234 FFF7FEFF 		bl	VXISI2CWrite
 5619              	.LVL772:
3579:Src/main.c    **** 	VXISI2CWrite(0x47,0x00);
 5620              		.loc 1 3579 0
 5621 0238 0021     		movs	r1, #0
 5622 023a 4620     		movs	r0, #70
 5623 023c FFF7FEFF 		bl	VXISI2CWrite
 5624              	.LVL773:
3580:Src/main.c    **** 	VXISI2CWrite(0x48,0x00);
 5625              		.loc 1 3580 0
 5626 0240 0021     		movs	r1, #0
 5627 0242 4720     		movs	r0, #71
 5628 0244 FFF7FEFF 		bl	VXISI2CWrite
 5629              	.LVL774:
3581:Src/main.c    **** 	VXISI2CWrite(0x49,0x00);
 5630              		.loc 1 3581 0
 5631 0248 0021     		movs	r1, #0
 5632 024a 4820     		movs	r0, #72
 5633 024c FFF7FEFF 		bl	VXISI2CWrite
 5634              	.LVL775:
3582:Src/main.c    **** 	VXISI2CWrite(0x4A,0x00);
 5635              		.loc 1 3582 0
 5636 0250 0021     		movs	r1, #0
 5637 0252 4920     		movs	r0, #73
 5638 0254 FFF7FEFF 		bl	VXISI2CWrite
 5639              	.LVL776:
3583:Src/main.c    **** 	VXISI2CWrite(0x4B,0x20);
 5640              		.loc 1 3583 0
 5641 0258 0021     		movs	r1, #0
 5642 025a 4A20     		movs	r0, #74
 5643 025c FFF7FEFF 		bl	VXISI2CWrite
 5644              	.LVL777:
3584:Src/main.c    **** 	VXISI2CWrite(0x4C,0x00);
 5645              		.loc 1 3584 0
 5646 0260 2021     		movs	r1, #32
 5647 0262 4B20     		movs	r0, #75
 5648 0264 FFF7FEFF 		bl	VXISI2CWrite
 5649              	.LVL778:
3585:Src/main.c    **** 	VXISI2CWrite(0x4D,0x00);
 5650              		.loc 1 3585 0
 5651 0268 0021     		movs	r1, #0
 5652 026a 4C20     		movs	r0, #76
 5653 026c FFF7FEFF 		bl	VXISI2CWrite
 5654              	.LVL779:
3586:Src/main.c    **** 	VXISI2CWrite(0x4E,0x00);
 5655              		.loc 1 3586 0
 5656 0270 0021     		movs	r1, #0
 5657 0272 4D20     		movs	r0, #77
 5658 0274 FFF7FEFF 		bl	VXISI2CWrite
 5659              	.LVL780:
3587:Src/main.c    **** 	VXISI2CWrite(0x4F,0x7F);
 5660              		.loc 1 3587 0
 5661 0278 0021     		movs	r1, #0
 5662 027a 4E20     		movs	r0, #78
 5663 027c FFF7FEFF 		bl	VXISI2CWrite
 5664              	.LVL781:
ARM GAS  /tmp/ccUr6nXF.s 			page 191


3588:Src/main.c    **** 	VXISI2CWrite(0x50,0x20);
 5665              		.loc 1 3588 0
 5666 0280 7F21     		movs	r1, #127
 5667 0282 4F20     		movs	r0, #79
 5668 0284 FFF7FEFF 		bl	VXISI2CWrite
 5669              	.LVL782:
3589:Src/main.c    **** 	VXISI2CWrite(0x51,0x00);
 5670              		.loc 1 3589 0
 5671 0288 2021     		movs	r1, #32
 5672 028a 5020     		movs	r0, #80
 5673 028c FFF7FEFF 		bl	VXISI2CWrite
 5674              	.LVL783:
3590:Src/main.c    **** 	VXISI2CWrite(0x52,0xA4);
 5675              		.loc 1 3590 0
 5676 0290 0021     		movs	r1, #0
 5677 0292 5120     		movs	r0, #81
 5678 0294 FFF7FEFF 		bl	VXISI2CWrite
 5679              	.LVL784:
3591:Src/main.c    **** 	VXISI2CWrite(0x53,0xC0);
 5680              		.loc 1 3591 0
 5681 0298 A421     		movs	r1, #164
 5682 029a 5220     		movs	r0, #82
 5683 029c FFF7FEFF 		bl	VXISI2CWrite
 5684              	.LVL785:
3592:Src/main.c    **** 	VXISI2CWrite(0x54,0x42);
 5685              		.loc 1 3592 0
 5686 02a0 C021     		movs	r1, #192
 5687 02a2 5320     		movs	r0, #83
 5688 02a4 FFF7FEFF 		bl	VXISI2CWrite
 5689              	.LVL786:
3593:Src/main.c    **** 	VXISI2CWrite(0x55,0x60);
 5690              		.loc 1 3593 0
 5691 02a8 4221     		movs	r1, #66
 5692 02aa 5420     		movs	r0, #84
 5693 02ac FFF7FEFF 		bl	VXISI2CWrite
 5694              	.LVL787:
3594:Src/main.c    **** 	VXISI2CWrite(0x56,0x5C);
 5695              		.loc 1 3594 0
 5696 02b0 6021     		movs	r1, #96
 5697 02b2 5520     		movs	r0, #85
 5698 02b4 FFF7FEFF 		bl	VXISI2CWrite
 5699              	.LVL788:
3595:Src/main.c    **** 	VXISI2CWrite(0x57,0x04);
 5700              		.loc 1 3595 0
 5701 02b8 5C21     		movs	r1, #92
 5702 02ba 5620     		movs	r0, #86
 5703 02bc FFF7FEFF 		bl	VXISI2CWrite
 5704              	.LVL789:
3596:Src/main.c    **** 	VXISI2CWrite(0x58,0x00);
 5705              		.loc 1 3596 0
 5706 02c0 0421     		movs	r1, #4
 5707 02c2 5720     		movs	r0, #87
 5708 02c4 FFF7FEFF 		bl	VXISI2CWrite
 5709              	.LVL790:
3597:Src/main.c    **** 	VXISI2CWrite(0x59,0x08);
 5710              		.loc 1 3597 0
 5711 02c8 0021     		movs	r1, #0
ARM GAS  /tmp/ccUr6nXF.s 			page 192


 5712 02ca 5820     		movs	r0, #88
 5713 02cc FFF7FEFF 		bl	VXISI2CWrite
 5714              	.LVL791:
3598:Src/main.c    **** 	VXISI2CWrite(0x5A,0x10);
 5715              		.loc 1 3598 0
 5716 02d0 0821     		movs	r1, #8
 5717 02d2 5920     		movs	r0, #89
 5718 02d4 FFF7FEFF 		bl	VXISI2CWrite
 5719              	.LVL792:
3599:Src/main.c    **** 	VXISI2CWrite(0x5B,0x00);
 5720              		.loc 1 3599 0
 5721 02d8 1021     		movs	r1, #16
 5722 02da 5A20     		movs	r0, #90
 5723 02dc FFF7FEFF 		bl	VXISI2CWrite
 5724              	.LVL793:
3600:Src/main.c    **** 	VXISI2CWrite(0x5C,0x68);
 5725              		.loc 1 3600 0
 5726 02e0 0021     		movs	r1, #0
 5727 02e2 5B20     		movs	r0, #91
 5728 02e4 FFF7FEFF 		bl	VXISI2CWrite
 5729              	.LVL794:
3601:Src/main.c    **** 	VXISI2CWrite(0x5D,0xA8);
 5730              		.loc 1 3601 0
 5731 02e8 6821     		movs	r1, #104
 5732 02ea 5C20     		movs	r0, #92
 5733 02ec FFF7FEFF 		bl	VXISI2CWrite
 5734              	.LVL795:
3602:Src/main.c    **** 	VXISI2CWrite(0x5E,0xC0);
 5735              		.loc 1 3602 0
 5736 02f0 A821     		movs	r1, #168
 5737 02f2 5D20     		movs	r0, #93
 5738 02f4 FFF7FEFF 		bl	VXISI2CWrite
 5739              	.LVL796:
3603:Src/main.c    **** 	VXISI2CWrite(0x5F,0x53);
 5740              		.loc 1 3603 0
 5741 02f8 C021     		movs	r1, #192
 5742 02fa 5E20     		movs	r0, #94
 5743 02fc FFF7FEFF 		bl	VXISI2CWrite
 5744              	.LVL797:
3604:Src/main.c    **** 	VXISI2CWrite(0x60,0xE0);
 5745              		.loc 1 3604 0
 5746 0300 5321     		movs	r1, #83
 5747 0302 5F20     		movs	r0, #95
 5748 0304 FFF7FEFF 		bl	VXISI2CWrite
 5749              	.LVL798:
3605:Src/main.c    **** 	VXISI2CWrite(0x61,0xCC);
 5750              		.loc 1 3605 0
 5751 0308 E021     		movs	r1, #224
 5752 030a 6020     		movs	r0, #96
 5753 030c FFF7FEFF 		bl	VXISI2CWrite
 5754              	.LVL799:
3606:Src/main.c    **** 	VXISI2CWrite(0x62,0x33);
 5755              		.loc 1 3606 0
 5756 0310 CC21     		movs	r1, #204
 5757 0312 6120     		movs	r0, #97
 5758 0314 FFF7FEFF 		bl	VXISI2CWrite
 5759              	.LVL800:
ARM GAS  /tmp/ccUr6nXF.s 			page 193


3607:Src/main.c    **** 	VXISI2CWrite(0x63,0x01);
 5760              		.loc 1 3607 0
 5761 0318 3321     		movs	r1, #51
 5762 031a 6220     		movs	r0, #98
 5763 031c FFF7FEFF 		bl	VXISI2CWrite
 5764              	.LVL801:
3608:Src/main.c    **** 	VXISI2CWrite(0x64,0xFF);
 5765              		.loc 1 3608 0
 5766 0320 0121     		movs	r1, #1
 5767 0322 6320     		movs	r0, #99
 5768 0324 FFF7FEFF 		bl	VXISI2CWrite
 5769              	.LVL802:
3609:Src/main.c    **** 	VXISI2CWrite(0x65,0x01);
 5770              		.loc 1 3609 0
 5771 0328 FF21     		movs	r1, #255
 5772 032a 6420     		movs	r0, #100
 5773 032c FFF7FEFF 		bl	VXISI2CWrite
 5774              	.LVL803:
3610:Src/main.c    **** 	VXISI2CWrite(0x66,0xFF);
 5775              		.loc 1 3610 0
 5776 0330 0121     		movs	r1, #1
 5777 0332 6520     		movs	r0, #101
 5778 0334 FFF7FEFF 		bl	VXISI2CWrite
 5779              	.LVL804:
3611:Src/main.c    **** 	VXISI2CWrite(0x67,0x89);
 5780              		.loc 1 3611 0
 5781 0338 FF21     		movs	r1, #255
 5782 033a 6620     		movs	r0, #102
 5783 033c FFF7FEFF 		bl	VXISI2CWrite
 5784              	.LVL805:
3612:Src/main.c    **** 	VXISI2CWrite(0x68,0xAB);
 5785              		.loc 1 3612 0
 5786 0340 8921     		movs	r1, #137
 5787 0342 6720     		movs	r0, #103
 5788 0344 FFF7FEFF 		bl	VXISI2CWrite
 5789              	.LVL806:
3613:Src/main.c    **** 	VXISI2CWrite(0x69,0x88);
 5790              		.loc 1 3613 0
 5791 0348 AB21     		movs	r1, #171
 5792 034a 6820     		movs	r0, #104
 5793 034c FFF7FEFF 		bl	VXISI2CWrite
 5794              	.LVL807:
3614:Src/main.c    **** 	VXISI2CWrite(0x6A,0x6E);
 5795              		.loc 1 3614 0
 5796 0350 8821     		movs	r1, #136
 5797 0352 6920     		movs	r0, #105
 5798 0354 FFF7FEFF 		bl	VXISI2CWrite
 5799              	.LVL808:
3615:Src/main.c    **** 	VXISI2CWrite(0x6B,0x6E);
 5800              		.loc 1 3615 0
 5801 0358 6E21     		movs	r1, #110
 5802 035a 6A20     		movs	r0, #106
 5803 035c FFF7FEFF 		bl	VXISI2CWrite
 5804              	.LVL809:
3616:Src/main.c    **** 	VXISI2CWrite(0x6C,0x6E);
 5805              		.loc 1 3616 0
 5806 0360 6E21     		movs	r1, #110
ARM GAS  /tmp/ccUr6nXF.s 			page 194


 5807 0362 6B20     		movs	r0, #107
 5808 0364 FFF7FEFF 		bl	VXISI2CWrite
 5809              	.LVL810:
3617:Src/main.c    **** 	VXISI2CWrite(0x6D,0x00);
 5810              		.loc 1 3617 0
 5811 0368 6E21     		movs	r1, #110
 5812 036a 6C20     		movs	r0, #108
 5813 036c FFF7FEFF 		bl	VXISI2CWrite
 5814              	.LVL811:
3618:Src/main.c    **** 	VXISI2CWrite(0x6E,0x00);
 5815              		.loc 1 3618 0
 5816 0370 0021     		movs	r1, #0
 5817 0372 6D20     		movs	r0, #109
 5818 0374 FFF7FEFF 		bl	VXISI2CWrite
 5819              	.LVL812:
3619:Src/main.c    **** 	VXISI2CWrite(0x6F,0x00);
 5820              		.loc 1 3619 0
 5821 0378 0021     		movs	r1, #0
 5822 037a 6E20     		movs	r0, #110
 5823 037c FFF7FEFF 		bl	VXISI2CWrite
 5824              	.LVL813:
3620:Src/main.c    **** 	VXISI2CWrite(0x70,0x00);
 5825              		.loc 1 3620 0
 5826 0380 0021     		movs	r1, #0
 5827 0382 6F20     		movs	r0, #111
 5828 0384 FFF7FEFF 		bl	VXISI2CWrite
 5829              	.LVL814:
3621:Src/main.c    **** 	VXISI2CWrite(0x71,0x00);
 5830              		.loc 1 3621 0
 5831 0388 0021     		movs	r1, #0
 5832 038a 7020     		movs	r0, #112
 5833 038c FFF7FEFF 		bl	VXISI2CWrite
 5834              	.LVL815:
3622:Src/main.c    **** 	VXISI2CWrite(0x72,0x00);
 5835              		.loc 1 3622 0
 5836 0390 0021     		movs	r1, #0
 5837 0392 7120     		movs	r0, #113
 5838 0394 FFF7FEFF 		bl	VXISI2CWrite
 5839              	.LVL816:
3623:Src/main.c    **** 	VXISI2CWrite(0x73,0x00);
 5840              		.loc 1 3623 0
 5841 0398 0021     		movs	r1, #0
 5842 039a 7220     		movs	r0, #114
 5843 039c FFF7FEFF 		bl	VXISI2CWrite
 5844              	.LVL817:
3624:Src/main.c    **** 	VXISI2CWrite(0x74,0x06);
 5845              		.loc 1 3624 0
 5846 03a0 0021     		movs	r1, #0
 5847 03a2 7320     		movs	r0, #115
 5848 03a4 FFF7FEFF 		bl	VXISI2CWrite
 5849              	.LVL818:
3625:Src/main.c    **** 	VXISI2CWrite(0x75,0xFF);
 5850              		.loc 1 3625 0
 5851 03a8 0621     		movs	r1, #6
 5852 03aa 7420     		movs	r0, #116
 5853 03ac FFF7FEFF 		bl	VXISI2CWrite
 5854              	.LVL819:
ARM GAS  /tmp/ccUr6nXF.s 			page 195


3626:Src/main.c    **** 	VXISI2CWrite(0x76,0xFF);
 5855              		.loc 1 3626 0
 5856 03b0 FF21     		movs	r1, #255
 5857 03b2 7520     		movs	r0, #117
 5858 03b4 FFF7FEFF 		bl	VXISI2CWrite
 5859              	.LVL820:
3627:Src/main.c    **** 	VXISI2CWrite(0x77,0xFF);
 5860              		.loc 1 3627 0
 5861 03b8 FF21     		movs	r1, #255
 5862 03ba 7620     		movs	r0, #118
 5863 03bc FFF7FEFF 		bl	VXISI2CWrite
 5864              	.LVL821:
3628:Src/main.c    **** 	VXISI2CWrite(0x78,0xFF);
 5865              		.loc 1 3628 0
 5866 03c0 FF21     		movs	r1, #255
 5867 03c2 7720     		movs	r0, #119
 5868 03c4 FFF7FEFF 		bl	VXISI2CWrite
 5869              	.LVL822:
3629:Src/main.c    **** 	VXISI2CWrite(0x79,0xFF);
 5870              		.loc 1 3629 0
 5871 03c8 FF21     		movs	r1, #255
 5872 03ca 7820     		movs	r0, #120
 5873 03cc FFF7FEFF 		bl	VXISI2CWrite
 5874              	.LVL823:
3630:Src/main.c    **** 	VXISI2CWrite(0x7A,0xFF);
 5875              		.loc 1 3630 0
 5876 03d0 FF21     		movs	r1, #255
 5877 03d2 7920     		movs	r0, #121
 5878 03d4 FFF7FEFF 		bl	VXISI2CWrite
 5879              	.LVL824:
3631:Src/main.c    **** 	VXISI2CWrite(0x7B,0xFF);
 5880              		.loc 1 3631 0
 5881 03d8 FF21     		movs	r1, #255
 5882 03da 7A20     		movs	r0, #122
 5883 03dc FFF7FEFF 		bl	VXISI2CWrite
 5884              	.LVL825:
3632:Src/main.c    **** 	VXISI2CWrite(0x7C,0xFF);
 5885              		.loc 1 3632 0
 5886 03e0 FF21     		movs	r1, #255
 5887 03e2 7B20     		movs	r0, #123
 5888 03e4 FFF7FEFF 		bl	VXISI2CWrite
 5889              	.LVL826:
3633:Src/main.c    **** 	VXISI2CWrite(0x7D,0xF0);
 5890              		.loc 1 3633 0
 5891 03e8 FF21     		movs	r1, #255
 5892 03ea 7C20     		movs	r0, #124
 5893 03ec FFF7FEFF 		bl	VXISI2CWrite
 5894              	.LVL827:
3634:Src/main.c    **** 	VXISI2CWrite(0x7E,0x80);
 5895              		.loc 1 3634 0
 5896 03f0 F021     		movs	r1, #240
 5897 03f2 7D20     		movs	r0, #125
 5898 03f4 FFF7FEFF 		bl	VXISI2CWrite
 5899              	.LVL828:
 5900 03f8 02E0     		b	.L199
 5901              	.L200:
 5902 03fa 00BF     		.align	2
ARM GAS  /tmp/ccUr6nXF.s 			page 196


 5903              	.L198:
 5904 03fc 00000000 		.word	.LC36
 5905              	.L199:
3635:Src/main.c    **** 	VXISI2CWrite(0x7F,0x00);
 5906              		.loc 1 3635 0
 5907 0400 8021     		movs	r1, #128
 5908 0402 7E20     		movs	r0, #126
 5909 0404 FFF7FEFF 		bl	VXISI2CWrite
 5910              	.LVL829:
3636:Src/main.c    **** 	VXISI2CWrite(0x80,0x01);
 5911              		.loc 1 3636 0
 5912 0408 0021     		movs	r1, #0
 5913 040a 7F20     		movs	r0, #127
 5914 040c FFF7FEFF 		bl	VXISI2CWrite
 5915              	.LVL830:
3637:Src/main.c    **** 	VXISI2CWrite(0x81,0x15);
 5916              		.loc 1 3637 0
 5917 0410 0121     		movs	r1, #1
 5918 0412 8020     		movs	r0, #128
 5919 0414 FFF7FEFF 		bl	VXISI2CWrite
 5920              	.LVL831:
3638:Src/main.c    **** 	VXISI2CWrite(0x82,0x40);
 5921              		.loc 1 3638 0
 5922 0418 1521     		movs	r1, #21
 5923 041a 8120     		movs	r0, #129
 5924 041c FFF7FEFF 		bl	VXISI2CWrite
 5925              	.LVL832:
3639:Src/main.c    **** 	VXISI2CWrite(0x83,0x2D);
 5926              		.loc 1 3639 0
 5927 0420 4021     		movs	r1, #64
 5928 0422 8220     		movs	r0, #130
 5929 0424 FFF7FEFF 		bl	VXISI2CWrite
 5930              	.LVL833:
3640:Src/main.c    **** 	VXISI2CWrite(0x84,0x57);
 5931              		.loc 1 3640 0
 5932 0428 2D21     		movs	r1, #45
 5933 042a 8320     		movs	r0, #131
 5934 042c FFF7FEFF 		bl	VXISI2CWrite
 5935              	.LVL834:
3641:Src/main.c    **** 	VXISI2CWrite(0x85,0xFD);
 5936              		.loc 1 3641 0
 5937 0430 5721     		movs	r1, #87
 5938 0432 8420     		movs	r0, #132
 5939 0434 FFF7FEFF 		bl	VXISI2CWrite
 5940              	.LVL835:
3642:Src/main.c    **** 	VXISI2CWrite(0x86,0x00);
 5941              		.loc 1 3642 0
 5942 0438 FD21     		movs	r1, #253
 5943 043a 8520     		movs	r0, #133
 5944 043c FFF7FEFF 		bl	VXISI2CWrite
 5945              	.LVL836:
3643:Src/main.c    **** 	VXISI2CWrite(0x87,0x00);
 5946              		.loc 1 3643 0
 5947 0440 0021     		movs	r1, #0
 5948 0442 8620     		movs	r0, #134
 5949 0444 FFF7FEFF 		bl	VXISI2CWrite
 5950              	.LVL837:
ARM GAS  /tmp/ccUr6nXF.s 			page 197


3644:Src/main.c    **** 	VXISI2CWrite(0x88,0x00);
 5951              		.loc 1 3644 0
 5952 0448 0021     		movs	r1, #0
 5953 044a 8720     		movs	r0, #135
 5954 044c FFF7FEFF 		bl	VXISI2CWrite
 5955              	.LVL838:
3645:Src/main.c    **** 	VXISI2CWrite(0x89,0x00);
 5956              		.loc 1 3645 0
 5957 0450 0021     		movs	r1, #0
 5958 0452 8820     		movs	r0, #136
 5959 0454 FFF7FEFF 		bl	VXISI2CWrite
 5960              	.LVL839:
3646:Src/main.c    **** 	VXISI2CWrite(0x8A,0x00);
 5961              		.loc 1 3646 0
 5962 0458 0021     		movs	r1, #0
 5963 045a 8920     		movs	r0, #137
 5964 045c FFF7FEFF 		bl	VXISI2CWrite
 5965              	.LVL840:
3647:Src/main.c    **** 	VXISI2CWrite(0x8B,0x7E);
 5966              		.loc 1 3647 0
 5967 0460 0021     		movs	r1, #0
 5968 0462 8A20     		movs	r0, #138
 5969 0464 FFF7FEFF 		bl	VXISI2CWrite
 5970              	.LVL841:
3648:Src/main.c    **** 	VXISI2CWrite(0x8C,0x03);
 5971              		.loc 1 3648 0
 5972 0468 7E21     		movs	r1, #126
 5973 046a 8B20     		movs	r0, #139
 5974 046c FFF7FEFF 		bl	VXISI2CWrite
 5975              	.LVL842:
3649:Src/main.c    **** 	VXISI2CWrite(0x8D,0x17);
 5976              		.loc 1 3649 0
 5977 0470 0321     		movs	r1, #3
 5978 0472 8C20     		movs	r0, #140
 5979 0474 FFF7FEFF 		bl	VXISI2CWrite
 5980              	.LVL843:
3650:Src/main.c    **** 	VXISI2CWrite(0x8E,0x8C);
 5981              		.loc 1 3650 0
 5982 0478 1721     		movs	r1, #23
 5983 047a 8D20     		movs	r0, #141
 5984 047c FFF7FEFF 		bl	VXISI2CWrite
 5985              	.LVL844:
3651:Src/main.c    **** 	VXISI2CWrite(0x8F,0x00);
 5986              		.loc 1 3651 0
 5987 0480 8C21     		movs	r1, #140
 5988 0482 8E20     		movs	r0, #142
 5989 0484 FFF7FEFF 		bl	VXISI2CWrite
 5990              	.LVL845:
3652:Src/main.c    **** 	VXISI2CWrite(0x90,0xCC);
 5991              		.loc 1 3652 0
 5992 0488 0021     		movs	r1, #0
 5993 048a 8F20     		movs	r0, #143
 5994 048c FFF7FEFF 		bl	VXISI2CWrite
 5995              	.LVL846:
3653:Src/main.c    **** 	VXISI2CWrite(0x91,0x41);
 5996              		.loc 1 3653 0
 5997 0490 CC21     		movs	r1, #204
ARM GAS  /tmp/ccUr6nXF.s 			page 198


 5998 0492 9020     		movs	r0, #144
 5999 0494 FFF7FEFF 		bl	VXISI2CWrite
 6000              	.LVL847:
3654:Src/main.c    **** 	VXISI2CWrite(0x92,0xC4);
 6001              		.loc 1 3654 0
 6002 0498 4121     		movs	r1, #65
 6003 049a 9120     		movs	r0, #145
 6004 049c FFF7FEFF 		bl	VXISI2CWrite
 6005              	.LVL848:
3655:Src/main.c    **** 	VXISI2CWrite(0x93,0x84);
 6006              		.loc 1 3655 0
 6007 04a0 C421     		movs	r1, #196
 6008 04a2 9220     		movs	r0, #146
 6009 04a4 FFF7FEFF 		bl	VXISI2CWrite
 6010              	.LVL849:
3656:Src/main.c    **** 	VXISI2CWrite(0x94,0x98);
 6011              		.loc 1 3656 0
 6012 04a8 8421     		movs	r1, #132
 6013 04aa 9320     		movs	r0, #147
 6014 04ac FFF7FEFF 		bl	VXISI2CWrite
 6015              	.LVL850:
3657:Src/main.c    **** 	VXISI2CWrite(0x95,0x80);
 6016              		.loc 1 3657 0
 6017 04b0 9821     		movs	r1, #152
 6018 04b2 9420     		movs	r0, #148
 6019 04b4 FFF7FEFF 		bl	VXISI2CWrite
 6020              	.LVL851:
3658:Src/main.c    **** 	VXISI2CWrite(0x96,0x65);
 6021              		.loc 1 3658 0
 6022 04b8 8021     		movs	r1, #128
 6023 04ba 9520     		movs	r0, #149
 6024 04bc FFF7FEFF 		bl	VXISI2CWrite
 6025              	.LVL852:
3659:Src/main.c    **** 	VXISI2CWrite(0x97,0x70);
 6026              		.loc 1 3659 0
 6027 04c0 6521     		movs	r1, #101
 6028 04c2 9620     		movs	r0, #150
 6029 04c4 FFF7FEFF 		bl	VXISI2CWrite
 6030              	.LVL853:
3660:Src/main.c    **** 	VXISI2CWrite(0x98,0x29);
 6031              		.loc 1 3660 0
 6032 04c8 7021     		movs	r1, #112
 6033 04ca 9720     		movs	r0, #151
 6034 04cc FFF7FEFF 		bl	VXISI2CWrite
 6035              	.LVL854:
3661:Src/main.c    **** 	VXISI2CWrite(0x99,0x90);
 6036              		.loc 1 3661 0
 6037 04d0 2921     		movs	r1, #41
 6038 04d2 9820     		movs	r0, #152
 6039 04d4 FFF7FEFF 		bl	VXISI2CWrite
 6040              	.LVL855:
3662:Src/main.c    **** 	VXISI2CWrite(0x9A,0x00);
 6041              		.loc 1 3662 0
 6042 04d8 9021     		movs	r1, #144
 6043 04da 9920     		movs	r0, #153
 6044 04dc FFF7FEFF 		bl	VXISI2CWrite
 6045              	.LVL856:
ARM GAS  /tmp/ccUr6nXF.s 			page 199


3663:Src/main.c    **** 	VXISI2CWrite(0x9B,0x04);
 6046              		.loc 1 3663 0
 6047 04e0 0021     		movs	r1, #0
 6048 04e2 9A20     		movs	r0, #154
 6049 04e4 FFF7FEFF 		bl	VXISI2CWrite
 6050              	.LVL857:
3664:Src/main.c    **** 	VXISI2CWrite(0x9C,0x00);
 6051              		.loc 1 3664 0
 6052 04e8 0421     		movs	r1, #4
 6053 04ea 9B20     		movs	r0, #155
 6054 04ec FFF7FEFF 		bl	VXISI2CWrite
 6055              	.LVL858:
3665:Src/main.c    **** 	VXISI2CWrite(0x9D,0x00);
 6056              		.loc 1 3665 0
 6057 04f0 0021     		movs	r1, #0
 6058 04f2 9C20     		movs	r0, #156
 6059 04f4 FFF7FEFF 		bl	VXISI2CWrite
 6060              	.LVL859:
3666:Src/main.c    **** 	VXISI2CWrite(0x9E,0x04);
 6061              		.loc 1 3666 0
 6062 04f8 0021     		movs	r1, #0
 6063 04fa 9D20     		movs	r0, #157
 6064 04fc FFF7FEFF 		bl	VXISI2CWrite
 6065              	.LVL860:
3667:Src/main.c    **** 	VXISI2CWrite(0x9F,0x65);
 6066              		.loc 1 3667 0
 6067 0500 0421     		movs	r1, #4
 6068 0502 9E20     		movs	r0, #158
 6069 0504 FFF7FEFF 		bl	VXISI2CWrite
 6070              	.LVL861:
3668:Src/main.c    **** 	VXISI2CWrite(0xA0,0x80);
 6071              		.loc 1 3668 0
 6072 0508 6521     		movs	r1, #101
 6073 050a 9F20     		movs	r0, #159
 6074 050c FFF7FEFF 		bl	VXISI2CWrite
 6075              	.LVL862:
3669:Src/main.c    **** 	VXISI2CWrite(0xA1,0xD8);
 6076              		.loc 1 3669 0
 6077 0510 8021     		movs	r1, #128
 6078 0512 A020     		movs	r0, #160
 6079 0514 FFF7FEFF 		bl	VXISI2CWrite
 6080              	.LVL863:
3670:Src/main.c    **** 	VXISI2CWrite(0xA2,0x98);
 6081              		.loc 1 3670 0
 6082 0518 D821     		movs	r1, #216
 6083 051a A120     		movs	r0, #161
 6084 051c FFF7FEFF 		bl	VXISI2CWrite
 6085              	.LVL864:
3671:Src/main.c    **** 	VXISI2CWrite(0xA3,0x87);
 6086              		.loc 1 3671 0
 6087 0520 9821     		movs	r1, #152
 6088 0522 A220     		movs	r0, #162
 6089 0524 FFF7FEFF 		bl	VXISI2CWrite
 6090              	.LVL865:
3672:Src/main.c    **** 	VXISI2CWrite(0xA4,0x00);
 6091              		.loc 1 3672 0
 6092 0528 8721     		movs	r1, #135
ARM GAS  /tmp/ccUr6nXF.s 			page 200


 6093 052a A320     		movs	r0, #163
 6094 052c FFF7FEFF 		bl	VXISI2CWrite
 6095              	.LVL866:
3673:Src/main.c    **** 	VXISI2CWrite(0xA5,0x80);
 6096              		.loc 1 3673 0
 6097 0530 0021     		movs	r1, #0
 6098 0532 A420     		movs	r0, #164
 6099 0534 FFF7FEFF 		bl	VXISI2CWrite
 6100              	.LVL867:
3674:Src/main.c    **** 	VXISI2CWrite(0xA6,0x00);
 6101              		.loc 1 3674 0
 6102 0538 8021     		movs	r1, #128
 6103 053a A520     		movs	r0, #165
 6104 053c FFF7FEFF 		bl	VXISI2CWrite
 6105              	.LVL868:
3675:Src/main.c    **** 	VXISI2CWrite(0xA7,0x70);
 6106              		.loc 1 3675 0
 6107 0540 0021     		movs	r1, #0
 6108 0542 A620     		movs	r0, #166
 6109 0544 FFF7FEFF 		bl	VXISI2CWrite
 6110              	.LVL869:
3676:Src/main.c    **** 	VXISI2CWrite(0xA8,0x40);
 6111              		.loc 1 3676 0
 6112 0548 7021     		movs	r1, #112
 6113 054a A720     		movs	r0, #167
 6114 054c FFF7FEFF 		bl	VXISI2CWrite
 6115              	.LVL870:
3677:Src/main.c    **** 	VXISI2CWrite(0xA9,0x1E);
 6116              		.loc 1 3677 0
 6117 0550 4021     		movs	r1, #64
 6118 0552 A820     		movs	r0, #168
 6119 0554 FFF7FEFF 		bl	VXISI2CWrite
 6120              	.LVL871:
3678:Src/main.c    **** 	VXISI2CWrite(0xAA,0x2C);
 6121              		.loc 1 3678 0
 6122 0558 1E21     		movs	r1, #30
 6123 055a A920     		movs	r0, #169
 6124 055c FFF7FEFF 		bl	VXISI2CWrite
 6125              	.LVL872:
3679:Src/main.c    **** 	VXISI2CWrite(0xAB,0x00);
 6126              		.loc 1 3679 0
 6127 0560 2C21     		movs	r1, #44
 6128 0562 AA20     		movs	r0, #170
 6129 0564 FFF7FEFF 		bl	VXISI2CWrite
 6130              	.LVL873:
3680:Src/main.c    **** 	VXISI2CWrite(0xAC,0x90);
 6131              		.loc 1 3680 0
 6132 0568 0021     		movs	r1, #0
 6133 056a AB20     		movs	r0, #171
 6134 056c FFF7FEFF 		bl	VXISI2CWrite
 6135              	.LVL874:
3681:Src/main.c    **** 	VXISI2CWrite(0xAD,0x65);
 6136              		.loc 1 3681 0
 6137 0570 9021     		movs	r1, #144
 6138 0572 AC20     		movs	r0, #172
 6139 0574 FFF7FEFF 		bl	VXISI2CWrite
 6140              	.LVL875:
ARM GAS  /tmp/ccUr6nXF.s 			page 201


3682:Src/main.c    **** 	VXISI2CWrite(0xAE,0x65);
 6141              		.loc 1 3682 0
 6142 0578 6521     		movs	r1, #101
 6143 057a AD20     		movs	r0, #173
 6144 057c FFF7FEFF 		bl	VXISI2CWrite
 6145              	.LVL876:
3683:Src/main.c    **** 	VXISI2CWrite(0xAF,0x99);
 6146              		.loc 1 3683 0
 6147 0580 6521     		movs	r1, #101
 6148 0582 AE20     		movs	r0, #174
 6149 0584 FFF7FEFF 		bl	VXISI2CWrite
 6150              	.LVL877:
3684:Src/main.c    **** 	VXISI2CWrite(0xB0,0x00);
 6151              		.loc 1 3684 0
 6152 0588 9921     		movs	r1, #153
 6153 058a AF20     		movs	r0, #175
 6154 058c FFF7FEFF 		bl	VXISI2CWrite
 6155              	.LVL878:
3685:Src/main.c    **** 	VXISI2CWrite(0xB1,0x00);
 6156              		.loc 1 3685 0
 6157 0590 0021     		movs	r1, #0
 6158 0592 B020     		movs	r0, #176
 6159 0594 FFF7FEFF 		bl	VXISI2CWrite
 6160              	.LVL879:
3686:Src/main.c    **** 	VXISI2CWrite(0xB2,0x00);
 6161              		.loc 1 3686 0
 6162 0598 0021     		movs	r1, #0
 6163 059a B120     		movs	r0, #177
 6164 059c FFF7FEFF 		bl	VXISI2CWrite
 6165              	.LVL880:
3687:Src/main.c    **** 	VXISI2CWrite(0xB3,0x00);
 6166              		.loc 1 3687 0
 6167 05a0 0021     		movs	r1, #0
 6168 05a2 B220     		movs	r0, #178
 6169 05a4 FFF7FEFF 		bl	VXISI2CWrite
 6170              	.LVL881:
3688:Src/main.c    **** 	VXISI2CWrite(0xB4,0x00);
 6171              		.loc 1 3688 0
 6172 05a8 0021     		movs	r1, #0
 6173 05aa B320     		movs	r0, #179
 6174 05ac FFF7FEFF 		bl	VXISI2CWrite
 6175              	.LVL882:
3689:Src/main.c    **** 	VXISI2CWrite(0xB5,0x00);
 6176              		.loc 1 3689 0
 6177 05b0 0021     		movs	r1, #0
 6178 05b2 B420     		movs	r0, #180
 6179 05b4 FFF7FEFF 		bl	VXISI2CWrite
 6180              	.LVL883:
3690:Src/main.c    **** 	VXISI2CWrite(0xB6,0x00);
 6181              		.loc 1 3690 0
 6182 05b8 0021     		movs	r1, #0
 6183 05ba B520     		movs	r0, #181
 6184 05bc FFF7FEFF 		bl	VXISI2CWrite
 6185              	.LVL884:
3691:Src/main.c    **** 	VXISI2CWrite(0xB7,0x00);
 6186              		.loc 1 3691 0
 6187 05c0 0021     		movs	r1, #0
ARM GAS  /tmp/ccUr6nXF.s 			page 202


 6188 05c2 B620     		movs	r0, #182
 6189 05c4 FFF7FEFF 		bl	VXISI2CWrite
 6190              	.LVL885:
3692:Src/main.c    **** 	VXISI2CWrite(0xB8,0x80);
 6191              		.loc 1 3692 0
 6192 05c8 0021     		movs	r1, #0
 6193 05ca B720     		movs	r0, #183
 6194 05cc FFF7FEFF 		bl	VXISI2CWrite
 6195              	.LVL886:
3693:Src/main.c    **** 	VXISI2CWrite(0xB9,0x00);
 6196              		.loc 1 3693 0
 6197 05d0 8021     		movs	r1, #128
 6198 05d2 B820     		movs	r0, #184
 6199 05d4 FFF7FEFF 		bl	VXISI2CWrite
 6200              	.LVL887:
3694:Src/main.c    **** 	VXISI2CWrite(0xBA,0x01);
 6201              		.loc 1 3694 0
 6202 05d8 0021     		movs	r1, #0
 6203 05da B920     		movs	r0, #185
 6204 05dc FFF7FEFF 		bl	VXISI2CWrite
 6205              	.LVL888:
3695:Src/main.c    **** 	VXISI2CWrite(0xBB,0x00);
 6206              		.loc 1 3695 0
 6207 05e0 0121     		movs	r1, #1
 6208 05e2 BA20     		movs	r0, #186
 6209 05e4 FFF7FEFF 		bl	VXISI2CWrite
 6210              	.LVL889:
3696:Src/main.c    **** 	VXISI2CWrite(0xBC,0x90);
 6211              		.loc 1 3696 0
 6212 05e8 0021     		movs	r1, #0
 6213 05ea BB20     		movs	r0, #187
 6214 05ec FFF7FEFF 		bl	VXISI2CWrite
 6215              	.LVL890:
3697:Src/main.c    **** 	VXISI2CWrite(0xBD,0x01);
 6216              		.loc 1 3697 0
 6217 05f0 9021     		movs	r1, #144
 6218 05f2 BC20     		movs	r0, #188
 6219 05f4 FFF7FEFF 		bl	VXISI2CWrite
 6220              	.LVL891:
3698:Src/main.c    **** 	VXISI2CWrite(0xBE,0x2C);
 6221              		.loc 1 3698 0
 6222 05f8 0121     		movs	r1, #1
 6223 05fa BD20     		movs	r0, #189
 6224 05fc FFF7FEFF 		bl	VXISI2CWrite
 6225              	.LVL892:
3699:Src/main.c    **** 	VXISI2CWrite(0xBF,0x00);
 6226              		.loc 1 3699 0
 6227 0600 2C21     		movs	r1, #44
 6228 0602 BE20     		movs	r0, #190
 6229 0604 FFF7FEFF 		bl	VXISI2CWrite
 6230              	.LVL893:
3700:Src/main.c    **** 	VXISI2CWrite(0xC0,0x00);
 6231              		.loc 1 3700 0
 6232 0608 0021     		movs	r1, #0
 6233 060a BF20     		movs	r0, #191
 6234 060c FFF7FEFF 		bl	VXISI2CWrite
 6235              	.LVL894:
ARM GAS  /tmp/ccUr6nXF.s 			page 203


3701:Src/main.c    **** 	VXISI2CWrite(0xC1,0x20);
 6236              		.loc 1 3701 0
 6237 0610 0021     		movs	r1, #0
 6238 0612 C020     		movs	r0, #192
 6239 0614 FFF7FEFF 		bl	VXISI2CWrite
 6240              	.LVL895:
3702:Src/main.c    **** 	VXISI2CWrite(0xC2,0x20);
 6241              		.loc 1 3702 0
 6242 0618 2021     		movs	r1, #32
 6243 061a C120     		movs	r0, #193
 6244 061c FFF7FEFF 		bl	VXISI2CWrite
 6245              	.LVL896:
3703:Src/main.c    **** 	VXISI2CWrite(0xC3,0x20);
 6246              		.loc 1 3703 0
 6247 0620 2021     		movs	r1, #32
 6248 0622 C220     		movs	r0, #194
 6249 0624 FFF7FEFF 		bl	VXISI2CWrite
 6250              	.LVL897:
3704:Src/main.c    **** 	VXISI2CWrite(0xC4,0x20);
 6251              		.loc 1 3704 0
 6252 0628 2021     		movs	r1, #32
 6253 062a C320     		movs	r0, #195
 6254 062c FFF7FEFF 		bl	VXISI2CWrite
 6255              	.LVL898:
3705:Src/main.c    **** 	VXISI2CWrite(0xC5,0x20);
 6256              		.loc 1 3705 0
 6257 0630 2021     		movs	r1, #32
 6258 0632 C420     		movs	r0, #196
 6259 0634 FFF7FEFF 		bl	VXISI2CWrite
 6260              	.LVL899:
3706:Src/main.c    **** 	VXISI2CWrite(0xC6,0x00);
 6261              		.loc 1 3706 0
 6262 0638 2021     		movs	r1, #32
 6263 063a C520     		movs	r0, #197
 6264 063c FFF7FEFF 		bl	VXISI2CWrite
 6265              	.LVL900:
3707:Src/main.c    **** 	VXISI2CWrite(0xC7,0x00);
 6266              		.loc 1 3707 0
 6267 0640 0021     		movs	r1, #0
 6268 0642 C620     		movs	r0, #198
 6269 0644 FFF7FEFF 		bl	VXISI2CWrite
 6270              	.LVL901:
3708:Src/main.c    **** 	VXISI2CWrite(0xC8,0x00);
 6271              		.loc 1 3708 0
 6272 0648 0021     		movs	r1, #0
 6273 064a C720     		movs	r0, #199
 6274 064c FFF7FEFF 		bl	VXISI2CWrite
 6275              	.LVL902:
3709:Src/main.c    **** 	VXISI2CWrite(0xC9,0x00);
 6276              		.loc 1 3709 0
 6277 0650 0021     		movs	r1, #0
 6278 0652 C820     		movs	r0, #200
 6279 0654 FFF7FEFF 		bl	VXISI2CWrite
 6280              	.LVL903:
3710:Src/main.c    **** 	VXISI2CWrite(0xCA,0x00);
 6281              		.loc 1 3710 0
 6282 0658 0021     		movs	r1, #0
ARM GAS  /tmp/ccUr6nXF.s 			page 204


 6283 065a C920     		movs	r0, #201
 6284 065c FFF7FEFF 		bl	VXISI2CWrite
 6285              	.LVL904:
3711:Src/main.c    **** 	VXISI2CWrite(0xCB,0x00);
 6286              		.loc 1 3711 0
 6287 0660 0021     		movs	r1, #0
 6288 0662 CA20     		movs	r0, #202
 6289 0664 FFF7FEFF 		bl	VXISI2CWrite
 6290              	.LVL905:
3712:Src/main.c    **** 	VXISI2CWrite(0xCC,0x00);
 6291              		.loc 1 3712 0
 6292 0668 0021     		movs	r1, #0
 6293 066a CB20     		movs	r0, #203
 6294 066c FFF7FEFF 		bl	VXISI2CWrite
 6295              	.LVL906:
3713:Src/main.c    **** 	VXISI2CWrite(0xCD,0x00);
 6296              		.loc 1 3713 0
 6297 0670 0021     		movs	r1, #0
 6298 0672 CC20     		movs	r0, #204
 6299 0674 FFF7FEFF 		bl	VXISI2CWrite
 6300              	.LVL907:
3714:Src/main.c    **** 	VXISI2CWrite(0xCE,0x00);
 6301              		.loc 1 3714 0
 6302 0678 0021     		movs	r1, #0
 6303 067a CD20     		movs	r0, #205
 6304 067c FFF7FEFF 		bl	VXISI2CWrite
 6305              	.LVL908:
3715:Src/main.c    **** 	VXISI2CWrite(0xCF,0x00);
 6306              		.loc 1 3715 0
 6307 0680 0021     		movs	r1, #0
 6308 0682 CE20     		movs	r0, #206
 6309 0684 FFF7FEFF 		bl	VXISI2CWrite
 6310              	.LVL909:
3716:Src/main.c    **** 	VXISI2CWrite(0xD0,0xFF);
 6311              		.loc 1 3716 0
 6312 0688 0021     		movs	r1, #0
 6313 068a CF20     		movs	r0, #207
 6314 068c FFF7FEFF 		bl	VXISI2CWrite
 6315              	.LVL910:
3717:Src/main.c    **** 	VXISI2CWrite(0xD1,0x3F);
 6316              		.loc 1 3717 0
 6317 0690 FF21     		movs	r1, #255
 6318 0692 D020     		movs	r0, #208
 6319 0694 FFF7FEFF 		bl	VXISI2CWrite
 6320              	.LVL911:
3718:Src/main.c    **** 	VXISI2CWrite(0xD2,0xC2);
 6321              		.loc 1 3718 0
 6322 0698 3F21     		movs	r1, #63
 6323 069a D120     		movs	r0, #209
 6324 069c FFF7FEFF 		bl	VXISI2CWrite
 6325              	.LVL912:
3719:Src/main.c    **** 	VXISI2CWrite(0xD3,0x3F);
 6326              		.loc 1 3719 0
 6327 06a0 C221     		movs	r1, #194
 6328 06a2 D220     		movs	r0, #210
 6329 06a4 FFF7FEFF 		bl	VXISI2CWrite
 6330              	.LVL913:
ARM GAS  /tmp/ccUr6nXF.s 			page 205


3720:Src/main.c    **** 	VXISI2CWrite(0xD4,0x00);
 6331              		.loc 1 3720 0
 6332 06a8 3F21     		movs	r1, #63
 6333 06aa D320     		movs	r0, #211
 6334 06ac FFF7FEFF 		bl	VXISI2CWrite
 6335              	.LVL914:
3721:Src/main.c    **** 	VXISI2CWrite(0xD5,0x00);
 6336              		.loc 1 3721 0
 6337 06b0 0021     		movs	r1, #0
 6338 06b2 D420     		movs	r0, #212
 6339 06b4 FFF7FEFF 		bl	VXISI2CWrite
 6340              	.LVL915:
3722:Src/main.c    **** 	VXISI2CWrite(0xD6,0x00);
 6341              		.loc 1 3722 0
 6342 06b8 0021     		movs	r1, #0
 6343 06ba D520     		movs	r0, #213
 6344 06bc FFF7FEFF 		bl	VXISI2CWrite
 6345              	.LVL916:
3723:Src/main.c    **** 	VXISI2CWrite(0xD7,0x0F);
 6346              		.loc 1 3723 0
 6347 06c0 0021     		movs	r1, #0
 6348 06c2 D620     		movs	r0, #214
 6349 06c4 FFF7FEFF 		bl	VXISI2CWrite
 6350              	.LVL917:
3724:Src/main.c    **** 	VXISI2CWrite(0xD8,0x00);
 6351              		.loc 1 3724 0
 6352 06c8 0F21     		movs	r1, #15
 6353 06ca D720     		movs	r0, #215
 6354 06cc FFF7FEFF 		bl	VXISI2CWrite
 6355              	.LVL918:
3725:Src/main.c    **** 	VXISI2CWrite(0xD9,0x00);
 6356              		.loc 1 3725 0
 6357 06d0 0021     		movs	r1, #0
 6358 06d2 D820     		movs	r0, #216
 6359 06d4 FFF7FEFF 		bl	VXISI2CWrite
 6360              	.LVL919:
3726:Src/main.c    **** 	VXISI2CWrite(0xDA,0x00);
 6361              		.loc 1 3726 0
 6362 06d8 0021     		movs	r1, #0
 6363 06da D920     		movs	r0, #217
 6364 06dc FFF7FEFF 		bl	VXISI2CWrite
 6365              	.LVL920:
3727:Src/main.c    **** 	VXISI2CWrite(0xDB,0x00);
 6366              		.loc 1 3727 0
 6367 06e0 0021     		movs	r1, #0
 6368 06e2 DA20     		movs	r0, #218
 6369 06e4 FFF7FEFF 		bl	VXISI2CWrite
 6370              	.LVL921:
3728:Src/main.c    **** 	VXISI2CWrite(0xDC,0x77);
 6371              		.loc 1 3728 0
 6372 06e8 0021     		movs	r1, #0
 6373 06ea DB20     		movs	r0, #219
 6374 06ec FFF7FEFF 		bl	VXISI2CWrite
 6375              	.LVL922:
3729:Src/main.c    **** 	VXISI2CWrite(0xDD,0x01);
 6376              		.loc 1 3729 0
 6377 06f0 7721     		movs	r1, #119
ARM GAS  /tmp/ccUr6nXF.s 			page 206


 6378 06f2 DC20     		movs	r0, #220
 6379 06f4 FFF7FEFF 		bl	VXISI2CWrite
 6380              	.LVL923:
3730:Src/main.c    **** 	VXISI2CWrite(0xDE,0x5F);
 6381              		.loc 1 3730 0
 6382 06f8 0121     		movs	r1, #1
 6383 06fa DD20     		movs	r0, #221
 6384 06fc FFF7FEFF 		bl	VXISI2CWrite
 6385              	.LVL924:
3731:Src/main.c    **** 	VXISI2CWrite(0xDF,0x96);
 6386              		.loc 1 3731 0
 6387 0700 5F21     		movs	r1, #95
 6388 0702 DE20     		movs	r0, #222
 6389 0704 FFF7FEFF 		bl	VXISI2CWrite
 6390              	.LVL925:
3732:Src/main.c    **** 	VXISI2CWrite(0xE0,0x00);
 6391              		.loc 1 3732 0
 6392 0708 9621     		movs	r1, #150
 6393 070a DF20     		movs	r0, #223
 6394 070c FFF7FEFF 		bl	VXISI2CWrite
 6395              	.LVL926:
3733:Src/main.c    **** 	VXISI2CWrite(0xE1,0x00);
 6396              		.loc 1 3733 0
 6397 0710 0021     		movs	r1, #0
 6398 0712 E020     		movs	r0, #224
 6399 0714 FFF7FEFF 		bl	VXISI2CWrite
 6400              	.LVL927:
3734:Src/main.c    **** 	VXISI2CWrite(0xE2,0x00);
 6401              		.loc 1 3734 0
 6402 0718 0021     		movs	r1, #0
 6403 071a E120     		movs	r0, #225
 6404 071c FFF7FEFF 		bl	VXISI2CWrite
 6405              	.LVL928:
3735:Src/main.c    **** 	VXISI2CWrite(0xE3,0x47);
 6406              		.loc 1 3735 0
 6407 0720 0021     		movs	r1, #0
 6408 0722 E220     		movs	r0, #226
 6409 0724 FFF7FEFF 		bl	VXISI2CWrite
 6410              	.LVL929:
3736:Src/main.c    **** 	VXISI2CWrite(0xE4,0x3C);
 6411              		.loc 1 3736 0
 6412 0728 4721     		movs	r1, #71
 6413 072a E320     		movs	r0, #227
 6414 072c FFF7FEFF 		bl	VXISI2CWrite
 6415              	.LVL930:
3737:Src/main.c    **** 	VXISI2CWrite(0xE5,0x80);
 6416              		.loc 1 3737 0
 6417 0730 3C21     		movs	r1, #60
 6418 0732 E420     		movs	r0, #228
 6419 0734 FFF7FEFF 		bl	VXISI2CWrite
 6420              	.LVL931:
3738:Src/main.c    **** 	VXISI2CWrite(0xE6,0x00);
 6421              		.loc 1 3738 0
 6422 0738 8021     		movs	r1, #128
 6423 073a E520     		movs	r0, #229
 6424 073c FFF7FEFF 		bl	VXISI2CWrite
 6425              	.LVL932:
ARM GAS  /tmp/ccUr6nXF.s 			page 207


3739:Src/main.c    **** 	VXISI2CWrite(0xE7,0x00);
 6426              		.loc 1 3739 0
 6427 0740 0021     		movs	r1, #0
 6428 0742 E620     		movs	r0, #230
 6429 0744 FFF7FEFF 		bl	VXISI2CWrite
 6430              	.LVL933:
3740:Src/main.c    **** 	VXISI2CWrite(0xE8,0x00);
 6431              		.loc 1 3740 0
 6432 0748 0021     		movs	r1, #0
 6433 074a E720     		movs	r0, #231
 6434 074c FFF7FEFF 		bl	VXISI2CWrite
 6435              	.LVL934:
3741:Src/main.c    **** 	VXISI2CWrite(0xE9,0x00);
 6436              		.loc 1 3741 0
 6437 0750 0021     		movs	r1, #0
 6438 0752 E820     		movs	r0, #232
 6439 0754 FFF7FEFF 		bl	VXISI2CWrite
 6440              	.LVL935:
3742:Src/main.c    **** 	VXISI2CWrite(0xEA,0x00);
 6441              		.loc 1 3742 0
 6442 0758 0021     		movs	r1, #0
 6443 075a E920     		movs	r0, #233
 6444 075c FFF7FEFF 		bl	VXISI2CWrite
 6445              	.LVL936:
3743:Src/main.c    **** 	VXISI2CWrite(0xEB,0x00);
 6446              		.loc 1 3743 0
 6447 0760 0021     		movs	r1, #0
 6448 0762 EA20     		movs	r0, #234
 6449 0764 FFF7FEFF 		bl	VXISI2CWrite
 6450              	.LVL937:
3744:Src/main.c    **** 	VXISI2CWrite(0xEC,0x88);
 6451              		.loc 1 3744 0
 6452 0768 0021     		movs	r1, #0
 6453 076a EB20     		movs	r0, #235
 6454 076c FFF7FEFF 		bl	VXISI2CWrite
 6455              	.LVL938:
3745:Src/main.c    **** 	VXISI2CWrite(0xED,0x00);
 6456              		.loc 1 3745 0
 6457 0770 8821     		movs	r1, #136
 6458 0772 EC20     		movs	r0, #236
 6459 0774 FFF7FEFF 		bl	VXISI2CWrite
 6460              	.LVL939:
3746:Src/main.c    **** 	VXISI2CWrite(0xEE,0x00);
 6461              		.loc 1 3746 0
 6462 0778 0021     		movs	r1, #0
 6463 077a ED20     		movs	r0, #237
 6464 077c FFF7FEFF 		bl	VXISI2CWrite
 6465              	.LVL940:
3747:Src/main.c    **** 	VXISI2CWrite(0xEF,0x00);
 6466              		.loc 1 3747 0
 6467 0780 0021     		movs	r1, #0
 6468 0782 EE20     		movs	r0, #238
 6469 0784 FFF7FEFF 		bl	VXISI2CWrite
 6470              	.LVL941:
3748:Src/main.c    **** 	VXISI2CWrite(0xF0,0x30);
 6471              		.loc 1 3748 0
 6472 0788 0021     		movs	r1, #0
ARM GAS  /tmp/ccUr6nXF.s 			page 208


 6473 078a EF20     		movs	r0, #239
 6474 078c FFF7FEFF 		bl	VXISI2CWrite
 6475              	.LVL942:
3749:Src/main.c    **** 	VXISI2CWrite(0xF1,0x43);
 6476              		.loc 1 3749 0
 6477 0790 3021     		movs	r1, #48
 6478 0792 F020     		movs	r0, #240
 6479 0794 FFF7FEFF 		bl	VXISI2CWrite
 6480              	.LVL943:
3750:Src/main.c    **** 	VXISI2CWrite(0xF2,0x1F);
 6481              		.loc 1 3750 0
 6482 0798 4321     		movs	r1, #67
 6483 079a F120     		movs	r0, #241
 6484 079c FFF7FEFF 		bl	VXISI2CWrite
 6485              	.LVL944:
3751:Src/main.c    **** 	VXISI2CWrite(0xF3,0x1F);
 6486              		.loc 1 3751 0
 6487 07a0 1F21     		movs	r1, #31
 6488 07a2 F220     		movs	r0, #242
 6489 07a4 FFF7FEFF 		bl	VXISI2CWrite
 6490              	.LVL945:
3752:Src/main.c    **** 	VXISI2CWrite(0xF4,0x22);
 6491              		.loc 1 3752 0
 6492 07a8 1F21     		movs	r1, #31
 6493 07aa F320     		movs	r0, #243
 6494 07ac FFF7FEFF 		bl	VXISI2CWrite
 6495              	.LVL946:
3753:Src/main.c    **** 	VXISI2CWrite(0xF5,0x73);
 6496              		.loc 1 3753 0
 6497 07b0 2221     		movs	r1, #34
 6498 07b2 F420     		movs	r0, #244
 6499 07b4 FFF7FEFF 		bl	VXISI2CWrite
 6500              	.LVL947:
3754:Src/main.c    **** 	VXISI2CWrite(0xF6,0x53);
 6501              		.loc 1 3754 0
 6502 07b8 7321     		movs	r1, #115
 6503 07ba F520     		movs	r0, #245
 6504 07bc FFF7FEFF 		bl	VXISI2CWrite
 6505              	.LVL948:
3755:Src/main.c    **** 	VXISI2CWrite(0xF7,0x80);
 6506              		.loc 1 3755 0
 6507 07c0 5321     		movs	r1, #83
 6508 07c2 F620     		movs	r0, #246
 6509 07c4 FFF7FEFF 		bl	VXISI2CWrite
 6510              	.LVL949:
3756:Src/main.c    **** 	VXISI2CWrite(0xF8,0x01);
 6511              		.loc 1 3756 0
 6512 07c8 8021     		movs	r1, #128
 6513 07ca F720     		movs	r0, #247
 6514 07cc FFF7FEFF 		bl	VXISI2CWrite
 6515              	.LVL950:
3757:Src/main.c    **** 	VXISI2CWrite(0xF9,0x01);
 6516              		.loc 1 3757 0
 6517 07d0 0121     		movs	r1, #1
 6518 07d2 F820     		movs	r0, #248
 6519 07d4 FFF7FEFF 		bl	VXISI2CWrite
 6520              	.LVL951:
ARM GAS  /tmp/ccUr6nXF.s 			page 209


3758:Src/main.c    **** 	VXISI2CWrite(0xFA,0x00);
 6521              		.loc 1 3758 0
 6522 07d8 0121     		movs	r1, #1
 6523 07da F920     		movs	r0, #249
 6524 07dc FFF7FEFF 		bl	VXISI2CWrite
 6525              	.LVL952:
3759:Src/main.c    **** 	VXISI2CWrite(0xFB,0x00);
 6526              		.loc 1 3759 0
 6527 07e0 0021     		movs	r1, #0
 6528 07e2 FA20     		movs	r0, #250
 6529 07e4 FFF7FEFF 		bl	VXISI2CWrite
 6530              	.LVL953:
3760:Src/main.c    **** 	VXISI2CWrite(0xFC,0x00);
 6531              		.loc 1 3760 0
 6532 07e8 0021     		movs	r1, #0
 6533 07ea FB20     		movs	r0, #251
 6534 07ec FFF7FEFF 		bl	VXISI2CWrite
 6535              	.LVL954:
3761:Src/main.c    **** 	VXISI2CWrite(0xFD,0x70);
 6536              		.loc 1 3761 0
 6537 07f0 0021     		movs	r1, #0
 6538 07f2 FC20     		movs	r0, #252
 6539 07f4 FFF7FEFF 		bl	VXISI2CWrite
 6540              	.LVL955:
3762:Src/main.c    **** 	VXISI2CWrite(0xFE,0x40);
 6541              		.loc 1 3762 0
 6542 07f8 7021     		movs	r1, #112
 6543 07fa FD20     		movs	r0, #253
 6544 07fc FFF7FEFF 		bl	VXISI2CWrite
 6545              	.LVL956:
3763:Src/main.c    **** 	VXISI2CWrite(0xFF,0x07);
 6546              		.loc 1 3763 0
 6547 0800 4021     		movs	r1, #64
 6548 0802 FE20     		movs	r0, #254
 6549 0804 FFF7FEFF 		bl	VXISI2CWrite
 6550              	.LVL957:
3764:Src/main.c    **** 
 6551              		.loc 1 3764 0
 6552 0808 0721     		movs	r1, #7
 6553 080a FF20     		movs	r0, #255
 6554 080c FFF7FEFF 		bl	VXISI2CWrite
 6555              	.LVL958:
3766:Src/main.c    **** /**
 6556              		.loc 1 3766 0
 6557 0810 08BD     		pop	{r3, pc}
 6558              		.cfi_endproc
 6559              	.LFE93:
 6561 0812 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 6562              		.align	1
 6563              		.global	SystemClock_Config
 6564              		.syntax unified
 6565              		.thumb
 6566              		.thumb_func
 6567              		.fpu softvfp
 6569              	SystemClock_Config:
 6570              	.LFB94:
3808:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
ARM GAS  /tmp/ccUr6nXF.s 			page 210


 6571              		.loc 1 3808 0
 6572              		.cfi_startproc
 6573              		@ args = 0, pretend = 0, frame = 64
 6574              		@ frame_needed = 0, uses_anonymous_args = 0
 6575 0000 70B5     		push	{r4, r5, r6, lr}
 6576              	.LCFI39:
 6577              		.cfi_def_cfa_offset 16
 6578              		.cfi_offset 4, -16
 6579              		.cfi_offset 5, -12
 6580              		.cfi_offset 6, -8
 6581              		.cfi_offset 14, -4
 6582 0002 90B0     		sub	sp, sp, #64
 6583              	.LCFI40:
 6584              		.cfi_def_cfa_offset 80
3809:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 6585              		.loc 1 3809 0
 6586 0004 2022     		movs	r2, #32
 6587 0006 0021     		movs	r1, #0
 6588 0008 07A8     		add	r0, sp, #28
 6589 000a FFF7FEFF 		bl	memset
 6590              	.LVL959:
3810:Src/main.c    **** 
 6591              		.loc 1 3810 0
 6592 000e 0024     		movs	r4, #0
 6593 0010 0194     		str	r4, [sp, #4]
 6594 0012 0294     		str	r4, [sp, #8]
 6595 0014 0394     		str	r4, [sp, #12]
 6596 0016 0494     		str	r4, [sp, #16]
 6597 0018 0594     		str	r4, [sp, #20]
3814:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 6598              		.loc 1 3814 0
 6599 001a 0225     		movs	r5, #2
 6600 001c 0695     		str	r5, [sp, #24]
3815:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 6601              		.loc 1 3815 0
 6602 001e 0126     		movs	r6, #1
 6603 0020 0A96     		str	r6, [sp, #40]
3816:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 6604              		.loc 1 3816 0
 6605 0022 1023     		movs	r3, #16
 6606 0024 0B93     		str	r3, [sp, #44]
3817:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 6607              		.loc 1 3817 0
 6608 0026 0D95     		str	r5, [sp, #52]
3819:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 6609              		.loc 1 3819 0
 6610 0028 4FF4E013 		mov	r3, #1835008
 6611 002c 0F93     		str	r3, [sp, #60]
3820:Src/main.c    ****   {
 6612              		.loc 1 3820 0
 6613 002e 06A8     		add	r0, sp, #24
 6614 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 6615              	.LVL960:
3826:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 6616              		.loc 1 3826 0
 6617 0034 0F23     		movs	r3, #15
 6618 0036 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccUr6nXF.s 			page 211


3828:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 6619              		.loc 1 3828 0
 6620 0038 0295     		str	r5, [sp, #8]
3829:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 6621              		.loc 1 3829 0
 6622 003a 0394     		str	r4, [sp, #12]
3830:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 6623              		.loc 1 3830 0
 6624 003c 0494     		str	r4, [sp, #16]
3831:Src/main.c    **** 
 6625              		.loc 1 3831 0
 6626 003e 0594     		str	r4, [sp, #20]
3833:Src/main.c    ****   {
 6627              		.loc 1 3833 0
 6628 0040 3146     		mov	r1, r6
 6629 0042 01A8     		add	r0, sp, #4
 6630 0044 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 6631              	.LVL961:
3837:Src/main.c    **** #endif
 6632              		.loc 1 3837 0
 6633 0048 10B0     		add	sp, sp, #64
 6634              	.LCFI41:
 6635              		.cfi_def_cfa_offset 16
 6636              		@ sp needed
 6637 004a 70BD     		pop	{r4, r5, r6, pc}
 6638              		.cfi_endproc
 6639              	.LFE94:
 6641              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 6642              		.align	1
 6643              		.global	HAL_TIM_PeriodElapsedCallback
 6644              		.syntax unified
 6645              		.thumb
 6646              		.thumb_func
 6647              		.fpu softvfp
 6649              	HAL_TIM_PeriodElapsedCallback:
 6650              	.LFB99:
4196:Src/main.c    **** 
4197:Src/main.c    **** /* USER CODE BEGIN 4 */
4198:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
4199:Src/main.c    **** {
 6651              		.loc 1 4199 0
 6652              		.cfi_startproc
 6653              		@ args = 0, pretend = 0, frame = 0
 6654              		@ frame_needed = 0, uses_anonymous_args = 0
 6655              		@ link register save eliminated.
 6656              	.LVL962:
4200:Src/main.c    **** //	BYTE TempKey=0;
4201:Src/main.c    **** 
4202:Src/main.c    ****     //10us
4203:Src/main.c    ****     if (htim->Instance == TIM3)
 6657              		.loc 1 4203 0
 6658 0000 0268     		ldr	r2, [r0]
 6659 0002 184B     		ldr	r3, .L207
 6660 0004 9A42     		cmp	r2, r3
 6661 0006 00D0     		beq	.L206
 6662              	.L203:
4204:Src/main.c    ****     {
ARM GAS  /tmp/ccUr6nXF.s 			page 212


4205:Src/main.c    **** 	
4206:Src/main.c    **** 	// Timer Counter 
4207:Src/main.c    **** 	tic02++;
4208:Src/main.c    **** 	tic03++;
4209:Src/main.c    **** 	tic04++;
4210:Src/main.c    **** //	tic05++;
4211:Src/main.c    **** 	
4212:Src/main.c    **** 	if(tic02>=100)   
4213:Src/main.c    **** 	{
4214:Src/main.c    **** 	g_usTimerCounter += 1;     ///per 10us  interrupt
4215:Src/main.c    **** 	tic02=0;
4216:Src/main.c    **** 	g_bNotifyTimer0Int=_TRUE;
4217:Src/main.c    **** 	}	
4218:Src/main.c    **** /*
4219:Src/main.c    **** 	if(tic05>=100)////1ms
4220:Src/main.c    **** 	{
4221:Src/main.c    **** 	ucTickCount++;	//for IT66021
4222:Src/main.c    **** 	tic05=0;
4223:Src/main.c    **** 	}
4224:Src/main.c    **** 	*/
4225:Src/main.c    ****         tim3count++ ;
4226:Src/main.c    ****         if (tim3count > 100000 )
4227:Src/main.c    ****         {
4228:Src/main.c    ****             tim3count = 0 ;
4229:Src/main.c    ****             //Test_tim3_printf_Flg  = 1;
4230:Src/main.c    ****             if (OSDStateFlg ==1 )
4231:Src/main.c    ****             {
4232:Src/main.c    ****                 //static tByte enOSD10secOff = 1;   //En16wNumberOSD=1
4233:Src/main.c    ****                 OSDSecCount++ ;
4234:Src/main.c    ****             }
4235:Src/main.c    ****         }
4236:Src/main.c    **** #if 0
4237:Src/main.c    **** 
4238:Src/main.c    **** 		//Kane @HS 2007 0814 Ver1.31>>>>
4239:Src/main.c    **** 	//	if(Time5ms)
4240:Src/main.c    **** 	//	Time5ms--;
4241:Src/main.c    **** 		//if(Time5ms==0)
4242:Src/main.c    **** 		{
4243:Src/main.c    **** 			//if(HAL_GPIO_ReadPin(UP_KEY_GPIO_Port,UP_KEY_Pin)==_FALSE)
4244:Src/main.c    **** 			//	TempKey|=0x01;
4245:Src/main.c    **** 			//if(HAL_GPIO_ReadPin(DOWN_KEY_GPIO_Port,DOWN_KEY_Pin)==_FALSE)
4246:Src/main.c    **** 			//	TempKey|=0x02;
4247:Src/main.c    **** 			//TempKey=(( (P2&0x60) >> 5) & 0x03);
4248:Src/main.c    **** //			TempKey=((~GPIOB->IDR)&(UP_KEY_Pin|DOWN_KEY_Pin))>>14;
4249:Src/main.c    **** 			TempKey=(((~GPIOB->IDR)&(UP_KEY_Pin|DOWN_KEY_Pin))>>14)&0x03;
4250:Src/main.c    **** 
4251:Src/main.c    **** 			if(updn_reg[3] != TempKey )  // (( (P2&0x60) >> 5) & 0x03))    //Abel for HS SW key ......951102
4252:Src/main.c    **** 			{																						   
4253:Src/main.c    **** 				updn_reg[0] = updn_reg[1];																
4254:Src/main.c    **** 				updn_reg[1] = updn_reg[2];																
4255:Src/main.c    **** 				updn_reg[2] = updn_reg[3];																
4256:Src/main.c    **** 				updn_reg[3] = TempKey;// ( (P2&0x60) >> 5) & 0x03; 
4257:Src/main.c    **** 				ChangeKey = 1;		
4258:Src/main.c    **** 				//else			//william-v1.42-961130
4259:Src/main.c    **** 				//ChangeKey=0;	//william-v1.42-961130
4260:Src/main.c    **** 			//Time5ms = (48-8);
4261:Src/main.c    **** 			//Time5ms = (48+100);
ARM GAS  /tmp/ccUr6nXF.s 			page 213


4262:Src/main.c    **** 			
4263:Src/main.c    **** 				
4264:Src/main.c    **** 			}
4265:Src/main.c    **** 		}
4266:Src/main.c    **** 		#endif
4267:Src/main.c    **** #if 0
4268:Src/main.c    ****         if (IR_IRQFlg == 1)
4269:Src/main.c    ****         {
4270:Src/main.c    ****             if (PreIR_IRQ_Index == IR_IRQ_Index )
4271:Src/main.c    ****             {
4272:Src/main.c    ****                 IR_PlusTimeVal++ ;
4273:Src/main.c    **** 
4274:Src/main.c    ****                 //9.2xms + 4.5xms = 13.8ms
4275:Src/main.c    ****                 if (IR_PlusTimeVal > 15000)  //10us
4276:Src/main.c    ****                 {
4277:Src/main.c    **** //                    IR_PlusTimeVal = 0  ;
4278:Src/main.c    **** //                    PreIR_IRQ_Index = 0 ;
4279:Src/main.c    **** //                    IR_IRQ_Index = 0 ;
4280:Src/main.c    **** //                    IR_IRQFlg = 0 ;
4281:Src/main.c    **** 
4282:Src/main.c    ****                     if (IR_ShiftCount >= 32 )
4283:Src/main.c    ****                     {
4284:Src/main.c    ****                         u16Vendor = (tWord)(IR_4BYTE & 0x0000FFFF) ;
4285:Src/main.c    ****                         if (u16Vendor == IR_Vendor_Code_ )
4286:Src/main.c    ****                         {
4287:Src/main.c    ****                             u8IRcode = (tByte)((IR_4BYTE & 0x00FF0000 ) >> 16)  ;
4288:Src/main.c    ****                             u8IRCheckcode  = 0xFF - (tByte)((IR_4BYTE & 0xFF000000 ) >> 24)  ;
4289:Src/main.c    ****                             IR_END_Flg = 1 ;
4290:Src/main.c    ****                         }
4291:Src/main.c    ****                     }
4292:Src/main.c    **** 
4293:Src/main.c    ****                     IR_ShiftCount = 0 ;
4294:Src/main.c    ****                     IR_PlusTimeVal = 0  ;
4295:Src/main.c    ****                     PreIR_IRQ_Index = 0 ;
4296:Src/main.c    ****                     IR_IRQ_Index = 0 ;
4297:Src/main.c    ****                     IR_IRQFlg = 0 ;
4298:Src/main.c    ****                     //memset(aIR_PlusTime , 0 , 40 )  ;
4299:Src/main.c    ****                     IR_4BYTE = 0 ;
4300:Src/main.c    ****                     IR_StartFlg = 0 ;
4301:Src/main.c    ****                 }
4302:Src/main.c    ****             }
4303:Src/main.c    ****             else
4304:Src/main.c    ****             {
4305:Src/main.c    ****                 if (PreIR_IRQ_Index <= 33)
4306:Src/main.c    ****                 {
4307:Src/main.c    ****                     //aIR_PlusTime[PreIR_IRQ_Index] = IR_PlusTimeVal ;
4308:Src/main.c    ****                     if (IR_StartFlg == 1 )
4309:Src/main.c    ****                     {
4310:Src/main.c    ****                         if (IR_PlusTimeVal >90 )
4311:Src/main.c    ****                         {
4312:Src/main.c    ****                             //IR_4BYTE = IR_4BYTE << 1 ;
4313:Src/main.c    ****                             IR_4BYTE = IR_4BYTE >> 1 ;
4314:Src/main.c    **** 
4315:Src/main.c    ****                             if (IR_PlusTimeVal > 160 )
4316:Src/main.c    ****                             {
4317:Src/main.c    ****                                 //IR_4BYTE = IR_4BYTE | 0x01 ;
4318:Src/main.c    ****                                 IR_4BYTE = IR_4BYTE | 0x80000000 ;
ARM GAS  /tmp/ccUr6nXF.s 			page 214


4319:Src/main.c    ****                             }
4320:Src/main.c    ****                             else
4321:Src/main.c    ****                             {
4322:Src/main.c    ****                                 //IR_4BYTE = IR_4BYTE | 0x01 ;
4323:Src/main.c    ****                             }
4324:Src/main.c    ****                             IR_ShiftCount++ ;
4325:Src/main.c    ****                         }
4326:Src/main.c    ****                     }
4327:Src/main.c    **** 
4328:Src/main.c    ****                     if((IR_PlusTimeVal >1250 )&&(IR_PlusTimeVal < 1450))
4329:Src/main.c    ****                     {
4330:Src/main.c    ****                         IR_StartFlg =1 ;
4331:Src/main.c    ****                     }
4332:Src/main.c    ****                 }
4333:Src/main.c    ****                 IR_PlusTimeVal = 0 ;
4334:Src/main.c    ****                 PreIR_IRQ_Index = IR_IRQ_Index ;
4335:Src/main.c    ****             }
4336:Src/main.c    ****         }
4337:Src/main.c    **** #endif
4338:Src/main.c    **** 		///////////////////////////////////////////
4339:Src/main.c    **** 	/*
4340:Src/main.c    **** 		TempKey=0;
4341:Src/main.c    **** 		if(HAL_GPIO_ReadPin(MENU_KEY_GPIO_Port,MENU_KEY_Pin)==_FALSE)
4342:Src/main.c    **** 			TempKey|=0x08;
4343:Src/main.c    **** 		if(HAL_GPIO_ReadPin(POWER_KEY_GPIO_Port,POWER_KEY_Pin)==_FALSE)
4344:Src/main.c    **** 			TempKey|=0x04;
4345:Src/main.c    **** 		if(HAL_GPIO_ReadPin(POWER_KEY_GPIO_Port,POWER_KEY_Pin)==_FALSE)
4346:Src/main.c    **** 			TempKey|=0x04;
4347:Src/main.c    **** 		if(HAL_GPIO_ReadPin(JUMP_KEY_GPIO_Port,JUMP_KEY_Pin)==_FALSE)
4348:Src/main.c    **** 			TempKey|=0x10;
4349:Src/main.c    **** 		if(HAL_GPIO_ReadPin(SOURCE_KEY_GPIO_Port,SOURCE_KEY_Pin)==_FALSE)
4350:Src/main.c    **** 			Te			mpKey|=0x80;
4351:Src/main.c    **** */
4352:Src/main.c    **** #if 0
4353:Src/main.c    **** 	if(tic03==1000)
4354:Src/main.c    **** 		{
4355:Src/main.c    **** 		tic03=0;
4356:Src/main.c    **** 		if(_ReadKey() ) {
4357:Src/main.c    **** 			
4358:Src/main.c    **** 			if( keytic==3 ) {
4359:Src/main.c    **** 				Key = _ReadKey();
4360:Src/main.c    **** 				RepeatKey = 0;
4361:Src/main.c    **** 				KeyReady = 1;
4362:Src/main.c    **** 			}
4363:Src/main.c    **** 			else if( keytic==100 ) {
4364:Src/main.c    **** 				Key = _ReadKey();
4365:Src/main.c    **** 				KeyReady = 1;
4366:Src/main.c    **** 				keytic = 80-70;
4367:Src/main.c    **** 
4368:Src/main.c    **** 			}
4369:Src/main.c    **** 			keytic++;
4370:Src/main.c    **** 		
4371:Src/main.c    **** 		}
4372:Src/main.c    **** 		else 
4373:Src/main.c    **** 		{
4374:Src/main.c    **** 			keytic = 0;
4375:Src/main.c    **** 			Key=0;
ARM GAS  /tmp/ccUr6nXF.s 			page 215


4376:Src/main.c    **** 		}
4377:Src/main.c    **** 		}	
4378:Src/main.c    **** 
4379:Src/main.c    **** 	if(tic04==1000)
4380:Src/main.c    **** 		{
4381:Src/main.c    **** 		tic04=0;
4382:Src/main.c    **** 				if(TP_PRES_DOWN ) {
4383:Src/main.c    **** 					
4384:Src/main.c    **** 					if( tptic==3) {
4385:Src/main.c    **** 						TouchP=TP_PRES_DOWN;
4386:Src/main.c    **** 					}
4387:Src/main.c    **** 					else if(tptic==150)
4388:Src/main.c    **** 						{
4389:Src/main.c    **** 						TouchP=TP_PRES_DOWN;						
4390:Src/main.c    **** 						
4391:Src/main.c    **** 						tptic=4;						
4392:Src/main.c    **** 						}
4393:Src/main.c    **** 				tptic++;
4394:Src/main.c    **** 				}
4395:Src/main.c    **** 				else 
4396:Src/main.c    **** 				{
4397:Src/main.c    **** 					tptic = 0;
4398:Src/main.c    **** 					TouchP=0;
4399:Src/main.c    **** 				}
4400:Src/main.c    **** 
4401:Src/main.c    **** 		}
4402:Src/main.c    **** 	#endif
4403:Src/main.c    ****     }
4404:Src/main.c    **** }
 6663              		.loc 1 4404 0
 6664 0008 7047     		bx	lr
 6665              	.L206:
4207:Src/main.c    **** 	tic03++;
 6666              		.loc 1 4207 0
 6667 000a 174A     		ldr	r2, .L207+4
 6668 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 6669 000e 0133     		adds	r3, r3, #1
 6670 0010 DBB2     		uxtb	r3, r3
 6671 0012 1370     		strb	r3, [r2]
4208:Src/main.c    **** 	tic04++;
 6672              		.loc 1 4208 0
 6673 0014 1549     		ldr	r1, .L207+8
 6674 0016 0A68     		ldr	r2, [r1]
 6675 0018 0132     		adds	r2, r2, #1
 6676 001a 0A60     		str	r2, [r1]
4209:Src/main.c    **** //	tic05++;
 6677              		.loc 1 4209 0
 6678 001c 1449     		ldr	r1, .L207+12
 6679 001e 0A68     		ldr	r2, [r1]
 6680 0020 0132     		adds	r2, r2, #1
 6681 0022 0A60     		str	r2, [r1]
4212:Src/main.c    **** 	{
 6682              		.loc 1 4212 0
 6683 0024 632B     		cmp	r3, #99
 6684 0026 09D9     		bls	.L205
4214:Src/main.c    **** 	tic02=0;
 6685              		.loc 1 4214 0
ARM GAS  /tmp/ccUr6nXF.s 			page 216


 6686 0028 124A     		ldr	r2, .L207+16
 6687 002a 1368     		ldr	r3, [r2]
 6688 002c 0133     		adds	r3, r3, #1
 6689 002e 1360     		str	r3, [r2]
4215:Src/main.c    **** 	g_bNotifyTimer0Int=_TRUE;
 6690              		.loc 1 4215 0
 6691 0030 0D4B     		ldr	r3, .L207+4
 6692 0032 0022     		movs	r2, #0
 6693 0034 1A70     		strb	r2, [r3]
4216:Src/main.c    **** 	}	
 6694              		.loc 1 4216 0
 6695 0036 104B     		ldr	r3, .L207+20
 6696 0038 0122     		movs	r2, #1
 6697 003a 1A60     		str	r2, [r3]
 6698              	.L205:
4225:Src/main.c    ****         if (tim3count > 100000 )
 6699              		.loc 1 4225 0
 6700 003c 0F4B     		ldr	r3, .L207+24
 6701 003e 1A68     		ldr	r2, [r3]
 6702 0040 0132     		adds	r2, r2, #1
 6703 0042 1A60     		str	r2, [r3]
4226:Src/main.c    ****         {
 6704              		.loc 1 4226 0
 6705 0044 1A68     		ldr	r2, [r3]
 6706 0046 0E4B     		ldr	r3, .L207+28
 6707 0048 9A42     		cmp	r2, r3
 6708 004a DDD9     		bls	.L203
4228:Src/main.c    ****             //Test_tim3_printf_Flg  = 1;
 6709              		.loc 1 4228 0
 6710 004c 0B4B     		ldr	r3, .L207+24
 6711 004e 0022     		movs	r2, #0
 6712 0050 1A60     		str	r2, [r3]
4230:Src/main.c    ****             {
 6713              		.loc 1 4230 0
 6714 0052 0C4B     		ldr	r3, .L207+32
 6715 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6716 0056 012B     		cmp	r3, #1
 6717 0058 D6D1     		bne	.L203
4233:Src/main.c    ****             }
 6718              		.loc 1 4233 0
 6719 005a 0B4A     		ldr	r2, .L207+36
 6720 005c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 6721 005e 0133     		adds	r3, r3, #1
 6722 0060 1370     		strb	r3, [r2]
 6723              		.loc 1 4404 0
 6724 0062 D1E7     		b	.L203
 6725              	.L208:
 6726              		.align	2
 6727              	.L207:
 6728 0064 00040040 		.word	1073742848
 6729 0068 00000000 		.word	tic02
 6730 006c 00000000 		.word	tic03
 6731 0070 00000000 		.word	tic04
 6732 0074 00000000 		.word	g_usTimerCounter
 6733 0078 00000000 		.word	g_bNotifyTimer0Int
 6734 007c 00000000 		.word	.LANCHOR21
 6735 0080 A0860100 		.word	100000
ARM GAS  /tmp/ccUr6nXF.s 			page 217


 6736 0084 00000000 		.word	.LANCHOR7
 6737 0088 00000000 		.word	.LANCHOR8
 6738              		.cfi_endproc
 6739              	.LFE99:
 6741              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 6742              		.align	1
 6743              		.global	HAL_UART_RxCpltCallback
 6744              		.syntax unified
 6745              		.thumb
 6746              		.thumb_func
 6747              		.fpu softvfp
 6749              	HAL_UART_RxCpltCallback:
 6750              	.LFB100:
4405:Src/main.c    **** 
4406:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
4407:Src/main.c    **** {
 6751              		.loc 1 4407 0
 6752              		.cfi_startproc
 6753              		@ args = 0, pretend = 0, frame = 0
 6754              		@ frame_needed = 0, uses_anonymous_args = 0
 6755              	.LVL963:
 6756 0000 10B5     		push	{r4, lr}
 6757              	.LCFI42:
 6758              		.cfi_def_cfa_offset 8
 6759              		.cfi_offset 4, -8
 6760              		.cfi_offset 14, -4
 6761 0002 0446     		mov	r4, r0
4408:Src/main.c    ****     if (huart->Instance == USART1)	//current UART
 6762              		.loc 1 4408 0
 6763 0004 0268     		ldr	r2, [r0]
 6764 0006 184B     		ldr	r3, .L217
 6765 0008 9A42     		cmp	r2, r3
 6766 000a 04D0     		beq	.L215
 6767              	.LVL964:
 6768              	.L210:
4409:Src/main.c    ****     {
4410:Src/main.c    **** 
4411:Src/main.c    **** /*
4412:Src/main.c    **** 		if (Rx_indx==0)
4413:Src/main.c    ****         {
4414:Src/main.c    ****             memset(Rx_Buffer , 0  , RXBUFMAX ) ;
4415:Src/main.c    ****         }
4416:Src/main.c    **** 
4417:Src/main.c    ****         if (Rx_data[0] >= 0x30)
4418:Src/main.c    ****         {
4419:Src/main.c    ****             Rx_Buffer[Rx_indx]=Rx_data[0];	//add data to Rx_Buffer
4420:Src/main.c    ****             Rx_indx++ ;
4421:Src/main.c    ****             if (Rx_indx >= RXBUFMAX )
4422:Src/main.c    ****                 Rx_indx = 0 ;
4423:Src/main.c    ****         }
4424:Src/main.c    ****         else if ((Rx_data[0] == 0x0d) || (Rx_data[0] == 0xa))//if received data = 13
4425:Src/main.c    ****         {
4426:Src/main.c    ****             RxBufIndex = Rx_indx ;
4427:Src/main.c    ****             memcpy(gRxbuf ,Rx_Buffer, Rx_indx ) ;
4428:Src/main.c    ****             Rx_indx=0;
4429:Src/main.c    ****             Transfer_cplt=1;//transfer complete, data is ready to read
4430:Src/main.c    ****         }
ARM GAS  /tmp/ccUr6nXF.s 			page 218


4431:Src/main.c    **** */
4432:Src/main.c    **** #if 1
4433:Src/main.c    ****        RS_buf [RS_in++] = Rx_data[0];//USART_ReceiveData(USART1);	
4434:Src/main.c    ****     if( RS_in >= BUF_MAX)  RS_in = 0;
4435:Src/main.c    **** 		
4436:Src/main.c    **** 		//RS_tx(Rx_data[0]);
4437:Src/main.c    **** 
4438:Src/main.c    **** 
4439:Src/main.c    **** //HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data, 1);	//activate UART receive interrupt every time
4440:Src/main.c    **** 	HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data, 1);	 //activate UART receive interrupt every time
4441:Src/main.c    **** 	#endif
4442:Src/main.c    ****     }
4443:Src/main.c    **** #if 1
4444:Src/main.c    **** if (huart->Instance == USART2)	//current UART2
 6769              		.loc 1 4444 0
 6770 000c 2268     		ldr	r2, [r4]
 6771 000e 174B     		ldr	r3, .L217+4
 6772 0010 9A42     		cmp	r2, r3
 6773 0012 14D0     		beq	.L216
 6774              	.L209:
4445:Src/main.c    ****     {
4446:Src/main.c    **** 
4447:Src/main.c    ****        RS2_buf [RS2_in++] = Rx2_data[0];//USART_ReceiveData(USART1);	
4448:Src/main.c    ****     if( RS2_in >= TOA_BUF_MAX)  RS2_in = 0;
4449:Src/main.c    **** 	HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	 //activate UART receive interrupt every time
4450:Src/main.c    ****     }	
4451:Src/main.c    **** #endif
4452:Src/main.c    **** }
 6775              		.loc 1 4452 0
 6776 0014 10BD     		pop	{r4, pc}
 6777              	.LVL965:
 6778              	.L215:
4433:Src/main.c    ****     if( RS_in >= BUF_MAX)  RS_in = 0;
 6779              		.loc 1 4433 0
 6780 0016 1649     		ldr	r1, .L217+8
 6781 0018 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 6782 001a 531C     		adds	r3, r2, #1
 6783 001c DBB2     		uxtb	r3, r3
 6784 001e 0B70     		strb	r3, [r1]
 6785 0020 1449     		ldr	r1, .L217+12
 6786 0022 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 6787              	.LVL966:
 6788 0024 1449     		ldr	r1, .L217+16
 6789 0026 8854     		strb	r0, [r1, r2]
4434:Src/main.c    **** 		
 6790              		.loc 1 4434 0
 6791 0028 1D2B     		cmp	r3, #29
 6792 002a 02D9     		bls	.L211
4434:Src/main.c    **** 		
 6793              		.loc 1 4434 0 is_stmt 0 discriminator 1
 6794 002c 104B     		ldr	r3, .L217+8
 6795 002e 0022     		movs	r2, #0
 6796 0030 1A70     		strb	r2, [r3]
 6797              	.L211:
4440:Src/main.c    **** 	#endif
 6798              		.loc 1 4440 0 is_stmt 1
 6799 0032 0122     		movs	r2, #1
ARM GAS  /tmp/ccUr6nXF.s 			page 219


 6800 0034 0F49     		ldr	r1, .L217+12
 6801 0036 1148     		ldr	r0, .L217+20
 6802 0038 FFF7FEFF 		bl	HAL_UART_Receive_IT
 6803              	.LVL967:
 6804 003c E6E7     		b	.L210
 6805              	.L216:
4447:Src/main.c    ****     if( RS2_in >= TOA_BUF_MAX)  RS2_in = 0;
 6806              		.loc 1 4447 0
 6807 003e 1049     		ldr	r1, .L217+24
 6808 0040 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 6809 0042 531C     		adds	r3, r2, #1
 6810 0044 DBB2     		uxtb	r3, r3
 6811 0046 0B70     		strb	r3, [r1]
 6812 0048 0E49     		ldr	r1, .L217+28
 6813 004a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 6814 004c 0E49     		ldr	r1, .L217+32
 6815 004e 8854     		strb	r0, [r1, r2]
4448:Src/main.c    **** 	HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	 //activate UART receive interrupt every time
 6816              		.loc 1 4448 0
 6817 0050 C72B     		cmp	r3, #199
 6818 0052 02D9     		bls	.L213
4448:Src/main.c    **** 	HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	 //activate UART receive interrupt every time
 6819              		.loc 1 4448 0 is_stmt 0 discriminator 1
 6820 0054 0A4B     		ldr	r3, .L217+24
 6821 0056 0022     		movs	r2, #0
 6822 0058 1A70     		strb	r2, [r3]
 6823              	.L213:
4449:Src/main.c    ****     }	
 6824              		.loc 1 4449 0 is_stmt 1
 6825 005a 0122     		movs	r2, #1
 6826 005c 0949     		ldr	r1, .L217+28
 6827 005e 0B48     		ldr	r0, .L217+36
 6828 0060 FFF7FEFF 		bl	HAL_UART_Receive_IT
 6829              	.LVL968:
 6830              		.loc 1 4452 0
 6831 0064 D6E7     		b	.L209
 6832              	.L218:
 6833 0066 00BF     		.align	2
 6834              	.L217:
 6835 0068 00380140 		.word	1073821696
 6836 006c 00440040 		.word	1073759232
 6837 0070 00000000 		.word	RS_in
 6838 0074 00000000 		.word	.LANCHOR22
 6839 0078 00000000 		.word	RS_buf
 6840 007c 00000000 		.word	huart1
 6841 0080 00000000 		.word	RS2_in
 6842 0084 00000000 		.word	.LANCHOR23
 6843 0088 00000000 		.word	RS2_buf
 6844 008c 00000000 		.word	huart2
 6845              		.cfi_endproc
 6846              	.LFE100:
 6848              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 6849              		.align	1
 6850              		.global	HAL_GPIO_EXTI_Callback
 6851              		.syntax unified
 6852              		.thumb
 6853              		.thumb_func
ARM GAS  /tmp/ccUr6nXF.s 			page 220


 6854              		.fpu softvfp
 6856              	HAL_GPIO_EXTI_Callback:
 6857              	.LFB101:
4453:Src/main.c    **** 
4454:Src/main.c    **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
4455:Src/main.c    **** {
 6858              		.loc 1 4455 0
 6859              		.cfi_startproc
 6860              		@ args = 0, pretend = 0, frame = 0
 6861              		@ frame_needed = 0, uses_anonymous_args = 0
 6862              		@ link register save eliminated.
 6863              	.LVL969:
4456:Src/main.c    **** /*
4457:Src/main.c    ****     if(GPIO_Pin == IR_IN_Pin  )
4458:Src/main.c    ****     {
4459:Src/main.c    ****         IR_IRQFlg =1 ;
4460:Src/main.c    **** 
4461:Src/main.c    ****         IR_IRQ_Index++ ;
4462:Src/main.c    ****     }
4463:Src/main.c    **** 	*/
4464:Src/main.c    **** }
 6864              		.loc 1 4464 0
 6865 0000 7047     		bx	lr
 6866              		.cfi_endproc
 6867              	.LFE101:
 6869              		.section	.text.HS_Select_Win,"ax",%progbits
 6870              		.align	1
 6871              		.global	HS_Select_Win
 6872              		.syntax unified
 6873              		.thumb
 6874              		.thumb_func
 6875              		.fpu softvfp
 6877              	HS_Select_Win:
 6878              	.LFB102:
4465:Src/main.c    **** 
4466:Src/main.c    **** void HS_Select_Win(unsigned char WinNum)	//20201214-02
4467:Src/main.c    **** {
 6879              		.loc 1 4467 0
 6880              		.cfi_startproc
 6881              		@ args = 0, pretend = 0, frame = 0
 6882              		@ frame_needed = 0, uses_anonymous_args = 0
 6883              	.LVL970:
 6884 0000 38B5     		push	{r3, r4, r5, lr}
 6885              	.LCFI43:
 6886              		.cfi_def_cfa_offset 16
 6887              		.cfi_offset 3, -16
 6888              		.cfi_offset 4, -12
 6889              		.cfi_offset 5, -8
 6890              		.cfi_offset 14, -4
4468:Src/main.c    **** 
4469:Src/main.c    **** 	
4470:Src/main.c    **** 	switch (WinNum)
 6891              		.loc 1 4470 0
 6892 0002 0128     		cmp	r0, #1
 6893 0004 25D0     		beq	.L222
4471:Src/main.c    **** 	{
4472:Src/main.c    **** 		default:
ARM GAS  /tmp/ccUr6nXF.s 			page 221


4473:Src/main.c    **** 		case 0:
4474:Src/main.c    **** 			VXISI2CWrite( 0x32, 0x00 );
 6894              		.loc 1 4474 0
 6895 0006 0021     		movs	r1, #0
 6896 0008 3220     		movs	r0, #50
 6897              	.LVL971:
 6898 000a FFF7FEFF 		bl	VXISI2CWrite
 6899              	.LVL972:
4475:Src/main.c    **** 			VXISI2CWrite( 0x19, 0x00 );
 6900              		.loc 1 4475 0
 6901 000e 0021     		movs	r1, #0
 6902 0010 1920     		movs	r0, #25
 6903 0012 FFF7FEFF 		bl	VXISI2CWrite
 6904              	.LVL973:
4476:Src/main.c    **** 			SelectInputMode=0;
 6905              		.loc 1 4476 0
 6906 0016 0024     		movs	r4, #0
 6907 0018 394B     		ldr	r3, .L241
 6908 001a 1C70     		strb	r4, [r3]
4477:Src/main.c    **** 			printf("Selected window 0\r\n");
 6909              		.loc 1 4477 0
 6910 001c 3948     		ldr	r0, .L241+4
 6911 001e FFF7FEFF 		bl	puts
 6912              	.LVL974:
4478:Src/main.c    **** 			pVS4210_MutiWindows1.OutputMode =VS4210_1080P_MODE0_w0;						
 6913              		.loc 1 4478 0
 6914 0022 3948     		ldr	r0, .L241+8
 6915 0024 0470     		strb	r4, [r0]
4479:Src/main.c    **** 			pVS4210_MutiWindows1.WindowMap.WMap0 = 1 ;			
 6916              		.loc 1 4479 0
 6917 0026 0123     		movs	r3, #1
 6918 0028 4370     		strb	r3, [r0, #1]
4480:Src/main.c    **** 			VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;	
 6919              		.loc 1 4480 0
 6920 002a FFF7FEFF 		bl	VS4210_SetMutiWindows
 6921              	.LVL975:
4481:Src/main.c    **** 			//#if (_External_Sync==ON)
4482:Src/main.c    **** 			//VXISI2CWrite( 0x32, 0x00 );
4483:Src/main.c    **** 			  VXISI2CWrite( 0x19, 0x00 );
 6922              		.loc 1 4483 0
 6923 002e 2146     		mov	r1, r4
 6924 0030 1920     		movs	r0, #25
 6925 0032 FFF7FEFF 		bl	VXISI2CWrite
 6926              	.LVL976:
4484:Src/main.c    **** 			//#endif
4485:Src/main.c    **** 			//msleep(100) ;
4486:Src/main.c    **** 		//	VXISI2CWrite( 0x32, 0x80 );
4487:Src/main.c    **** 
4488:Src/main.c    **** 			if(bSignal[0]==1)
 6927              		.loc 1 4488 0
 6928 0036 354B     		ldr	r3, .L241+12
 6929 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6930 003a 012B     		cmp	r3, #1
 6931 003c 04D0     		beq	.L233
4489:Src/main.c    **** 				{
4490:Src/main.c    **** 				Set_Video_Loss_OSD(0,OFF);
4491:Src/main.c    **** 				}
ARM GAS  /tmp/ccUr6nXF.s 			page 222


4492:Src/main.c    **** 			else
4493:Src/main.c    **** 				{
4494:Src/main.c    **** 				Set_Video_Loss_OSD(0,ON);
 6932              		.loc 1 4494 0
 6933 003e 0121     		movs	r1, #1
 6934 0040 0020     		movs	r0, #0
 6935 0042 FFF7FEFF 		bl	Set_Video_Loss_OSD
 6936              	.LVL977:
 6937 0046 23E0     		b	.L224
 6938              	.L233:
4490:Src/main.c    **** 				}
 6939              		.loc 1 4490 0
 6940 0048 2146     		mov	r1, r4
 6941 004a 2046     		mov	r0, r4
 6942 004c FFF7FEFF 		bl	Set_Video_Loss_OSD
 6943              	.LVL978:
 6944 0050 1EE0     		b	.L224
 6945              	.LVL979:
 6946              	.L222:
4495:Src/main.c    **** 				}
4496:Src/main.c    **** 
4497:Src/main.c    **** 			#if (_External_Sync==OFF)
4498:Src/main.c    **** 				//SET_HDMI_SYNC_PARA();			
4499:Src/main.c    **** 			#endif
4500:Src/main.c    **** 			break;
4501:Src/main.c    **** 		
4502:Src/main.c    **** 		case 1:
4503:Src/main.c    **** 			VXISI2CWrite( 0x32, 0x00 );
 6947              		.loc 1 4503 0
 6948 0052 0021     		movs	r1, #0
 6949 0054 3220     		movs	r0, #50
 6950              	.LVL980:
 6951 0056 FFF7FEFF 		bl	VXISI2CWrite
 6952              	.LVL981:
4504:Src/main.c    **** 			SelectInputMode=1;
 6953              		.loc 1 4504 0
 6954 005a 294C     		ldr	r4, .L241
 6955 005c 0125     		movs	r5, #1
 6956 005e 2570     		strb	r5, [r4]
4505:Src/main.c    **** 			printf("Selected window 1\r\n");
 6957              		.loc 1 4505 0
 6958 0060 2B48     		ldr	r0, .L241+16
 6959 0062 FFF7FEFF 		bl	puts
 6960              	.LVL982:
4506:Src/main.c    **** 			pVS4210_MutiWindows1.OutputMode =VS4210_1080P_MODE0_w1;
 6961              		.loc 1 4506 0
 6962 0066 2848     		ldr	r0, .L241+8
 6963 0068 0570     		strb	r5, [r0]
4507:Src/main.c    **** 			pVS4210_MutiWindows1.WindowMap.WMap0 = 2 ;
 6964              		.loc 1 4507 0
 6965 006a 0223     		movs	r3, #2
 6966 006c 4370     		strb	r3, [r0, #1]
4508:Src/main.c    **** 			VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;		
 6967              		.loc 1 4508 0
 6968 006e FFF7FEFF 		bl	VS4210_SetMutiWindows
 6969              	.LVL983:
4509:Src/main.c    **** 			VXISI2CWrite( 0x19, 0x04 );
ARM GAS  /tmp/ccUr6nXF.s 			page 223


 6970              		.loc 1 4509 0
 6971 0072 0421     		movs	r1, #4
 6972 0074 1920     		movs	r0, #25
 6973 0076 FFF7FEFF 		bl	VXISI2CWrite
 6974              	.LVL984:
4510:Src/main.c    **** 
4511:Src/main.c    **** 		if(SelectInputMode==1)
 6975              		.loc 1 4511 0
 6976 007a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 6977 007c AB42     		cmp	r3, r5
 6978 007e 0ED0     		beq	.L234
 6979              	.L225:
4512:Src/main.c    **** 		{
4513:Src/main.c    **** 			if(  mode[0]==7 )
4514:Src/main.c    **** 				{
4515:Src/main.c    **** 			
4516:Src/main.c    **** 				TP_bt1120_1080P_1080P_mode0_w0();
4517:Src/main.c    **** 					printf("(=1)");
4518:Src/main.c    **** 				//VXISI2CWrite(0x10,0x01);
4519:Src/main.c    **** 				//VXISI2CWrite(0x9c,0x0A);
4520:Src/main.c    **** 				Set_Video_Loss_OSD(1,ON);
4521:Src/main.c    **** 
4522:Src/main.c    **** 			}
4523:Src/main.c    **** 			else
4524:Src/main.c    **** 				{
4525:Src/main.c    **** 				
4526:Src/main.c    **** 				printf("(=2)");
4527:Src/main.c    **** 								if(TP_InputMode==5)
4528:Src/main.c    **** 									{
4529:Src/main.c    **** 									TP_bt1120_720P_1080P_mode0_w0();
4530:Src/main.c    **** 									}
4531:Src/main.c    **** 								else if(TP_InputMode==6)
4532:Src/main.c    **** 									{
4533:Src/main.c    **** 									TP_bt1120_1080P_1080P_mode0_w0();
4534:Src/main.c    **** 									}
4535:Src/main.c    **** 								else if(TP_InputMode==0)
4536:Src/main.c    **** 									{
4537:Src/main.c    **** 									TP_bt1120_NTSC_1080P_mode0_w0();
4538:Src/main.c    **** 									}
4539:Src/main.c    **** 								else if(TP_InputMode==1)
4540:Src/main.c    **** 									{
4541:Src/main.c    **** 									TP_bt1120_PAL_1080P_mode0_w0();
4542:Src/main.c    **** 									}
4543:Src/main.c    **** 								else
4544:Src/main.c    **** 									VXISI2CWrite(0x10,0x01);
4545:Src/main.c    **** 
4546:Src/main.c    **** 										
4547:Src/main.c    **** 				}
4548:Src/main.c    **** 
4549:Src/main.c    **** 			#if (_External_Sync==OFF)
4550:Src/main.c    **** 			//SET_AHD_SYNC_PARA();
4551:Src/main.c    **** 			#endif
4552:Src/main.c    **** 		}	
4553:Src/main.c    **** 		// msleep(100) ;
4554:Src/main.c    **** 
4555:Src/main.c    **** 
4556:Src/main.c    **** 
ARM GAS  /tmp/ccUr6nXF.s 			page 224


4557:Src/main.c    **** 		
4558:Src/main.c    **** 			if(bSignal[1]==1)
 6980              		.loc 1 4558 0
 6981 0080 224B     		ldr	r3, .L241+12
 6982 0082 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 6983 0084 012B     		cmp	r3, #1
 6984 0086 35D0     		beq	.L235
4559:Src/main.c    **** 				Set_Video_Loss_OSD(1,OFF);
4560:Src/main.c    **** 			else
4561:Src/main.c    **** 				Set_Video_Loss_OSD(1,ON);
 6985              		.loc 1 4561 0
 6986 0088 0121     		movs	r1, #1
 6987 008a 0846     		mov	r0, r1
 6988 008c FFF7FEFF 		bl	Set_Video_Loss_OSD
 6989              	.LVL985:
 6990              	.L224:
4562:Src/main.c    **** 			
4563:Src/main.c    **** 			break;
4564:Src/main.c    **** 		}
4565:Src/main.c    **** 	
4566:Src/main.c    **** 	
4567:Src/main.c    **** 
4568:Src/main.c    ****   		OSDSecCount = 0 ;
 6991              		.loc 1 4568 0
 6992 0090 204B     		ldr	r3, .L241+20
 6993 0092 0022     		movs	r2, #0
 6994 0094 1A70     		strb	r2, [r3]
4569:Src/main.c    **** 		   OSDStateFlg = 1 ;		
 6995              		.loc 1 4569 0
 6996 0096 204B     		ldr	r3, .L241+24
 6997 0098 0122     		movs	r2, #1
 6998 009a 1A70     		strb	r2, [r3]
4570:Src/main.c    **** }
 6999              		.loc 1 4570 0
 7000 009c 38BD     		pop	{r3, r4, r5, pc}
 7001              	.L234:
4513:Src/main.c    **** 				{
 7002              		.loc 1 4513 0
 7003 009e 1F4B     		ldr	r3, .L241+28
 7004 00a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7005 00a2 072B     		cmp	r3, #7
 7006 00a4 10D0     		beq	.L236
4526:Src/main.c    **** 								if(TP_InputMode==5)
 7007              		.loc 1 4526 0
 7008 00a6 1E48     		ldr	r0, .L241+32
 7009 00a8 FFF7FEFF 		bl	printf
 7010              	.LVL986:
4527:Src/main.c    **** 									{
 7011              		.loc 1 4527 0
 7012 00ac 1D4B     		ldr	r3, .L241+36
 7013 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7014 00b0 052B     		cmp	r3, #5
 7015 00b2 13D0     		beq	.L237
4531:Src/main.c    **** 									{
 7016              		.loc 1 4531 0
 7017 00b4 062B     		cmp	r3, #6
 7018 00b6 14D0     		beq	.L238
ARM GAS  /tmp/ccUr6nXF.s 			page 225


4535:Src/main.c    **** 									{
 7019              		.loc 1 4535 0
 7020 00b8 B3B1     		cbz	r3, .L239
4539:Src/main.c    **** 									{
 7021              		.loc 1 4539 0
 7022 00ba 012B     		cmp	r3, #1
 7023 00bc 17D0     		beq	.L240
4544:Src/main.c    **** 
 7024              		.loc 1 4544 0
 7025 00be 0121     		movs	r1, #1
 7026 00c0 1020     		movs	r0, #16
 7027 00c2 FFF7FEFF 		bl	VXISI2CWrite
 7028              	.LVL987:
 7029 00c6 DBE7     		b	.L225
 7030              	.L236:
4516:Src/main.c    **** 					printf("(=1)");
 7031              		.loc 1 4516 0
 7032 00c8 FFF7FEFF 		bl	TP_bt1120_1080P_1080P_mode0_w0
 7033              	.LVL988:
4517:Src/main.c    **** 				//VXISI2CWrite(0x10,0x01);
 7034              		.loc 1 4517 0
 7035 00cc 1648     		ldr	r0, .L241+40
 7036 00ce FFF7FEFF 		bl	printf
 7037              	.LVL989:
4520:Src/main.c    **** 
 7038              		.loc 1 4520 0
 7039 00d2 2946     		mov	r1, r5
 7040 00d4 2846     		mov	r0, r5
 7041 00d6 FFF7FEFF 		bl	Set_Video_Loss_OSD
 7042              	.LVL990:
 7043 00da D1E7     		b	.L225
 7044              	.L237:
4529:Src/main.c    **** 									}
 7045              		.loc 1 4529 0
 7046 00dc FFF7FEFF 		bl	TP_bt1120_720P_1080P_mode0_w0
 7047              	.LVL991:
 7048 00e0 CEE7     		b	.L225
 7049              	.L238:
4533:Src/main.c    **** 									}
 7050              		.loc 1 4533 0
 7051 00e2 FFF7FEFF 		bl	TP_bt1120_1080P_1080P_mode0_w0
 7052              	.LVL992:
 7053 00e6 CBE7     		b	.L225
 7054              	.L239:
4537:Src/main.c    **** 									}
 7055              		.loc 1 4537 0
 7056 00e8 FFF7FEFF 		bl	TP_bt1120_NTSC_1080P_mode0_w0
 7057              	.LVL993:
 7058 00ec C8E7     		b	.L225
 7059              	.L240:
4541:Src/main.c    **** 									}
 7060              		.loc 1 4541 0
 7061 00ee FFF7FEFF 		bl	TP_bt1120_PAL_1080P_mode0_w0
 7062              	.LVL994:
 7063 00f2 C5E7     		b	.L225
 7064              	.L235:
4559:Src/main.c    **** 			else
ARM GAS  /tmp/ccUr6nXF.s 			page 226


 7065              		.loc 1 4559 0
 7066 00f4 0021     		movs	r1, #0
 7067 00f6 0120     		movs	r0, #1
 7068 00f8 FFF7FEFF 		bl	Set_Video_Loss_OSD
 7069              	.LVL995:
 7070 00fc C8E7     		b	.L224
 7071              	.L242:
 7072 00fe 00BF     		.align	2
 7073              	.L241:
 7074 0100 00000000 		.word	.LANCHOR10
 7075 0104 00000000 		.word	.LC37
 7076 0108 00000000 		.word	pVS4210_MutiWindows1
 7077 010c 00000000 		.word	.LANCHOR2
 7078 0110 14000000 		.word	.LC38
 7079 0114 00000000 		.word	.LANCHOR8
 7080 0118 00000000 		.word	.LANCHOR7
 7081 011c 00000000 		.word	mode
 7082 0120 30000000 		.word	.LC40
 7083 0124 00000000 		.word	TP_InputMode
 7084 0128 28000000 		.word	.LC39
 7085              		.cfi_endproc
 7086              	.LFE102:
 7088              		.section	.text.main_loop,"ax",%progbits
 7089              		.align	1
 7090              		.global	main_loop
 7091              		.syntax unified
 7092              		.thumb
 7093              		.thumb_func
 7094              		.fpu softvfp
 7096              	main_loop:
 7097              	.LFB85:
2033:Src/main.c    **** 
 7098              		.loc 1 2033 0
 7099              		.cfi_startproc
 7100              		@ Volatile: function does not return.
 7101              		@ args = 0, pretend = 0, frame = 0
 7102              		@ frame_needed = 0, uses_anonymous_args = 0
 7103 0000 00B5     		push	{lr}
 7104              	.LCFI44:
 7105              		.cfi_def_cfa_offset 4
 7106              		.cfi_offset 14, -4
 7107 0002 83B0     		sub	sp, sp, #12
 7108              	.LCFI45:
 7109              		.cfi_def_cfa_offset 16
 7110 0004 67E0     		b	.L259
 7111              	.L261:
2053:Src/main.c    **** 		HDMITX_DevLoopProc() ;
 7112              		.loc 1 2053 0
 7113 0006 1346     		mov	r3, r2
 7114 0008 0022     		movs	r2, #0
 7115 000a 1A70     		strb	r2, [r3]
2054:Src/main.c    **** 	}
 7116              		.loc 1 2054 0
 7117 000c FFF7FEFF 		bl	HDMITX_DevLoopProc
 7118              	.LVL996:
 7119 0010 70E0     		b	.L245
 7120              	.L262:
ARM GAS  /tmp/ccUr6nXF.s 			page 227


2089:Src/main.c    **** 			   if (gMode0LoopSecCount > gMode0LoopSecCmpVal)
 7121              		.loc 1 2089 0
 7122 0012 5E4A     		ldr	r2, .L267
 7123 0014 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 7124 0016 0133     		adds	r3, r3, #1
 7125 0018 DBB2     		uxtb	r3, r3
 7126 001a 1370     		strb	r3, [r2]
2090:Src/main.c    **** 			   {
 7127              		.loc 1 2090 0
 7128 001c 5C4A     		ldr	r2, .L267+4
 7129 001e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7130 0020 9342     		cmp	r3, r2
 7131 0022 40F28580 		bls	.L248
2092:Src/main.c    **** 				   pVS4210_MutiWindows1.OutputMode = VS4210_FULL_MODE0 ;
 7132              		.loc 1 2092 0
 7133 0026 0021     		movs	r1, #0
 7134 0028 584B     		ldr	r3, .L267
 7135 002a 1970     		strb	r1, [r3]
2093:Src/main.c    **** 				   if (pVS4210_MutiWindows1.WindowMap.WMap0 < 4)
 7136              		.loc 1 2093 0
 7137 002c 594B     		ldr	r3, .L267+8
 7138 002e 1970     		strb	r1, [r3]
2094:Src/main.c    **** 				   {
 7139              		.loc 1 2094 0
 7140 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 7141 0032 032B     		cmp	r3, #3
 7142 0034 14D8     		bhi	.L249
2096:Src/main.c    **** 				   }
 7143              		.loc 1 2096 0
 7144 0036 0133     		adds	r3, r3, #1
 7145 0038 5649     		ldr	r1, .L267+8
 7146 003a 4B70     		strb	r3, [r1, #1]
 7147              	.L250:
2101:Src/main.c    **** 				   VS4210_SetMutiWindows(&pVS4210_MutiWindows1) ;
 7148              		.loc 1 2101 0
 7149 003c 554C     		ldr	r4, .L267+8
 7150 003e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 7151 0040 0192     		str	r2, [sp, #4]
 7152 0042 0093     		str	r3, [sp]
 7153 0044 40F63503 		movw	r3, #2101
 7154 0048 534A     		ldr	r2, .L267+12
 7155 004a 5449     		ldr	r1, .L267+16
 7156 004c 5448     		ldr	r0, .L267+20
 7157 004e FFF7FEFF 		bl	printf
 7158              	.LVL997:
2102:Src/main.c    **** 				   OSDSecCount = 0 ;
 7159              		.loc 1 2102 0
 7160 0052 2046     		mov	r0, r4
 7161 0054 FFF7FEFF 		bl	VS4210_SetMutiWindows
 7162              	.LVL998:
2103:Src/main.c    **** 			   }
 7163              		.loc 1 2103 0
 7164 0058 524B     		ldr	r3, .L267+24
 7165 005a 0022     		movs	r2, #0
 7166 005c 1A70     		strb	r2, [r3]
 7167 005e 67E0     		b	.L248
 7168              	.L249:
ARM GAS  /tmp/ccUr6nXF.s 			page 228


2099:Src/main.c    **** 				   }
 7169              		.loc 1 2099 0
 7170 0060 4C4B     		ldr	r3, .L267+8
 7171 0062 0121     		movs	r1, #1
 7172 0064 5970     		strb	r1, [r3, #1]
 7173 0066 E9E7     		b	.L250
 7174              	.L263:
2109:Src/main.c    **** 		   }
 7175              		.loc 1 2109 0
 7176 0068 4A4B     		ldr	r3, .L267+8
 7177 006a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 7178 006c 4D4A     		ldr	r2, .L267+24
 7179 006e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7180 0070 0192     		str	r2, [sp, #4]
 7181 0072 0093     		str	r3, [sp]
 7182 0074 40F63D03 		movw	r3, #2109
 7183 0078 474A     		ldr	r2, .L267+12
 7184 007a 4849     		ldr	r1, .L267+16
 7185 007c 4A48     		ldr	r0, .L267+28
 7186 007e FFF7FEFF 		bl	printf
 7187              	.LVL999:
 7188 0082 59E0     		b	.L251
 7189              	.L264:
2118:Src/main.c    **** 			   {
 7190              		.loc 1 2118 0
 7191 0084 474B     		ldr	r3, .L267+24
 7192 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7193 0088 092B     		cmp	r3, #9
 7194 008a 59D9     		bls	.L252
2120:Src/main.c    **** 				   OSDStateFlg = 0 ;
 7195              		.loc 1 2120 0
 7196 008c 0023     		movs	r3, #0
 7197 008e 454A     		ldr	r2, .L267+24
 7198 0090 1370     		strb	r3, [r2]
2121:Src/main.c    **** 				   OSD_Clear_All();
 7199              		.loc 1 2121 0
 7200 0092 464A     		ldr	r2, .L267+32
 7201 0094 1370     		strb	r3, [r2]
2122:Src/main.c    **** 				   ////VXIS_fSetContentOsdOnOff(0) ;
 7202              		.loc 1 2122 0
 7203 0096 FFF7FEFF 		bl	OSD_Clear_All
 7204              	.LVL1000:
 7205 009a 51E0     		b	.L252
 7206              	.L265:
2128:Src/main.c    **** 		   
 7207              		.loc 1 2128 0
 7208 009c 8021     		movs	r1, #128
 7209 009e 3220     		movs	r0, #50
 7210 00a0 FFF7FEFF 		bl	VXISI2CWrite
 7211              	.LVL1001:
 7212 00a4 51E0     		b	.L247
 7213              	.L266:
2164:Src/main.c    **** 				else
 7214              		.loc 1 2164 0
 7215 00a6 FFF7FEFF 		bl	HS_Select_Win
 7216              	.LVL1002:
 7217 00aa 01E0     		b	.L254
ARM GAS  /tmp/ccUr6nXF.s 			page 229


 7218              	.L255:
2178:Src/main.c    **** 	}while(AccessEnable == 0);
 7219              		.loc 1 2178 0 discriminator 2
 7220 00ac FFF7FEFF 		bl	Monitor
 7221              	.LVL1003:
 7222              	.L254:
2178:Src/main.c    **** 	}while(AccessEnable == 0);
 7223              		.loc 1 2178 0 is_stmt 0 discriminator 1
 7224 00b0 FFF7FEFF 		bl	RS_ready
 7225              	.LVL1004:
 7226 00b4 0028     		cmp	r0, #0
 7227 00b6 F9D1     		bne	.L255
2179:Src/main.c    **** 	#endif
 7228              		.loc 1 2179 0 is_stmt 1
 7229 00b8 3D4B     		ldr	r3, .L267+36
 7230 00ba 1B68     		ldr	r3, [r3]
 7231 00bc 002B     		cmp	r3, #0
 7232 00be F7D0     		beq	.L254
 7233 00c0 01E0     		b	.L257
 7234              	.L258:
2182:Src/main.c    **** 		
 7235              		.loc 1 2182 0 discriminator 2
 7236 00c2 FFF7FEFF 		bl	TOAReceivePaser
 7237              	.LVL1005:
 7238              	.L257:
2182:Src/main.c    **** 		
 7239              		.loc 1 2182 0 is_stmt 0 discriminator 1
 7240 00c6 FFF7FEFF 		bl	RS2_ready
 7241              	.LVL1006:
 7242 00ca 0028     		cmp	r0, #0
 7243 00cc F9D1     		bne	.L258
2184:Src/main.c    **** 
 7244              		.loc 1 2184 0 is_stmt 1
 7245 00ce FFF7FEFF 		bl	SysTimerHandler
 7246              	.LVL1007:
2186:Src/main.c    **** 
 7247              		.loc 1 2186 0
 7248 00d2 FFF7FEFF 		bl	Get_2824cIrq
 7249              	.LVL1008:
 7250              	.L259:
2044:Src/main.c    **** 	#endif
 7251              		.loc 1 2044 0
 7252 00d6 364B     		ldr	r3, .L267+36
 7253 00d8 1B68     		ldr	r3, [r3]
 7254 00da 012B     		cmp	r3, #1
 7255 00dc E8D1     		bne	.L254
2047:Src/main.c    **** 	HDMI_AudioModeDetect() ;
 7256              		.loc 1 2047 0
 7257 00de FFF7FEFF 		bl	HDMI_VideoModeDetect
 7258              	.LVL1009:
2048:Src/main.c    **** 
 7259              		.loc 1 2048 0
 7260 00e2 FFF7FEFF 		bl	HDMI_AudioModeDetect
 7261              	.LVL1010:
2050:Src/main.c    **** 	if (TxCount > 10 )
 7262              		.loc 1 2050 0
 7263 00e6 334A     		ldr	r2, .L267+40
ARM GAS  /tmp/ccUr6nXF.s 			page 230


 7264 00e8 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 7265 00ea 0133     		adds	r3, r3, #1
 7266 00ec DBB2     		uxtb	r3, r3
 7267 00ee 1370     		strb	r3, [r2]
2051:Src/main.c    **** 	{
 7268              		.loc 1 2051 0
 7269 00f0 0A2B     		cmp	r3, #10
 7270 00f2 88D8     		bhi	.L261
 7271              	.L245:
2075:Src/main.c    **** 
 7272              		.loc 1 2075 0
 7273 00f4 0A20     		movs	r0, #10
 7274 00f6 FFF7FEFF 		bl	msleep
 7275              	.LVL1011:
2077:Src/main.c    **** 	   if (gMode0LoopCount > 100 )
 7276              		.loc 1 2077 0
 7277 00fa 2F4A     		ldr	r2, .L267+44
 7278 00fc 1388     		ldrh	r3, [r2]
 7279 00fe 0133     		adds	r3, r3, #1
 7280 0100 9BB2     		uxth	r3, r3
 7281 0102 1380     		strh	r3, [r2]	@ movhi
2078:Src/main.c    **** 	   {
 7282              		.loc 1 2078 0
 7283 0104 642B     		cmp	r3, #100
 7284 0106 06D9     		bls	.L246
2080:Src/main.c    **** 		   OSDSecCount = OSDSecCount +1 ;
 7285              		.loc 1 2080 0
 7286 0108 1346     		mov	r3, r2
 7287 010a 0022     		movs	r2, #0
 7288 010c 1A80     		strh	r2, [r3]	@ movhi
2081:Src/main.c    **** 	   }
 7289              		.loc 1 2081 0
 7290 010e 254A     		ldr	r2, .L267+24
 7291 0110 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 7292 0112 0133     		adds	r3, r3, #1
 7293 0114 1370     		strb	r3, [r2]
 7294              	.L246:
2084:Src/main.c    **** 	   {
 7295              		.loc 1 2084 0
 7296 0116 234B     		ldr	r3, .L267+24
 7297 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7298 011a 284A     		ldr	r2, .L267+48
 7299 011c 1268     		ldr	r2, [r2]
 7300 011e 9342     		cmp	r3, r2
 7301 0120 13D0     		beq	.L247
2086:Src/main.c    **** 		   if (gMode0LoopFlg == 1)
 7302              		.loc 1 2086 0
 7303 0122 264A     		ldr	r2, .L267+48
 7304 0124 1360     		str	r3, [r2]
2087:Src/main.c    **** 		   {
 7305              		.loc 1 2087 0
 7306 0126 264B     		ldr	r3, .L267+52
 7307 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7308 012a 012B     		cmp	r3, #1
 7309 012c 3FF471AF 		beq	.L262
 7310              	.L248:
2107:Src/main.c    **** 		   {
ARM GAS  /tmp/ccUr6nXF.s 			page 231


 7311              		.loc 1 2107 0
 7312 0130 234B     		ldr	r3, .L267+52
 7313 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7314 0134 012B     		cmp	r3, #1
 7315 0136 97D0     		beq	.L263
 7316              	.L251:
2116:Src/main.c    **** 		   {
 7317              		.loc 1 2116 0
 7318 0138 1C4B     		ldr	r3, .L267+32
 7319 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7320 013c 012B     		cmp	r3, #1
 7321 013e A1D0     		beq	.L264
 7322              	.L252:
2127:Src/main.c    **** 			VXISI2CWrite(0x32,0x80);
 7323              		.loc 1 2127 0
 7324 0140 3220     		movs	r0, #50
 7325 0142 FFF7FEFF 		bl	VXISI2CRead
 7326              	.LVL1012:
 7327 0146 0028     		cmp	r0, #0
 7328 0148 A8D0     		beq	.L265
 7329              	.L247:
2133:Src/main.c    **** 	
 7330              		.loc 1 2133 0
 7331 014a FFF7FEFF 		bl	EQ_Detect
 7332              	.LVL1013:
2151:Src/main.c    **** 		if((CheckSelectInputMode!=SelectInputMode)/*&&(BOOT_ISSUE==0)*/)
 7333              		.loc 1 2151 0
 7334 014e 1021     		movs	r1, #16
 7335 0150 1C48     		ldr	r0, .L267+56
 7336 0152 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 7337              	.LVL1014:
 7338 0156 1C4B     		ldr	r3, .L267+60
 7339 0158 1870     		strb	r0, [r3]
2152:Src/main.c    **** 		{
 7340              		.loc 1 2152 0
 7341 015a 1C4B     		ldr	r3, .L267+64
 7342 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7343 015e 9842     		cmp	r0, r3
 7344 0160 A6D0     		beq	.L254
2154:Src/main.c    **** 			CheckSelectInputMode=HDMI_SELECT_GET();
 7345              		.loc 1 2154 0
 7346 0162 3220     		movs	r0, #50
 7347 0164 FFF7FEFF 		bl	msleep
 7348              	.LVL1015:
2155:Src/main.c    **** 
 7349              		.loc 1 2155 0
 7350 0168 1021     		movs	r1, #16
 7351 016a 1648     		ldr	r0, .L267+56
 7352 016c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 7353              	.LVL1016:
 7354 0170 154B     		ldr	r3, .L267+60
 7355 0172 1870     		strb	r0, [r3]
2157:Src/main.c    **** 				{
 7356              		.loc 1 2157 0
 7357 0174 154B     		ldr	r3, .L267+64
 7358 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7359 0178 9842     		cmp	r0, r3
ARM GAS  /tmp/ccUr6nXF.s 			page 232


 7360 017a 99D0     		beq	.L254
2159:Src/main.c    **** 
 7361              		.loc 1 2159 0
 7362 017c 134B     		ldr	r3, .L267+64
 7363 017e 1870     		strb	r0, [r3]
2163:Src/main.c    **** 					HS_Select_Win(1);
 7364              		.loc 1 2163 0
 7365 0180 0128     		cmp	r0, #1
 7366 0182 90D0     		beq	.L266
2166:Src/main.c    **** 				}
 7367              		.loc 1 2166 0
 7368 0184 0020     		movs	r0, #0
 7369 0186 FFF7FEFF 		bl	HS_Select_Win
 7370              	.LVL1017:
 7371 018a 91E7     		b	.L254
 7372              	.L268:
 7373              		.align	2
 7374              	.L267:
 7375 018c 00000000 		.word	.LANCHOR28
 7376 0190 00000000 		.word	.LANCHOR29
 7377 0194 00000000 		.word	pVS4210_MutiWindows1
 7378 0198 00000000 		.word	.LANCHOR30
 7379 019c 00000000 		.word	.LC1
 7380 01a0 00000000 		.word	.LC41
 7381 01a4 00000000 		.word	.LANCHOR8
 7382 01a8 24000000 		.word	.LC42
 7383 01ac 00000000 		.word	.LANCHOR7
 7384 01b0 00000000 		.word	AccessEnable
 7385 01b4 00000000 		.word	.LANCHOR24
 7386 01b8 00000000 		.word	.LANCHOR25
 7387 01bc 00000000 		.word	.LANCHOR26
 7388 01c0 00000000 		.word	.LANCHOR27
 7389 01c4 00080140 		.word	1073809408
 7390 01c8 00000000 		.word	.LANCHOR31
 7391 01cc 00000000 		.word	.LANCHOR10
 7392              		.cfi_endproc
 7393              	.LFE85:
 7395              		.section	.text.main,"ax",%progbits
 7396              		.align	1
 7397              		.global	main
 7398              		.syntax unified
 7399              		.thumb
 7400              		.thumb_func
 7401              		.fpu softvfp
 7403              	main:
 7404              	.LFB84:
1722:Src/main.c    ****   /* USER CODE BEGIN 1 */
 7405              		.loc 1 1722 0
 7406              		.cfi_startproc
 7407              		@ args = 0, pretend = 0, frame = 0
 7408              		@ frame_needed = 0, uses_anonymous_args = 0
 7409 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7410              	.LCFI46:
 7411              		.cfi_def_cfa_offset 28
 7412              		.cfi_offset 4, -28
 7413              		.cfi_offset 5, -24
 7414              		.cfi_offset 6, -20
ARM GAS  /tmp/ccUr6nXF.s 			page 233


 7415              		.cfi_offset 7, -16
 7416              		.cfi_offset 8, -12
 7417              		.cfi_offset 9, -8
 7418              		.cfi_offset 14, -4
 7419 0004 83B0     		sub	sp, sp, #12
 7420              	.LCFI47:
 7421              		.cfi_def_cfa_offset 40
1741:Src/main.c    ****   
 7422              		.loc 1 1741 0
 7423 0006 FFF7FEFF 		bl	HAL_Init
 7424              	.LVL1018:
1748:Src/main.c    **** 
 7425              		.loc 1 1748 0
 7426 000a FFF7FEFF 		bl	SystemClock_Config
 7427              	.LVL1019:
1752:Src/main.c    **** 
 7428              		.loc 1 1752 0
 7429 000e FFF7FEFF 		bl	InitialTimerEvent
 7430              	.LVL1020:
1757:Src/main.c    ****  // LCDPowerOFF();
 7431              		.loc 1 1757 0
 7432 0012 FFF7FEFF 		bl	MX_GPIO_Init
 7433              	.LVL1021:
1772:Src/main.c    ****   MX_USART1_UART_Init();
 7434              		.loc 1 1772 0
 7435 0016 FFF7FEFF 		bl	MX_TIM3_Init
 7436              	.LVL1022:
1773:Src/main.c    ****   MX_USART2_UART_Init();
 7437              		.loc 1 1773 0
 7438 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 7439              	.LVL1023:
1774:Src/main.c    **** //  MX_ADC1_Init();
 7440              		.loc 1 1774 0
 7441 001e FFF7FEFF 		bl	MX_USART2_UART_Init
 7442              	.LVL1024:
1781:Src/main.c    ****  SW_I2C1_Init() ;
 7443              		.loc 1 1781 0
 7444 0022 FFF7FEFF 		bl	SW_I2C0_Init
 7445              	.LVL1025:
1782:Src/main.c    ****  SW_I2C2_Init() ;
 7446              		.loc 1 1782 0
 7447 0026 FFF7FEFF 		bl	SW_I2C1_Init
 7448              	.LVL1026:
1783:Src/main.c    ****  SW_I2C3_Init() ;
 7449              		.loc 1 1783 0
 7450 002a FFF7FEFF 		bl	SW_I2C2_Init
 7451              	.LVL1027:
1784:Src/main.c    **** 
 7452              		.loc 1 1784 0
 7453 002e FFF7FEFF 		bl	SW_I2C3_Init
 7454              	.LVL1028:
1791:Src/main.c    **** SET_Audio_Mute(ON);
 7455              		.loc 1 1791 0
 7456 0032 0121     		movs	r1, #1
 7457 0034 0020     		movs	r0, #0
 7458 0036 FFF7FEFF 		bl	Set_Video_Loss_OSD
 7459              	.LVL1029:
ARM GAS  /tmp/ccUr6nXF.s 			page 234


1792:Src/main.c    **** 
 7460              		.loc 1 1792 0
 7461 003a 0120     		movs	r0, #1
 7462 003c FFF7FEFF 		bl	SET_Audio_Mute
 7463              	.LVL1030:
1797:Src/main.c    ****   HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data, 1);	//activate UART receive interrupt every time
 7464              		.loc 1 1797 0
 7465 0040 3220     		movs	r0, #50
 7466 0042 FFF7FEFF 		bl	msleep
 7467              	.LVL1031:
1798:Src/main.c    ****   HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx2_data, 1);	//activate UART receive interrupt every time
 7468              		.loc 1 1798 0
 7469 0046 0122     		movs	r2, #1
 7470 0048 5749     		ldr	r1, .L276
 7471 004a 5848     		ldr	r0, .L276+4
 7472 004c FFF7FEFF 		bl	HAL_UART_Receive_IT
 7473              	.LVL1032:
1799:Src/main.c    **** 
 7474              		.loc 1 1799 0
 7475 0050 0122     		movs	r2, #1
 7476 0052 5749     		ldr	r1, .L276+8
 7477 0054 5748     		ldr	r0, .L276+12
 7478 0056 FFF7FEFF 		bl	HAL_UART_Receive_IT
 7479              	.LVL1033:
1803:Src/main.c    ****  TP2824_SET_REST(0);
 7480              		.loc 1 1803 0
 7481 005a 574D     		ldr	r5, .L276+16
 7482 005c 0022     		movs	r2, #0
 7483 005e 4FF48051 		mov	r1, #4096
 7484 0062 2846     		mov	r0, r5
 7485 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 7486              	.LVL1034:
1804:Src/main.c    **** 
 7487              		.loc 1 1804 0
 7488 0068 544C     		ldr	r4, .L276+20
 7489 006a 0022     		movs	r2, #0
 7490 006c 0221     		movs	r1, #2
 7491 006e 2046     		mov	r0, r4
 7492 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 7493              	.LVL1035:
1806:Src/main.c    ****   //HAL_GPIO_WritePin(TP2824_RST_GPIO_Port, VS_RST_Pin, 1); //VS4210 RST
 7494              		.loc 1 1806 0
 7495 0074 6420     		movs	r0, #100
 7496 0076 FFF7FEFF 		bl	msleep
 7497              	.LVL1036:
1809:Src/main.c    ****  TP2824_SET_REST(1);
 7498              		.loc 1 1809 0
 7499 007a 0122     		movs	r2, #1
 7500 007c 4FF48051 		mov	r1, #4096
 7501 0080 2846     		mov	r0, r5
 7502 0082 FFF7FEFF 		bl	HAL_GPIO_WritePin
 7503              	.LVL1037:
1810:Src/main.c    **** 
 7504              		.loc 1 1810 0
 7505 0086 0122     		movs	r2, #1
 7506 0088 0221     		movs	r1, #2
 7507 008a 2046     		mov	r0, r4
ARM GAS  /tmp/ccUr6nXF.s 			page 235


 7508 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 7509              	.LVL1038:
1824:Src/main.c    ****   {
 7510              		.loc 1 1824 0
 7511 0090 0024     		movs	r4, #0
 7512 0092 20E0     		b	.L270
 7513              	.LVL1039:
 7514              	.L271:
1826:Src/main.c    ****       dbg_Printf("Init HDMI RX,Chip(%d)....\r\n",(int)i ) ;
 7515              		.loc 1 1826 0 discriminator 3
 7516 0094 4A4B     		ldr	r3, .L276+24
 7517 0096 1C70     		strb	r4, [r3]
1827:Src/main.c    ****       InitHDMIRX(0);
 7518              		.loc 1 1827 0 discriminator 3
 7519 0098 4A4E     		ldr	r6, .L276+28
 7520 009a 4B4D     		ldr	r5, .L276+32
 7521 009c 0094     		str	r4, [sp]
 7522 009e 40F22373 		movw	r3, #1827
 7523 00a2 3246     		mov	r2, r6
 7524 00a4 2946     		mov	r1, r5
 7525 00a6 4948     		ldr	r0, .L276+36
 7526 00a8 FFF7FEFF 		bl	printf
 7527              	.LVL1040:
1828:Src/main.c    ****       HDMIRX_WriteI2C_Byte(0x89 ,0x80);
 7528              		.loc 1 1828 0 discriminator 3
 7529 00ac 0020     		movs	r0, #0
 7530 00ae FFF7FEFF 		bl	InitHDMIRX
 7531              	.LVL1041:
1829:Src/main.c    **** 
 7532              		.loc 1 1829 0 discriminator 3
 7533 00b2 8021     		movs	r1, #128
 7534 00b4 8920     		movs	r0, #137
 7535 00b6 FFF7FEFF 		bl	HDMIRX_WriteI2C_Byte
 7536              	.LVL1042:
1832:Src/main.c    ****       dbg_Printf("IT66021 chip num=%d , 02reg=0x%02x\r\n", (int )i , (int)val ) ;
 7537              		.loc 1 1832 0 discriminator 3
 7538 00ba 0220     		movs	r0, #2
 7539 00bc FFF7FEFF 		bl	HDMIRX_ReadI2C_Byte
 7540              	.LVL1043:
1833:Src/main.c    **** #endif
 7541              		.loc 1 1833 0 discriminator 3
 7542 00c0 0190     		str	r0, [sp, #4]
 7543 00c2 0094     		str	r4, [sp]
 7544 00c4 40F22973 		movw	r3, #1833
 7545 00c8 3246     		mov	r2, r6
 7546 00ca 2946     		mov	r1, r5
 7547 00cc 4048     		ldr	r0, .L276+40
 7548              	.LVL1044:
 7549 00ce FFF7FEFF 		bl	printf
 7550              	.LVL1045:
1824:Src/main.c    ****   {
 7551              		.loc 1 1824 0 discriminator 3
 7552 00d2 0134     		adds	r4, r4, #1
 7553              	.LVL1046:
 7554 00d4 E4B2     		uxtb	r4, r4
 7555              	.LVL1047:
 7556              	.L270:
ARM GAS  /tmp/ccUr6nXF.s 			page 236


1824:Src/main.c    ****   {
 7557              		.loc 1 1824 0 is_stmt 0 discriminator 1
 7558 00d6 012C     		cmp	r4, #1
 7559 00d8 DCD9     		bls	.L271
1846:Src/main.c    **** 	  #endif
 7560              		.loc 1 1846 0 is_stmt 1
 7561 00da 3E4C     		ldr	r4, .L276+44
 7562              	.LVL1048:
 7563 00dc 0025     		movs	r5, #0
 7564 00de 2570     		strb	r5, [r4]
1849:Src/main.c    ****   pVS4210_MutiWindows1.OutputSize = _OUTPUT_1080P60 ;
 7565              		.loc 1 1849 0
 7566 00e0 6571     		strb	r5, [r4, #5]
1850:Src/main.c    **** 	#ifdef VS4210_SELECT_WIN1	//20201211-02
 7567              		.loc 1 1850 0
 7568 00e2 0126     		movs	r6, #1
 7569 00e4 A671     		strb	r6, [r4, #6]
1857:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap1 = 2 ; //set ch2 = video2
 7570              		.loc 1 1857 0
 7571 00e6 6670     		strb	r6, [r4, #1]
1858:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap2 = 3 ; //set ch3 = video3
 7572              		.loc 1 1858 0
 7573 00e8 0223     		movs	r3, #2
 7574 00ea A370     		strb	r3, [r4, #2]
1859:Src/main.c    ****   pVS4210_MutiWindows1.WindowMap.WMap3 = 4 ; //set ch4 = video4
 7575              		.loc 1 1859 0
 7576 00ec 0327     		movs	r7, #3
 7577 00ee E770     		strb	r7, [r4, #3]
1860:Src/main.c    **** 	#endif
 7578              		.loc 1 1860 0
 7579 00f0 0423     		movs	r3, #4
 7580 00f2 2371     		strb	r3, [r4, #4]
1864:Src/main.c    **** 
 7581              		.loc 1 1864 0
 7582 00f4 3849     		ldr	r1, .L276+48
 7583 00f6 0F20     		movs	r0, #15
 7584 00f8 FFF7FEFF 		bl	VXOSD_UseFont_init
 7585              	.LVL1049:
1866:Src/main.c    **** #endif
 7586              		.loc 1 1866 0
 7587 00fc FFF7FEFF 		bl	main_init
 7588              	.LVL1050:
1874:Src/main.c    **** 
 7589              		.loc 1 1874 0
 7590 0100 FFF7FEFF 		bl	Init_TP280x_RegSet
 7591              	.LVL1051:
1878:Src/main.c    ****    dbg_Printf("VS4210 chip ID = 0x%02x\r\n",(int)val) ;
 7592              		.loc 1 1878 0
 7593 0104 2846     		mov	r0, r5
 7594 0106 FFF7FEFF 		bl	VXISI2CRead
 7595              	.LVL1052:
1879:Src/main.c    ****    dbg_Printf("VS4210 Init. (Startting...)\r\n") ;
 7596              		.loc 1 1879 0
 7597 010a DFF8B890 		ldr	r9, .L276+28
 7598 010e DFF8B880 		ldr	r8, .L276+32
 7599 0112 0090     		str	r0, [sp]
 7600 0114 40F25773 		movw	r3, #1879
ARM GAS  /tmp/ccUr6nXF.s 			page 237


 7601 0118 4A46     		mov	r2, r9
 7602 011a 4146     		mov	r1, r8
 7603 011c 2F48     		ldr	r0, .L276+52
 7604              	.LVL1053:
 7605 011e FFF7FEFF 		bl	printf
 7606              	.LVL1054:
1880:Src/main.c    **** #endif
 7607              		.loc 1 1880 0
 7608 0122 4FF4EB63 		mov	r3, #1880
 7609 0126 4A46     		mov	r2, r9
 7610 0128 4146     		mov	r1, r8
 7611 012a 2D48     		ldr	r0, .L276+56
 7612 012c FFF7FEFF 		bl	printf
 7613              	.LVL1055:
1883:Src/main.c    ****   //pVS4210_MutiWindows1.DrawOSDFlg = 0x00 ;  //Enable OSD, bit1=Title, bit0 = bar
 7614              		.loc 1 1883 0
 7615 0130 E771     		strb	r7, [r4, #7]
1893:Src/main.c    ****   //pVS4210_MutiWindows1.OutputSize = _OUTPUT_720P60 ;
 7616              		.loc 1 1893 0
 7617 0132 A671     		strb	r6, [r4, #6]
1896:Src/main.c    ****   pVS4210_MutiWindows1.DrawBoxColor= _EN_DRAWBOX_COLOR_White ;
 7618              		.loc 1 1896 0
 7619 0134 2572     		strb	r5, [r4, #8]
1897:Src/main.c    ****   VXIS_fSetOsdx2(0) ;
 7620              		.loc 1 1897 0
 7621 0136 6572     		strb	r5, [r4, #9]
1898:Src/main.c    **** 
 7622              		.loc 1 1898 0
 7623 0138 2846     		mov	r0, r5
 7624 013a FFF7FEFF 		bl	VXIS_fSetOsdx2
 7625              	.LVL1056:
1900:Src/main.c    **** 
 7626              		.loc 1 1900 0
 7627 013e 2046     		mov	r0, r4
 7628 0140 FFF7FEFF 		bl	VS4210_SetMutiWindows
 7629              	.LVL1057:
1902:Src/main.c    ****   {
 7630              		.loc 1 1902 0
 7631 0144 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 7632 0146 3BB1     		cbz	r3, .L272
1904:Src/main.c    ****         Tim1_count = 0 ;
 7633              		.loc 1 1904 0
 7634 0148 264B     		ldr	r3, .L276+60
 7635 014a 1E60     		str	r6, [r3]
1905:Src/main.c    ****         OSDStateFlg = 1 ;
 7636              		.loc 1 1905 0
 7637 014c 2649     		ldr	r1, .L276+64
 7638 014e 0D60     		str	r5, [r1]
1906:Src/main.c    ****         OSDSecCount = 0 ;
 7639              		.loc 1 1906 0
 7640 0150 2649     		ldr	r1, .L276+68
 7641 0152 0E70     		strb	r6, [r1]
1907:Src/main.c    ****   }  
 7642              		.loc 1 1907 0
 7643 0154 264A     		ldr	r2, .L276+72
 7644 0156 1570     		strb	r5, [r2]
 7645              	.L272:
ARM GAS  /tmp/ccUr6nXF.s 			page 238


1910:Src/main.c    **** memset(&ExOsdContent[1] ,_spc , (EXTERNOSDNUMBER+1) *2 ) ;
 7646              		.loc 1 1910 0
 7647 0158 2648     		ldr	r0, .L276+76
 7648 015a 5D23     		movs	r3, #93
 7649 015c 00F8013B 		strb	r3, [r0], #1
1911:Src/main.c    **** exosdLen = 4*EXTERNOSDNUMBER + 4  ;
 7650              		.loc 1 1911 0
 7651 0160 2022     		movs	r2, #32
 7652 0162 6D21     		movs	r1, #109
 7653 0164 FFF7FEFF 		bl	memset
 7654              	.LVL1058:
1914:Src/main.c    **** for (i = exosdStart ; i <= exosdLen ;i = i+2 )
 7655              		.loc 1 1914 0
 7656 0168 0122     		movs	r2, #1
1915:Src/main.c    **** {
 7657              		.loc 1 1915 0
 7658 016a 2123     		movs	r3, #33
 7659 016c 0AE0     		b	.L273
 7660              	.LVL1059:
 7661              	.L274:
1917:Src/main.c    **** 	ExOsdContent[i+1] = _spc ;
 7662              		.loc 1 1917 0 discriminator 3
 7663 016e 02F17F00 		add	r0, r2, #127
 7664 0172 2049     		ldr	r1, .L276+76
 7665 0174 C854     		strb	r0, [r1, r3]
1918:Src/main.c    **** 	j++ ;
 7666              		.loc 1 1918 0 discriminator 3
 7667 0176 581C     		adds	r0, r3, #1
 7668 0178 6D24     		movs	r4, #109
 7669 017a 0C54     		strb	r4, [r1, r0]
1919:Src/main.c    **** }
 7670              		.loc 1 1919 0 discriminator 3
 7671 017c 0132     		adds	r2, r2, #1
 7672              	.LVL1060:
 7673 017e D2B2     		uxtb	r2, r2
 7674              	.LVL1061:
1915:Src/main.c    **** {
 7675              		.loc 1 1915 0 discriminator 3
 7676 0180 0233     		adds	r3, r3, #2
 7677              	.LVL1062:
 7678 0182 DBB2     		uxtb	r3, r3
 7679              	.LVL1063:
 7680              	.L273:
1915:Src/main.c    **** {
 7681              		.loc 1 1915 0 is_stmt 0 discriminator 1
 7682 0184 402B     		cmp	r3, #64
 7683 0186 F2D9     		bls	.L274
1921:Src/main.c    ****   exosdLen = EXTERNOSDNUMBER *2  ;
 7684              		.loc 1 1921 0 is_stmt 1
 7685 0188 1F22     		movs	r2, #31
 7686              	.LVL1064:
 7687 018a 6D21     		movs	r1, #109
 7688 018c 1A48     		ldr	r0, .L276+80
 7689 018e FFF7FEFF 		bl	memset
 7690              	.LVL1065:
1924:Src/main.c    **** //test@end
 7691              		.loc 1 1924 0
ARM GAS  /tmp/ccUr6nXF.s 			page 239


 7692 0192 0020     		movs	r0, #0
 7693 0194 FFF7FEFF 		bl	Audio_Sel
 7694              	.LVL1066:
1987:Src/main.c    ****   /* USER CODE END 2 */
 7695              		.loc 1 1987 0
 7696 0198 1848     		ldr	r0, .L276+84
 7697 019a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 7698              	.LVL1067:
2004:Src/main.c    **** 
 7699              		.loc 1 2004 0
 7700 019e 1848     		ldr	r0, .L276+88
 7701 01a0 FFF7FEFF 		bl	printf
 7702              	.LVL1068:
2017:Src/main.c    **** 	
 7703              		.loc 1 2017 0
 7704 01a4 FFF7FEFF 		bl	main_loop
 7705              	.LVL1069:
 7706              	.L277:
 7707              		.align	2
 7708              	.L276:
 7709 01a8 00000000 		.word	.LANCHOR22
 7710 01ac 00000000 		.word	huart1
 7711 01b0 00000000 		.word	.LANCHOR23
 7712 01b4 00000000 		.word	huart2
 7713 01b8 000C0140 		.word	1073810432
 7714 01bc 00100140 		.word	1073811456
 7715 01c0 00000000 		.word	gHDMI_Index
 7716 01c4 00000000 		.word	.LANCHOR32
 7717 01c8 00000000 		.word	.LC1
 7718 01cc 00000000 		.word	.LC43
 7719 01d0 28000000 		.word	.LC44
 7720 01d4 00000000 		.word	pVS4210_MutiWindows1
 7721 01d8 00000000 		.word	UserDefineFont1
 7722 01dc 58000000 		.word	.LC45
 7723 01e0 7C000000 		.word	.LC46
 7724 01e4 00000000 		.word	.LANCHOR5
 7725 01e8 00000000 		.word	.LANCHOR6
 7726 01ec 00000000 		.word	.LANCHOR7
 7727 01f0 00000000 		.word	.LANCHOR8
 7728 01f4 00000000 		.word	ExOsdContent
 7729 01f8 3F000000 		.word	ExOsdContent+63
 7730 01fc 00000000 		.word	htim3
 7731 0200 A4000000 		.word	.LC47
 7732              		.cfi_endproc
 7733              	.LFE84:
 7735              		.section	.text.Error_Handler,"ax",%progbits
 7736              		.align	1
 7737              		.global	Error_Handler
 7738              		.syntax unified
 7739              		.thumb
 7740              		.thumb_func
 7741              		.fpu softvfp
 7743              	Error_Handler:
 7744              	.LFB103:
4571:Src/main.c    **** 
4572:Src/main.c    **** /* USER CODE END 4 */
4573:Src/main.c    **** 
ARM GAS  /tmp/ccUr6nXF.s 			page 240


4574:Src/main.c    **** /**
4575:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
4576:Src/main.c    ****   * @retval None
4577:Src/main.c    ****   */
4578:Src/main.c    **** void Error_Handler(void)
4579:Src/main.c    **** {
 7745              		.loc 1 4579 0
 7746              		.cfi_startproc
 7747              		@ args = 0, pretend = 0, frame = 0
 7748              		@ frame_needed = 0, uses_anonymous_args = 0
 7749              		@ link register save eliminated.
4580:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
4581:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
4582:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
4583:Src/main.c    **** }
 7750              		.loc 1 4583 0
 7751 0000 7047     		bx	lr
 7752              		.cfi_endproc
 7753              	.LFE103:
 7755              		.global	OSDStateFlg
 7756              		.global	OSDSecCount
 7757              		.comm	pVS4210_JointKind1,10,4
 7758              		.global	gRxLoopFlg
 7759              		.comm	gabVXIS_Input_mirrorH,4,4
 7760              		.global	OSD_Show_Flg
 7761              		.global	Tim1_count
 7762              		.comm	pVS4210_MutiWindows1,10,4
 7763              		.global	TxCount
 7764              		.global	bSignal
 7765              		.global	gMode0LoopSecCmpVal
 7766              		.global	gMode0LoopSecCount
 7767              		.global	gMode0LoopFlg
 7768              		.global	gMode0LoopCount
 7769              		.global	gbAUDO_INDEX
 7770              		.comm	gPrebAUDO_INDEX,1,1
 7771              		.comm	gPreAudioSampleFreq,1,1
 7772              		.global	CheckSelectInputMode
 7773              		.global	SelectInputMode
 7774              		.global	OSDPreSecCount
 7775              		.global	PrebVXIS_InputMode
 7776              		.comm	ExOsdContent,256,4
 7777              		.global	CURRENT_CH
 7778              		.global	BOOT_ISSUE
 7779              		.global	OSD_SPEAKER
 7780              		.global	OSD_MIRROR
 7781              		.comm	CAMR_M,1,1
 7782              		.comm	CAMC_M,1,1
 7783              		.comm	CAMB_M,1,1
 7784              		.comm	CAMA_M,1,1
 7785              		.comm	Priority,1,1
 7786              		.comm	SelectModeType,1,1
 7787              		.global	tptic
 7788              		.global	keytic
 7789              		.global	PowerFlag
 7790              		.comm	TimeStep,1,1
 7791              		.global	PWMLevel
 7792              		.global	AutoDayNightDelay
ARM GAS  /tmp/ccUr6nXF.s 			page 241


 7793              		.global	LightSensor_ADC
 7794              		.global	DayNightLevel
 7795              		.comm	DebugLevel,1,1
 7796              		.global	half_scaler
 7797              		.comm	ManVidRes,1,1
 7798              		.global	VS8812_ADDR
 7799              		.global	VS4210_ADDR
 7800              		.comm	htim2,64,4
 7801              		.comm	hadc1,48,4
 7802              		.comm	huart2,64,4
 7803              		.comm	huart1,64,4
 7804              		.comm	htim3,64,4
 7805              		.comm	newInRes,4,4
 7806              		.section	.bss.AutoDayNightDelay,"aw",%nobits
 7807              		.set	.LANCHOR19,. + 0
 7810              	AutoDayNightDelay:
 7811 0000 00       		.space	1
 7812              		.section	.bss.CURRENT_CH,"aw",%nobits
 7813              		.set	.LANCHOR16,. + 0
 7816              	CURRENT_CH:
 7817 0000 00       		.space	1
 7818              		.section	.bss.CheckSelectInputMode,"aw",%nobits
 7819              		.set	.LANCHOR31,. + 0
 7822              	CheckSelectInputMode:
 7823 0000 00       		.space	1
 7824              		.section	.bss.DayNightLevel,"aw",%nobits
 7825              		.set	.LANCHOR17,. + 0
 7828              	DayNightLevel:
 7829 0000 00       		.space	1
 7830              		.section	.bss.DebugFlg,"aw",%nobits
 7831              		.align	2
 7834              	DebugFlg:
 7835 0000 00000000 		.space	4
 7836              		.section	.bss.IR_4BYTE,"aw",%nobits
 7837              		.align	2
 7840              	IR_4BYTE:
 7841 0000 00000000 		.space	4
 7842              		.section	.bss.IR_Code,"aw",%nobits
 7845              	IR_Code:
 7846 0000 00       		.space	1
 7847              		.section	.bss.IR_END_Flg,"aw",%nobits
 7850              	IR_END_Flg:
 7851 0000 00       		.space	1
 7852              		.section	.bss.IR_IRQFlg,"aw",%nobits
 7855              	IR_IRQFlg:
 7856 0000 00       		.space	1
 7857              		.section	.bss.IR_IRQ_Index,"aw",%nobits
 7860              	IR_IRQ_Index:
 7861 0000 00       		.space	1
 7862              		.section	.bss.IR_PlusTimeVal,"aw",%nobits
 7863              		.align	1
 7866              	IR_PlusTimeVal:
 7867 0000 0000     		.space	2
 7868              		.section	.bss.IR_ShiftCount,"aw",%nobits
 7871              	IR_ShiftCount:
 7872 0000 00       		.space	1
 7873              		.section	.bss.IR_StartFlg,"aw",%nobits
ARM GAS  /tmp/ccUr6nXF.s 			page 242


 7876              	IR_StartFlg:
 7877 0000 00       		.space	1
 7878              		.section	.bss.LightSensor_ADC,"aw",%nobits
 7879              		.align	1
 7882              	LightSensor_ADC:
 7883 0000 0000     		.space	2
 7884              		.section	.bss.OSDSecCount,"aw",%nobits
 7885              		.set	.LANCHOR8,. + 0
 7888              	OSDSecCount:
 7889 0000 00       		.space	1
 7890              		.section	.bss.OSD_MIRROR,"aw",%nobits
 7891              		.align	2
 7892              		.set	.LANCHOR14,. + 0
 7895              	OSD_MIRROR:
 7896 0000 00000000 		.space	4
 7897              		.section	.bss.OSD_SPEAKER,"aw",%nobits
 7898              		.align	2
 7899              		.set	.LANCHOR15,. + 0
 7902              	OSD_SPEAKER:
 7903 0000 00000000 		.space	4
 7904              		.section	.bss.OSD_Show_Flg,"aw",%nobits
 7905              		.align	2
 7906              		.set	.LANCHOR5,. + 0
 7909              	OSD_Show_Flg:
 7910 0000 00000000 		.space	4
 7911              		.section	.bss.PreIR_Code,"aw",%nobits
 7914              	PreIR_Code:
 7915 0000 00       		.space	1
 7916              		.section	.bss.PreIR_IRQ_Index,"aw",%nobits
 7919              	PreIR_IRQ_Index:
 7920 0000 00       		.space	1
 7921              		.section	.bss.Rx2_data,"aw",%nobits
 7922              		.align	2
 7923              		.set	.LANCHOR23,. + 0
 7926              	Rx2_data:
 7927 0000 0000     		.space	2
 7928              		.section	.bss.RxBufIndex,"aw",%nobits
 7929              		.align	2
 7930              		.set	.LANCHOR12,. + 0
 7933              	RxBufIndex:
 7934 0000 00000000 		.space	4
 7935              		.section	.bss.Rx_data,"aw",%nobits
 7936              		.align	2
 7937              		.set	.LANCHOR22,. + 0
 7940              	Rx_data:
 7941 0000 0000     		.space	2
 7942              		.section	.bss.Rx_indx,"aw",%nobits
 7943              		.align	2
 7946              	Rx_indx:
 7947 0000 00000000 		.space	4
 7948              		.section	.bss.RxiCount,"aw",%nobits
 7949              		.align	2
 7952              	RxiCount:
 7953 0000 00000000 		.space	4
 7954              		.section	.bss.SelectInputMode,"aw",%nobits
 7955              		.set	.LANCHOR10,. + 0
 7958              	SelectInputMode:
ARM GAS  /tmp/ccUr6nXF.s 			page 243


 7959 0000 00       		.space	1
 7960              		.section	.bss.Tim1_count,"aw",%nobits
 7961              		.align	2
 7962              		.set	.LANCHOR6,. + 0
 7965              	Tim1_count:
 7966 0000 00000000 		.space	4
 7967              		.section	.bss.Transfer_cplt,"aw",%nobits
 7968              		.set	.LANCHOR11,. + 0
 7971              	Transfer_cplt:
 7972 0000 00       		.space	1
 7973              		.section	.bss.TxCount,"aw",%nobits
 7974              		.set	.LANCHOR24,. + 0
 7977              	TxCount:
 7978 0000 00       		.space	1
 7979              		.section	.bss.TxiCount,"aw",%nobits
 7980              		.align	2
 7983              	TxiCount:
 7984 0000 00000000 		.space	4
 7985              		.section	.bss.bOldSignal,"aw",%nobits
 7986              		.align	2
 7987              		.set	.LANCHOR3,. + 0
 7990              	bOldSignal:
 7991 0000 00000000 		.space	4
 7992              		.section	.bss.bSignal,"aw",%nobits
 7993              		.align	2
 7994              		.set	.LANCHOR2,. + 0
 7997              	bSignal:
 7998 0000 00000000 		.space	4
 7999              		.section	.bss.gAudioSampleFreq,"aw",%nobits
 8000              		.align	2
 8001              		.set	.LANCHOR1,. + 0
 8004              	gAudioSampleFreq:
 8005 0000 00000000 		.space	4
 8006              		.section	.bss.gMode0LoopCount,"aw",%nobits
 8007              		.align	1
 8008              		.set	.LANCHOR25,. + 0
 8011              	gMode0LoopCount:
 8012 0000 0000     		.space	2
 8013              		.section	.bss.gMode0LoopFlg,"aw",%nobits
 8014              		.set	.LANCHOR27,. + 0
 8017              	gMode0LoopFlg:
 8018 0000 00       		.space	1
 8019              		.section	.bss.gMode0LoopSecCount,"aw",%nobits
 8020              		.set	.LANCHOR28,. + 0
 8023              	gMode0LoopSecCount:
 8024 0000 00       		.space	1
 8025              		.section	.bss.gRxbuf,"aw",%nobits
 8026              		.align	2
 8027              		.set	.LANCHOR13,. + 0
 8030              	gRxbuf:
 8031 0000 00000000 		.space	50
 8031      00000000 
 8031      00000000 
 8031      00000000 
 8031      00000000 
 8032              		.section	.bss.gbAUDO_INDEX,"aw",%nobits
 8033              		.set	.LANCHOR0,. + 0
ARM GAS  /tmp/ccUr6nXF.s 			page 244


 8036              	gbAUDO_INDEX:
 8037 0000 00       		.space	1
 8038              		.section	.bss.half_scaler,"aw",%nobits
 8041              	half_scaler:
 8042 0000 00       		.space	1
 8043              		.section	.bss.keytic,"aw",%nobits
 8046              	keytic:
 8047 0000 00       		.space	1
 8048              		.section	.bss.tim3count,"aw",%nobits
 8049              		.align	2
 8050              		.set	.LANCHOR21,. + 0
 8053              	tim3count:
 8054 0000 00000000 		.space	4
 8055              		.section	.bss.tptic,"aw",%nobits
 8058              	tptic:
 8059 0000 00       		.space	1
 8060              		.section	.bss.u16Vendor,"aw",%nobits
 8061              		.align	1
 8064              	u16Vendor:
 8065 0000 0000     		.space	2
 8066              		.section	.bss.u8IRCheckcode,"aw",%nobits
 8069              	u8IRCheckcode:
 8070 0000 00       		.space	1
 8071              		.section	.bss.u8IRcode,"aw",%nobits
 8074              	u8IRcode:
 8075 0000 00       		.space	1
 8076              		.section	.bss.u8PowerFlg,"aw",%nobits
 8079              	u8PowerFlg:
 8080 0000 00       		.space	1
 8081              		.section	.data.BOOT_ISSUE,"aw",%progbits
 8084              	BOOT_ISSUE:
 8085 0000 01       		.byte	1
 8086              		.section	.data.OSDPreSecCount,"aw",%progbits
 8087              		.align	2
 8088              		.set	.LANCHOR26,. + 0
 8091              	OSDPreSecCount:
 8092 0000 FFFFFFFF 		.word	-1
 8093              		.section	.data.OSDStateFlg,"aw",%progbits
 8094              		.set	.LANCHOR7,. + 0
 8097              	OSDStateFlg:
 8098 0000 01       		.byte	1
 8099              		.section	.data.PWMLevel,"aw",%progbits
 8100              		.set	.LANCHOR18,. + 0
 8103              	PWMLevel:
 8104 0000 80       		.byte	-128
 8105              		.section	.data.PowerFlag,"aw",%progbits
 8106              		.set	.LANCHOR20,. + 0
 8109              	PowerFlag:
 8110 0000 01       		.byte	1
 8111              		.section	.data.PrebVXIS_InputMode,"aw",%progbits
 8112              		.align	2
 8113              		.set	.LANCHOR9,. + 0
 8116              	PrebVXIS_InputMode:
 8117 0000 FA       		.byte	-6
 8118 0001 FA       		.byte	-6
 8119 0002 FA       		.byte	-6
 8120 0003 FA       		.byte	-6
ARM GAS  /tmp/ccUr6nXF.s 			page 245


 8121              		.section	.data.VS4210_ADDR,"aw",%progbits
 8124              	VS4210_ADDR:
 8125 0000 40       		.byte	64
 8126              		.section	.data.VS8812_ADDR,"aw",%progbits
 8129              	VS8812_ADDR:
 8130 0000 12       		.byte	18
 8131              		.section	.data.gMode0LoopSecCmpVal,"aw",%progbits
 8132              		.set	.LANCHOR29,. + 0
 8135              	gMode0LoopSecCmpVal:
 8136 0000 0A       		.byte	10
 8137              		.section	.data.gRxLoopFlg,"aw",%progbits
 8140              	gRxLoopFlg:
 8141 0000 01       		.byte	1
 8142              		.section	.rodata.GetRS232_CMD.str1.4,"aMS",%progbits,1
 8143              		.align	2
 8144              	.LC4:
 8145 0000 52784275 		.ascii	"RxBufIndex=%d,str=%s\015\012\000"
 8145      66496E64 
 8145      65783D25 
 8145      642C7374 
 8145      723D2573 
 8146 0017 00       		.space	1
 8147              	.LC5:
 8148 0018 49724E75 		.ascii	"IrNum=0x%02x\015\012\000"
 8148      6D3D3078 
 8148      25303278 
 8148      0D0A00
 8149              		.section	.rodata.HDMI_VideoModeDetect.str1.4,"aMS",%progbits,1
 8150              		.align	2
 8151              	.LC1:
 8152 0000 5372632F 		.ascii	"Src/main.c\000"
 8152      6D61696E 
 8152      2E6300
 8153 000b 00       		.space	1
 8154              	.LC2:
 8155 000c 25732C25 		.ascii	"%s,%s,%d:##ch%d, VS4210_Rx_NoSignal\015\012\000"
 8155      732C2564 
 8155      3A232363 
 8155      6825642C 
 8155      20565334 
 8156 0032 0000     		.space	2
 8157              	.LC3:
 8158 0034 25732C25 		.ascii	"%s,%s,%d:ch%d, InputMode=%d \015\012\000"
 8158      732C2564 
 8158      3A636825 
 8158      642C2049 
 8158      6E707574 
 8159              		.section	.rodata.HS_Select_Win.str1.4,"aMS",%progbits,1
 8160              		.align	2
 8161              	.LC37:
 8162 0000 53656C65 		.ascii	"Selected window 0\015\000"
 8162      63746564 
 8162      2077696E 
 8162      646F7720 
 8162      300D00
 8163 0013 00       		.space	1
 8164              	.LC38:
ARM GAS  /tmp/ccUr6nXF.s 			page 246


 8165 0014 53656C65 		.ascii	"Selected window 1\015\000"
 8165      63746564 
 8165      2077696E 
 8165      646F7720 
 8165      310D00
 8166 0027 00       		.space	1
 8167              	.LC39:
 8168 0028 283D3129 		.ascii	"(=1)\000"
 8168      00
 8169 002d 000000   		.space	3
 8170              	.LC40:
 8171 0030 283D3229 		.ascii	"(=2)\000"
 8171      00
 8172              		.section	.rodata.SET_AHD_MDOE.str1.4,"aMS",%progbits,1
 8173              		.align	2
 8174              	.LC36:
 8175 0000 0D0A5345 		.ascii	"\015\012SET_AHD_MDOE...\000"
 8175      545F4148 
 8175      445F4D44 
 8175      4F452E2E 
 8175      2E00
 8176              		.section	.rodata.SET_Audio_Mute.str1.4,"aMS",%progbits,1
 8177              		.align	2
 8178              	.LC0:
 8179 0000 282A5345 		.ascii	"(*SET_Audio_Mute=%d)\000"
 8179      545F4175 
 8179      64696F5F 
 8179      4D757465 
 8179      3D256429 
 8180              		.section	.rodata.SET_VS4210_1280_720_out.str1.4,"aMS",%progbits,1
 8181              		.align	2
 8182              	.LC35:
 8183 0000 0D0A5345 		.ascii	"\015\012SET_VS4210_1280_720_out\000"
 8183      545F5653 
 8183      34323130 
 8183      5F313238 
 8183      305F3732 
 8184              		.section	.rodata.SET_VS4210_720_480_out.str1.4,"aMS",%progbits,1
 8185              		.align	2
 8186              	.LC34:
 8187 0000 0D0A5345 		.ascii	"\015\012SET_VS4210_720_480_out \000"
 8187      545F5653 
 8187      34323130 
 8187      5F373230 
 8187      5F343830 
 8188              		.section	.rodata.TP_bt1120_1080P_1080P_mode0_w0.str1.4,"aMS",%progbits,1
 8189              		.align	2
 8190              	.LC30:
 8191 0000 0D0A4C6F 		.ascii	"\015\012Loading VS4210 AHD table 1080P... \000"
 8191      6164696E 
 8191      67205653 
 8191      34323130 
 8191      20414844 
 8192              		.section	.rodata.TP_bt1120_720P_1080P_mode0_w0.str1.4,"aMS",%progbits,1
 8193              		.align	2
 8194              	.LC31:
 8195 0000 0D0A4C6F 		.ascii	"\015\012Loading VS4210 AHD table 720P... \000"
ARM GAS  /tmp/ccUr6nXF.s 			page 247


 8195      6164696E 
 8195      67205653 
 8195      34323130 
 8195      20414844 
 8196              		.section	.rodata.TP_bt1120_NTSC_1080P_mode0_w0.str1.4,"aMS",%progbits,1
 8197              		.align	2
 8198              	.LC32:
 8199 0000 0D0A4C6F 		.ascii	"\015\012Loading VS4210 AHD table NTSC... \000"
 8199      6164696E 
 8199      67205653 
 8199      34323130 
 8199      20414844 
 8200              		.section	.rodata.TP_bt1120_PAL_1080P_mode0_w0.str1.4,"aMS",%progbits,1
 8201              		.align	2
 8202              	.LC33:
 8203 0000 0D0A4C6F 		.ascii	"\015\012Loading VS4210 AHD table PAL... \000"
 8203      6164696E 
 8203      67205653 
 8203      34323130 
 8203      20414844 
 8204              		.section	.rodata.WaitPowerOn.str1.4,"aMS",%progbits,1
 8205              		.align	2
 8206              	.LC28:
 8207 0000 0D0A2850 		.ascii	"\015\012(Power off..)\000"
 8207      6F776572 
 8207      206F6666 
 8207      2E2E2900 
 8208              	.LC29:
 8209 0010 0D0A2850 		.ascii	"\015\012(Power ON..)\000"
 8209      6F776572 
 8209      204F4E2E 
 8209      2E2900
 8210              		.section	.rodata.__FUNCTION__.9355,"a",%progbits
 8211              		.align	2
 8212              		.set	.LANCHOR4,. + 0
 8215              	__FUNCTION__.9355:
 8216 0000 48444D49 		.ascii	"HDMI_VideoModeDetect\000"
 8216      5F566964 
 8216      656F4D6F 
 8216      64654465 
 8216      74656374 
 8217              		.section	.rodata.__FUNCTION__.9402,"a",%progbits
 8218              		.align	2
 8219              		.set	.LANCHOR32,. + 0
 8222              	__FUNCTION__.9402:
 8223 0000 6D61696E 		.ascii	"main\000"
 8223      00
 8224              		.section	.rodata.__FUNCTION__.9413,"a",%progbits
 8225              		.align	2
 8226              		.set	.LANCHOR30,. + 0
 8229              	__FUNCTION__.9413:
 8230 0000 6D61696E 		.ascii	"main_loop\000"
 8230      5F6C6F6F 
 8230      7000
 8231              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 8232              		.align	2
 8233              	.LC43:
ARM GAS  /tmp/ccUr6nXF.s 			page 248


 8234 0000 25732C25 		.ascii	"%s,%s,%d:Init HDMI RX,Chip(%d)....\015\012\000"
 8234      732C2564 
 8234      3A496E69 
 8234      74204844 
 8234      4D492052 
 8235 0025 000000   		.space	3
 8236              	.LC44:
 8237 0028 25732C25 		.ascii	"%s,%s,%d:IT66021 chip num=%d , 02reg=0x%02x\015\012"
 8237      732C2564 
 8237      3A495436 
 8237      36303231 
 8237      20636869 
 8238 0055 00       		.ascii	"\000"
 8239 0056 0000     		.space	2
 8240              	.LC45:
 8241 0058 25732C25 		.ascii	"%s,%s,%d:VS4210 chip ID = 0x%02x\015\012\000"
 8241      732C2564 
 8241      3A565334 
 8241      32313020 
 8241      63686970 
 8242 007b 00       		.space	1
 8243              	.LC46:
 8244 007c 25732C25 		.ascii	"%s,%s,%d:VS4210 Init. (Startting...)\015\012\000"
 8244      732C2564 
 8244      3A565334 
 8244      32313020 
 8244      496E6974 
 8245 00a3 00       		.space	1
 8246              	.LC47:
 8247 00a4 0D0A4D61 		.ascii	"\015\012Main Loop...\000"
 8247      696E204C 
 8247      6F6F702E 
 8247      2E2E00
 8248              		.section	.rodata.main_init.str1.4,"aMS",%progbits,1
 8249              		.align	2
 8250              	.LC23:
 8251 0000 0D0A5072 		.ascii	"\015\012Prev.FW:%04x\015\012\000"
 8251      65762E46 
 8251      573A2530 
 8251      34780D0A 
 8251      00
 8252 0011 000000   		.space	3
 8253              	.LC24:
 8254 0014 0D0A4375 		.ascii	"\015\012Curr.FW:%04x\000"
 8254      72722E46 
 8254      573A2530 
 8254      347800
 8255 0023 00       		.space	1
 8256              	.LC25:
 8257 0024 0D0A5B4D 		.ascii	"\015\012[MSG]main_init()=> rev != FWVER & call Clea"
 8257      53475D6D 
 8257      61696E5F 
 8257      696E6974 
 8257      28293D3E 
 8258 0051 72426173 		.ascii	"rBasicEE()\015\012\000"
 8258      69634545 
 8258      28290D0A 
ARM GAS  /tmp/ccUr6nXF.s 			page 249


 8258      00
 8259 005e 0000     		.space	2
 8260              	.LC26:
 8261 0060 0D0A4361 		.ascii	"\015\012Cannot access EEPROM!!!!\000"
 8261      6E6E6F74 
 8261      20616363 
 8261      65737320 
 8261      45455052 
 8262 007b 00       		.space	1
 8263              	.LC27:
 8264 007c 0D0A4E6F 		.ascii	"\015\012No initialize\000"
 8264      20696E69 
 8264      7469616C 
 8264      697A6500 
 8265              		.section	.rodata.main_loop.str1.4,"aMS",%progbits,1
 8266              		.align	2
 8267              	.LC41:
 8268 0000 25732C25 		.ascii	"%s,%s,%d:LOOP CH=%d,SMP Sec=%d\015\012\000"
 8268      732C2564 
 8268      3A4C4F4F 
 8268      50204348 
 8268      3D25642C 
 8269 0021 000000   		.space	3
 8270              	.LC42:
 8271 0024 25732C25 		.ascii	"%s,%s,%d:Loop CH=%d,SecCount=%d\015\012\000"
 8271      732C2564 
 8271      3A4C6F6F 
 8271      70204348 
 8271      3D25642C 
 8272              		.section	.rodata.setloopoutmode.str1.4,"aMS",%progbits,1
 8273              		.align	2
 8274              	.LC6:
 8275 0000 56533432 		.ascii	"VS4210_MODE0_w0\015\000"
 8275      31305F4D 
 8275      4F444530 
 8275      5F77300D 
 8275      00
 8276 0011 000000   		.space	3
 8277              	.LC7:
 8278 0014 56533432 		.ascii	"VS4210_MODE0_w1\015\000"
 8278      31305F4D 
 8278      4F444530 
 8278      5F77310D 
 8278      00
 8279 0025 000000   		.space	3
 8280              	.LC8:
 8281 0028 56533432 		.ascii	"VS4210_MODE0_w2\015\000"
 8281      31305F4D 
 8281      4F444530 
 8281      5F77320D 
 8281      00
 8282 0039 000000   		.space	3
 8283              	.LC9:
 8284 003c 56533432 		.ascii	"VS4210_MODE0_w3\015\000"
 8284      31305F4D 
 8284      4F444530 
 8284      5F77330D 
ARM GAS  /tmp/ccUr6nXF.s 			page 250


 8284      00
 8285 004d 000000   		.space	3
 8286              	.LC10:
 8287 0050 56533432 		.ascii	"VS4210_MODE1\015\000"
 8287      31305F4D 
 8287      4F444531 
 8287      0D00
 8288 005e 0000     		.space	2
 8289              	.LC11:
 8290 0060 56533432 		.ascii	"VS4210_MODE2\015\000"
 8290      31305F4D 
 8290      4F444532 
 8290      0D00
 8291 006e 0000     		.space	2
 8292              	.LC12:
 8293 0070 56533432 		.ascii	"VS4210_MODE12 ch1 ch2\015\000"
 8293      31305F4D 
 8293      4F444531 
 8293      32206368 
 8293      31206368 
 8294 0087 00       		.space	1
 8295              	.LC13:
 8296 0088 56533432 		.ascii	"VS4210_MODE12 ch1 ch4\015\000"
 8296      31305F4D 
 8296      4F444531 
 8296      32206368 
 8296      31206368 
 8297 009f 00       		.space	1
 8298              	.LC14:
 8299 00a0 56533432 		.ascii	"VS4210_MODE12 ch4 ch2\015\000"
 8299      31305F4D 
 8299      4F444531 
 8299      32206368 
 8299      34206368 
 8300 00b7 00       		.space	1
 8301              	.LC15:
 8302 00b8 56533432 		.ascii	"VS4210_MODE12 ch4 ch3\015\000"
 8302      31305F4D 
 8302      4F444531 
 8302      32206368 
 8302      34206368 
 8303 00cf 00       		.space	1
 8304              	.LC16:
 8305 00d0 56533432 		.ascii	"VS4210_MODE12 ch2 ch1\015\000"
 8305      31305F4D 
 8305      4F444531 
 8305      32206368 
 8305      32206368 
 8306 00e7 00       		.space	1
 8307              	.LC17:
 8308 00e8 56533432 		.ascii	"VS4210_MODE12 ch2 ch3\015\000"
 8308      31305F4D 
 8308      4F444531 
 8308      32206368 
 8308      32206368 
 8309 00ff 00       		.space	1
 8310              	.LC18:
ARM GAS  /tmp/ccUr6nXF.s 			page 251


 8311 0100 56533432 		.ascii	"VS4210_MODE12 ch2 ch4\015\000"
 8311      31305F4D 
 8311      4F444531 
 8311      32206368 
 8311      32206368 
 8312 0117 00       		.space	1
 8313              	.LC19:
 8314 0118 56533432 		.ascii	"VS4210_MODE12 ch1 ch3\015\000"
 8314      31305F4D 
 8314      4F444531 
 8314      32206368 
 8314      31206368 
 8315 012f 00       		.space	1
 8316              	.LC20:
 8317 0130 56533432 		.ascii	"VS4210_MODE12 ch3 ch2\015\000"
 8317      31305F4D 
 8317      4F444531 
 8317      32206368 
 8317      33206368 
 8318 0147 00       		.space	1
 8319              	.LC21:
 8320 0148 56533432 		.ascii	"VS4210_MODE12 ch3 ch4\015\000"
 8320      31305F4D 
 8320      4F444531 
 8320      32206368 
 8320      33206368 
 8321 015f 00       		.space	1
 8322              	.LC22:
 8323 0160 56533432 		.ascii	"VS4210_MODE12 ch3 ch1\015\000"
 8323      31305F4D 
 8323      4F444531 
 8323      32206368 
 8323      33206368 
 8324              		.text
 8325              	.Letext0:
 8326              		.file 2 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_
 8327              		.file 3 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 8328              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 8329              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 8330              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 8331              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 8332              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 8333              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 8334              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 8335              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 8336              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 8337              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 8338              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 8339              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 8340              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 8341              		.file 17 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 8342              		.file 18 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 8343              		.file 19 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/st
 8344              		.file 20 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 8345              		.file 21 "VS4210/VXIS_Extern_Define.h"
 8346              		.file 22 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 8347              		.file 23 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/ctype.h"
ARM GAS  /tmp/ccUr6nXF.s 			page 252


 8348              		.file 24 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/errno.h"
 8349              		.file 25 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/unistd.h"
 8350              		.file 26 "sw_i2c/VX_swi2c.h"
 8351              		.file 27 "VS4210/VS4210.h"
 8352              		.file 28 "TP2824/tpinc/TP2802.h"
 8353              		.file 29 "VS4210/audio.h"
 8354              		.file 30 "VS4210/GT911.h"
 8355              		.file 31 "VS4210/VX_OSD_Simple.h"
 8356              		.file 32 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdio.h"
 8357              		.file 33 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 8358              		.file 34 "<built-in>"
 8359              		.file 35 "VS4210/Printf.h"
 8360              		.file 36 "VS4210/ite66121.h"
 8361              		.file 37 "VS4210/monitor.h"
 8362              		.file 38 "VS4210/TOA_Protocol.h"
 8363              		.file 39 "sw_i2c/sw_i2c0.h"
 8364              		.file 40 "sw_i2c/sw_i2c1.h"
 8365              		.file 41 "sw_i2c/sw_i2c2.h"
 8366              		.file 42 "Inc/main.h"
 8367              		.file 43 "VS4210/HDMI_RX_lib.h"
 8368              		.file 44 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/string.h"
 8369              		.file 45 "VS4210/keyremo.h"
 8370              		.file 46 "VS4210/Etc_eep.h"
ARM GAS  /tmp/ccUr6nXF.s 			page 253


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccUr6nXF.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccUr6nXF.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccUr6nXF.s:171    .text.MX_GPIO_Init:00000000000000c8 $d
     /tmp/ccUr6nXF.s:179    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccUr6nXF.s:185    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccUr6nXF.s:256    .text.MX_TIM3_Init:000000000000004c $d
                            *COM*:0000000000000040 htim3
     /tmp/ccUr6nXF.s:262    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccUr6nXF.s:268    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccUr6nXF.s:308    .text.MX_USART1_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart1
     /tmp/ccUr6nXF.s:314    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccUr6nXF.s:320    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccUr6nXF.s:360    .text.MX_USART2_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart2
     /tmp/ccUr6nXF.s:366    .text.HDMI_AudioModeDetect:0000000000000000 $t
     /tmp/ccUr6nXF.s:372    .text.HDMI_AudioModeDetect:0000000000000000 HDMI_AudioModeDetect
     /tmp/ccUr6nXF.s:436    .text.HDMI_AudioModeDetect:0000000000000050 $d
                            *COM*:0000000000000001 gPreAudioSampleFreq
     /tmp/ccUr6nXF.s:444    .text._write:0000000000000000 $t
     /tmp/ccUr6nXF.s:451    .text._write:0000000000000000 _write
     /tmp/ccUr6nXF.s:503    .text._write:0000000000000030 $d
     /tmp/ccUr6nXF.s:508    .text.Audio_Sel:0000000000000000 $t
     /tmp/ccUr6nXF.s:515    .text.Audio_Sel:0000000000000000 Audio_Sel
     /tmp/ccUr6nXF.s:537    .text.Audio_Sel:000000000000000e $d
     /tmp/ccUr6nXF.s:767    .text.Audio_Sel:0000000000000170 $d
     /tmp/ccUr6nXF.s:776    .text.SET_Audio_Mute:0000000000000000 $t
     /tmp/ccUr6nXF.s:783    .text.SET_Audio_Mute:0000000000000000 SET_Audio_Mute
     /tmp/ccUr6nXF.s:827    .text.SET_Audio_Mute:0000000000000028 $d
     /tmp/ccUr6nXF.s:833    .text.HDMI_VideoModeDetect:0000000000000000 $t
     /tmp/ccUr6nXF.s:839    .text.HDMI_VideoModeDetect:0000000000000000 HDMI_VideoModeDetect
     /tmp/ccUr6nXF.s:1157   .text.HDMI_VideoModeDetect:00000000000001c4 $d
                            *COM*:0000000000000004 newInRes
                            *COM*:000000000000000a pVS4210_MutiWindows1
     /tmp/ccUr6nXF.s:1183   .text.InitialTimerEvent:0000000000000000 $t
     /tmp/ccUr6nXF.s:1190   .text.InitialTimerEvent:0000000000000000 InitialTimerEvent
     /tmp/ccUr6nXF.s:1210   .text.GetRS232_CMD:0000000000000000 $t
     /tmp/ccUr6nXF.s:1217   .text.GetRS232_CMD:0000000000000000 GetRS232_CMD
     /tmp/ccUr6nXF.s:1299   .text.GetRS232_CMD:0000000000000060 $d
     /tmp/ccUr6nXF.s:1308   .text.setloopoutmode:0000000000000000 $t
     /tmp/ccUr6nXF.s:1315   .text.setloopoutmode:0000000000000000 setloopoutmode
     /tmp/ccUr6nXF.s:1335   .text.setloopoutmode:000000000000000c $d
     /tmp/ccUr6nXF.s:1355   .text.setloopoutmode:0000000000000034 $t
     /tmp/ccUr6nXF.s:1899   .text.setloopoutmode:00000000000002f0 $d
                            *COM*:000000000000000a pVS4210_JointKind1
                            *COM*:0000000000000001 CAMA_M
                            *COM*:0000000000000004 gabVXIS_Input_mirrorH
                            *COM*:0000000000000001 CAMB_M
                            *COM*:0000000000000001 CAMC_M
                            *COM*:0000000000000001 CAMR_M
     /tmp/ccUr6nXF.s:1925   .text.setloopoutmode:000000000000034c $t
     /tmp/ccUr6nXF.s:2044   .text.setloopoutmode:00000000000003e8 $d
     /tmp/ccUr6nXF.s:2059   .text.main_init:0000000000000000 $t
     /tmp/ccUr6nXF.s:2066   .text.main_init:0000000000000000 main_init
     /tmp/ccUr6nXF.s:2159   .text.main_init:0000000000000074 $d
ARM GAS  /tmp/ccUr6nXF.s 			page 254


                            *COM*:0000000000000001 DebugLevel
     /tmp/ccUr6nXF.s:2169   .text.LCDPowerON:0000000000000000 $t
     /tmp/ccUr6nXF.s:2176   .text.LCDPowerON:0000000000000000 LCDPowerON
     /tmp/ccUr6nXF.s:2189   .text.LCDPowerOFF:0000000000000000 $t
     /tmp/ccUr6nXF.s:2196   .text.LCDPowerOFF:0000000000000000 LCDPowerOFF
     /tmp/ccUr6nXF.s:2209   .text.uComOnChipInitial:0000000000000000 $t
     /tmp/ccUr6nXF.s:2216   .text.uComOnChipInitial:0000000000000000 uComOnChipInitial
     /tmp/ccUr6nXF.s:2251   .text.uComOnChipInitial:0000000000000024 $d
     /tmp/ccUr6nXF.s:2256   .text.user_pwm_setvalue:0000000000000000 $t
     /tmp/ccUr6nXF.s:2263   .text.user_pwm_setvalue:0000000000000000 user_pwm_setvalue
     /tmp/ccUr6nXF.s:2310   .text.user_pwm_setvalue:0000000000000028 $d
                            *COM*:0000000000000040 htim2
     /tmp/ccUr6nXF.s:2315   .text.AdjustAutoDayNight:0000000000000000 $t
     /tmp/ccUr6nXF.s:2322   .text.AdjustAutoDayNight:0000000000000000 AdjustAutoDayNight
     /tmp/ccUr6nXF.s:2445   .text.AdjustAutoDayNight:000000000000008c $d
     /tmp/ccUr6nXF.s:2452   .text.LoadEEPROM:0000000000000000 $t
     /tmp/ccUr6nXF.s:2459   .text.LoadEEPROM:0000000000000000 LoadEEPROM
     /tmp/ccUr6nXF.s:2472   .text.WaitPowerOn:0000000000000000 $t
     /tmp/ccUr6nXF.s:2479   .text.WaitPowerOn:0000000000000000 WaitPowerOn
     /tmp/ccUr6nXF.s:2584   .text.WaitPowerOn:0000000000000084 $d
     /tmp/ccUr6nXF.s:2591   .text.VS4210_FULL88init2:0000000000000000 $t
     /tmp/ccUr6nXF.s:2598   .text.VS4210_FULL88init2:0000000000000000 VS4210_FULL88init2
     /tmp/ccUr6nXF.s:2642   .text.VS4210_FULL88init2:000000000000001c $d
     /tmp/ccUr6nXF.s:2647   .text.TP_bt1120_1080P_1080P_mode0_w0:0000000000000000 $t
     /tmp/ccUr6nXF.s:2654   .text.TP_bt1120_1080P_1080P_mode0_w0:0000000000000000 TP_bt1120_1080P_1080P_mode0_w0
     /tmp/ccUr6nXF.s:2678   .text.TP_bt1120_1080P_1080P_mode0_w0:0000000000000010 $d
     /tmp/ccUr6nXF.s:2684   .text.TP_bt1120_720P_1080P_mode0_w0:0000000000000000 $t
     /tmp/ccUr6nXF.s:2691   .text.TP_bt1120_720P_1080P_mode0_w0:0000000000000000 TP_bt1120_720P_1080P_mode0_w0
     /tmp/ccUr6nXF.s:2720   .text.TP_bt1120_720P_1080P_mode0_w0:0000000000000018 $d
     /tmp/ccUr6nXF.s:2726   .text.TP_bt1120_NTSC_1080P_mode0_w0:0000000000000000 $t
     /tmp/ccUr6nXF.s:2733   .text.TP_bt1120_NTSC_1080P_mode0_w0:0000000000000000 TP_bt1120_NTSC_1080P_mode0_w0
     /tmp/ccUr6nXF.s:2757   .text.TP_bt1120_NTSC_1080P_mode0_w0:0000000000000010 $d
     /tmp/ccUr6nXF.s:2763   .text.TP_bt1120_PAL_1080P_mode0_w0:0000000000000000 $t
     /tmp/ccUr6nXF.s:2770   .text.TP_bt1120_PAL_1080P_mode0_w0:0000000000000000 TP_bt1120_PAL_1080P_mode0_w0
     /tmp/ccUr6nXF.s:2794   .text.TP_bt1120_PAL_1080P_mode0_w0:0000000000000010 $d
     /tmp/ccUr6nXF.s:2800   .text.SET_VS4210_720_480_out:0000000000000000 $t
     /tmp/ccUr6nXF.s:2807   .text.SET_VS4210_720_480_out:0000000000000000 SET_VS4210_720_480_out
     /tmp/ccUr6nXF.s:3456   .text.SET_VS4210_720_480_out:00000000000003fc $d
     /tmp/ccUr6nXF.s:3459   .text.SET_VS4210_720_480_out:0000000000000400 $t
     /tmp/ccUr6nXF.s:4024   .text.SET_VS4210_1280_720_out:0000000000000000 $t
     /tmp/ccUr6nXF.s:4031   .text.SET_VS4210_1280_720_out:0000000000000000 SET_VS4210_1280_720_out
     /tmp/ccUr6nXF.s:4680   .text.SET_VS4210_1280_720_out:00000000000003fc $d
     /tmp/ccUr6nXF.s:4683   .text.SET_VS4210_1280_720_out:0000000000000400 $t
     /tmp/ccUr6nXF.s:5248   .text.SET_AHD_MDOE:0000000000000000 $t
     /tmp/ccUr6nXF.s:5255   .text.SET_AHD_MDOE:0000000000000000 SET_AHD_MDOE
     /tmp/ccUr6nXF.s:5904   .text.SET_AHD_MDOE:00000000000003fc $d
     /tmp/ccUr6nXF.s:5907   .text.SET_AHD_MDOE:0000000000000400 $t
     /tmp/ccUr6nXF.s:6562   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccUr6nXF.s:6569   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccUr6nXF.s:6642   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccUr6nXF.s:6649   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccUr6nXF.s:6728   .text.HAL_TIM_PeriodElapsedCallback:0000000000000064 $d
     /tmp/ccUr6nXF.s:6742   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccUr6nXF.s:6749   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccUr6nXF.s:6835   .text.HAL_UART_RxCpltCallback:0000000000000068 $d
     /tmp/ccUr6nXF.s:6849   .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/ccUr6nXF.s:6856   .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
ARM GAS  /tmp/ccUr6nXF.s 			page 255


     /tmp/ccUr6nXF.s:6870   .text.HS_Select_Win:0000000000000000 $t
     /tmp/ccUr6nXF.s:6877   .text.HS_Select_Win:0000000000000000 HS_Select_Win
     /tmp/ccUr6nXF.s:7074   .text.HS_Select_Win:0000000000000100 $d
     /tmp/ccUr6nXF.s:7089   .text.main_loop:0000000000000000 $t
     /tmp/ccUr6nXF.s:7096   .text.main_loop:0000000000000000 main_loop
     /tmp/ccUr6nXF.s:7375   .text.main_loop:000000000000018c $d
     /tmp/ccUr6nXF.s:7396   .text.main:0000000000000000 $t
     /tmp/ccUr6nXF.s:7403   .text.main:0000000000000000 main
     /tmp/ccUr6nXF.s:7709   .text.main:00000000000001a8 $d
                            *COM*:0000000000000100 ExOsdContent
     /tmp/ccUr6nXF.s:7736   .text.Error_Handler:0000000000000000 $t
     /tmp/ccUr6nXF.s:7743   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccUr6nXF.s:8097   .data.OSDStateFlg:0000000000000000 OSDStateFlg
     /tmp/ccUr6nXF.s:7888   .bss.OSDSecCount:0000000000000000 OSDSecCount
     /tmp/ccUr6nXF.s:8140   .data.gRxLoopFlg:0000000000000000 gRxLoopFlg
     /tmp/ccUr6nXF.s:7909   .bss.OSD_Show_Flg:0000000000000000 OSD_Show_Flg
     /tmp/ccUr6nXF.s:7965   .bss.Tim1_count:0000000000000000 Tim1_count
     /tmp/ccUr6nXF.s:7977   .bss.TxCount:0000000000000000 TxCount
     /tmp/ccUr6nXF.s:7997   .bss.bSignal:0000000000000000 bSignal
     /tmp/ccUr6nXF.s:8135   .data.gMode0LoopSecCmpVal:0000000000000000 gMode0LoopSecCmpVal
     /tmp/ccUr6nXF.s:8023   .bss.gMode0LoopSecCount:0000000000000000 gMode0LoopSecCount
     /tmp/ccUr6nXF.s:8017   .bss.gMode0LoopFlg:0000000000000000 gMode0LoopFlg
     /tmp/ccUr6nXF.s:8011   .bss.gMode0LoopCount:0000000000000000 gMode0LoopCount
     /tmp/ccUr6nXF.s:8036   .bss.gbAUDO_INDEX:0000000000000000 gbAUDO_INDEX
                            *COM*:0000000000000001 gPrebAUDO_INDEX
     /tmp/ccUr6nXF.s:7822   .bss.CheckSelectInputMode:0000000000000000 CheckSelectInputMode
     /tmp/ccUr6nXF.s:7958   .bss.SelectInputMode:0000000000000000 SelectInputMode
     /tmp/ccUr6nXF.s:8091   .data.OSDPreSecCount:0000000000000000 OSDPreSecCount
     /tmp/ccUr6nXF.s:8116   .data.PrebVXIS_InputMode:0000000000000000 PrebVXIS_InputMode
     /tmp/ccUr6nXF.s:7816   .bss.CURRENT_CH:0000000000000000 CURRENT_CH
     /tmp/ccUr6nXF.s:8084   .data.BOOT_ISSUE:0000000000000000 BOOT_ISSUE
     /tmp/ccUr6nXF.s:7902   .bss.OSD_SPEAKER:0000000000000000 OSD_SPEAKER
     /tmp/ccUr6nXF.s:7895   .bss.OSD_MIRROR:0000000000000000 OSD_MIRROR
                            *COM*:0000000000000001 Priority
                            *COM*:0000000000000001 SelectModeType
     /tmp/ccUr6nXF.s:8058   .bss.tptic:0000000000000000 tptic
     /tmp/ccUr6nXF.s:8046   .bss.keytic:0000000000000000 keytic
     /tmp/ccUr6nXF.s:8109   .data.PowerFlag:0000000000000000 PowerFlag
                            *COM*:0000000000000001 TimeStep
     /tmp/ccUr6nXF.s:8103   .data.PWMLevel:0000000000000000 PWMLevel
     /tmp/ccUr6nXF.s:7810   .bss.AutoDayNightDelay:0000000000000000 AutoDayNightDelay
     /tmp/ccUr6nXF.s:7882   .bss.LightSensor_ADC:0000000000000000 LightSensor_ADC
     /tmp/ccUr6nXF.s:7828   .bss.DayNightLevel:0000000000000000 DayNightLevel
     /tmp/ccUr6nXF.s:8041   .bss.half_scaler:0000000000000000 half_scaler
                            *COM*:0000000000000001 ManVidRes
     /tmp/ccUr6nXF.s:8129   .data.VS8812_ADDR:0000000000000000 VS8812_ADDR
     /tmp/ccUr6nXF.s:8124   .data.VS4210_ADDR:0000000000000000 VS4210_ADDR
                            *COM*:0000000000000030 hadc1
     /tmp/ccUr6nXF.s:7811   .bss.AutoDayNightDelay:0000000000000000 $d
     /tmp/ccUr6nXF.s:7817   .bss.CURRENT_CH:0000000000000000 $d
     /tmp/ccUr6nXF.s:7823   .bss.CheckSelectInputMode:0000000000000000 $d
     /tmp/ccUr6nXF.s:7829   .bss.DayNightLevel:0000000000000000 $d
     /tmp/ccUr6nXF.s:7831   .bss.DebugFlg:0000000000000000 $d
     /tmp/ccUr6nXF.s:7834   .bss.DebugFlg:0000000000000000 DebugFlg
     /tmp/ccUr6nXF.s:7837   .bss.IR_4BYTE:0000000000000000 $d
     /tmp/ccUr6nXF.s:7840   .bss.IR_4BYTE:0000000000000000 IR_4BYTE
     /tmp/ccUr6nXF.s:7845   .bss.IR_Code:0000000000000000 IR_Code
ARM GAS  /tmp/ccUr6nXF.s 			page 256


     /tmp/ccUr6nXF.s:7846   .bss.IR_Code:0000000000000000 $d
     /tmp/ccUr6nXF.s:7850   .bss.IR_END_Flg:0000000000000000 IR_END_Flg
     /tmp/ccUr6nXF.s:7851   .bss.IR_END_Flg:0000000000000000 $d
     /tmp/ccUr6nXF.s:7855   .bss.IR_IRQFlg:0000000000000000 IR_IRQFlg
     /tmp/ccUr6nXF.s:7856   .bss.IR_IRQFlg:0000000000000000 $d
     /tmp/ccUr6nXF.s:7860   .bss.IR_IRQ_Index:0000000000000000 IR_IRQ_Index
     /tmp/ccUr6nXF.s:7861   .bss.IR_IRQ_Index:0000000000000000 $d
     /tmp/ccUr6nXF.s:7863   .bss.IR_PlusTimeVal:0000000000000000 $d
     /tmp/ccUr6nXF.s:7866   .bss.IR_PlusTimeVal:0000000000000000 IR_PlusTimeVal
     /tmp/ccUr6nXF.s:7871   .bss.IR_ShiftCount:0000000000000000 IR_ShiftCount
     /tmp/ccUr6nXF.s:7872   .bss.IR_ShiftCount:0000000000000000 $d
     /tmp/ccUr6nXF.s:7876   .bss.IR_StartFlg:0000000000000000 IR_StartFlg
     /tmp/ccUr6nXF.s:7877   .bss.IR_StartFlg:0000000000000000 $d
     /tmp/ccUr6nXF.s:7879   .bss.LightSensor_ADC:0000000000000000 $d
     /tmp/ccUr6nXF.s:7889   .bss.OSDSecCount:0000000000000000 $d
     /tmp/ccUr6nXF.s:7891   .bss.OSD_MIRROR:0000000000000000 $d
     /tmp/ccUr6nXF.s:7898   .bss.OSD_SPEAKER:0000000000000000 $d
     /tmp/ccUr6nXF.s:7905   .bss.OSD_Show_Flg:0000000000000000 $d
     /tmp/ccUr6nXF.s:7914   .bss.PreIR_Code:0000000000000000 PreIR_Code
     /tmp/ccUr6nXF.s:7915   .bss.PreIR_Code:0000000000000000 $d
     /tmp/ccUr6nXF.s:7919   .bss.PreIR_IRQ_Index:0000000000000000 PreIR_IRQ_Index
     /tmp/ccUr6nXF.s:7920   .bss.PreIR_IRQ_Index:0000000000000000 $d
     /tmp/ccUr6nXF.s:7922   .bss.Rx2_data:0000000000000000 $d
     /tmp/ccUr6nXF.s:7926   .bss.Rx2_data:0000000000000000 Rx2_data
     /tmp/ccUr6nXF.s:7929   .bss.RxBufIndex:0000000000000000 $d
     /tmp/ccUr6nXF.s:7933   .bss.RxBufIndex:0000000000000000 RxBufIndex
     /tmp/ccUr6nXF.s:7936   .bss.Rx_data:0000000000000000 $d
     /tmp/ccUr6nXF.s:7940   .bss.Rx_data:0000000000000000 Rx_data
     /tmp/ccUr6nXF.s:7943   .bss.Rx_indx:0000000000000000 $d
     /tmp/ccUr6nXF.s:7946   .bss.Rx_indx:0000000000000000 Rx_indx
     /tmp/ccUr6nXF.s:7949   .bss.RxiCount:0000000000000000 $d
     /tmp/ccUr6nXF.s:7952   .bss.RxiCount:0000000000000000 RxiCount
     /tmp/ccUr6nXF.s:7959   .bss.SelectInputMode:0000000000000000 $d
     /tmp/ccUr6nXF.s:7961   .bss.Tim1_count:0000000000000000 $d
     /tmp/ccUr6nXF.s:7971   .bss.Transfer_cplt:0000000000000000 Transfer_cplt
     /tmp/ccUr6nXF.s:7972   .bss.Transfer_cplt:0000000000000000 $d
     /tmp/ccUr6nXF.s:7978   .bss.TxCount:0000000000000000 $d
     /tmp/ccUr6nXF.s:7980   .bss.TxiCount:0000000000000000 $d
     /tmp/ccUr6nXF.s:7983   .bss.TxiCount:0000000000000000 TxiCount
     /tmp/ccUr6nXF.s:7986   .bss.bOldSignal:0000000000000000 $d
     /tmp/ccUr6nXF.s:7990   .bss.bOldSignal:0000000000000000 bOldSignal
     /tmp/ccUr6nXF.s:7993   .bss.bSignal:0000000000000000 $d
     /tmp/ccUr6nXF.s:8000   .bss.gAudioSampleFreq:0000000000000000 $d
     /tmp/ccUr6nXF.s:8004   .bss.gAudioSampleFreq:0000000000000000 gAudioSampleFreq
     /tmp/ccUr6nXF.s:8007   .bss.gMode0LoopCount:0000000000000000 $d
     /tmp/ccUr6nXF.s:8018   .bss.gMode0LoopFlg:0000000000000000 $d
     /tmp/ccUr6nXF.s:8024   .bss.gMode0LoopSecCount:0000000000000000 $d
     /tmp/ccUr6nXF.s:8026   .bss.gRxbuf:0000000000000000 $d
     /tmp/ccUr6nXF.s:8030   .bss.gRxbuf:0000000000000000 gRxbuf
     /tmp/ccUr6nXF.s:8037   .bss.gbAUDO_INDEX:0000000000000000 $d
     /tmp/ccUr6nXF.s:8042   .bss.half_scaler:0000000000000000 $d
     /tmp/ccUr6nXF.s:8047   .bss.keytic:0000000000000000 $d
     /tmp/ccUr6nXF.s:8049   .bss.tim3count:0000000000000000 $d
     /tmp/ccUr6nXF.s:8053   .bss.tim3count:0000000000000000 tim3count
     /tmp/ccUr6nXF.s:8059   .bss.tptic:0000000000000000 $d
     /tmp/ccUr6nXF.s:8061   .bss.u16Vendor:0000000000000000 $d
     /tmp/ccUr6nXF.s:8064   .bss.u16Vendor:0000000000000000 u16Vendor
ARM GAS  /tmp/ccUr6nXF.s 			page 257


     /tmp/ccUr6nXF.s:8069   .bss.u8IRCheckcode:0000000000000000 u8IRCheckcode
     /tmp/ccUr6nXF.s:8070   .bss.u8IRCheckcode:0000000000000000 $d
     /tmp/ccUr6nXF.s:8074   .bss.u8IRcode:0000000000000000 u8IRcode
     /tmp/ccUr6nXF.s:8075   .bss.u8IRcode:0000000000000000 $d
     /tmp/ccUr6nXF.s:8079   .bss.u8PowerFlg:0000000000000000 u8PowerFlg
     /tmp/ccUr6nXF.s:8080   .bss.u8PowerFlg:0000000000000000 $d
     /tmp/ccUr6nXF.s:8087   .data.OSDPreSecCount:0000000000000000 $d
     /tmp/ccUr6nXF.s:8112   .data.PrebVXIS_InputMode:0000000000000000 $d
     /tmp/ccUr6nXF.s:8143   .rodata.GetRS232_CMD.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8150   .rodata.HDMI_VideoModeDetect.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8160   .rodata.HS_Select_Win.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8173   .rodata.SET_AHD_MDOE.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8177   .rodata.SET_Audio_Mute.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8181   .rodata.SET_VS4210_1280_720_out.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8185   .rodata.SET_VS4210_720_480_out.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8189   .rodata.TP_bt1120_1080P_1080P_mode0_w0.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8193   .rodata.TP_bt1120_720P_1080P_mode0_w0.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8197   .rodata.TP_bt1120_NTSC_1080P_mode0_w0.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8201   .rodata.TP_bt1120_PAL_1080P_mode0_w0.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8205   .rodata.WaitPowerOn.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8211   .rodata.__FUNCTION__.9355:0000000000000000 $d
     /tmp/ccUr6nXF.s:8215   .rodata.__FUNCTION__.9355:0000000000000000 __FUNCTION__.9355
     /tmp/ccUr6nXF.s:8218   .rodata.__FUNCTION__.9402:0000000000000000 $d
     /tmp/ccUr6nXF.s:8222   .rodata.__FUNCTION__.9402:0000000000000000 __FUNCTION__.9402
     /tmp/ccUr6nXF.s:8225   .rodata.__FUNCTION__.9413:0000000000000000 $d
     /tmp/ccUr6nXF.s:8229   .rodata.__FUNCTION__.9413:0000000000000000 __FUNCTION__.9413
     /tmp/ccUr6nXF.s:8232   .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8249   .rodata.main_init.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8266   .rodata.main_loop.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:8273   .rodata.setloopoutmode.str1.4:0000000000000000 $d
     /tmp/ccUr6nXF.s:542    .text.Audio_Sel:0000000000000013 $d
     /tmp/ccUr6nXF.s:542    .text.Audio_Sel:0000000000000014 $t

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
getHDMIRXAudioInfo
HDMI_Tx_SetAudioFs
gHDMI_Index
HAL_UART_Transmit
__errno
Printf
VS4210_Rx_NoSignal
printf
Set_Video_Loss_OSD
GetHDMI_InputMode
VXISI2CWrite
CheckHDMIRX
VS4210_SetInModeOutMode
VS4210_SetInputSizeHV
MCUTimerActiveTimerEvent
gbVXIS_InputMode
PreVState
ARM GAS  /tmp/ccUr6nXF.s 			page 258


VState
gHTotal
gVActive
gHActive
gVTotal
MCUTimerInitialTimerEvent
strtol
puts
VS4210_SetMutiWindows
AudioMute
MCUTimerCancelTimerEvent
AUDIO_SELECT
GetFWRevEE
delay
SaveFWRevEE
ClearBasicEE
HAL_TIM_PWM_ConfigChannel
HAL_TIM_PWM_Start
PowerLED
WriteEEP
TriggerHandler
SysTimerHandler
EQ_Detect
GT9147_Scan
CheckKeyIn
CheckTrigger
VS4210_Addr_88param
VS4210_TP_bt1120_1080P_1080P_mode0_w0_88param
VS4210_TP_bt1120_720P_1080P_mode0_w0_88param
VS4210_TP_bt1120_NTSC_1080P_mode0_w0_88param
VS4210_TP_bt1120_PAL_1080P_mode0_w0_88param
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
tic02
tic03
tic04
g_usTimerCounter
g_bNotifyTimer0Int
HAL_UART_Receive_IT
RS_in
RS_buf
RS2_in
RS2_buf
mode
TP_InputMode
HDMITX_DevLoopProc
OSD_Clear_All
Monitor
RS_ready
TOAReceivePaser
RS2_ready
Get_2824cIrq
msleep
VXISI2CRead
HAL_GPIO_ReadPin
AccessEnable
ARM GAS  /tmp/ccUr6nXF.s 			page 259


HAL_Init
SW_I2C0_Init
SW_I2C1_Init
SW_I2C2_Init
SW_I2C3_Init
InitHDMIRX
HDMIRX_WriteI2C_Byte
HDMIRX_ReadI2C_Byte
VXOSD_UseFont_init
Init_TP280x_RegSet
VXIS_fSetOsdx2
HAL_TIM_Base_Start_IT
UserDefineFont1
