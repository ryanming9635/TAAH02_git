ARM GAS  /tmp/ccuVOPer.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_uart.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.UART_EndTxTransfer,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	UART_EndTxTransfer:
  23              	.LFB109:
  24              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @file    stm32f1xx_hal_uart.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral State and Errors functions
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @verbatim
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                         ##### How to use this driver #####
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) Enable the USARTx interface clock.
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) UART pins configuration:
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure these UART pins (TX as alternate function pull-up, RX as alternate func
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   Tx/Rx parameters.
ARM GAS  /tmp/ccuVOPer.s 			page 2


  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx channel.
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         flow control and Mode(Receiver/Transmitter) in the huart Init structure.
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_UART_Init() API.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the Multi-Processor mode, initialize the UART registers by calling
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_MultiProcessor_Init() API.
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) The specific UART interrupts (Transmission complete interrupt,
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             RXNE interrupt and Error Interrupts) will be managed using the macros
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             and receive process.
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) These APIs (HAL_UART_Init() and HAL_HalfDuplex_Init()) configure also the
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customized
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_MspInit() API.
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ##### Callback registration #####
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ==================================
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Use Function @ref HAL_UART_RegisterCallback() to register a user callback.
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Function @ref HAL_UART_RegisterCallback() allows to register following callbacks:
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and a pointer to the user callback function.
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Use function @ref HAL_UART_UnRegisterCallback() to reset a callback to the default
ARM GAS  /tmp/ccuVOPer.s 			page 3


  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     weak (surcharged) function.
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     @ref HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and the Callback ID.
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This function allows to reset following callbacks:
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     By default, after the @ref HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     examples @ref HAL_UART_TxCpltCallback(), @ref HAL_UART_RxHalfCpltCallback().
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_UART_Init()
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and @ref HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_UART_Init() and @ref HAL_UART_DeInit()
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     using @ref HAL_UART_RegisterCallback() before calling @ref HAL_UART_DeInit()
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     or @ref HAL_UART_Init() function.
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     not defined, the callback registration feature is not available
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         Three operation modes are available within this driver :
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Polling mode IO operation ***
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =================================
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit()
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Interrupt mode IO operation ***
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ===================================
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT()
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT()
 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
ARM GAS  /tmp/ccuVOPer.s 			page 4


 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** DMA mode IO operation ***
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ==============================
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA()
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA()
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** UART HAL driver macros list ***
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =============================================
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_IT_SOURCE: Check whether the specified UART interrupt has occurred or not
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @endverbatim
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) Additionnal remark: If the parity is enabled, then the MSB bit of the data written
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            in the data register is transmitted but is changed by the parity bit.
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the possible UART frame formats are as listed in the following table:
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |   M bit |  PCE bit  |            UART frame                 |
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------------------|---------------------------------------|
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    0      |    | SB | 8 bit data | STB |          |
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    0      |    | SB | 9 bit data | STB |          |
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @attention
ARM GAS  /tmp/ccuVOPer.s 			page 5


 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * All rights reserved.</center></h2>
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * the "License"; You may not use this file except in compliance with the
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * License. You may obtain a copy of the License at:
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                        opensource.org/licenses/BSD-3-Clause
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #include "stm32f1xx_hal.h"
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup STM32F1xx_HAL_Driver
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART UART
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief HAL UART module driver
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Constants
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private macro -------------------------------------------------------------*/
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Functions  UART Private Functions
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart);
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
ARM GAS  /tmp/ccuVOPer.s 			page 6


 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart);
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Exported functions ---------------------------------------------------------*/
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in asynchronous mode.
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) For the asynchronous mode only these parameters can be configured:
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Baud Rate
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Word Length
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Stop Bit
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              please refer to Reference manual for possible UART frame formats.
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Hardware flow control
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Receiver/transmitter modes
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Over Sampling Method
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor configurat
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     procedures (details for the procedures are available in reference manuals
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (RM0008 for STM32F10Xxx MCUs and RM0041 for STM32F100xx MCUs)).
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the UART_InitTypeDef and create the associated handle.
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
ARM GAS  /tmp/ccuVOPer.s 			page 7


 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* The hardware flow control is available only for USART1, USART2 and USART3 */
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
ARM GAS  /tmp/ccuVOPer.s 			page 8


 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the half-duplex mode according to the specified
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
ARM GAS  /tmp/ccuVOPer.s 			page 9


 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the LIN mode according to the specified
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  BreakDetectLength Specifies the LIN break detection length.
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the LIN UART instance */
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Break detection length parameter */
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
ARM GAS  /tmp/ccuVOPer.s 			page 10


 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - CLKEN bits in the USART_CR2 register,
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the Multi-Processor mode according to the specified
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Address USART address
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  WakeUpMethod specifies the USART wake-up method.
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
ARM GAS  /tmp/ccuVOPer.s 			page 11


 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Address & wake up method parameters */
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_ADDRESS(Address));
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In Multi-Processor mode, the following bits must be kept cleared:
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART address node */
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
ARM GAS  /tmp/ccuVOPer.s 			page 12


 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DeInitializes the UART peripheral.
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the Peripheral */
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlock */
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
ARM GAS  /tmp/ccuVOPer.s 			page 13


 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP Init.
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspInit could be implemented in the user file
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP DeInit.
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspDeInit could be implemented in the user file
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Register a User UART Callback
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
ARM GAS  /tmp/ccuVOPer.s 			page 14


 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (pCallback == NULL)
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
ARM GAS  /tmp/ccuVOPer.s 			page 15


 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Return error status */
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
ARM GAS  /tmp/ccuVOPer.s 			page 16


 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak Abort
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak Abort
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
ARM GAS  /tmp/ccuVOPer.s 			page 17


 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Return error status */
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief UART Transmit and Receive functions
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### IO operation functions #####
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and Half duplex data transfers.
ARM GAS  /tmp/ccuVOPer.s 			page 18


 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) There are two modes of transfer:
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            after finishing transfer.
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            or DMA, these API's return the HAL status.
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The end of the data processing will be indicated through the
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            using DMA mode.
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            will be executed respectively at the end of the transmit or receive process
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Blocking mode API's are :
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit()
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive()
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort()
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         Errors are handled as follows :
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
ARM GAS  /tmp/ccuVOPer.s 			page 19


1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() use
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in blocking mode.
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout managment */
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount--;
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         tmp = (uint16_t *) pData;
ARM GAS  /tmp/ccuVOPer.s 			page 20


1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (huart->Init.Parity == UART_PARITY_NONE)
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pData += 2U;
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pData += 1U;
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_TIMEOUT;
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in blocking mode.
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
ARM GAS  /tmp/ccuVOPer.s 			page 21


1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout managment */
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check the remain data to be received */
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount--;
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         tmp = (uint16_t *) pData;
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (huart->Init.Parity == UART_PARITY_NONE)
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pData += 2U;
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pData += 1U;
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (huart->Init.Parity == UART_PARITY_NONE)
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccuVOPer.s 			page 22


1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit data register empty Interrupt */
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
ARM GAS  /tmp/ccuVOPer.s 			page 23


1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode.
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Data Register not empty Interrupt */
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
ARM GAS  /tmp/ccuVOPer.s 			page 24


1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in DMA mode.
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA error callback */
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA abort callback */
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART transmit DMA channel */
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tmp = (uint32_t *)&pData;
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
ARM GAS  /tmp/ccuVOPer.s 			page 25


1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in DMA mode.
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Locked */
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_LOCK(huart);
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA error callback */
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmarx->XferErrorCallback = UART_DMAError;
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA abort callback */
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmarx->XferAbortCallback = NULL;
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the DMA channel */
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tmp = (uint32_t *)&pData;
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
ARM GAS  /tmp/ccuVOPer.s 			page 26


1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the sec
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Process Unlocked */
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in the UART CR3 register */
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Pauses the DMA Transfer.
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
ARM GAS  /tmp/ccuVOPer.s 			page 27


1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Resumes the DMA Transfer.
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Stops the DMA Transfer.
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      */
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
ARM GAS  /tmp/ccuVOPer.s 			page 28


1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
ARM GAS  /tmp/ccuVOPer.s 			page 29


1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState and huart->gState to Ready */
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
ARM GAS  /tmp/ccuVOPer.s 			page 30


1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx transfer counter */
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
ARM GAS  /tmp/ccuVOPer.s 			page 31


1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Rx transfer counter */
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
ARM GAS  /tmp/ccuVOPer.s 			page 32


1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      before any call to DMA Abort functions */
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
ARM GAS  /tmp/ccuVOPer.s 			page 33


1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x01U;
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (AbortCplt == 0x01U)
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset ErrorCode */
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort complete callback */
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
ARM GAS  /tmp/ccuVOPer.s 			page 34


1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Tx transfer counter */
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount = 0x00U;
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->gState to Ready */
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
ARM GAS  /tmp/ccuVOPer.s 			page 35


1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx transfer counter */
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState to Ready */
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** */
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
ARM GAS  /tmp/ccuVOPer.s 			page 36


1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Rx transfer counter */
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount = 0x00U;
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Rx transfer counter */
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART interrupt request.
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t errorflags = 0x00U;
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If no error occurs */
ARM GAS  /tmp/ccuVOPer.s 			page 37


2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (errorflags == RESET)
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART in mode Receiver -------------------------------------------------*/
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       UART_Receive_IT(huart);
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If some errors occur */
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART parity error interrupt occurred ----------------------------------*/
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART noise error interrupt occurred -----------------------------------*/
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART frame error interrupt occurred -----------------------------------*/
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART Over-Run interrupt occurred --------------------------------------*/
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART in mode Receiver -----------------------------------------------*/
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_Receive_IT(huart);
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          consider error as blocking */
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_EndRxTransfer(huart);
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccuVOPer.s 			page 38


2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           if (huart->hdmarx != NULL)
2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
2098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
2099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             {
2100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               /* Call Directly XferAbortCallback function in case of error */
2101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
2102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             }
2103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
2104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           else
2105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
2106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Call user error callback */
2107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /*Call registered error callback*/
2109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             huart->ErrorCallback(huart);
2110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /*Call legacy weak error callback*/
2112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
2113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
2115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
2117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Call user error callback */
2119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /*Call registered error callback*/
2121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCallback(huart);
2122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /*Call legacy weak error callback*/
2124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
2125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Error is notified to user through user error callback */
2132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered error callback*/
2134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback(huart);
2135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak error callback*/
2137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
2138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
2141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
ARM GAS  /tmp/ccuVOPer.s 			page 39


2144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
2145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
2148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_Transmit_IT(huart);
2150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
2151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter end --------------------------------------------*/
2154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
2155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
2157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
2158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Transfer completed callbacks.
2163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
2173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callbacks.
2178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback could be implemented in the user file
2188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Transfer completed callbacks.
2193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
ARM GAS  /tmp/ccuVOPer.s 			page 40


2201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxCpltCallback could be implemented in the user file
2203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callbacks.
2208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback could be implemented in the user file
2218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART error callbacks.
2223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_ErrorCallback could be implemented in the user file
2233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
ARM GAS  /tmp/ccuVOPer.s 			page 41


2258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART control functions
2287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
2288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
2289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
2293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART:
2294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
2295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode.
2296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software
2297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableTransmitter() API to enable the UART transmitter and disables the UART
2298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableReceiver() API to enable the UART receiver and disables the UART trans
2299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
2301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Transmits break characters.
2306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccuVOPer.s 			page 42


2315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
2317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Send break characters */
2321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
2322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enters the UART in mute mode.
2333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
2344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
2348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
2349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Exits the UART mute mode: wake up software.
2360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccuVOPer.s 			page 43


2372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
2375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
2376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART transmitter and disables the UART receiver.
2387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
2394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
2397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
2402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
2405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_TE;
2408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
2411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART receiver and disables the UART transmitter.
2422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
ARM GAS  /tmp/ccuVOPer.s 			page 44


2429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
2432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
2437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
2440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_RE;
2443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
2446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Errors functions
2460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART State and Errors functions
2461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
2462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
2463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                  ##### Peripheral State and Errors functions #####
2465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  [..]
2467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    This subsection provides a set of functions allowing to return the State of
2468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    UART communication process, return Peripheral Errors occurred during communication
2469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    process
2470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral
2471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetError() check in run-time errors that could be occurred during communication.
2472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
2474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Returns the UART state.
2479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL state
2482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
ARM GAS  /tmp/ccuVOPer.s 			page 45


2486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp1 = huart->gState;
2487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp2 = huart->RxState;
2488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
2490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Return the UART error code
2494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART.
2496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval UART Error Code
2497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return huart->ErrorCode;
2501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval none
2519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Init the UART Callback settings */
2524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART transmit process complete callback.
2538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
ARM GAS  /tmp/ccuVOPer.s 			page 46


2543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
2546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
2547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
2549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
2551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
2552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
2553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
2556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Circular mode */
2559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Tx complete callback*/
2563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxCpltCallback(huart);
2564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
2566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
2567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback
2573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
2578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
2583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
2584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
2586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
2587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART receive process complete callback.
2592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
2597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
ARM GAS  /tmp/ccuVOPer.s 			page 47


2600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
2601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0U;
2603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
2606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit
2609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
2610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
2613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
2614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Rx complete callback*/
2617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxCpltCallback(huart);
2618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Rx complete callback*/
2620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
2621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback
2626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
2631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Rx Half complete callback*/
2636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxHalfCpltCallback(huart);
2637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Rx Half complete callback*/
2639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart);
2640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication error callback.
2645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
2650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
2652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
2655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
2656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
ARM GAS  /tmp/ccuVOPer.s 			page 48


2657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
2659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
2660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
2663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
2664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
2665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
2667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
2668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
2671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
2673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
2674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
2676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
2677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART Communication Timeout.
2682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Flag specifies the UART flag to check.
2685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Status The new Flag status (SET or RESET).
2686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Tickstart Tick start value
2687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
2688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
2691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Wait until flag is set */
2693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
2694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check for the Timeout */
2696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
2697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
2699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
2701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
2702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->gState  = HAL_UART_STATE_READY;
2705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
2706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Process Unlocked */
2708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UNLOCK(huart);
2709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
2711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
ARM GAS  /tmp/ccuVOPer.s 			page 49


2714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
2719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
2723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
  25              		.loc 1 2723 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
2724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
  31              		.loc 1 2725 0
  32 0000 0268     		ldr	r2, [r0]
  33 0002 D368     		ldr	r3, [r2, #12]
  34 0004 23F0C003 		bic	r3, r3, #192
  35 0008 D360     		str	r3, [r2, #12]
2726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
2728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
  36              		.loc 1 2728 0
  37 000a 2023     		movs	r3, #32
  38 000c 80F83930 		strb	r3, [r0, #57]
2729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
  39              		.loc 1 2729 0
  40 0010 7047     		bx	lr
  41              		.cfi_endproc
  42              	.LFE109:
  44              		.section	.text.UART_EndRxTransfer,"ax",%progbits
  45              		.align	1
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu softvfp
  51              	UART_EndRxTransfer:
  52              	.LFB110:
2730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
2733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
2737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
  53              		.loc 1 2737 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.LVL1:
2738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
ARM GAS  /tmp/ccuVOPer.s 			page 50


2739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  59              		.loc 1 2739 0
  60 0000 0268     		ldr	r2, [r0]
  61 0002 D368     		ldr	r3, [r2, #12]
  62 0004 23F49073 		bic	r3, r3, #288
  63 0008 D360     		str	r3, [r2, #12]
2740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
  64              		.loc 1 2740 0
  65 000a 0268     		ldr	r2, [r0]
  66 000c 5369     		ldr	r3, [r2, #20]
  67 000e 23F00103 		bic	r3, r3, #1
  68 0012 5361     		str	r3, [r2, #20]
2741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
2743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
  69              		.loc 1 2743 0
  70 0014 2023     		movs	r3, #32
  71 0016 80F83A30 		strb	r3, [r0, #58]
2744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
  72              		.loc 1 2744 0
  73 001a 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE110:
  77              		.section	.text.UART_Transmit_IT,"ax",%progbits
  78              		.align	1
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  82              		.fpu softvfp
  84              	UART_Transmit_IT:
  85              	.LFB116:
2745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
2748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
2757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
2758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
2761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
2762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
2764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
2765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
2770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
ARM GAS  /tmp/ccuVOPer.s 			page 51


2771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
2773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
2782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
2785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
2787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
2789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
2794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
2795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
2797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
2798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
2801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
2804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
2806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
2807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
2809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
2810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
2815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
2816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
2818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
2823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
2827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccuVOPer.s 			page 52


2828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
2830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
2832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
2834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
2839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
2840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
2842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
2843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
2846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
2849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
2851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
2852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
2854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
2855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
2860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
2861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
2862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
2863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
2872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
2874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
2877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
2879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
2880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
2882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
2883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
ARM GAS  /tmp/ccuVOPer.s 			page 53


2885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
2888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
2889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
2890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
2891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
2900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
2902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
2905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
2907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
2908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
2910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
2911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
2916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
2921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
  86              		.loc 1 2921 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91              	.LVL2:
2922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
2923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
2925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
  92              		.loc 1 2925 0
  93 0000 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
  94 0004 DBB2     		uxtb	r3, r3
  95 0006 212B     		cmp	r3, #33
  96 0008 2AD1     		bne	.L8
2926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->Init.WordLength == UART_WORDLENGTH_9B)
  97              		.loc 1 2927 0
  98 000a 8368     		ldr	r3, [r0, #8]
  99 000c B3F5805F 		cmp	r3, #4096
ARM GAS  /tmp/ccuVOPer.s 			page 54


 100 0010 16D0     		beq	.L10
2928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       tmp = (uint16_t *) huart->pTxBuffPtr;
2930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
2931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
2932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->pTxBuffPtr += 2U;
2934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->pTxBuffPtr += 1U;
2938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 101              		.loc 1 2942 0
 102 0012 036A     		ldr	r3, [r0, #32]
 103 0014 5A1C     		adds	r2, r3, #1
 104 0016 0262     		str	r2, [r0, #32]
 105 0018 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 106 001a 0368     		ldr	r3, [r0]
 107 001c 5A60     		str	r2, [r3, #4]
 108              	.L7:
2943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (--huart->TxXferCount == 0U)
 109              		.loc 1 2945 0
 110 001e C38C     		ldrh	r3, [r0, #38]
 111 0020 013B     		subs	r3, r3, #1
 112 0022 9BB2     		uxth	r3, r3
 113 0024 C384     		strh	r3, [r0, #38]	@ movhi
 114 0026 EBB9     		cbnz	r3, .L9
2946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Transmit Complete Interrupt */
2948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 115              		.loc 1 2948 0
 116 0028 0268     		ldr	r2, [r0]
 117 002a D368     		ldr	r3, [r2, #12]
 118 002c 23F08003 		bic	r3, r3, #128
 119 0030 D360     		str	r3, [r2, #12]
2949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
2951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 120              		.loc 1 2951 0
 121 0032 0268     		ldr	r2, [r0]
 122 0034 D368     		ldr	r3, [r2, #12]
 123 0036 43F04003 		orr	r3, r3, #64
 124 003a D360     		str	r3, [r2, #12]
2952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 125              		.loc 1 2953 0
 126 003c 0020     		movs	r0, #0
 127              	.LVL3:
 128 003e 7047     		bx	lr
 129              	.LVL4:
 130              	.L10:
ARM GAS  /tmp/ccuVOPer.s 			page 55


2929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 131              		.loc 1 2929 0
 132 0040 036A     		ldr	r3, [r0, #32]
 133              	.LVL5:
2930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
 134              		.loc 1 2930 0
 135 0042 1B88     		ldrh	r3, [r3]
 136              	.LVL6:
 137 0044 0268     		ldr	r2, [r0]
 138 0046 C3F30803 		ubfx	r3, r3, #0, #9
 139 004a 5360     		str	r3, [r2, #4]
 140              	.LVL7:
2931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 141              		.loc 1 2931 0
 142 004c 0369     		ldr	r3, [r0, #16]
 143 004e 1BB9     		cbnz	r3, .L6
2933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 144              		.loc 1 2933 0
 145 0050 036A     		ldr	r3, [r0, #32]
 146 0052 0233     		adds	r3, r3, #2
 147 0054 0362     		str	r3, [r0, #32]
 148 0056 E2E7     		b	.L7
 149              	.L6:
2937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 150              		.loc 1 2937 0
 151 0058 036A     		ldr	r3, [r0, #32]
 152 005a 0133     		adds	r3, r3, #1
 153 005c 0362     		str	r3, [r0, #32]
 154 005e DEE7     		b	.L7
 155              	.L8:
2954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 156              		.loc 1 2957 0
 157 0060 0220     		movs	r0, #2
 158              	.LVL8:
 159 0062 7047     		bx	lr
 160              	.LVL9:
 161              	.L9:
2953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 162              		.loc 1 2953 0
 163 0064 0020     		movs	r0, #0
 164              	.LVL10:
2958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 165              		.loc 1 2959 0
 166 0066 7047     		bx	lr
 167              		.cfi_endproc
 168              	.LFE116:
 170              		.section	.text.UART_SetConfig,"ax",%progbits
 171              		.align	1
 172              		.syntax unified
 173              		.thumb
 174              		.thumb_func
 175              		.fpu softvfp
 177              	UART_SetConfig:
ARM GAS  /tmp/ccuVOPer.s 			page 56


 178              	.LFB119:
2960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Wraps up transmission in non blocking mode.
2963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
2968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
2970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
2971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
2973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
2977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback(huart);
2978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
2980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
2981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
2984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode
2988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
2993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
2995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
2997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
2998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->Init.WordLength == UART_WORDLENGTH_9B)
3000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       tmp = (uint16_t *) huart->pRxBuffPtr;
3002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
3003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
3005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->pRxBuffPtr += 2U;
3006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
3008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
3010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->pRxBuffPtr += 1U;
3011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
3014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
ARM GAS  /tmp/ccuVOPer.s 			page 57


3016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
3018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
3020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
3022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (--huart->RxXferCount == 0U)
3026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Data Register not empty Interrupt */
3028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
3029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt */
3031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
3032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
3035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
3038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /*Call registered Rx complete callback*/
3041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxCpltCallback(huart);
3042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /*Call legacy weak Rx complete callback*/
3044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
3045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_OK;
3048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
3050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
3054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
3056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Configures the UART peripheral.
3059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
3064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 179              		.loc 1 3064 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              	.LVL11:
 184 0000 38B5     		push	{r3, r4, r5, lr}
 185              	.LCFI0:
 186              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccuVOPer.s 			page 58


 187              		.cfi_offset 3, -16
 188              		.cfi_offset 4, -12
 189              		.cfi_offset 5, -8
 190              		.cfi_offset 14, -4
 191 0002 0446     		mov	r4, r0
3065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg;
3066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t pclk;
3067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
3069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
3072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
3073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
3075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits
3076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      according to huart->Init.StopBits value */
3077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 192              		.loc 1 3077 0
 193 0004 0268     		ldr	r2, [r0]
 194 0006 1369     		ldr	r3, [r2, #16]
 195 0008 23F44053 		bic	r3, r3, #12288
 196 000c C168     		ldr	r1, [r0, #12]
 197 000e 0B43     		orrs	r3, r3, r1
 198 0010 1361     		str	r3, [r2, #16]
3078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
3080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Word Length, Parity and mode:
3081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set the M bits according to huart->Init.WordLength value
3082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set PCE and PS bits according to huart->Init.Parity value
3083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set TE and RE bits according to huart->Init.Mode value
3084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
3085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
3088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
3089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | 
3090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
3091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 199              		.loc 1 3092 0
 200 0012 8368     		ldr	r3, [r0, #8]
 201 0014 0269     		ldr	r2, [r0, #16]
 202 0016 1343     		orrs	r3, r3, r2
 203 0018 4269     		ldr	r2, [r0, #20]
 204 001a 1A43     		orrs	r2, r2, r3
 205              	.LVL12:
3093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
 206              		.loc 1 3093 0
 207 001c 0168     		ldr	r1, [r0]
 208 001e CB68     		ldr	r3, [r1, #12]
 209 0020 23F4B053 		bic	r3, r3, #5632
 210 0024 23F00C03 		bic	r3, r3, #12
 211 0028 1343     		orrs	r3, r3, r2
 212 002a CB60     		str	r3, [r1, #12]
3094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE),
3095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
ARM GAS  /tmp/ccuVOPer.s 			page 59


3096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
3097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
3099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
3100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 213              		.loc 1 3100 0
 214 002c 0268     		ldr	r2, [r0]
 215              	.LVL13:
 216 002e 5369     		ldr	r3, [r2, #20]
 217 0030 23F44073 		bic	r3, r3, #768
 218 0034 8169     		ldr	r1, [r0, #24]
 219 0036 0B43     		orrs	r3, r3, r1
 220 0038 5361     		str	r3, [r2, #20]
3101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Over Sampling */
3104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
3105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
3107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->Instance == USART1)
3108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK2Freq();
3110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
3111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
3113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK1Freq();
3115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
3116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
3121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if(huart->Instance == USART1)
3122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK2Freq();
3124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
3125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
3127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK1Freq();
3129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
3130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration ---------------------*/
3134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->Instance == USART1)
 221              		.loc 1 3134 0
 222 003a 0268     		ldr	r2, [r0]
 223 003c 214B     		ldr	r3, .L16
 224 003e 9A42     		cmp	r2, r3
 225 0040 1FD0     		beq	.L15
3135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK2Freq();
3137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
3138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
ARM GAS  /tmp/ccuVOPer.s 			page 60


3140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK1Freq();
 226              		.loc 1 3141 0
 227 0042 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 228              	.LVL14:
3142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 229              		.loc 1 3142 0
 230 0046 00EB8000 		add	r0, r0, r0, lsl #2
 231              	.LVL15:
 232 004a 00EB8000 		add	r0, r0, r0, lsl #2
 233 004e 6368     		ldr	r3, [r4, #4]
 234 0050 9B00     		lsls	r3, r3, #2
 235 0052 B0FBF3F0 		udiv	r0, r0, r3
 236 0056 1C4D     		ldr	r5, .L16+4
 237 0058 A5FB0032 		umull	r3, r2, r5, r0
 238 005c 5109     		lsrs	r1, r2, #5
 239 005e 6422     		movs	r2, #100
 240 0060 02FB1102 		mls	r2, r2, r1, r0
 241 0064 1301     		lsls	r3, r2, #4
 242 0066 3233     		adds	r3, r3, #50
 243 0068 A5FB0323 		umull	r2, r3, r5, r3
 244 006c 5B09     		lsrs	r3, r3, #5
 245 006e 03F0F002 		and	r2, r3, #240
 246 0072 02EB0112 		add	r2, r2, r1, lsl #4
 247 0076 03F00F03 		and	r3, r3, #15
 248 007a 2168     		ldr	r1, [r4]
 249 007c 1344     		add	r3, r3, r2
 250 007e 8B60     		str	r3, [r1, #8]
 251              	.L11:
3143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
3145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 252              		.loc 1 3145 0
 253 0080 38BD     		pop	{r3, r4, r5, pc}
 254              	.LVL16:
 255              	.L15:
3136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 256              		.loc 1 3136 0
 257 0082 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 258              	.LVL17:
3137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 259              		.loc 1 3137 0
 260 0086 00EB8000 		add	r0, r0, r0, lsl #2
 261              	.LVL18:
 262 008a 00EB8000 		add	r0, r0, r0, lsl #2
 263 008e 6368     		ldr	r3, [r4, #4]
 264 0090 9B00     		lsls	r3, r3, #2
 265 0092 B0FBF3F0 		udiv	r0, r0, r3
 266 0096 0C4D     		ldr	r5, .L16+4
 267 0098 A5FB0032 		umull	r3, r2, r5, r0
 268 009c 5109     		lsrs	r1, r2, #5
 269 009e 6422     		movs	r2, #100
 270 00a0 02FB1102 		mls	r2, r2, r1, r0
 271 00a4 1301     		lsls	r3, r2, #4
 272 00a6 3233     		adds	r3, r3, #50
 273 00a8 A5FB0323 		umull	r2, r3, r5, r3
 274 00ac 5B09     		lsrs	r3, r3, #5
ARM GAS  /tmp/ccuVOPer.s 			page 61


 275 00ae 03F0F002 		and	r2, r3, #240
 276 00b2 02EB0112 		add	r2, r2, r1, lsl #4
 277 00b6 03F00F03 		and	r3, r3, #15
 278 00ba 2168     		ldr	r1, [r4]
 279 00bc 1344     		add	r3, r3, r2
 280 00be 8B60     		str	r3, [r1, #8]
 281 00c0 DEE7     		b	.L11
 282              	.L17:
 283 00c2 00BF     		.align	2
 284              	.L16:
 285 00c4 00380140 		.word	1073821696
 286 00c8 1F85EB51 		.word	1374389535
 287              		.cfi_endproc
 288              	.LFE119:
 290              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 291              		.align	1
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu softvfp
 297              	UART_WaitOnFlagUntilTimeout:
 298              	.LFB108:
2691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Wait until flag is set */
 299              		.loc 1 2691 0
 300              		.cfi_startproc
 301              		@ args = 4, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              	.LVL19:
 304 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 305              	.LCFI1:
 306              		.cfi_def_cfa_offset 24
 307              		.cfi_offset 4, -24
 308              		.cfi_offset 5, -20
 309              		.cfi_offset 6, -16
 310              		.cfi_offset 7, -12
 311              		.cfi_offset 8, -8
 312              		.cfi_offset 14, -4
 313 0004 0546     		mov	r5, r0
 314 0006 0F46     		mov	r7, r1
 315 0008 1646     		mov	r6, r2
 316 000a 9846     		mov	r8, r3
 317 000c 069C     		ldr	r4, [sp, #24]
 318              	.LVL20:
 319              	.L20:
2693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 320              		.loc 1 2693 0
 321 000e 2B68     		ldr	r3, [r5]
 322 0010 1B68     		ldr	r3, [r3]
 323 0012 37EA0303 		bics	r3, r7, r3
 324 0016 0CBF     		ite	eq
 325 0018 0123     		moveq	r3, #1
 326 001a 0023     		movne	r3, #0
 327 001c B342     		cmp	r3, r6
 328 001e 1DD1     		bne	.L25
2696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 329              		.loc 1 2696 0
 330 0020 B4F1FF3F 		cmp	r4, #-1
ARM GAS  /tmp/ccuVOPer.s 			page 62


 331 0024 F3D0     		beq	.L20
2698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 332              		.loc 1 2698 0
 333 0026 2CB1     		cbz	r4, .L21
2698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 334              		.loc 1 2698 0 is_stmt 0 discriminator 1
 335 0028 FFF7FEFF 		bl	HAL_GetTick
 336              	.LVL21:
 337 002c A0EB0800 		sub	r0, r0, r8
 338 0030 A042     		cmp	r0, r4
 339 0032 ECD9     		bls	.L20
 340              	.L21:
2701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 341              		.loc 1 2701 0 is_stmt 1
 342 0034 2A68     		ldr	r2, [r5]
 343 0036 D368     		ldr	r3, [r2, #12]
 344 0038 23F4D073 		bic	r3, r3, #416
 345 003c D360     		str	r3, [r2, #12]
2702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 346              		.loc 1 2702 0
 347 003e 2A68     		ldr	r2, [r5]
 348 0040 5369     		ldr	r3, [r2, #20]
 349 0042 23F00103 		bic	r3, r3, #1
 350 0046 5361     		str	r3, [r2, #20]
2704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 351              		.loc 1 2704 0
 352 0048 2023     		movs	r3, #32
 353 004a 85F83930 		strb	r3, [r5, #57]
2705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 354              		.loc 1 2705 0
 355 004e 85F83A30 		strb	r3, [r5, #58]
2708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 356              		.loc 1 2708 0
 357 0052 0023     		movs	r3, #0
 358 0054 85F83830 		strb	r3, [r5, #56]
2710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 359              		.loc 1 2710 0
 360 0058 0320     		movs	r0, #3
 361 005a 00E0     		b	.L22
 362              	.L25:
2714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 363              		.loc 1 2714 0
 364 005c 0020     		movs	r0, #0
 365              	.L22:
2715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 366              		.loc 1 2715 0
 367 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 368              		.cfi_endproc
 369              	.LFE108:
 371              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 372              		.align	1
 373              		.weak	HAL_UART_MspInit
 374              		.syntax unified
 375              		.thumb
 376              		.thumb_func
 377              		.fpu softvfp
 379              	HAL_UART_MspInit:
ARM GAS  /tmp/ccuVOPer.s 			page 63


 380              	.LFB70:
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 381              		.loc 1 673 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              		@ link register save eliminated.
 386              	.LVL22:
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 387              		.loc 1 679 0
 388 0000 7047     		bx	lr
 389              		.cfi_endproc
 390              	.LFE70:
 392              		.section	.text.HAL_UART_Init,"ax",%progbits
 393              		.align	1
 394              		.global	HAL_UART_Init
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 398              		.fpu softvfp
 400              	HAL_UART_Init:
 401              	.LFB65:
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 402              		.loc 1 315 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406              	.LVL23:
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 407              		.loc 1 317 0
 408 0000 58B3     		cbz	r0, .L30
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 409              		.loc 1 315 0
 410 0002 10B5     		push	{r4, lr}
 411              	.LCFI2:
 412              		.cfi_def_cfa_offset 8
 413              		.cfi_offset 4, -8
 414              		.cfi_offset 14, -4
 415 0004 0446     		mov	r4, r0
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 416              		.loc 1 338 0
 417 0006 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 418 000a 0BB3     		cbz	r3, .L35
 419              	.LVL24:
 420              	.L29:
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 421              		.loc 1 359 0
 422 000c 2423     		movs	r3, #36
 423 000e 84F83930 		strb	r3, [r4, #57]
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 424              		.loc 1 362 0
 425 0012 2268     		ldr	r2, [r4]
 426 0014 D368     		ldr	r3, [r2, #12]
 427 0016 23F40053 		bic	r3, r3, #8192
 428 001a D360     		str	r3, [r2, #12]
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 429              		.loc 1 365 0
ARM GAS  /tmp/ccuVOPer.s 			page 64


 430 001c 2046     		mov	r0, r4
 431 001e FFF7FEFF 		bl	UART_SetConfig
 432              	.LVL25:
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 433              		.loc 1 370 0
 434 0022 2268     		ldr	r2, [r4]
 435 0024 1369     		ldr	r3, [r2, #16]
 436 0026 23F49043 		bic	r3, r3, #18432
 437 002a 1361     		str	r3, [r2, #16]
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 438              		.loc 1 371 0
 439 002c 2268     		ldr	r2, [r4]
 440 002e 5369     		ldr	r3, [r2, #20]
 441 0030 23F02A03 		bic	r3, r3, #42
 442 0034 5361     		str	r3, [r2, #20]
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 443              		.loc 1 374 0
 444 0036 2268     		ldr	r2, [r4]
 445 0038 D368     		ldr	r3, [r2, #12]
 446 003a 43F40053 		orr	r3, r3, #8192
 447 003e D360     		str	r3, [r2, #12]
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 448              		.loc 1 377 0
 449 0040 0020     		movs	r0, #0
 450 0042 E063     		str	r0, [r4, #60]
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 451              		.loc 1 378 0
 452 0044 2023     		movs	r3, #32
 453 0046 84F83930 		strb	r3, [r4, #57]
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 454              		.loc 1 379 0
 455 004a 84F83A30 		strb	r3, [r4, #58]
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 456              		.loc 1 382 0
 457 004e 10BD     		pop	{r4, pc}
 458              	.LVL26:
 459              	.L35:
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 460              		.loc 1 341 0
 461 0050 80F83830 		strb	r3, [r0, #56]
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 462              		.loc 1 355 0
 463 0054 FFF7FEFF 		bl	HAL_UART_MspInit
 464              	.LVL27:
 465 0058 D8E7     		b	.L29
 466              	.LVL28:
 467              	.L30:
 468              	.LCFI3:
 469              		.cfi_def_cfa_offset 0
 470              		.cfi_restore 4
 471              		.cfi_restore 14
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 472              		.loc 1 319 0
 473 005a 0120     		movs	r0, #1
 474              	.LVL29:
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 475              		.loc 1 382 0
ARM GAS  /tmp/ccuVOPer.s 			page 65


 476 005c 7047     		bx	lr
 477              		.cfi_endproc
 478              	.LFE65:
 480              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 481              		.align	1
 482              		.global	HAL_HalfDuplex_Init
 483              		.syntax unified
 484              		.thumb
 485              		.thumb_func
 486              		.fpu softvfp
 488              	HAL_HalfDuplex_Init:
 489              	.LFB66:
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 490              		.loc 1 392 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              	.LVL30:
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 495              		.loc 1 394 0
 496 0000 0028     		cmp	r0, #0
 497 0002 30D0     		beq	.L39
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 498              		.loc 1 392 0
 499 0004 10B5     		push	{r4, lr}
 500              	.LCFI4:
 501              		.cfi_def_cfa_offset 8
 502              		.cfi_offset 4, -8
 503              		.cfi_offset 14, -4
 504 0006 0446     		mov	r4, r0
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 505              		.loc 1 406 0
 506 0008 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 507 000c 33B3     		cbz	r3, .L44
 508              	.LVL31:
 509              	.L38:
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 510              		.loc 1 427 0
 511 000e 2423     		movs	r3, #36
 512 0010 84F83930 		strb	r3, [r4, #57]
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 513              		.loc 1 430 0
 514 0014 2268     		ldr	r2, [r4]
 515 0016 D368     		ldr	r3, [r2, #12]
 516 0018 23F40053 		bic	r3, r3, #8192
 517 001c D360     		str	r3, [r2, #12]
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 518              		.loc 1 433 0
 519 001e 2046     		mov	r0, r4
 520 0020 FFF7FEFF 		bl	UART_SetConfig
 521              	.LVL32:
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 522              		.loc 1 438 0
 523 0024 2268     		ldr	r2, [r4]
 524 0026 1369     		ldr	r3, [r2, #16]
 525 0028 23F49043 		bic	r3, r3, #18432
 526 002c 1361     		str	r3, [r2, #16]
ARM GAS  /tmp/ccuVOPer.s 			page 66


 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 527              		.loc 1 439 0
 528 002e 2268     		ldr	r2, [r4]
 529 0030 5369     		ldr	r3, [r2, #20]
 530 0032 23F02203 		bic	r3, r3, #34
 531 0036 5361     		str	r3, [r2, #20]
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 532              		.loc 1 442 0
 533 0038 2268     		ldr	r2, [r4]
 534 003a 5369     		ldr	r3, [r2, #20]
 535 003c 43F00803 		orr	r3, r3, #8
 536 0040 5361     		str	r3, [r2, #20]
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 537              		.loc 1 445 0
 538 0042 2268     		ldr	r2, [r4]
 539 0044 D368     		ldr	r3, [r2, #12]
 540 0046 43F40053 		orr	r3, r3, #8192
 541 004a D360     		str	r3, [r2, #12]
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 542              		.loc 1 448 0
 543 004c 0020     		movs	r0, #0
 544 004e E063     		str	r0, [r4, #60]
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 545              		.loc 1 449 0
 546 0050 2023     		movs	r3, #32
 547 0052 84F83930 		strb	r3, [r4, #57]
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 548              		.loc 1 450 0
 549 0056 84F83A30 		strb	r3, [r4, #58]
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 550              		.loc 1 453 0
 551 005a 10BD     		pop	{r4, pc}
 552              	.LVL33:
 553              	.L44:
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 554              		.loc 1 409 0
 555 005c 80F83830 		strb	r3, [r0, #56]
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 556              		.loc 1 423 0
 557 0060 FFF7FEFF 		bl	HAL_UART_MspInit
 558              	.LVL34:
 559 0064 D3E7     		b	.L38
 560              	.LVL35:
 561              	.L39:
 562              	.LCFI5:
 563              		.cfi_def_cfa_offset 0
 564              		.cfi_restore 4
 565              		.cfi_restore 14
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 566              		.loc 1 396 0
 567 0066 0120     		movs	r0, #1
 568              	.LVL36:
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 569              		.loc 1 453 0
 570 0068 7047     		bx	lr
 571              		.cfi_endproc
 572              	.LFE66:
ARM GAS  /tmp/ccuVOPer.s 			page 67


 574              		.section	.text.HAL_LIN_Init,"ax",%progbits
 575              		.align	1
 576              		.global	HAL_LIN_Init
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu softvfp
 582              	HAL_LIN_Init:
 583              	.LFB67:
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 584              		.loc 1 467 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              	.LVL37:
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 589              		.loc 1 469 0
 590 0000 0028     		cmp	r0, #0
 591 0002 3BD0     		beq	.L48
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 592              		.loc 1 467 0
 593 0004 38B5     		push	{r3, r4, r5, lr}
 594              	.LCFI6:
 595              		.cfi_def_cfa_offset 16
 596              		.cfi_offset 3, -16
 597              		.cfi_offset 4, -12
 598              		.cfi_offset 5, -8
 599              		.cfi_offset 14, -4
 600 0006 0446     		mov	r4, r0
 601 0008 0D46     		mov	r5, r1
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 602              		.loc 1 484 0
 603 000a 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 604 000e 002B     		cmp	r3, #0
 605 0010 2FD0     		beq	.L53
 606              	.LVL38:
 607              	.L47:
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 608              		.loc 1 505 0
 609 0012 2423     		movs	r3, #36
 610 0014 84F83930 		strb	r3, [r4, #57]
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 611              		.loc 1 508 0
 612 0018 2268     		ldr	r2, [r4]
 613 001a D368     		ldr	r3, [r2, #12]
 614 001c 23F40053 		bic	r3, r3, #8192
 615 0020 D360     		str	r3, [r2, #12]
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 616              		.loc 1 511 0
 617 0022 2046     		mov	r0, r4
 618 0024 FFF7FEFF 		bl	UART_SetConfig
 619              	.LVL39:
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 620              		.loc 1 516 0
 621 0028 2268     		ldr	r2, [r4]
 622 002a 1369     		ldr	r3, [r2, #16]
 623 002c 23F40063 		bic	r3, r3, #2048
ARM GAS  /tmp/ccuVOPer.s 			page 68


 624 0030 1361     		str	r3, [r2, #16]
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 625              		.loc 1 517 0
 626 0032 2268     		ldr	r2, [r4]
 627 0034 5369     		ldr	r3, [r2, #20]
 628 0036 23F02A03 		bic	r3, r3, #42
 629 003a 5361     		str	r3, [r2, #20]
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 630              		.loc 1 520 0
 631 003c 2268     		ldr	r2, [r4]
 632 003e 1369     		ldr	r3, [r2, #16]
 633 0040 43F48043 		orr	r3, r3, #16384
 634 0044 1361     		str	r3, [r2, #16]
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 635              		.loc 1 523 0
 636 0046 2268     		ldr	r2, [r4]
 637 0048 1369     		ldr	r3, [r2, #16]
 638 004a 23F02003 		bic	r3, r3, #32
 639 004e 1361     		str	r3, [r2, #16]
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 640              		.loc 1 524 0
 641 0050 2368     		ldr	r3, [r4]
 642 0052 1969     		ldr	r1, [r3, #16]
 643 0054 0D43     		orrs	r5, r5, r1
 644              	.LVL40:
 645 0056 1D61     		str	r5, [r3, #16]
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 646              		.loc 1 527 0
 647 0058 2268     		ldr	r2, [r4]
 648 005a D368     		ldr	r3, [r2, #12]
 649 005c 43F40053 		orr	r3, r3, #8192
 650 0060 D360     		str	r3, [r2, #12]
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 651              		.loc 1 530 0
 652 0062 0020     		movs	r0, #0
 653 0064 E063     		str	r0, [r4, #60]
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 654              		.loc 1 531 0
 655 0066 2023     		movs	r3, #32
 656 0068 84F83930 		strb	r3, [r4, #57]
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 657              		.loc 1 532 0
 658 006c 84F83A30 		strb	r3, [r4, #58]
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 659              		.loc 1 535 0
 660 0070 38BD     		pop	{r3, r4, r5, pc}
 661              	.LVL41:
 662              	.L53:
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 663              		.loc 1 487 0
 664 0072 80F83830 		strb	r3, [r0, #56]
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 665              		.loc 1 501 0
 666 0076 FFF7FEFF 		bl	HAL_UART_MspInit
 667              	.LVL42:
 668 007a CAE7     		b	.L47
 669              	.LVL43:
ARM GAS  /tmp/ccuVOPer.s 			page 69


 670              	.L48:
 671              	.LCFI7:
 672              		.cfi_def_cfa_offset 0
 673              		.cfi_restore 3
 674              		.cfi_restore 4
 675              		.cfi_restore 5
 676              		.cfi_restore 14
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 677              		.loc 1 471 0
 678 007c 0120     		movs	r0, #1
 679              	.LVL44:
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 680              		.loc 1 535 0
 681 007e 7047     		bx	lr
 682              		.cfi_endproc
 683              	.LFE67:
 685              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 686              		.align	1
 687              		.global	HAL_MultiProcessor_Init
 688              		.syntax unified
 689              		.thumb
 690              		.thumb_func
 691              		.fpu softvfp
 693              	HAL_MultiProcessor_Init:
 694              	.LFB68:
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 695              		.loc 1 550 0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699              	.LVL45:
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 700              		.loc 1 552 0
 701 0000 0028     		cmp	r0, #0
 702 0002 40D0     		beq	.L57
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 703              		.loc 1 550 0
 704 0004 70B5     		push	{r4, r5, r6, lr}
 705              	.LCFI8:
 706              		.cfi_def_cfa_offset 16
 707              		.cfi_offset 4, -16
 708              		.cfi_offset 5, -12
 709              		.cfi_offset 6, -8
 710              		.cfi_offset 14, -4
 711 0006 0446     		mov	r4, r0
 712 0008 1646     		mov	r6, r2
 713 000a 0D46     		mov	r5, r1
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 714              		.loc 1 568 0
 715 000c 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 716 0010 002B     		cmp	r3, #0
 717 0012 33D0     		beq	.L62
 718              	.LVL46:
 719              	.L56:
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 720              		.loc 1 589 0
 721 0014 2423     		movs	r3, #36
ARM GAS  /tmp/ccuVOPer.s 			page 70


 722 0016 84F83930 		strb	r3, [r4, #57]
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 723              		.loc 1 592 0
 724 001a 2268     		ldr	r2, [r4]
 725 001c D368     		ldr	r3, [r2, #12]
 726 001e 23F40053 		bic	r3, r3, #8192
 727 0022 D360     		str	r3, [r2, #12]
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 728              		.loc 1 595 0
 729 0024 2046     		mov	r0, r4
 730 0026 FFF7FEFF 		bl	UART_SetConfig
 731              	.LVL47:
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 732              		.loc 1 600 0
 733 002a 2268     		ldr	r2, [r4]
 734 002c 1369     		ldr	r3, [r2, #16]
 735 002e 23F49043 		bic	r3, r3, #18432
 736 0032 1361     		str	r3, [r2, #16]
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 737              		.loc 1 601 0
 738 0034 2268     		ldr	r2, [r4]
 739 0036 5369     		ldr	r3, [r2, #20]
 740 0038 23F02A03 		bic	r3, r3, #42
 741 003c 5361     		str	r3, [r2, #20]
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 742              		.loc 1 604 0
 743 003e 2268     		ldr	r2, [r4]
 744 0040 1369     		ldr	r3, [r2, #16]
 745 0042 23F00F03 		bic	r3, r3, #15
 746 0046 1361     		str	r3, [r2, #16]
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 747              		.loc 1 605 0
 748 0048 2368     		ldr	r3, [r4]
 749 004a 1969     		ldr	r1, [r3, #16]
 750 004c 0D43     		orrs	r5, r5, r1
 751 004e 1D61     		str	r5, [r3, #16]
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 752              		.loc 1 608 0
 753 0050 2268     		ldr	r2, [r4]
 754 0052 D368     		ldr	r3, [r2, #12]
 755 0054 23F40063 		bic	r3, r3, #2048
 756 0058 D360     		str	r3, [r2, #12]
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 757              		.loc 1 609 0
 758 005a 2168     		ldr	r1, [r4]
 759 005c CB68     		ldr	r3, [r1, #12]
 760 005e 3343     		orrs	r3, r3, r6
 761 0060 CB60     		str	r3, [r1, #12]
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 762              		.loc 1 612 0
 763 0062 2268     		ldr	r2, [r4]
 764 0064 D368     		ldr	r3, [r2, #12]
 765 0066 43F40053 		orr	r3, r3, #8192
 766 006a D360     		str	r3, [r2, #12]
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 767              		.loc 1 615 0
 768 006c 0020     		movs	r0, #0
ARM GAS  /tmp/ccuVOPer.s 			page 71


 769 006e E063     		str	r0, [r4, #60]
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 770              		.loc 1 616 0
 771 0070 2023     		movs	r3, #32
 772 0072 84F83930 		strb	r3, [r4, #57]
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 773              		.loc 1 617 0
 774 0076 84F83A30 		strb	r3, [r4, #58]
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 775              		.loc 1 620 0
 776 007a 70BD     		pop	{r4, r5, r6, pc}
 777              	.LVL48:
 778              	.L62:
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 779              		.loc 1 571 0
 780 007c 80F83830 		strb	r3, [r0, #56]
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 781              		.loc 1 585 0
 782 0080 FFF7FEFF 		bl	HAL_UART_MspInit
 783              	.LVL49:
 784 0084 C6E7     		b	.L56
 785              	.LVL50:
 786              	.L57:
 787              	.LCFI9:
 788              		.cfi_def_cfa_offset 0
 789              		.cfi_restore 4
 790              		.cfi_restore 5
 791              		.cfi_restore 6
 792              		.cfi_restore 14
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 793              		.loc 1 554 0
 794 0086 0120     		movs	r0, #1
 795              	.LVL51:
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 796              		.loc 1 620 0
 797 0088 7047     		bx	lr
 798              		.cfi_endproc
 799              	.LFE68:
 801              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 802              		.align	1
 803              		.weak	HAL_UART_MspDeInit
 804              		.syntax unified
 805              		.thumb
 806              		.thumb_func
 807              		.fpu softvfp
 809              	HAL_UART_MspDeInit:
 810              	.LFB71:
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 811              		.loc 1 688 0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 0
 814              		@ frame_needed = 0, uses_anonymous_args = 0
 815              		@ link register save eliminated.
 816              	.LVL52:
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 817              		.loc 1 694 0
 818 0000 7047     		bx	lr
ARM GAS  /tmp/ccuVOPer.s 			page 72


 819              		.cfi_endproc
 820              	.LFE71:
 822              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 823              		.align	1
 824              		.global	HAL_UART_DeInit
 825              		.syntax unified
 826              		.thumb
 827              		.thumb_func
 828              		.fpu softvfp
 830              	HAL_UART_DeInit:
 831              	.LFB69:
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 832              		.loc 1 629 0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 0
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 836              	.LVL53:
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 837              		.loc 1 631 0
 838 0000 A0B1     		cbz	r0, .L66
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 839              		.loc 1 629 0
 840 0002 10B5     		push	{r4, lr}
 841              	.LCFI10:
 842              		.cfi_def_cfa_offset 8
 843              		.cfi_offset 4, -8
 844              		.cfi_offset 14, -4
 845 0004 0446     		mov	r4, r0
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 846              		.loc 1 639 0
 847 0006 2423     		movs	r3, #36
 848 0008 80F83930 		strb	r3, [r0, #57]
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 849              		.loc 1 642 0
 850 000c 0268     		ldr	r2, [r0]
 851 000e D368     		ldr	r3, [r2, #12]
 852 0010 23F40053 		bic	r3, r3, #8192
 853 0014 D360     		str	r3, [r2, #12]
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 854              		.loc 1 653 0
 855 0016 FFF7FEFF 		bl	HAL_UART_MspDeInit
 856              	.LVL54:
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 857              		.loc 1 656 0
 858 001a 0020     		movs	r0, #0
 859 001c E063     		str	r0, [r4, #60]
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 860              		.loc 1 657 0
 861 001e 84F83900 		strb	r0, [r4, #57]
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 862              		.loc 1 658 0
 863 0022 84F83A00 		strb	r0, [r4, #58]
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 864              		.loc 1 661 0
 865 0026 84F83800 		strb	r0, [r4, #56]
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 866              		.loc 1 664 0
ARM GAS  /tmp/ccuVOPer.s 			page 73


 867 002a 10BD     		pop	{r4, pc}
 868              	.LVL55:
 869              	.L66:
 870              	.LCFI11:
 871              		.cfi_def_cfa_offset 0
 872              		.cfi_restore 4
 873              		.cfi_restore 14
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 874              		.loc 1 633 0
 875 002c 0120     		movs	r0, #1
 876              	.LVL56:
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 877              		.loc 1 664 0
 878 002e 7047     		bx	lr
 879              		.cfi_endproc
 880              	.LFE69:
 882              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 883              		.align	1
 884              		.global	HAL_UART_Transmit
 885              		.syntax unified
 886              		.thumb
 887              		.thumb_func
 888              		.fpu softvfp
 890              	HAL_UART_Transmit:
 891              	.LFB72:
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
 892              		.loc 1 1028 0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 0
 895              		@ frame_needed = 0, uses_anonymous_args = 0
 896              	.LVL57:
 897 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 898              	.LCFI12:
 899              		.cfi_def_cfa_offset 24
 900              		.cfi_offset 4, -24
 901              		.cfi_offset 5, -20
 902              		.cfi_offset 6, -16
 903              		.cfi_offset 7, -12
 904              		.cfi_offset 8, -8
 905              		.cfi_offset 14, -4
 906 0004 82B0     		sub	sp, sp, #8
 907              	.LCFI13:
 908              		.cfi_def_cfa_offset 32
 909 0006 1E46     		mov	r6, r3
 910              	.LVL58:
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 911              		.loc 1 1033 0
 912 0008 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 913              	.LVL59:
 914 000c DBB2     		uxtb	r3, r3
 915 000e 202B     		cmp	r3, #32
 916 0010 55D1     		bne	.L78
 917 0012 0446     		mov	r4, r0
 918 0014 0D46     		mov	r5, r1
 919 0016 9046     		mov	r8, r2
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 920              		.loc 1 1035 0
ARM GAS  /tmp/ccuVOPer.s 			page 74


 921 0018 0029     		cmp	r1, #0
 922 001a 55D0     		beq	.L79
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 923              		.loc 1 1035 0 is_stmt 0 discriminator 1
 924 001c 002A     		cmp	r2, #0
 925 001e 55D0     		beq	.L80
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 926              		.loc 1 1041 0 is_stmt 1
 927 0020 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 928 0024 012B     		cmp	r3, #1
 929 0026 53D0     		beq	.L81
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 930              		.loc 1 1041 0 is_stmt 0 discriminator 2
 931 0028 0123     		movs	r3, #1
 932 002a 80F83830 		strb	r3, [r0, #56]
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 933              		.loc 1 1043 0 is_stmt 1 discriminator 2
 934 002e 0023     		movs	r3, #0
 935 0030 C363     		str	r3, [r0, #60]
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 936              		.loc 1 1044 0 discriminator 2
 937 0032 2123     		movs	r3, #33
 938 0034 80F83930 		strb	r3, [r0, #57]
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 939              		.loc 1 1047 0 discriminator 2
 940 0038 FFF7FEFF 		bl	HAL_GetTick
 941              	.LVL60:
 942 003c 0746     		mov	r7, r0
 943              	.LVL61:
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 944              		.loc 1 1049 0 discriminator 2
 945 003e A4F82480 		strh	r8, [r4, #36]	@ movhi
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
 946              		.loc 1 1050 0 discriminator 2
 947 0042 A4F82680 		strh	r8, [r4, #38]	@ movhi
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 948              		.loc 1 1051 0 discriminator 2
 949 0046 10E0     		b	.L73
 950              	.LVL62:
 951              	.L87:
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 952              		.loc 1 1056 0
 953 0048 0096     		str	r6, [sp]
 954 004a 3B46     		mov	r3, r7
 955 004c 0022     		movs	r2, #0
 956 004e 8021     		movs	r1, #128
 957 0050 2046     		mov	r0, r4
 958 0052 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 959              	.LVL63:
 960 0056 0028     		cmp	r0, #0
 961 0058 3CD1     		bne	.L82
 962              	.LVL64:
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (huart->Init.Parity == UART_PARITY_NONE)
 963              		.loc 1 1061 0
 964 005a 2B88     		ldrh	r3, [r5]
 965 005c 2268     		ldr	r2, [r4]
 966 005e C3F30803 		ubfx	r3, r3, #0, #9
ARM GAS  /tmp/ccuVOPer.s 			page 75


 967 0062 5360     		str	r3, [r2, #4]
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 968              		.loc 1 1062 0
 969 0064 2369     		ldr	r3, [r4, #16]
 970 0066 C3B9     		cbnz	r3, .L75
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 971              		.loc 1 1064 0
 972 0068 0235     		adds	r5, r5, #2
 973              	.LVL65:
 974              	.L73:
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 975              		.loc 1 1051 0
 976 006a E38C     		ldrh	r3, [r4, #38]
 977 006c 9BB2     		uxth	r3, r3
 978 006e B3B1     		cbz	r3, .L86
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 979              		.loc 1 1053 0
 980 0070 E38C     		ldrh	r3, [r4, #38]
 981 0072 013B     		subs	r3, r3, #1
 982 0074 9BB2     		uxth	r3, r3
 983 0076 E384     		strh	r3, [r4, #38]	@ movhi
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 984              		.loc 1 1054 0
 985 0078 A368     		ldr	r3, [r4, #8]
 986 007a B3F5805F 		cmp	r3, #4096
 987 007e E3D0     		beq	.L87
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 988              		.loc 1 1073 0
 989 0080 0096     		str	r6, [sp]
 990 0082 3B46     		mov	r3, r7
 991 0084 0022     		movs	r2, #0
 992 0086 8021     		movs	r1, #128
 993 0088 2046     		mov	r0, r4
 994 008a FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 995              	.LVL66:
 996 008e 18BB     		cbnz	r0, .L83
 997              	.LVL67:
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 998              		.loc 1 1077 0
 999 0090 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 1000 0092 2368     		ldr	r3, [r4]
 1001 0094 5A60     		str	r2, [r3, #4]
 1002 0096 0135     		adds	r5, r5, #1
 1003              	.LVL68:
 1004 0098 E7E7     		b	.L73
 1005              	.LVL69:
 1006              	.L75:
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 1007              		.loc 1 1068 0
 1008 009a 0135     		adds	r5, r5, #1
 1009              	.LVL70:
 1010 009c E5E7     		b	.L73
 1011              	.LVL71:
 1012              	.L86:
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1013              		.loc 1 1081 0
 1014 009e 0096     		str	r6, [sp]
ARM GAS  /tmp/ccuVOPer.s 			page 76


 1015 00a0 3B46     		mov	r3, r7
 1016 00a2 0022     		movs	r2, #0
 1017 00a4 4021     		movs	r1, #64
 1018 00a6 2046     		mov	r0, r4
 1019 00a8 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1020              	.LVL72:
 1021 00ac 0346     		mov	r3, r0
 1022 00ae A8B9     		cbnz	r0, .L84
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1023              		.loc 1 1087 0
 1024 00b0 2022     		movs	r2, #32
 1025 00b2 84F83920 		strb	r2, [r4, #57]
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1026              		.loc 1 1090 0
 1027 00b6 0022     		movs	r2, #0
 1028 00b8 84F83820 		strb	r2, [r4, #56]
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1029              		.loc 1 1092 0
 1030 00bc 00E0     		b	.L72
 1031              	.LVL73:
 1032              	.L78:
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1033              		.loc 1 1096 0
 1034 00be 0223     		movs	r3, #2
 1035              	.LVL74:
 1036              	.L72:
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1037              		.loc 1 1098 0
 1038 00c0 1846     		mov	r0, r3
 1039 00c2 02B0     		add	sp, sp, #8
 1040              	.LCFI14:
 1041              		.cfi_remember_state
 1042              		.cfi_def_cfa_offset 24
 1043              		@ sp needed
 1044 00c4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1045              	.LVL75:
 1046              	.L79:
 1047              	.LCFI15:
 1048              		.cfi_restore_state
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 1049              		.loc 1 1037 0
 1050 00c8 0123     		movs	r3, #1
 1051 00ca F9E7     		b	.L72
 1052              	.L80:
 1053 00cc 0123     		movs	r3, #1
 1054 00ce F7E7     		b	.L72
 1055              	.L81:
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1056              		.loc 1 1041 0
 1057 00d0 0223     		movs	r3, #2
 1058 00d2 F5E7     		b	.L72
 1059              	.LVL76:
 1060              	.L82:
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 1061              		.loc 1 1058 0
 1062 00d4 0323     		movs	r3, #3
 1063 00d6 F3E7     		b	.L72
ARM GAS  /tmp/ccuVOPer.s 			page 77


 1064              	.L83:
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 1065              		.loc 1 1075 0
 1066 00d8 0323     		movs	r3, #3
 1067 00da F1E7     		b	.L72
 1068              	.L84:
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 1069              		.loc 1 1083 0
 1070 00dc 0323     		movs	r3, #3
 1071 00de EFE7     		b	.L72
 1072              		.cfi_endproc
 1073              	.LFE72:
 1075              		.section	.text.HAL_UART_Receive,"ax",%progbits
 1076              		.align	1
 1077              		.global	HAL_UART_Receive
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu softvfp
 1083              	HAL_UART_Receive:
 1084              	.LFB73:
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
 1085              		.loc 1 1113 0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              	.LVL77:
 1090 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1091              	.LCFI16:
 1092              		.cfi_def_cfa_offset 24
 1093              		.cfi_offset 4, -24
 1094              		.cfi_offset 5, -20
 1095              		.cfi_offset 6, -16
 1096              		.cfi_offset 7, -12
 1097              		.cfi_offset 8, -8
 1098              		.cfi_offset 14, -4
 1099 0004 82B0     		sub	sp, sp, #8
 1100              	.LCFI17:
 1101              		.cfi_def_cfa_offset 32
 1102 0006 1E46     		mov	r6, r3
 1103              	.LVL78:
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1104              		.loc 1 1118 0
 1105 0008 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2
 1106              	.LVL79:
 1107 000c DBB2     		uxtb	r3, r3
 1108 000e 202B     		cmp	r3, #32
 1109 0010 5AD1     		bne	.L96
 1110 0012 0446     		mov	r4, r0
 1111 0014 0D46     		mov	r5, r1
 1112 0016 9046     		mov	r8, r2
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1113              		.loc 1 1120 0
 1114 0018 0029     		cmp	r1, #0
 1115 001a 59D0     		beq	.L97
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1116              		.loc 1 1120 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccuVOPer.s 			page 78


 1117 001c 002A     		cmp	r2, #0
 1118 001e 59D0     		beq	.L98
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1119              		.loc 1 1126 0 is_stmt 1
 1120 0020 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1121 0024 012B     		cmp	r3, #1
 1122 0026 57D0     		beq	.L99
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1123              		.loc 1 1126 0 is_stmt 0 discriminator 2
 1124 0028 0123     		movs	r3, #1
 1125 002a 80F83830 		strb	r3, [r0, #56]
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1126              		.loc 1 1128 0 is_stmt 1 discriminator 2
 1127 002e 0023     		movs	r3, #0
 1128 0030 C363     		str	r3, [r0, #60]
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1129              		.loc 1 1129 0 discriminator 2
 1130 0032 2223     		movs	r3, #34
 1131 0034 80F83A30 		strb	r3, [r0, #58]
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1132              		.loc 1 1132 0 discriminator 2
 1133 0038 FFF7FEFF 		bl	HAL_GetTick
 1134              	.LVL80:
 1135 003c 0746     		mov	r7, r0
 1136              	.LVL81:
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 1137              		.loc 1 1134 0 discriminator 2
 1138 003e A4F82C80 		strh	r8, [r4, #44]	@ movhi
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1139              		.loc 1 1135 0 discriminator 2
 1140 0042 A4F82E80 		strh	r8, [r4, #46]	@ movhi
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1141              		.loc 1 1138 0 discriminator 2
 1142 0046 1DE0     		b	.L90
 1143              	.LVL82:
 1144              	.L104:
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 1145              		.loc 1 1143 0
 1146 0048 0096     		str	r6, [sp]
 1147 004a 3B46     		mov	r3, r7
 1148 004c 0022     		movs	r2, #0
 1149 004e 2021     		movs	r1, #32
 1150 0050 2046     		mov	r0, r4
 1151 0052 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1152              	.LVL83:
 1153 0056 0028     		cmp	r0, #0
 1154 0058 40D1     		bne	.L100
 1155              	.LVL84:
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 1156              		.loc 1 1148 0
 1157 005a 2369     		ldr	r3, [r4, #16]
 1158 005c 33B9     		cbnz	r3, .L92
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pData += 2U;
 1159              		.loc 1 1150 0
 1160 005e 2368     		ldr	r3, [r4]
 1161 0060 5B68     		ldr	r3, [r3, #4]
 1162 0062 C3F30803 		ubfx	r3, r3, #0, #9
ARM GAS  /tmp/ccuVOPer.s 			page 79


 1163 0066 25F8023B 		strh	r3, [r5], #2	@ movhi
 1164              	.LVL85:
 1165 006a 0BE0     		b	.L90
 1166              	.LVL86:
 1167              	.L92:
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pData += 1U;
 1168              		.loc 1 1155 0
 1169 006c 2368     		ldr	r3, [r4]
 1170 006e 5B68     		ldr	r3, [r3, #4]
 1171 0070 DBB2     		uxtb	r3, r3
 1172 0072 25F8013B 		strh	r3, [r5], #1	@ movhi
 1173              	.LVL87:
 1174 0076 05E0     		b	.L90
 1175              	.LVL88:
 1176              	.L94:
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 1177              		.loc 1 1172 0
 1178 0078 2368     		ldr	r3, [r4]
 1179 007a 5B68     		ldr	r3, [r3, #4]
 1180              	.LVL89:
 1181 007c 03F07F03 		and	r3, r3, #127
 1182 0080 2B70     		strb	r3, [r5]
 1183 0082 0135     		adds	r5, r5, #1
 1184              	.LVL90:
 1185              	.L90:
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1186              		.loc 1 1138 0
 1187 0084 E38D     		ldrh	r3, [r4, #46]
 1188 0086 9BB2     		uxth	r3, r3
 1189 0088 BBB1     		cbz	r3, .L103
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 1190              		.loc 1 1140 0
 1191 008a E38D     		ldrh	r3, [r4, #46]
 1192 008c 013B     		subs	r3, r3, #1
 1193 008e 9BB2     		uxth	r3, r3
 1194 0090 E385     		strh	r3, [r4, #46]	@ movhi
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 1195              		.loc 1 1141 0
 1196 0092 A368     		ldr	r3, [r4, #8]
 1197 0094 B3F5805F 		cmp	r3, #4096
 1198 0098 D6D0     		beq	.L104
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 1199              		.loc 1 1162 0
 1200 009a 0096     		str	r6, [sp]
 1201 009c 3B46     		mov	r3, r7
 1202 009e 0022     		movs	r2, #0
 1203 00a0 2021     		movs	r1, #32
 1204 00a2 2046     		mov	r0, r4
 1205 00a4 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1206              	.LVL91:
 1207 00a8 D0B9     		cbnz	r0, .L101
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 1208              		.loc 1 1166 0
 1209 00aa 2369     		ldr	r3, [r4, #16]
 1210 00ac 002B     		cmp	r3, #0
 1211 00ae E3D1     		bne	.L94
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
ARM GAS  /tmp/ccuVOPer.s 			page 80


 1212              		.loc 1 1168 0
 1213 00b0 2368     		ldr	r3, [r4]
 1214 00b2 5B68     		ldr	r3, [r3, #4]
 1215              	.LVL92:
 1216 00b4 2B70     		strb	r3, [r5]
 1217 00b6 0135     		adds	r5, r5, #1
 1218              	.LVL93:
 1219 00b8 E4E7     		b	.L90
 1220              	.L103:
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1221              		.loc 1 1179 0
 1222 00ba 2023     		movs	r3, #32
 1223 00bc 84F83A30 		strb	r3, [r4, #58]
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1224              		.loc 1 1182 0
 1225 00c0 0020     		movs	r0, #0
 1226 00c2 84F83800 		strb	r0, [r4, #56]
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1227              		.loc 1 1184 0
 1228 00c6 00E0     		b	.L89
 1229              	.LVL94:
 1230              	.L96:
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1231              		.loc 1 1188 0
 1232 00c8 0220     		movs	r0, #2
 1233              	.LVL95:
 1234              	.L89:
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1235              		.loc 1 1190 0
 1236 00ca 02B0     		add	sp, sp, #8
 1237              	.LCFI18:
 1238              		.cfi_remember_state
 1239              		.cfi_def_cfa_offset 24
 1240              		@ sp needed
 1241 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1242              	.LVL96:
 1243              	.L97:
 1244              	.LCFI19:
 1245              		.cfi_restore_state
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 1246              		.loc 1 1122 0
 1247 00d0 0120     		movs	r0, #1
 1248              	.LVL97:
 1249 00d2 FAE7     		b	.L89
 1250              	.LVL98:
 1251              	.L98:
 1252 00d4 0120     		movs	r0, #1
 1253              	.LVL99:
 1254 00d6 F8E7     		b	.L89
 1255              	.LVL100:
 1256              	.L99:
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1257              		.loc 1 1126 0
 1258 00d8 0220     		movs	r0, #2
 1259              	.LVL101:
 1260 00da F6E7     		b	.L89
 1261              	.LVL102:
ARM GAS  /tmp/ccuVOPer.s 			page 81


 1262              	.L100:
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 1263              		.loc 1 1145 0
 1264 00dc 0320     		movs	r0, #3
 1265 00de F4E7     		b	.L89
 1266              	.L101:
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 1267              		.loc 1 1164 0
 1268 00e0 0320     		movs	r0, #3
 1269 00e2 F2E7     		b	.L89
 1270              		.cfi_endproc
 1271              	.LFE73:
 1273              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1274              		.align	1
 1275              		.global	HAL_UART_Transmit_IT
 1276              		.syntax unified
 1277              		.thumb
 1278              		.thumb_func
 1279              		.fpu softvfp
 1281              	HAL_UART_Transmit_IT:
 1282              	.LFB74:
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 1283              		.loc 1 1204 0
 1284              		.cfi_startproc
 1285              		@ args = 0, pretend = 0, frame = 0
 1286              		@ frame_needed = 0, uses_anonymous_args = 0
 1287              		@ link register save eliminated.
 1288              	.LVL103:
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1289              		.loc 1 1206 0
 1290 0000 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1291 0004 DBB2     		uxtb	r3, r3
 1292 0006 202B     		cmp	r3, #32
 1293 0008 16D1     		bne	.L107
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1294              		.loc 1 1208 0
 1295 000a B9B1     		cbz	r1, .L108
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1296              		.loc 1 1208 0 is_stmt 0 discriminator 1
 1297 000c C2B1     		cbz	r2, .L109
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1298              		.loc 1 1214 0 is_stmt 1
 1299 000e 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1300 0012 012B     		cmp	r3, #1
 1301 0014 16D0     		beq	.L110
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1302              		.loc 1 1216 0 discriminator 2
 1303 0016 0162     		str	r1, [r0, #32]
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1304              		.loc 1 1217 0 discriminator 2
 1305 0018 8284     		strh	r2, [r0, #36]	@ movhi
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1306              		.loc 1 1218 0 discriminator 2
 1307 001a C284     		strh	r2, [r0, #38]	@ movhi
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1308              		.loc 1 1220 0 discriminator 2
 1309 001c 0023     		movs	r3, #0
ARM GAS  /tmp/ccuVOPer.s 			page 82


 1310 001e C363     		str	r3, [r0, #60]
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1311              		.loc 1 1221 0 discriminator 2
 1312 0020 2122     		movs	r2, #33
 1313              	.LVL104:
 1314 0022 80F83920 		strb	r2, [r0, #57]
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1315              		.loc 1 1224 0 discriminator 2
 1316 0026 80F83830 		strb	r3, [r0, #56]
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1317              		.loc 1 1227 0 discriminator 2
 1318 002a 0168     		ldr	r1, [r0]
 1319              	.LVL105:
 1320 002c CA68     		ldr	r2, [r1, #12]
 1321 002e 42F08002 		orr	r2, r2, #128
 1322 0032 CA60     		str	r2, [r1, #12]
 1323              	.LVL106:
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1324              		.loc 1 1229 0 discriminator 2
 1325 0034 1846     		mov	r0, r3
 1326              	.LVL107:
 1327 0036 7047     		bx	lr
 1328              	.LVL108:
 1329              	.L107:
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1330              		.loc 1 1233 0
 1331 0038 0220     		movs	r0, #2
 1332              	.LVL109:
 1333 003a 7047     		bx	lr
 1334              	.LVL110:
 1335              	.L108:
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 1336              		.loc 1 1210 0
 1337 003c 0120     		movs	r0, #1
 1338              	.LVL111:
 1339 003e 7047     		bx	lr
 1340              	.LVL112:
 1341              	.L109:
 1342 0040 0120     		movs	r0, #1
 1343              	.LVL113:
 1344 0042 7047     		bx	lr
 1345              	.LVL114:
 1346              	.L110:
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1347              		.loc 1 1214 0
 1348 0044 0220     		movs	r0, #2
 1349              	.LVL115:
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1350              		.loc 1 1235 0
 1351 0046 7047     		bx	lr
 1352              		.cfi_endproc
 1353              	.LFE74:
 1355              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1356              		.align	1
 1357              		.global	HAL_UART_Receive_IT
 1358              		.syntax unified
 1359              		.thumb
ARM GAS  /tmp/ccuVOPer.s 			page 83


 1360              		.thumb_func
 1361              		.fpu softvfp
 1363              	HAL_UART_Receive_IT:
 1364              	.LFB75:
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 1365              		.loc 1 1249 0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 1369              		@ link register save eliminated.
 1370              	.LVL116:
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1371              		.loc 1 1251 0
 1372 0000 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2
 1373 0004 DBB2     		uxtb	r3, r3
 1374 0006 202B     		cmp	r3, #32
 1375 0008 20D1     		bne	.L113
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1376              		.loc 1 1253 0
 1377 000a 09B3     		cbz	r1, .L114
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1378              		.loc 1 1253 0 is_stmt 0 discriminator 1
 1379 000c 12B3     		cbz	r2, .L115
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1380              		.loc 1 1259 0 is_stmt 1
 1381 000e 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1382 0012 012B     		cmp	r3, #1
 1383 0014 20D0     		beq	.L116
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
 1384              		.loc 1 1261 0 discriminator 2
 1385 0016 8162     		str	r1, [r0, #40]
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 1386              		.loc 1 1262 0 discriminator 2
 1387 0018 8285     		strh	r2, [r0, #44]	@ movhi
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1388              		.loc 1 1263 0 discriminator 2
 1389 001a C285     		strh	r2, [r0, #46]	@ movhi
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1390              		.loc 1 1265 0 discriminator 2
 1391 001c 0023     		movs	r3, #0
 1392 001e C363     		str	r3, [r0, #60]
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1393              		.loc 1 1266 0 discriminator 2
 1394 0020 2222     		movs	r2, #34
 1395              	.LVL117:
 1396 0022 80F83A20 		strb	r2, [r0, #58]
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1397              		.loc 1 1269 0 discriminator 2
 1398 0026 80F83830 		strb	r3, [r0, #56]
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1399              		.loc 1 1272 0 discriminator 2
 1400 002a 0168     		ldr	r1, [r0]
 1401              	.LVL118:
 1402 002c CA68     		ldr	r2, [r1, #12]
 1403 002e 42F48072 		orr	r2, r2, #256
 1404 0032 CA60     		str	r2, [r1, #12]
 1405              	.LVL119:
ARM GAS  /tmp/ccuVOPer.s 			page 84


1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1406              		.loc 1 1275 0 discriminator 2
 1407 0034 0168     		ldr	r1, [r0]
 1408 0036 4A69     		ldr	r2, [r1, #20]
 1409 0038 42F00102 		orr	r2, r2, #1
 1410 003c 4A61     		str	r2, [r1, #20]
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1411              		.loc 1 1278 0 discriminator 2
 1412 003e 0168     		ldr	r1, [r0]
 1413 0040 CA68     		ldr	r2, [r1, #12]
 1414 0042 42F02002 		orr	r2, r2, #32
 1415 0046 CA60     		str	r2, [r1, #12]
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1416              		.loc 1 1280 0 discriminator 2
 1417 0048 1846     		mov	r0, r3
 1418              	.LVL120:
 1419 004a 7047     		bx	lr
 1420              	.LVL121:
 1421              	.L113:
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1422              		.loc 1 1284 0
 1423 004c 0220     		movs	r0, #2
 1424              	.LVL122:
 1425 004e 7047     		bx	lr
 1426              	.LVL123:
 1427              	.L114:
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 1428              		.loc 1 1255 0
 1429 0050 0120     		movs	r0, #1
 1430              	.LVL124:
 1431 0052 7047     		bx	lr
 1432              	.LVL125:
 1433              	.L115:
 1434 0054 0120     		movs	r0, #1
 1435              	.LVL126:
 1436 0056 7047     		bx	lr
 1437              	.LVL127:
 1438              	.L116:
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1439              		.loc 1 1259 0
 1440 0058 0220     		movs	r0, #2
 1441              	.LVL128:
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1442              		.loc 1 1286 0
 1443 005a 7047     		bx	lr
 1444              		.cfi_endproc
 1445              	.LFE75:
 1447              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1448              		.align	1
 1449              		.global	HAL_UART_Transmit_DMA
 1450              		.syntax unified
 1451              		.thumb
 1452              		.thumb_func
 1453              		.fpu softvfp
 1455              	HAL_UART_Transmit_DMA:
 1456              	.LFB76:
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
ARM GAS  /tmp/ccuVOPer.s 			page 85


 1457              		.loc 1 1300 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 0
 1460              		@ frame_needed = 0, uses_anonymous_args = 0
 1461              	.LVL129:
 1462 0000 38B5     		push	{r3, r4, r5, lr}
 1463              	.LCFI20:
 1464              		.cfi_def_cfa_offset 16
 1465              		.cfi_offset 3, -16
 1466              		.cfi_offset 4, -12
 1467              		.cfi_offset 5, -8
 1468              		.cfi_offset 14, -4
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1469              		.loc 1 1304 0
 1470 0002 90F83940 		ldrb	r4, [r0, #57]	@ zero_extendqisi2
 1471 0006 E4B2     		uxtb	r4, r4
 1472 0008 202C     		cmp	r4, #32
 1473 000a 31D1     		bne	.L119
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1474              		.loc 1 1306 0
 1475 000c 0029     		cmp	r1, #0
 1476 000e 31D0     		beq	.L120
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1477              		.loc 1 1306 0 is_stmt 0 discriminator 1
 1478 0010 002A     		cmp	r2, #0
 1479 0012 31D0     		beq	.L121
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1480              		.loc 1 1312 0 is_stmt 1
 1481 0014 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1482 0018 012B     		cmp	r3, #1
 1483 001a 2FD0     		beq	.L122
 1484 001c 1346     		mov	r3, r2
 1485 001e 0446     		mov	r4, r0
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1486              		.loc 1 1312 0 is_stmt 0 discriminator 2
 1487 0020 0122     		movs	r2, #1
 1488              	.LVL130:
 1489 0022 80F83820 		strb	r2, [r0, #56]
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1490              		.loc 1 1314 0 is_stmt 1 discriminator 2
 1491 0026 0162     		str	r1, [r0, #32]
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1492              		.loc 1 1315 0 discriminator 2
 1493 0028 8384     		strh	r3, [r0, #36]	@ movhi
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1494              		.loc 1 1316 0 discriminator 2
 1495 002a C384     		strh	r3, [r0, #38]	@ movhi
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1496              		.loc 1 1318 0 discriminator 2
 1497 002c 0025     		movs	r5, #0
 1498 002e C563     		str	r5, [r0, #60]
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1499              		.loc 1 1319 0 discriminator 2
 1500 0030 2122     		movs	r2, #33
 1501 0032 80F83920 		strb	r2, [r0, #57]
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1502              		.loc 1 1322 0 discriminator 2
ARM GAS  /tmp/ccuVOPer.s 			page 86


 1503 0036 026B     		ldr	r2, [r0, #48]
 1504 0038 1148     		ldr	r0, .L124
 1505              	.LVL131:
 1506 003a 9062     		str	r0, [r2, #40]
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1507              		.loc 1 1325 0 discriminator 2
 1508 003c 226B     		ldr	r2, [r4, #48]
 1509 003e 1148     		ldr	r0, .L124+4
 1510 0040 D062     		str	r0, [r2, #44]
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1511              		.loc 1 1328 0 discriminator 2
 1512 0042 226B     		ldr	r2, [r4, #48]
 1513 0044 1048     		ldr	r0, .L124+8
 1514 0046 1063     		str	r0, [r2, #48]
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1515              		.loc 1 1331 0 discriminator 2
 1516 0048 226B     		ldr	r2, [r4, #48]
 1517 004a 5563     		str	r5, [r2, #52]
 1518              	.LVL132:
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1519              		.loc 1 1335 0 discriminator 2
 1520 004c 2268     		ldr	r2, [r4]
 1521 004e 0432     		adds	r2, r2, #4
 1522 0050 206B     		ldr	r0, [r4, #48]
 1523 0052 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1524              	.LVL133:
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1525              		.loc 1 1338 0 discriminator 2
 1526 0056 2368     		ldr	r3, [r4]
 1527 0058 6FF04002 		mvn	r2, #64
 1528 005c 1A60     		str	r2, [r3]
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1529              		.loc 1 1341 0 discriminator 2
 1530 005e 84F83850 		strb	r5, [r4, #56]
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1531              		.loc 1 1345 0 discriminator 2
 1532 0062 2268     		ldr	r2, [r4]
 1533 0064 5369     		ldr	r3, [r2, #20]
 1534 0066 43F08003 		orr	r3, r3, #128
 1535 006a 5361     		str	r3, [r2, #20]
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1536              		.loc 1 1347 0 discriminator 2
 1537 006c 2846     		mov	r0, r5
 1538 006e 00E0     		b	.L118
 1539              	.LVL134:
 1540              	.L119:
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1541              		.loc 1 1351 0
 1542 0070 0220     		movs	r0, #2
 1543              	.LVL135:
 1544              	.L118:
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1545              		.loc 1 1353 0
 1546 0072 38BD     		pop	{r3, r4, r5, pc}
 1547              	.LVL136:
 1548              	.L120:
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
ARM GAS  /tmp/ccuVOPer.s 			page 87


 1549              		.loc 1 1308 0
 1550 0074 0120     		movs	r0, #1
 1551              	.LVL137:
 1552 0076 FCE7     		b	.L118
 1553              	.LVL138:
 1554              	.L121:
 1555 0078 0120     		movs	r0, #1
 1556              	.LVL139:
 1557 007a FAE7     		b	.L118
 1558              	.LVL140:
 1559              	.L122:
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1560              		.loc 1 1312 0
 1561 007c 0220     		movs	r0, #2
 1562              	.LVL141:
 1563 007e F8E7     		b	.L118
 1564              	.L125:
 1565              		.align	2
 1566              	.L124:
 1567 0080 00000000 		.word	UART_DMATransmitCplt
 1568 0084 00000000 		.word	UART_DMATxHalfCplt
 1569 0088 00000000 		.word	UART_DMAError
 1570              		.cfi_endproc
 1571              	.LFE76:
 1573              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1574              		.align	1
 1575              		.global	HAL_UART_Receive_DMA
 1576              		.syntax unified
 1577              		.thumb
 1578              		.thumb_func
 1579              		.fpu softvfp
 1581              	HAL_UART_Receive_DMA:
 1582              	.LFB77:
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
 1583              		.loc 1 1368 0
 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 8
 1586              		@ frame_needed = 0, uses_anonymous_args = 0
 1587              	.LVL142:
 1588 0000 30B5     		push	{r4, r5, lr}
 1589              	.LCFI21:
 1590              		.cfi_def_cfa_offset 12
 1591              		.cfi_offset 4, -12
 1592              		.cfi_offset 5, -8
 1593              		.cfi_offset 14, -4
 1594 0002 83B0     		sub	sp, sp, #12
 1595              	.LCFI22:
 1596              		.cfi_def_cfa_offset 24
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1597              		.loc 1 1372 0
 1598 0004 90F83A40 		ldrb	r4, [r0, #58]	@ zero_extendqisi2
 1599 0008 E4B2     		uxtb	r4, r4
 1600 000a 202C     		cmp	r4, #32
 1601 000c 3DD1     		bne	.L128
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1602              		.loc 1 1374 0
 1603 000e 0029     		cmp	r1, #0
ARM GAS  /tmp/ccuVOPer.s 			page 88


 1604 0010 3ED0     		beq	.L129
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1605              		.loc 1 1374 0 is_stmt 0 discriminator 1
 1606 0012 002A     		cmp	r2, #0
 1607 0014 3ED0     		beq	.L130
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1608              		.loc 1 1380 0 is_stmt 1
 1609 0016 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1610 001a 012B     		cmp	r3, #1
 1611 001c 3CD0     		beq	.L131
 1612 001e 1346     		mov	r3, r2
 1613 0020 0A46     		mov	r2, r1
 1614              	.LVL143:
 1615 0022 0446     		mov	r4, r0
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1616              		.loc 1 1380 0 is_stmt 0 discriminator 2
 1617 0024 0121     		movs	r1, #1
 1618              	.LVL144:
 1619 0026 80F83810 		strb	r1, [r0, #56]
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
 1620              		.loc 1 1382 0 is_stmt 1 discriminator 2
 1621 002a 8262     		str	r2, [r0, #40]
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1622              		.loc 1 1383 0 discriminator 2
 1623 002c 8385     		strh	r3, [r0, #44]	@ movhi
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1624              		.loc 1 1385 0 discriminator 2
 1625 002e 0025     		movs	r5, #0
 1626 0030 C563     		str	r5, [r0, #60]
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1627              		.loc 1 1386 0 discriminator 2
 1628 0032 2221     		movs	r1, #34
 1629 0034 80F83A10 		strb	r1, [r0, #58]
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1630              		.loc 1 1389 0 discriminator 2
 1631 0038 416B     		ldr	r1, [r0, #52]
 1632 003a 1848     		ldr	r0, .L133
 1633              	.LVL145:
 1634 003c 8862     		str	r0, [r1, #40]
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1635              		.loc 1 1392 0 discriminator 2
 1636 003e 616B     		ldr	r1, [r4, #52]
 1637 0040 1748     		ldr	r0, .L133+4
 1638 0042 C862     		str	r0, [r1, #44]
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1639              		.loc 1 1395 0 discriminator 2
 1640 0044 616B     		ldr	r1, [r4, #52]
 1641 0046 1748     		ldr	r0, .L133+8
 1642 0048 0863     		str	r0, [r1, #48]
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1643              		.loc 1 1398 0 discriminator 2
 1644 004a 616B     		ldr	r1, [r4, #52]
 1645 004c 4D63     		str	r5, [r1, #52]
 1646              	.LVL146:
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1647              		.loc 1 1402 0 discriminator 2
 1648 004e 2168     		ldr	r1, [r4]
ARM GAS  /tmp/ccuVOPer.s 			page 89


 1649 0050 0431     		adds	r1, r1, #4
 1650 0052 606B     		ldr	r0, [r4, #52]
 1651 0054 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1652              	.LVL147:
 1653              	.LBB2:
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1654              		.loc 1 1405 0 discriminator 2
 1655 0058 0195     		str	r5, [sp, #4]
 1656 005a 2368     		ldr	r3, [r4]
 1657 005c 1A68     		ldr	r2, [r3]
 1658 005e 0192     		str	r2, [sp, #4]
 1659 0060 5A68     		ldr	r2, [r3, #4]
 1660 0062 0192     		str	r2, [sp, #4]
 1661 0064 019A     		ldr	r2, [sp, #4]
 1662              	.LBE2:
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1663              		.loc 1 1408 0 discriminator 2
 1664 0066 84F83850 		strb	r5, [r4, #56]
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1665              		.loc 1 1411 0 discriminator 2
 1666 006a DA68     		ldr	r2, [r3, #12]
 1667 006c 42F48072 		orr	r2, r2, #256
 1668 0070 DA60     		str	r2, [r3, #12]
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1669              		.loc 1 1414 0 discriminator 2
 1670 0072 2268     		ldr	r2, [r4]
 1671 0074 5369     		ldr	r3, [r2, #20]
 1672 0076 43F00103 		orr	r3, r3, #1
 1673 007a 5361     		str	r3, [r2, #20]
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1674              		.loc 1 1418 0 discriminator 2
 1675 007c 2268     		ldr	r2, [r4]
 1676 007e 5369     		ldr	r3, [r2, #20]
 1677 0080 43F04003 		orr	r3, r3, #64
 1678 0084 5361     		str	r3, [r2, #20]
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1679              		.loc 1 1420 0 discriminator 2
 1680 0086 2846     		mov	r0, r5
 1681 0088 00E0     		b	.L127
 1682              	.LVL148:
 1683              	.L128:
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1684              		.loc 1 1424 0
 1685 008a 0220     		movs	r0, #2
 1686              	.LVL149:
 1687              	.L127:
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1688              		.loc 1 1426 0
 1689 008c 03B0     		add	sp, sp, #12
 1690              	.LCFI23:
 1691              		.cfi_remember_state
 1692              		.cfi_def_cfa_offset 12
 1693              		@ sp needed
 1694 008e 30BD     		pop	{r4, r5, pc}
 1695              	.LVL150:
 1696              	.L129:
 1697              	.LCFI24:
ARM GAS  /tmp/ccuVOPer.s 			page 90


 1698              		.cfi_restore_state
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 1699              		.loc 1 1376 0
 1700 0090 0120     		movs	r0, #1
 1701              	.LVL151:
 1702 0092 FBE7     		b	.L127
 1703              	.LVL152:
 1704              	.L130:
 1705 0094 0120     		movs	r0, #1
 1706              	.LVL153:
 1707 0096 F9E7     		b	.L127
 1708              	.LVL154:
 1709              	.L131:
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1710              		.loc 1 1380 0
 1711 0098 0220     		movs	r0, #2
 1712              	.LVL155:
 1713 009a F7E7     		b	.L127
 1714              	.L134:
 1715              		.align	2
 1716              	.L133:
 1717 009c 00000000 		.word	UART_DMAReceiveCplt
 1718 00a0 00000000 		.word	UART_DMARxHalfCplt
 1719 00a4 00000000 		.word	UART_DMAError
 1720              		.cfi_endproc
 1721              	.LFE77:
 1723              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 1724              		.align	1
 1725              		.global	HAL_UART_DMAPause
 1726              		.syntax unified
 1727              		.thumb
 1728              		.thumb_func
 1729              		.fpu softvfp
 1731              	HAL_UART_DMAPause:
 1732              	.LFB78:
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1733              		.loc 1 1435 0
 1734              		.cfi_startproc
 1735              		@ args = 0, pretend = 0, frame = 0
 1736              		@ frame_needed = 0, uses_anonymous_args = 0
 1737              		@ link register save eliminated.
 1738              	.LVL156:
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1739              		.loc 1 1439 0
 1740 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1741 0004 012B     		cmp	r3, #1
 1742 0006 31D0     		beq	.L139
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1743              		.loc 1 1439 0 is_stmt 0 discriminator 2
 1744 0008 0123     		movs	r3, #1
 1745 000a 80F83830 		strb	r3, [r0, #56]
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1746              		.loc 1 1441 0 is_stmt 1 discriminator 2
 1747 000e 0168     		ldr	r1, [r0]
 1748 0010 4A69     		ldr	r2, [r1, #20]
 1749 0012 02F08002 		and	r2, r2, #128
 1750              	.LVL157:
ARM GAS  /tmp/ccuVOPer.s 			page 91


1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1751              		.loc 1 1442 0 discriminator 2
 1752 0016 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1753 001a DBB2     		uxtb	r3, r3
 1754 001c 212B     		cmp	r3, #33
 1755 001e 0DD0     		beq	.L140
 1756              	.L137:
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1757              		.loc 1 1448 0
 1758 0020 0168     		ldr	r1, [r0]
 1759 0022 4A69     		ldr	r2, [r1, #20]
 1760              	.LVL158:
 1761 0024 02F04002 		and	r2, r2, #64
 1762              	.LVL159:
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1763              		.loc 1 1449 0
 1764 0028 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2
 1765 002c DBB2     		uxtb	r3, r3
 1766 002e 222B     		cmp	r3, #34
 1767 0030 0BD0     		beq	.L141
 1768              	.LVL160:
 1769              	.L138:
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1770              		.loc 1 1460 0
 1771 0032 0023     		movs	r3, #0
 1772 0034 80F83830 		strb	r3, [r0, #56]
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1773              		.loc 1 1462 0
 1774 0038 1846     		mov	r0, r3
 1775              	.LVL161:
 1776 003a 7047     		bx	lr
 1777              	.LVL162:
 1778              	.L140:
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1779              		.loc 1 1442 0 discriminator 1
 1780 003c 002A     		cmp	r2, #0
 1781 003e EFD0     		beq	.L137
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1782              		.loc 1 1445 0
 1783 0040 4B69     		ldr	r3, [r1, #20]
 1784 0042 23F08003 		bic	r3, r3, #128
 1785 0046 4B61     		str	r3, [r1, #20]
 1786 0048 EAE7     		b	.L137
 1787              	.L141:
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1788              		.loc 1 1449 0 discriminator 1
 1789 004a 002A     		cmp	r2, #0
 1790 004c F1D0     		beq	.L138
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1791              		.loc 1 1452 0
 1792 004e CB68     		ldr	r3, [r1, #12]
 1793 0050 23F48073 		bic	r3, r3, #256
 1794 0054 CB60     		str	r3, [r1, #12]
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1795              		.loc 1 1453 0
 1796 0056 0268     		ldr	r2, [r0]
 1797              	.LVL163:
ARM GAS  /tmp/ccuVOPer.s 			page 92


 1798 0058 5369     		ldr	r3, [r2, #20]
 1799 005a 23F00103 		bic	r3, r3, #1
 1800 005e 5361     		str	r3, [r2, #20]
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1801              		.loc 1 1456 0
 1802 0060 0268     		ldr	r2, [r0]
 1803 0062 5369     		ldr	r3, [r2, #20]
 1804 0064 23F04003 		bic	r3, r3, #64
 1805 0068 5361     		str	r3, [r2, #20]
 1806 006a E2E7     		b	.L138
 1807              	.LVL164:
 1808              	.L139:
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1809              		.loc 1 1439 0
 1810 006c 0220     		movs	r0, #2
 1811              	.LVL165:
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1812              		.loc 1 1463 0
 1813 006e 7047     		bx	lr
 1814              		.cfi_endproc
 1815              	.LFE78:
 1817              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 1818              		.align	1
 1819              		.global	HAL_UART_DMAResume
 1820              		.syntax unified
 1821              		.thumb
 1822              		.thumb_func
 1823              		.fpu softvfp
 1825              	HAL_UART_DMAResume:
 1826              	.LFB79:
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
 1827              		.loc 1 1472 0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 8
 1830              		@ frame_needed = 0, uses_anonymous_args = 0
 1831              		@ link register save eliminated.
 1832              	.LVL166:
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1833              		.loc 1 1474 0
 1834 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1835 0004 012B     		cmp	r3, #1
 1836 0006 34D0     		beq	.L146
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1837              		.loc 1 1474 0 is_stmt 0 discriminator 2
 1838 0008 0123     		movs	r3, #1
 1839 000a 80F83830 		strb	r3, [r0, #56]
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1840              		.loc 1 1476 0 is_stmt 1 discriminator 2
 1841 000e 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1842 0012 DBB2     		uxtb	r3, r3
 1843 0014 212B     		cmp	r3, #33
 1844 0016 09D0     		beq	.L152
 1845              	.L144:
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1846              		.loc 1 1482 0
 1847 0018 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2
 1848 001c DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccuVOPer.s 			page 93


 1849 001e 222B     		cmp	r3, #34
 1850 0020 0AD0     		beq	.L153
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1851              		.loc 1 1496 0
 1852 0022 0023     		movs	r3, #0
 1853 0024 80F83830 		strb	r3, [r0, #56]
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1854              		.loc 1 1498 0
 1855 0028 1846     		mov	r0, r3
 1856              	.LVL167:
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1857              		.loc 1 1499 0
 1858 002a 7047     		bx	lr
 1859              	.LVL168:
 1860              	.L152:
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1861              		.loc 1 1479 0
 1862 002c 0268     		ldr	r2, [r0]
 1863 002e 5369     		ldr	r3, [r2, #20]
 1864 0030 43F08003 		orr	r3, r3, #128
 1865 0034 5361     		str	r3, [r2, #20]
 1866 0036 EFE7     		b	.L144
 1867              	.L153:
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
 1868              		.loc 1 1472 0
 1869 0038 82B0     		sub	sp, sp, #8
 1870              	.LCFI25:
 1871              		.cfi_def_cfa_offset 8
 1872              	.LBB3:
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1873              		.loc 1 1485 0
 1874 003a 0023     		movs	r3, #0
 1875 003c 0193     		str	r3, [sp, #4]
 1876 003e 0368     		ldr	r3, [r0]
 1877 0040 1A68     		ldr	r2, [r3]
 1878 0042 0192     		str	r2, [sp, #4]
 1879 0044 5A68     		ldr	r2, [r3, #4]
 1880 0046 0192     		str	r2, [sp, #4]
 1881 0048 019A     		ldr	r2, [sp, #4]
 1882              	.LBE3:
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1883              		.loc 1 1488 0
 1884 004a DA68     		ldr	r2, [r3, #12]
 1885 004c 42F48072 		orr	r2, r2, #256
 1886 0050 DA60     		str	r2, [r3, #12]
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1887              		.loc 1 1489 0
 1888 0052 0268     		ldr	r2, [r0]
 1889 0054 5369     		ldr	r3, [r2, #20]
 1890 0056 43F00103 		orr	r3, r3, #1
 1891 005a 5361     		str	r3, [r2, #20]
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1892              		.loc 1 1492 0
 1893 005c 0268     		ldr	r2, [r0]
 1894 005e 5369     		ldr	r3, [r2, #20]
 1895 0060 43F04003 		orr	r3, r3, #64
 1896 0064 5361     		str	r3, [r2, #20]
ARM GAS  /tmp/ccuVOPer.s 			page 94


1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1897              		.loc 1 1496 0
 1898 0066 0023     		movs	r3, #0
 1899 0068 80F83830 		strb	r3, [r0, #56]
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1900              		.loc 1 1498 0
 1901 006c 1846     		mov	r0, r3
 1902              	.LVL169:
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1903              		.loc 1 1499 0
 1904 006e 02B0     		add	sp, sp, #8
 1905              	.LCFI26:
 1906              		.cfi_def_cfa_offset 0
 1907              		@ sp needed
 1908 0070 7047     		bx	lr
 1909              	.LVL170:
 1910              	.L146:
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1911              		.loc 1 1474 0
 1912 0072 0220     		movs	r0, #2
 1913              	.LVL171:
 1914 0074 7047     		bx	lr
 1915              		.cfi_endproc
 1916              	.LFE79:
 1918              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 1919              		.align	1
 1920              		.global	HAL_UART_DMAStop
 1921              		.syntax unified
 1922              		.thumb
 1923              		.thumb_func
 1924              		.fpu softvfp
 1926              	HAL_UART_DMAStop:
 1927              	.LFB80:
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1928              		.loc 1 1508 0
 1929              		.cfi_startproc
 1930              		@ args = 0, pretend = 0, frame = 0
 1931              		@ frame_needed = 0, uses_anonymous_args = 0
 1932              	.LVL172:
 1933 0000 10B5     		push	{r4, lr}
 1934              	.LCFI27:
 1935              		.cfi_def_cfa_offset 8
 1936              		.cfi_offset 4, -8
 1937              		.cfi_offset 14, -4
 1938 0002 0446     		mov	r4, r0
 1939              	.LVL173:
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1940              		.loc 1 1517 0
 1941 0004 0168     		ldr	r1, [r0]
 1942 0006 4A69     		ldr	r2, [r1, #20]
 1943              	.LVL174:
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1944              		.loc 1 1518 0
 1945 0008 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1946 000c DBB2     		uxtb	r3, r3
 1947 000e 212B     		cmp	r3, #33
 1948 0010 0AD0     		beq	.L160
ARM GAS  /tmp/ccuVOPer.s 			page 95


 1949              	.LVL175:
 1950              	.L155:
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1951              		.loc 1 1531 0
 1952 0012 2168     		ldr	r1, [r4]
 1953 0014 4A69     		ldr	r2, [r1, #20]
 1954 0016 02F04002 		and	r2, r2, #64
 1955              	.LVL176:
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1956              		.loc 1 1532 0
 1957 001a 94F83A30 		ldrb	r3, [r4, #58]	@ zero_extendqisi2
 1958 001e DBB2     		uxtb	r3, r3
 1959 0020 222B     		cmp	r3, #34
 1960 0022 11D0     		beq	.L161
 1961              	.LVL177:
 1962              	.L157:
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1963              		.loc 1 1545 0
 1964 0024 0020     		movs	r0, #0
 1965 0026 10BD     		pop	{r4, pc}
 1966              	.LVL178:
 1967              	.L160:
 1968 0028 02F08002 		and	r2, r2, #128
 1969              	.LVL179:
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1970              		.loc 1 1518 0 discriminator 1
 1971 002c 002A     		cmp	r2, #0
 1972 002e F0D0     		beq	.L155
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1973              		.loc 1 1520 0
 1974 0030 4B69     		ldr	r3, [r1, #20]
 1975 0032 23F08003 		bic	r3, r3, #128
 1976 0036 4B61     		str	r3, [r1, #20]
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1977              		.loc 1 1523 0
 1978 0038 006B     		ldr	r0, [r0, #48]
 1979              	.LVL180:
 1980 003a 08B1     		cbz	r0, .L156
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 1981              		.loc 1 1525 0
 1982 003c FFF7FEFF 		bl	HAL_DMA_Abort
 1983              	.LVL181:
 1984              	.L156:
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 1985              		.loc 1 1527 0
 1986 0040 2046     		mov	r0, r4
 1987 0042 FFF7FEFF 		bl	UART_EndTxTransfer
 1988              	.LVL182:
 1989 0046 E4E7     		b	.L155
 1990              	.LVL183:
 1991              	.L161:
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 1992              		.loc 1 1532 0 discriminator 1
 1993 0048 002A     		cmp	r2, #0
 1994 004a EBD0     		beq	.L157
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 1995              		.loc 1 1534 0
ARM GAS  /tmp/ccuVOPer.s 			page 96


 1996 004c 4B69     		ldr	r3, [r1, #20]
 1997 004e 23F04003 		bic	r3, r3, #64
 1998 0052 4B61     		str	r3, [r1, #20]
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1999              		.loc 1 1537 0
 2000 0054 606B     		ldr	r0, [r4, #52]
 2001 0056 08B1     		cbz	r0, .L158
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 2002              		.loc 1 1539 0
 2003 0058 FFF7FEFF 		bl	HAL_DMA_Abort
 2004              	.LVL184:
 2005              	.L158:
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 2006              		.loc 1 1541 0
 2007 005c 2046     		mov	r0, r4
 2008 005e FFF7FEFF 		bl	UART_EndRxTransfer
 2009              	.LVL185:
 2010 0062 DFE7     		b	.L157
 2011              		.cfi_endproc
 2012              	.LFE80:
 2014              		.section	.text.HAL_UART_Abort,"ax",%progbits
 2015              		.align	1
 2016              		.global	HAL_UART_Abort
 2017              		.syntax unified
 2018              		.thumb
 2019              		.thumb_func
 2020              		.fpu softvfp
 2022              	HAL_UART_Abort:
 2023              	.LFB81:
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2024              		.loc 1 1560 0
 2025              		.cfi_startproc
 2026              		@ args = 0, pretend = 0, frame = 0
 2027              		@ frame_needed = 0, uses_anonymous_args = 0
 2028              	.LVL186:
 2029 0000 10B5     		push	{r4, lr}
 2030              	.LCFI28:
 2031              		.cfi_def_cfa_offset 8
 2032              		.cfi_offset 4, -8
 2033              		.cfi_offset 14, -4
 2034 0002 0446     		mov	r4, r0
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2035              		.loc 1 1562 0
 2036 0004 0268     		ldr	r2, [r0]
 2037 0006 D368     		ldr	r3, [r2, #12]
 2038 0008 23F4F073 		bic	r3, r3, #480
 2039 000c D360     		str	r3, [r2, #12]
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2040              		.loc 1 1563 0
 2041 000e 0268     		ldr	r2, [r0]
 2042 0010 5369     		ldr	r3, [r2, #20]
 2043 0012 23F00103 		bic	r3, r3, #1
 2044 0016 5361     		str	r3, [r2, #20]
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2045              		.loc 1 1566 0
 2046 0018 0368     		ldr	r3, [r0]
 2047 001a 5A69     		ldr	r2, [r3, #20]
ARM GAS  /tmp/ccuVOPer.s 			page 97


 2048 001c 12F0800F 		tst	r2, #128
 2049 0020 0BD0     		beq	.L163
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2050              		.loc 1 1568 0
 2051 0022 5A69     		ldr	r2, [r3, #20]
 2052 0024 22F08002 		bic	r2, r2, #128
 2053 0028 5A61     		str	r2, [r3, #20]
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2054              		.loc 1 1571 0
 2055 002a 036B     		ldr	r3, [r0, #48]
 2056 002c 2BB1     		cbz	r3, .L163
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2057              		.loc 1 1575 0
 2058 002e 0022     		movs	r2, #0
 2059 0030 5A63     		str	r2, [r3, #52]
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 2060              		.loc 1 1577 0
 2061 0032 006B     		ldr	r0, [r0, #48]
 2062              	.LVL187:
 2063 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 2064              	.LVL188:
 2065 0038 D0B9     		cbnz	r0, .L167
 2066              	.L163:
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2067              		.loc 1 1591 0
 2068 003a 2368     		ldr	r3, [r4]
 2069 003c 5A69     		ldr	r2, [r3, #20]
 2070 003e 12F0400F 		tst	r2, #64
 2071 0042 0BD0     		beq	.L165
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2072              		.loc 1 1593 0
 2073 0044 5A69     		ldr	r2, [r3, #20]
 2074 0046 22F04002 		bic	r2, r2, #64
 2075 004a 5A61     		str	r2, [r3, #20]
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2076              		.loc 1 1596 0
 2077 004c 636B     		ldr	r3, [r4, #52]
 2078 004e 2BB1     		cbz	r3, .L165
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2079              		.loc 1 1600 0
 2080 0050 0022     		movs	r2, #0
 2081 0052 5A63     		str	r2, [r3, #52]
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 2082              		.loc 1 1602 0
 2083 0054 606B     		ldr	r0, [r4, #52]
 2084 0056 FFF7FEFF 		bl	HAL_DMA_Abort
 2085              	.LVL189:
 2086 005a 90B9     		cbnz	r0, .L168
 2087              	.L165:
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2088              		.loc 1 1616 0
 2089 005c 0020     		movs	r0, #0
 2090 005e E084     		strh	r0, [r4, #38]	@ movhi
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2091              		.loc 1 1617 0
 2092 0060 E085     		strh	r0, [r4, #46]	@ movhi
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccuVOPer.s 			page 98


 2093              		.loc 1 1620 0
 2094 0062 E063     		str	r0, [r4, #60]
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2095              		.loc 1 1623 0
 2096 0064 2023     		movs	r3, #32
 2097 0066 84F83A30 		strb	r3, [r4, #58]
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2098              		.loc 1 1624 0
 2099 006a 84F83930 		strb	r3, [r4, #57]
 2100              	.L164:
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2101              		.loc 1 1627 0
 2102 006e 10BD     		pop	{r4, pc}
 2103              	.LVL190:
 2104              	.L167:
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 2105              		.loc 1 1579 0
 2106 0070 206B     		ldr	r0, [r4, #48]
 2107 0072 FFF7FEFF 		bl	HAL_DMA_GetError
 2108              	.LVL191:
 2109 0076 2028     		cmp	r0, #32
 2110 0078 DFD1     		bne	.L163
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2111              		.loc 1 1582 0
 2112 007a 1023     		movs	r3, #16
 2113 007c E363     		str	r3, [r4, #60]
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 2114              		.loc 1 1584 0
 2115 007e 0320     		movs	r0, #3
 2116 0080 F5E7     		b	.L164
 2117              	.L168:
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 2118              		.loc 1 1604 0
 2119 0082 606B     		ldr	r0, [r4, #52]
 2120 0084 FFF7FEFF 		bl	HAL_DMA_GetError
 2121              	.LVL192:
 2122 0088 2028     		cmp	r0, #32
 2123 008a E7D1     		bne	.L165
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2124              		.loc 1 1607 0
 2125 008c 1023     		movs	r3, #16
 2126 008e E363     		str	r3, [r4, #60]
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 2127              		.loc 1 1609 0
 2128 0090 0320     		movs	r0, #3
 2129 0092 ECE7     		b	.L164
 2130              		.cfi_endproc
 2131              	.LFE81:
 2133              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 2134              		.align	1
 2135              		.global	HAL_UART_AbortTransmit
 2136              		.syntax unified
 2137              		.thumb
 2138              		.thumb_func
 2139              		.fpu softvfp
 2141              	HAL_UART_AbortTransmit:
 2142              	.LFB82:
ARM GAS  /tmp/ccuVOPer.s 			page 99


1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 2143              		.loc 1 1642 0
 2144              		.cfi_startproc
 2145              		@ args = 0, pretend = 0, frame = 0
 2146              		@ frame_needed = 0, uses_anonymous_args = 0
 2147              	.LVL193:
 2148 0000 10B5     		push	{r4, lr}
 2149              	.LCFI29:
 2150              		.cfi_def_cfa_offset 8
 2151              		.cfi_offset 4, -8
 2152              		.cfi_offset 14, -4
 2153 0002 0446     		mov	r4, r0
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2154              		.loc 1 1644 0
 2155 0004 0268     		ldr	r2, [r0]
 2156 0006 D368     		ldr	r3, [r2, #12]
 2157 0008 23F0C003 		bic	r3, r3, #192
 2158 000c D360     		str	r3, [r2, #12]
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2159              		.loc 1 1647 0
 2160 000e 0368     		ldr	r3, [r0]
 2161 0010 5A69     		ldr	r2, [r3, #20]
 2162 0012 12F0800F 		tst	r2, #128
 2163 0016 0BD0     		beq	.L170
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2164              		.loc 1 1649 0
 2165 0018 5A69     		ldr	r2, [r3, #20]
 2166 001a 22F08002 		bic	r2, r2, #128
 2167 001e 5A61     		str	r2, [r3, #20]
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2168              		.loc 1 1652 0
 2169 0020 036B     		ldr	r3, [r0, #48]
 2170 0022 2BB1     		cbz	r3, .L170
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2171              		.loc 1 1656 0
 2172 0024 0022     		movs	r2, #0
 2173 0026 5A63     		str	r2, [r3, #52]
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 2174              		.loc 1 1658 0
 2175 0028 006B     		ldr	r0, [r0, #48]
 2176              	.LVL194:
 2177 002a FFF7FEFF 		bl	HAL_DMA_Abort
 2178              	.LVL195:
 2179 002e 28B9     		cbnz	r0, .L173
 2180              	.L170:
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2181              		.loc 1 1672 0
 2182 0030 0020     		movs	r0, #0
 2183 0032 E084     		strh	r0, [r4, #38]	@ movhi
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2184              		.loc 1 1675 0
 2185 0034 2023     		movs	r3, #32
 2186 0036 84F83930 		strb	r3, [r4, #57]
 2187              	.L171:
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2188              		.loc 1 1678 0
 2189 003a 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccuVOPer.s 			page 100


 2190              	.LVL196:
 2191              	.L173:
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 2192              		.loc 1 1660 0
 2193 003c 206B     		ldr	r0, [r4, #48]
 2194 003e FFF7FEFF 		bl	HAL_DMA_GetError
 2195              	.LVL197:
 2196 0042 2028     		cmp	r0, #32
 2197 0044 F4D1     		bne	.L170
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2198              		.loc 1 1663 0
 2199 0046 1023     		movs	r3, #16
 2200 0048 E363     		str	r3, [r4, #60]
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 2201              		.loc 1 1665 0
 2202 004a 0320     		movs	r0, #3
 2203 004c F5E7     		b	.L171
 2204              		.cfi_endproc
 2205              	.LFE82:
 2207              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 2208              		.align	1
 2209              		.global	HAL_UART_AbortReceive
 2210              		.syntax unified
 2211              		.thumb
 2212              		.thumb_func
 2213              		.fpu softvfp
 2215              	HAL_UART_AbortReceive:
 2216              	.LFB83:
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2217              		.loc 1 1693 0
 2218              		.cfi_startproc
 2219              		@ args = 0, pretend = 0, frame = 0
 2220              		@ frame_needed = 0, uses_anonymous_args = 0
 2221              	.LVL198:
 2222 0000 10B5     		push	{r4, lr}
 2223              	.LCFI30:
 2224              		.cfi_def_cfa_offset 8
 2225              		.cfi_offset 4, -8
 2226              		.cfi_offset 14, -4
 2227 0002 0446     		mov	r4, r0
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2228              		.loc 1 1695 0
 2229 0004 0268     		ldr	r2, [r0]
 2230 0006 D368     		ldr	r3, [r2, #12]
 2231 0008 23F49073 		bic	r3, r3, #288
 2232 000c D360     		str	r3, [r2, #12]
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2233              		.loc 1 1696 0
 2234 000e 0268     		ldr	r2, [r0]
 2235 0010 5369     		ldr	r3, [r2, #20]
 2236 0012 23F00103 		bic	r3, r3, #1
 2237 0016 5361     		str	r3, [r2, #20]
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2238              		.loc 1 1699 0
 2239 0018 0368     		ldr	r3, [r0]
 2240 001a 5A69     		ldr	r2, [r3, #20]
 2241 001c 12F0400F 		tst	r2, #64
ARM GAS  /tmp/ccuVOPer.s 			page 101


 2242 0020 0BD0     		beq	.L175
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2243              		.loc 1 1701 0
 2244 0022 5A69     		ldr	r2, [r3, #20]
 2245 0024 22F04002 		bic	r2, r2, #64
 2246 0028 5A61     		str	r2, [r3, #20]
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2247              		.loc 1 1704 0
 2248 002a 436B     		ldr	r3, [r0, #52]
 2249 002c 2BB1     		cbz	r3, .L175
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2250              		.loc 1 1708 0
 2251 002e 0022     		movs	r2, #0
 2252 0030 5A63     		str	r2, [r3, #52]
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 2253              		.loc 1 1710 0
 2254 0032 406B     		ldr	r0, [r0, #52]
 2255              	.LVL199:
 2256 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 2257              	.LVL200:
 2258 0038 28B9     		cbnz	r0, .L178
 2259              	.L175:
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2260              		.loc 1 1724 0
 2261 003a 0020     		movs	r0, #0
 2262 003c E085     		strh	r0, [r4, #46]	@ movhi
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2263              		.loc 1 1727 0
 2264 003e 2023     		movs	r3, #32
 2265 0040 84F83A30 		strb	r3, [r4, #58]
 2266              	.L176:
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2267              		.loc 1 1730 0
 2268 0044 10BD     		pop	{r4, pc}
 2269              	.LVL201:
 2270              	.L178:
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 2271              		.loc 1 1712 0
 2272 0046 606B     		ldr	r0, [r4, #52]
 2273 0048 FFF7FEFF 		bl	HAL_DMA_GetError
 2274              	.LVL202:
 2275 004c 2028     		cmp	r0, #32
 2276 004e F4D1     		bne	.L175
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2277              		.loc 1 1715 0
 2278 0050 1023     		movs	r3, #16
 2279 0052 E363     		str	r3, [r4, #60]
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
 2280              		.loc 1 1717 0
 2281 0054 0320     		movs	r0, #3
 2282 0056 F5E7     		b	.L176
 2283              		.cfi_endproc
 2284              	.LFE83:
 2286              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 2287              		.align	1
 2288              		.weak	HAL_UART_TxCpltCallback
 2289              		.syntax unified
ARM GAS  /tmp/ccuVOPer.s 			page 102


 2290              		.thumb
 2291              		.thumb_func
 2292              		.fpu softvfp
 2294              	HAL_UART_TxCpltCallback:
 2295              	.LFB88:
2168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2296              		.loc 1 2168 0
 2297              		.cfi_startproc
 2298              		@ args = 0, pretend = 0, frame = 0
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 2300              		@ link register save eliminated.
 2301              	.LVL203:
2174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2302              		.loc 1 2174 0
 2303 0000 7047     		bx	lr
 2304              		.cfi_endproc
 2305              	.LFE88:
 2307              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 2308              		.align	1
 2309              		.syntax unified
 2310              		.thumb
 2311              		.thumb_func
 2312              		.fpu softvfp
 2314              	UART_DMATransmitCplt:
 2315              	.LFB103:
2543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2316              		.loc 1 2543 0
 2317              		.cfi_startproc
 2318              		@ args = 0, pretend = 0, frame = 0
 2319              		@ frame_needed = 0, uses_anonymous_args = 0
 2320              	.LVL204:
 2321 0000 08B5     		push	{r3, lr}
 2322              	.LCFI31:
 2323              		.cfi_def_cfa_offset 8
 2324              		.cfi_offset 3, -8
 2325              		.cfi_offset 14, -4
2544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
 2326              		.loc 1 2544 0
 2327 0002 436A     		ldr	r3, [r0, #36]
 2328              	.LVL205:
2546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2329              		.loc 1 2546 0
 2330 0004 0268     		ldr	r2, [r0]
 2331 0006 1268     		ldr	r2, [r2]
 2332 0008 12F0200F 		tst	r2, #32
 2333 000c 0CD1     		bne	.L181
2548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2334              		.loc 1 2548 0
 2335 000e 0022     		movs	r2, #0
 2336 0010 DA84     		strh	r2, [r3, #38]	@ movhi
2552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2337              		.loc 1 2552 0
 2338 0012 1968     		ldr	r1, [r3]
 2339 0014 4A69     		ldr	r2, [r1, #20]
 2340 0016 22F08002 		bic	r2, r2, #128
 2341 001a 4A61     		str	r2, [r1, #20]
2555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/ccuVOPer.s 			page 103


 2342              		.loc 1 2555 0
 2343 001c 1A68     		ldr	r2, [r3]
 2344 001e D368     		ldr	r3, [r2, #12]
 2345              	.LVL206:
 2346 0020 43F04003 		orr	r3, r3, #64
 2347 0024 D360     		str	r3, [r2, #12]
 2348              	.LVL207:
 2349              	.L180:
2569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2350              		.loc 1 2569 0
 2351 0026 08BD     		pop	{r3, pc}
 2352              	.LVL208:
 2353              	.L181:
2566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2354              		.loc 1 2566 0
 2355 0028 1846     		mov	r0, r3
 2356              	.LVL209:
 2357 002a FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 2358              	.LVL210:
2569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2359              		.loc 1 2569 0
 2360 002e FAE7     		b	.L180
 2361              		.cfi_endproc
 2362              	.LFE103:
 2364              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 2365              		.align	1
 2366              		.syntax unified
 2367              		.thumb
 2368              		.thumb_func
 2369              		.fpu softvfp
 2371              	UART_EndTransmit_IT:
 2372              	.LFB117:
2968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
 2373              		.loc 1 2968 0
 2374              		.cfi_startproc
 2375              		@ args = 0, pretend = 0, frame = 0
 2376              		@ frame_needed = 0, uses_anonymous_args = 0
 2377              	.LVL211:
 2378 0000 08B5     		push	{r3, lr}
 2379              	.LCFI32:
 2380              		.cfi_def_cfa_offset 8
 2381              		.cfi_offset 3, -8
 2382              		.cfi_offset 14, -4
2970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2383              		.loc 1 2970 0
 2384 0002 0168     		ldr	r1, [r0]
 2385 0004 CB68     		ldr	r3, [r1, #12]
 2386 0006 23F04003 		bic	r3, r3, #64
 2387 000a CB60     		str	r3, [r1, #12]
2973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2388              		.loc 1 2973 0
 2389 000c 2023     		movs	r3, #32
 2390 000e 80F83930 		strb	r3, [r0, #57]
2980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2391              		.loc 1 2980 0
 2392 0012 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 2393              	.LVL212:
ARM GAS  /tmp/ccuVOPer.s 			page 104


2984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2394              		.loc 1 2984 0
 2395 0016 0020     		movs	r0, #0
 2396 0018 08BD     		pop	{r3, pc}
 2397              		.cfi_endproc
 2398              	.LFE117:
 2400              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 2401              		.align	1
 2402              		.weak	HAL_UART_TxHalfCpltCallback
 2403              		.syntax unified
 2404              		.thumb
 2405              		.thumb_func
 2406              		.fpu softvfp
 2408              	HAL_UART_TxHalfCpltCallback:
 2409              	.LFB89:
2183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2410              		.loc 1 2183 0
 2411              		.cfi_startproc
 2412              		@ args = 0, pretend = 0, frame = 0
 2413              		@ frame_needed = 0, uses_anonymous_args = 0
 2414              		@ link register save eliminated.
 2415              	.LVL213:
2189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2416              		.loc 1 2189 0
 2417 0000 7047     		bx	lr
 2418              		.cfi_endproc
 2419              	.LFE89:
 2421              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 2422              		.align	1
 2423              		.syntax unified
 2424              		.thumb
 2425              		.thumb_func
 2426              		.fpu softvfp
 2428              	UART_DMATxHalfCplt:
 2429              	.LFB104:
2578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2430              		.loc 1 2578 0
 2431              		.cfi_startproc
 2432              		@ args = 0, pretend = 0, frame = 0
 2433              		@ frame_needed = 0, uses_anonymous_args = 0
 2434              	.LVL214:
 2435 0000 08B5     		push	{r3, lr}
 2436              	.LCFI33:
 2437              		.cfi_def_cfa_offset 8
 2438              		.cfi_offset 3, -8
 2439              		.cfi_offset 14, -4
 2440              	.LVL215:
2586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2441              		.loc 1 2586 0
 2442 0002 406A     		ldr	r0, [r0, #36]
 2443              	.LVL216:
 2444 0004 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
 2445              	.LVL217:
2588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2446              		.loc 1 2588 0
 2447 0008 08BD     		pop	{r3, pc}
 2448              		.cfi_endproc
ARM GAS  /tmp/ccuVOPer.s 			page 105


 2449              	.LFE104:
 2451              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 2452              		.align	1
 2453              		.weak	HAL_UART_RxCpltCallback
 2454              		.syntax unified
 2455              		.thumb
 2456              		.thumb_func
 2457              		.fpu softvfp
 2459              	HAL_UART_RxCpltCallback:
 2460              	.LFB90:
2198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2461              		.loc 1 2198 0
 2462              		.cfi_startproc
 2463              		@ args = 0, pretend = 0, frame = 0
 2464              		@ frame_needed = 0, uses_anonymous_args = 0
 2465              		@ link register save eliminated.
 2466              	.LVL218:
2204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2467              		.loc 1 2204 0
 2468 0000 7047     		bx	lr
 2469              		.cfi_endproc
 2470              	.LFE90:
 2472              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 2473              		.align	1
 2474              		.syntax unified
 2475              		.thumb
 2476              		.thumb_func
 2477              		.fpu softvfp
 2479              	UART_DMAReceiveCplt:
 2480              	.LFB105:
2597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2481              		.loc 1 2597 0
 2482              		.cfi_startproc
 2483              		@ args = 0, pretend = 0, frame = 0
 2484              		@ frame_needed = 0, uses_anonymous_args = 0
 2485              	.LVL219:
 2486 0000 08B5     		push	{r3, lr}
 2487              	.LCFI34:
 2488              		.cfi_def_cfa_offset 8
 2489              		.cfi_offset 3, -8
 2490              		.cfi_offset 14, -4
2598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
 2491              		.loc 1 2598 0
 2492 0002 436A     		ldr	r3, [r0, #36]
 2493              	.LVL220:
2600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2494              		.loc 1 2600 0
 2495 0004 0268     		ldr	r2, [r0]
 2496 0006 1268     		ldr	r2, [r2]
 2497 0008 12F0200F 		tst	r2, #32
 2498 000c 13D1     		bne	.L191
2602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2499              		.loc 1 2602 0
 2500 000e 0022     		movs	r2, #0
 2501 0010 DA85     		strh	r2, [r3, #46]	@ movhi
2605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2502              		.loc 1 2605 0
ARM GAS  /tmp/ccuVOPer.s 			page 106


 2503 0012 1968     		ldr	r1, [r3]
 2504 0014 CA68     		ldr	r2, [r1, #12]
 2505 0016 22F48072 		bic	r2, r2, #256
 2506 001a CA60     		str	r2, [r1, #12]
2606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2507              		.loc 1 2606 0
 2508 001c 1968     		ldr	r1, [r3]
 2509 001e 4A69     		ldr	r2, [r1, #20]
 2510 0020 22F00102 		bic	r2, r2, #1
 2511 0024 4A61     		str	r2, [r1, #20]
2610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2512              		.loc 1 2610 0
 2513 0026 1968     		ldr	r1, [r3]
 2514 0028 4A69     		ldr	r2, [r1, #20]
 2515 002a 22F04002 		bic	r2, r2, #64
 2516 002e 4A61     		str	r2, [r1, #20]
2613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 2517              		.loc 1 2613 0
 2518 0030 2022     		movs	r2, #32
 2519 0032 83F83A20 		strb	r2, [r3, #58]
 2520              	.L191:
2620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2521              		.loc 1 2620 0
 2522 0036 1846     		mov	r0, r3
 2523              	.LVL221:
 2524 0038 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 2525              	.LVL222:
2622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2526              		.loc 1 2622 0
 2527 003c 08BD     		pop	{r3, pc}
 2528              		.cfi_endproc
 2529              	.LFE105:
 2531              		.section	.text.UART_Receive_IT,"ax",%progbits
 2532              		.align	1
 2533              		.syntax unified
 2534              		.thumb
 2535              		.thumb_func
 2536              		.fpu softvfp
 2538              	UART_Receive_IT:
 2539              	.LFB118:
2993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *tmp;
 2540              		.loc 1 2993 0
 2541              		.cfi_startproc
 2542              		@ args = 0, pretend = 0, frame = 0
 2543              		@ frame_needed = 0, uses_anonymous_args = 0
 2544              	.LVL223:
 2545 0000 08B5     		push	{r3, lr}
 2546              	.LCFI35:
 2547              		.cfi_def_cfa_offset 8
 2548              		.cfi_offset 3, -8
 2549              		.cfi_offset 14, -4
2997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2550              		.loc 1 2997 0
 2551 0002 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2
 2552 0006 DBB2     		uxtb	r3, r3
 2553 0008 222B     		cmp	r3, #34
 2554 000a 45D1     		bne	.L199
ARM GAS  /tmp/ccuVOPer.s 			page 107


2999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2555              		.loc 1 2999 0
 2556 000c 8368     		ldr	r3, [r0, #8]
 2557 000e B3F5805F 		cmp	r3, #4096
 2558 0012 0ED0     		beq	.L202
3015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 2559              		.loc 1 3015 0
 2560 0014 0369     		ldr	r3, [r0, #16]
 2561 0016 03BB     		cbnz	r3, .L198
3017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 2562              		.loc 1 3017 0
 2563 0018 0368     		ldr	r3, [r0]
 2564 001a 5A68     		ldr	r2, [r3, #4]
 2565 001c 836A     		ldr	r3, [r0, #40]
 2566 001e 591C     		adds	r1, r3, #1
 2567 0020 8162     		str	r1, [r0, #40]
 2568 0022 1A70     		strb	r2, [r3]
 2569              	.L197:
3025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2570              		.loc 1 3025 0
 2571 0024 C38D     		ldrh	r3, [r0, #46]
 2572 0026 013B     		subs	r3, r3, #1
 2573 0028 9BB2     		uxth	r3, r3
 2574 002a C385     		strh	r3, [r0, #46]	@ movhi
 2575 002c F3B1     		cbz	r3, .L203
3049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 2576              		.loc 1 3049 0
 2577 002e 0020     		movs	r0, #0
 2578              	.LVL224:
 2579 0030 33E0     		b	.L194
 2580              	.LVL225:
 2581              	.L202:
3001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
 2582              		.loc 1 3001 0
 2583 0032 826A     		ldr	r2, [r0, #40]
 2584              	.LVL226:
3002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 2585              		.loc 1 3002 0
 2586 0034 0369     		ldr	r3, [r0, #16]
 2587 0036 43B9     		cbnz	r3, .L196
3004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->pRxBuffPtr += 2U;
 2588              		.loc 1 3004 0
 2589 0038 0368     		ldr	r3, [r0]
 2590 003a 5B68     		ldr	r3, [r3, #4]
 2591 003c C3F30803 		ubfx	r3, r3, #0, #9
 2592 0040 1380     		strh	r3, [r2]	@ movhi
3005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 2593              		.loc 1 3005 0
 2594 0042 836A     		ldr	r3, [r0, #40]
 2595 0044 0233     		adds	r3, r3, #2
 2596 0046 8362     		str	r3, [r0, #40]
 2597 0048 ECE7     		b	.L197
 2598              	.L196:
3009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->pRxBuffPtr += 1U;
 2599              		.loc 1 3009 0
 2600 004a 0368     		ldr	r3, [r0]
 2601 004c 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/ccuVOPer.s 			page 108


 2602 004e DBB2     		uxtb	r3, r3
 2603 0050 1380     		strh	r3, [r2]	@ movhi
3010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 2604              		.loc 1 3010 0
 2605 0052 836A     		ldr	r3, [r0, #40]
 2606 0054 0133     		adds	r3, r3, #1
 2607 0056 8362     		str	r3, [r0, #40]
 2608 0058 E4E7     		b	.L197
 2609              	.LVL227:
 2610              	.L198:
3021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 2611              		.loc 1 3021 0
 2612 005a 0368     		ldr	r3, [r0]
 2613 005c 5B68     		ldr	r3, [r3, #4]
 2614 005e 826A     		ldr	r2, [r0, #40]
 2615 0060 511C     		adds	r1, r2, #1
 2616 0062 8162     		str	r1, [r0, #40]
 2617 0064 03F07F03 		and	r3, r3, #127
 2618 0068 1370     		strb	r3, [r2]
 2619 006a DBE7     		b	.L197
 2620              	.L203:
3028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2621              		.loc 1 3028 0
 2622 006c 0268     		ldr	r2, [r0]
 2623 006e D368     		ldr	r3, [r2, #12]
 2624 0070 23F02003 		bic	r3, r3, #32
 2625 0074 D360     		str	r3, [r2, #12]
3031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2626              		.loc 1 3031 0
 2627 0076 0268     		ldr	r2, [r0]
 2628 0078 D368     		ldr	r3, [r2, #12]
 2629 007a 23F48073 		bic	r3, r3, #256
 2630 007e D360     		str	r3, [r2, #12]
3034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2631              		.loc 1 3034 0
 2632 0080 0268     		ldr	r2, [r0]
 2633 0082 5369     		ldr	r3, [r2, #20]
 2634 0084 23F00103 		bic	r3, r3, #1
 2635 0088 5361     		str	r3, [r2, #20]
3037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2636              		.loc 1 3037 0
 2637 008a 2023     		movs	r3, #32
 2638 008c 80F83A30 		strb	r3, [r0, #58]
3044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2639              		.loc 1 3044 0
 2640 0090 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 2641              	.LVL228:
3047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 2642              		.loc 1 3047 0
 2643 0094 0020     		movs	r0, #0
 2644 0096 00E0     		b	.L194
 2645              	.LVL229:
 2646              	.L199:
3053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 2647              		.loc 1 3053 0
 2648 0098 0220     		movs	r0, #2
 2649              	.LVL230:
ARM GAS  /tmp/ccuVOPer.s 			page 109


 2650              	.L194:
3055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2651              		.loc 1 3055 0
 2652 009a 08BD     		pop	{r3, pc}
 2653              		.cfi_endproc
 2654              	.LFE118:
 2656              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 2657              		.align	1
 2658              		.weak	HAL_UART_RxHalfCpltCallback
 2659              		.syntax unified
 2660              		.thumb
 2661              		.thumb_func
 2662              		.fpu softvfp
 2664              	HAL_UART_RxHalfCpltCallback:
 2665              	.LFB91:
2213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2666              		.loc 1 2213 0
 2667              		.cfi_startproc
 2668              		@ args = 0, pretend = 0, frame = 0
 2669              		@ frame_needed = 0, uses_anonymous_args = 0
 2670              		@ link register save eliminated.
 2671              	.LVL231:
2219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2672              		.loc 1 2219 0
 2673 0000 7047     		bx	lr
 2674              		.cfi_endproc
 2675              	.LFE91:
 2677              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 2678              		.align	1
 2679              		.syntax unified
 2680              		.thumb
 2681              		.thumb_func
 2682              		.fpu softvfp
 2684              	UART_DMARxHalfCplt:
 2685              	.LFB106:
2631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2686              		.loc 1 2631 0
 2687              		.cfi_startproc
 2688              		@ args = 0, pretend = 0, frame = 0
 2689              		@ frame_needed = 0, uses_anonymous_args = 0
 2690              	.LVL232:
 2691 0000 08B5     		push	{r3, lr}
 2692              	.LCFI36:
 2693              		.cfi_def_cfa_offset 8
 2694              		.cfi_offset 3, -8
 2695              		.cfi_offset 14, -4
 2696              	.LVL233:
2639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2697              		.loc 1 2639 0
 2698 0002 406A     		ldr	r0, [r0, #36]
 2699              	.LVL234:
 2700 0004 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 2701              	.LVL235:
2641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2702              		.loc 1 2641 0
 2703 0008 08BD     		pop	{r3, pc}
 2704              		.cfi_endproc
ARM GAS  /tmp/ccuVOPer.s 			page 110


 2705              	.LFE106:
 2707              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 2708              		.align	1
 2709              		.weak	HAL_UART_ErrorCallback
 2710              		.syntax unified
 2711              		.thumb
 2712              		.thumb_func
 2713              		.fpu softvfp
 2715              	HAL_UART_ErrorCallback:
 2716              	.LFB92:
2228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2717              		.loc 1 2228 0
 2718              		.cfi_startproc
 2719              		@ args = 0, pretend = 0, frame = 0
 2720              		@ frame_needed = 0, uses_anonymous_args = 0
 2721              		@ link register save eliminated.
 2722              	.LVL236:
2234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2723              		.loc 1 2234 0
 2724 0000 7047     		bx	lr
 2725              		.cfi_endproc
 2726              	.LFE92:
 2728              		.section	.text.UART_DMAError,"ax",%progbits
 2729              		.align	1
 2730              		.syntax unified
 2731              		.thumb
 2732              		.thumb_func
 2733              		.fpu softvfp
 2735              	UART_DMAError:
 2736              	.LFB107:
2650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 2737              		.loc 1 2650 0
 2738              		.cfi_startproc
 2739              		@ args = 0, pretend = 0, frame = 0
 2740              		@ frame_needed = 0, uses_anonymous_args = 0
 2741              	.LVL237:
 2742 0000 10B5     		push	{r4, lr}
 2743              	.LCFI37:
 2744              		.cfi_def_cfa_offset 8
 2745              		.cfi_offset 4, -8
 2746              		.cfi_offset 14, -4
 2747              	.LVL238:
2652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2748              		.loc 1 2652 0
 2749 0002 446A     		ldr	r4, [r0, #36]
 2750              	.LVL239:
2655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 2751              		.loc 1 2655 0
 2752 0004 2368     		ldr	r3, [r4]
 2753 0006 5A69     		ldr	r2, [r3, #20]
 2754              	.LVL240:
2656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2755              		.loc 1 2656 0
 2756 0008 94F83930 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
 2757 000c DBB2     		uxtb	r3, r3
 2758 000e 212B     		cmp	r3, #33
 2759 0010 10D0     		beq	.L212
ARM GAS  /tmp/ccuVOPer.s 			page 111


 2760              	.LVL241:
 2761              	.L209:
2663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 2762              		.loc 1 2663 0
 2763 0012 2368     		ldr	r3, [r4]
 2764 0014 5A69     		ldr	r2, [r3, #20]
 2765 0016 02F04002 		and	r2, r2, #64
 2766              	.LVL242:
2664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2767              		.loc 1 2664 0
 2768 001a 94F83A30 		ldrb	r3, [r4, #58]	@ zero_extendqisi2
 2769 001e DBB2     		uxtb	r3, r3
 2770 0020 222B     		cmp	r3, #34
 2771 0022 11D0     		beq	.L213
 2772              	.LVL243:
 2773              	.L210:
2670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 2774              		.loc 1 2670 0
 2775 0024 E36B     		ldr	r3, [r4, #60]
 2776 0026 43F01003 		orr	r3, r3, #16
 2777 002a E363     		str	r3, [r4, #60]
2676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2778              		.loc 1 2676 0
 2779 002c 2046     		mov	r0, r4
 2780 002e FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2781              	.LVL244:
2678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2782              		.loc 1 2678 0
 2783 0032 10BD     		pop	{r4, pc}
 2784              	.LVL245:
 2785              	.L212:
 2786 0034 02F08002 		and	r2, r2, #128
 2787              	.LVL246:
2656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2788              		.loc 1 2656 0 discriminator 1
 2789 0038 002A     		cmp	r2, #0
 2790 003a EAD0     		beq	.L209
2658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2791              		.loc 1 2658 0
 2792 003c 0023     		movs	r3, #0
 2793 003e E384     		strh	r3, [r4, #38]	@ movhi
2659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 2794              		.loc 1 2659 0
 2795 0040 2046     		mov	r0, r4
 2796              	.LVL247:
 2797 0042 FFF7FEFF 		bl	UART_EndTxTransfer
 2798              	.LVL248:
 2799 0046 E4E7     		b	.L209
 2800              	.LVL249:
 2801              	.L213:
2664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2802              		.loc 1 2664 0 discriminator 1
 2803 0048 002A     		cmp	r2, #0
 2804 004a EBD0     		beq	.L210
2666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2805              		.loc 1 2666 0
 2806 004c 0023     		movs	r3, #0
ARM GAS  /tmp/ccuVOPer.s 			page 112


 2807 004e E385     		strh	r3, [r4, #46]	@ movhi
2667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 2808              		.loc 1 2667 0
 2809 0050 2046     		mov	r0, r4
 2810 0052 FFF7FEFF 		bl	UART_EndRxTransfer
 2811              	.LVL250:
 2812 0056 E5E7     		b	.L210
 2813              		.cfi_endproc
 2814              	.LFE107:
 2816              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 2817              		.align	1
 2818              		.global	HAL_UART_IRQHandler
 2819              		.syntax unified
 2820              		.thumb
 2821              		.thumb_func
 2822              		.fpu softvfp
 2824              	HAL_UART_IRQHandler:
 2825              	.LFB87:
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 2826              		.loc 1 2022 0
 2827              		.cfi_startproc
 2828              		@ args = 0, pretend = 0, frame = 0
 2829              		@ frame_needed = 0, uses_anonymous_args = 0
 2830              	.LVL251:
 2831 0000 10B5     		push	{r4, lr}
 2832              	.LCFI38:
 2833              		.cfi_def_cfa_offset 8
 2834              		.cfi_offset 4, -8
 2835              		.cfi_offset 14, -4
 2836 0002 0446     		mov	r4, r0
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 2837              		.loc 1 2023 0
 2838 0004 0268     		ldr	r2, [r0]
 2839 0006 1368     		ldr	r3, [r2]
 2840              	.LVL252:
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 2841              		.loc 1 2024 0
 2842 0008 D168     		ldr	r1, [r2, #12]
 2843              	.LVL253:
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t errorflags = 0x00U;
 2844              		.loc 1 2025 0
 2845 000a 5269     		ldr	r2, [r2, #20]
 2846              	.LVL254:
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2847              		.loc 1 2031 0
 2848 000c 13F00F00 		ands	r0, r3, #15
 2849              	.LVL255:
 2850 0010 05D1     		bne	.L215
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2851              		.loc 1 2034 0
 2852 0012 13F0200F 		tst	r3, #32
 2853 0016 02D0     		beq	.L215
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2854              		.loc 1 2034 0 is_stmt 0 discriminator 1
 2855 0018 11F0200F 		tst	r1, #32
 2856 001c 53D1     		bne	.L230
 2857              	.L215:
ARM GAS  /tmp/ccuVOPer.s 			page 113


2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2858              		.loc 1 2042 0 is_stmt 1
 2859 001e 0028     		cmp	r0, #0
 2860 0020 67D0     		beq	.L217
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2861              		.loc 1 2042 0 is_stmt 0 discriminator 1
 2862 0022 12F00102 		ands	r2, r2, #1
 2863              	.LVL256:
 2864 0026 02D1     		bne	.L218
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 2865              		.loc 1 2042 0 discriminator 2
 2866 0028 11F4907F 		tst	r1, #288
 2867 002c 61D0     		beq	.L217
 2868              	.L218:
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2869              		.loc 1 2045 0 is_stmt 1
 2870 002e 13F0010F 		tst	r3, #1
 2871 0032 06D0     		beq	.L219
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2872              		.loc 1 2045 0 is_stmt 0 discriminator 1
 2873 0034 11F4807F 		tst	r1, #256
 2874 0038 03D0     		beq	.L219
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 2875              		.loc 1 2047 0 is_stmt 1
 2876 003a E06B     		ldr	r0, [r4, #60]
 2877              	.LVL257:
 2878 003c 40F00100 		orr	r0, r0, #1
 2879 0040 E063     		str	r0, [r4, #60]
 2880              	.L219:
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2881              		.loc 1 2051 0
 2882 0042 13F0040F 		tst	r3, #4
 2883 0046 04D0     		beq	.L220
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2884              		.loc 1 2051 0 is_stmt 0 discriminator 1
 2885 0048 1AB1     		cbz	r2, .L220
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 2886              		.loc 1 2053 0 is_stmt 1
 2887 004a E06B     		ldr	r0, [r4, #60]
 2888 004c 40F00200 		orr	r0, r0, #2
 2889 0050 E063     		str	r0, [r4, #60]
 2890              	.L220:
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2891              		.loc 1 2057 0
 2892 0052 13F0020F 		tst	r3, #2
 2893 0056 04D0     		beq	.L221
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2894              		.loc 1 2057 0 is_stmt 0 discriminator 1
 2895 0058 1AB1     		cbz	r2, .L221
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 2896              		.loc 1 2059 0 is_stmt 1
 2897 005a E06B     		ldr	r0, [r4, #60]
 2898 005c 40F00400 		orr	r0, r0, #4
 2899 0060 E063     		str	r0, [r4, #60]
 2900              	.L221:
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2901              		.loc 1 2063 0
ARM GAS  /tmp/ccuVOPer.s 			page 114


 2902 0062 13F0080F 		tst	r3, #8
 2903 0066 04D0     		beq	.L222
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2904              		.loc 1 2063 0 is_stmt 0 discriminator 1
 2905 0068 1AB1     		cbz	r2, .L222
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 2906              		.loc 1 2065 0 is_stmt 1
 2907 006a E26B     		ldr	r2, [r4, #60]
 2908 006c 42F00802 		orr	r2, r2, #8
 2909 0070 E263     		str	r2, [r4, #60]
 2910              	.L222:
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2911              		.loc 1 2069 0
 2912 0072 E26B     		ldr	r2, [r4, #60]
 2913 0074 002A     		cmp	r2, #0
 2914 0076 48D0     		beq	.L214
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 2915              		.loc 1 2072 0
 2916 0078 13F0200F 		tst	r3, #32
 2917 007c 02D0     		beq	.L223
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 2918              		.loc 1 2072 0 is_stmt 0 discriminator 1
 2919 007e 11F0200F 		tst	r1, #32
 2920 0082 24D1     		bne	.L231
 2921              	.LVL258:
 2922              	.L223:
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 2923              		.loc 1 2079 0 is_stmt 1
 2924 0084 2368     		ldr	r3, [r4]
 2925 0086 5B69     		ldr	r3, [r3, #20]
 2926 0088 03F04003 		and	r3, r3, #64
 2927              	.LVL259:
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 2928              		.loc 1 2080 0
 2929 008c E26B     		ldr	r2, [r4, #60]
 2930 008e 12F0080F 		tst	r2, #8
 2931 0092 00D1     		bne	.L224
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 2932              		.loc 1 2080 0 is_stmt 0 discriminator 1
 2933 0094 3BB3     		cbz	r3, .L225
 2934              	.L224:
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2935              		.loc 1 2085 0 is_stmt 1
 2936 0096 2046     		mov	r0, r4
 2937 0098 FFF7FEFF 		bl	UART_EndRxTransfer
 2938              	.LVL260:
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 2939              		.loc 1 2088 0
 2940 009c 2368     		ldr	r3, [r4]
 2941 009e 5A69     		ldr	r2, [r3, #20]
 2942 00a0 12F0400F 		tst	r2, #64
 2943 00a4 1BD0     		beq	.L226
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 2944              		.loc 1 2090 0
 2945 00a6 5A69     		ldr	r2, [r3, #20]
 2946 00a8 22F04002 		bic	r2, r2, #64
 2947 00ac 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/ccuVOPer.s 			page 115


2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
 2948              		.loc 1 2093 0
 2949 00ae 636B     		ldr	r3, [r4, #52]
 2950 00b0 8BB1     		cbz	r3, .L227
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 2951              		.loc 1 2097 0
 2952 00b2 1A4A     		ldr	r2, .L234
 2953 00b4 5A63     		str	r2, [r3, #52]
2098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             {
 2954              		.loc 1 2098 0
 2955 00b6 606B     		ldr	r0, [r4, #52]
 2956 00b8 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2957              	.LVL261:
 2958 00bc 28B3     		cbz	r0, .L214
2101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             }
 2959              		.loc 1 2101 0
 2960 00be 606B     		ldr	r0, [r4, #52]
 2961 00c0 436B     		ldr	r3, [r0, #52]
 2962 00c2 9847     		blx	r3
 2963              	.LVL262:
 2964 00c4 21E0     		b	.L214
 2965              	.LVL263:
 2966              	.L230:
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 2967              		.loc 1 2036 0
 2968 00c6 2046     		mov	r0, r4
 2969              	.LVL264:
 2970 00c8 FFF7FEFF 		bl	UART_Receive_IT
 2971              	.LVL265:
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 2972              		.loc 1 2037 0
 2973 00cc 1DE0     		b	.L214
 2974              	.LVL266:
 2975              	.L231:
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 2976              		.loc 1 2074 0
 2977 00ce 2046     		mov	r0, r4
 2978 00d0 FFF7FEFF 		bl	UART_Receive_IT
 2979              	.LVL267:
 2980 00d4 D6E7     		b	.L223
 2981              	.LVL268:
 2982              	.L227:
2112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2983              		.loc 1 2112 0
 2984 00d6 2046     		mov	r0, r4
 2985 00d8 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2986              	.LVL269:
 2987 00dc 15E0     		b	.L214
 2988              	.L226:
2124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2989              		.loc 1 2124 0
 2990 00de 2046     		mov	r0, r4
 2991 00e0 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2992              	.LVL270:
 2993 00e4 11E0     		b	.L214
 2994              	.LVL271:
 2995              	.L225:
ARM GAS  /tmp/ccuVOPer.s 			page 116


2137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2996              		.loc 1 2137 0
 2997 00e6 2046     		mov	r0, r4
 2998 00e8 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2999              	.LVL272:
2140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 3000              		.loc 1 2140 0
 3001 00ec 0023     		movs	r3, #0
 3002 00ee E363     		str	r3, [r4, #60]
 3003 00f0 0BE0     		b	.L214
 3004              	.LVL273:
 3005              	.L217:
2147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 3006              		.loc 1 2147 0
 3007 00f2 13F0800F 		tst	r3, #128
 3008 00f6 02D0     		beq	.L228
2147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 3009              		.loc 1 2147 0 is_stmt 0 discriminator 1
 3010 00f8 11F0800F 		tst	r1, #128
 3011 00fc 06D1     		bne	.L232
 3012              	.L228:
2154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 3013              		.loc 1 2154 0 is_stmt 1
 3014 00fe 13F0400F 		tst	r3, #64
 3015 0102 02D0     		beq	.L214
2154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 3016              		.loc 1 2154 0 is_stmt 0 discriminator 1
 3017 0104 11F0400F 		tst	r1, #64
 3018 0108 04D1     		bne	.L233
 3019              	.LVL274:
 3020              	.L214:
2159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3021              		.loc 1 2159 0 is_stmt 1
 3022 010a 10BD     		pop	{r4, pc}
 3023              	.LVL275:
 3024              	.L232:
2149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 3025              		.loc 1 2149 0
 3026 010c 2046     		mov	r0, r4
 3027              	.LVL276:
 3028 010e FFF7FEFF 		bl	UART_Transmit_IT
 3029              	.LVL277:
2150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 3030              		.loc 1 2150 0
 3031 0112 FAE7     		b	.L214
 3032              	.LVL278:
 3033              	.L233:
2156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 3034              		.loc 1 2156 0
 3035 0114 2046     		mov	r0, r4
 3036              	.LVL279:
 3037 0116 FFF7FEFF 		bl	UART_EndTransmit_IT
 3038              	.LVL280:
2157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 3039              		.loc 1 2157 0
 3040 011a F6E7     		b	.L214
 3041              	.L235:
ARM GAS  /tmp/ccuVOPer.s 			page 117


 3042              		.align	2
 3043              	.L234:
 3044 011c 00000000 		.word	UART_DMAAbortOnError
 3045              		.cfi_endproc
 3046              	.LFE87:
 3048              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 3049              		.align	1
 3050              		.syntax unified
 3051              		.thumb
 3052              		.thumb_func
 3053              		.fpu softvfp
 3055              	UART_DMAAbortOnError:
 3056              	.LFB111:
2754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3057              		.loc 1 2754 0
 3058              		.cfi_startproc
 3059              		@ args = 0, pretend = 0, frame = 0
 3060              		@ frame_needed = 0, uses_anonymous_args = 0
 3061              	.LVL281:
 3062 0000 08B5     		push	{r3, lr}
 3063              	.LCFI39:
 3064              		.cfi_def_cfa_offset 8
 3065              		.cfi_offset 3, -8
 3066              		.cfi_offset 14, -4
2755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 3067              		.loc 1 2755 0
 3068 0002 406A     		ldr	r0, [r0, #36]
 3069              	.LVL282:
2756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 3070              		.loc 1 2756 0
 3071 0004 0023     		movs	r3, #0
 3072 0006 C385     		strh	r3, [r0, #46]	@ movhi
2757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3073              		.loc 1 2757 0
 3074 0008 C384     		strh	r3, [r0, #38]	@ movhi
2764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3075              		.loc 1 2764 0
 3076 000a FFF7FEFF 		bl	HAL_UART_ErrorCallback
 3077              	.LVL283:
2766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3078              		.loc 1 2766 0
 3079 000e 08BD     		pop	{r3, pc}
 3080              		.cfi_endproc
 3081              	.LFE111:
 3083              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 3084              		.align	1
 3085              		.weak	HAL_UART_AbortCpltCallback
 3086              		.syntax unified
 3087              		.thumb
 3088              		.thumb_func
 3089              		.fpu softvfp
 3091              	HAL_UART_AbortCpltCallback:
 3092              	.LFB93:
2242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 3093              		.loc 1 2242 0
 3094              		.cfi_startproc
 3095              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccuVOPer.s 			page 118


 3096              		@ frame_needed = 0, uses_anonymous_args = 0
 3097              		@ link register save eliminated.
 3098              	.LVL284:
2249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3099              		.loc 1 2249 0
 3100 0000 7047     		bx	lr
 3101              		.cfi_endproc
 3102              	.LFE93:
 3104              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 3105              		.align	1
 3106              		.global	HAL_UART_Abort_IT
 3107              		.syntax unified
 3108              		.thumb
 3109              		.thumb_func
 3110              		.fpu softvfp
 3112              	HAL_UART_Abort_IT:
 3113              	.LFB84:
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 3114              		.loc 1 1747 0
 3115              		.cfi_startproc
 3116              		@ args = 0, pretend = 0, frame = 0
 3117              		@ frame_needed = 0, uses_anonymous_args = 0
 3118              	.LVL285:
 3119 0000 10B5     		push	{r4, lr}
 3120              	.LCFI40:
 3121              		.cfi_def_cfa_offset 8
 3122              		.cfi_offset 4, -8
 3123              		.cfi_offset 14, -4
 3124 0002 0446     		mov	r4, r0
 3125              	.LVL286:
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3126              		.loc 1 1751 0
 3127 0004 0268     		ldr	r2, [r0]
 3128 0006 D368     		ldr	r3, [r2, #12]
 3129 0008 23F4F073 		bic	r3, r3, #480
 3130 000c D360     		str	r3, [r2, #12]
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3131              		.loc 1 1752 0
 3132 000e 0268     		ldr	r2, [r0]
 3133 0010 5369     		ldr	r3, [r2, #20]
 3134 0012 23F00103 		bic	r3, r3, #1
 3135 0016 5361     		str	r3, [r2, #20]
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 3136              		.loc 1 1757 0
 3137 0018 036B     		ldr	r3, [r0, #48]
 3138 001a 33B1     		cbz	r3, .L240
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 3139              		.loc 1 1761 0
 3140 001c 0268     		ldr	r2, [r0]
 3141 001e 5269     		ldr	r2, [r2, #20]
 3142 0020 12F0800F 		tst	r2, #128
 3143 0024 1DD0     		beq	.L241
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 3144              		.loc 1 1763 0
 3145 0026 254A     		ldr	r2, .L252
 3146 0028 5A63     		str	r2, [r3, #52]
 3147              	.L240:
ARM GAS  /tmp/ccuVOPer.s 			page 119


1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 3148              		.loc 1 1771 0
 3149 002a 636B     		ldr	r3, [r4, #52]
 3150 002c 33B1     		cbz	r3, .L242
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 3151              		.loc 1 1775 0
 3152 002e 2268     		ldr	r2, [r4]
 3153 0030 5269     		ldr	r2, [r2, #20]
 3154 0032 12F0400F 		tst	r2, #64
 3155 0036 17D0     		beq	.L243
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 3156              		.loc 1 1777 0
 3157 0038 214A     		ldr	r2, .L252+4
 3158 003a 5A63     		str	r2, [r3, #52]
 3159              	.L242:
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 3160              		.loc 1 1786 0
 3161 003c 2368     		ldr	r3, [r4]
 3162 003e 5A69     		ldr	r2, [r3, #20]
 3163 0040 12F0800F 		tst	r2, #128
 3164 0044 13D0     		beq	.L248
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3165              		.loc 1 1789 0
 3166 0046 5A69     		ldr	r2, [r3, #20]
 3167 0048 22F08002 		bic	r2, r2, #128
 3168 004c 5A61     		str	r2, [r3, #20]
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 3169              		.loc 1 1792 0
 3170 004e 206B     		ldr	r0, [r4, #48]
 3171              	.LVL287:
 3172 0050 60B3     		cbz	r0, .L249
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 3173              		.loc 1 1798 0
 3174 0052 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3175              	.LVL288:
 3176 0056 58B3     		cbz	r0, .L250
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 3177              		.loc 1 1800 0
 3178 0058 236B     		ldr	r3, [r4, #48]
 3179 005a 0022     		movs	r2, #0
 3180 005c 5A63     		str	r2, [r3, #52]
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3181              		.loc 1 1748 0
 3182 005e 0121     		movs	r1, #1
 3183 0060 06E0     		b	.L244
 3184              	.LVL289:
 3185              	.L241:
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 3186              		.loc 1 1767 0
 3187 0062 0022     		movs	r2, #0
 3188 0064 5A63     		str	r2, [r3, #52]
 3189 0066 E0E7     		b	.L240
 3190              	.L243:
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 3191              		.loc 1 1781 0
 3192 0068 0022     		movs	r2, #0
 3193 006a 5A63     		str	r2, [r3, #52]
ARM GAS  /tmp/ccuVOPer.s 			page 120


 3194 006c E6E7     		b	.L242
 3195              	.L248:
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3196              		.loc 1 1748 0
 3197 006e 0121     		movs	r1, #1
 3198              	.LVL290:
 3199              	.L244:
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 3200              		.loc 1 1810 0
 3201 0070 2368     		ldr	r3, [r4]
 3202 0072 5A69     		ldr	r2, [r3, #20]
 3203 0074 12F0400F 		tst	r2, #64
 3204 0078 1CD0     		beq	.L245
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3205              		.loc 1 1812 0
 3206 007a 5A69     		ldr	r2, [r3, #20]
 3207 007c 22F04002 		bic	r2, r2, #64
 3208 0080 5A61     		str	r2, [r3, #20]
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 3209              		.loc 1 1815 0
 3210 0082 606B     		ldr	r0, [r4, #52]
 3211 0084 B0B1     		cbz	r0, .L245
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 3212              		.loc 1 1821 0
 3213 0086 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3214              	.LVL291:
 3215 008a A8B1     		cbz	r0, .L246
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x01U;
 3216              		.loc 1 1823 0
 3217 008c 636B     		ldr	r3, [r4, #52]
 3218 008e 0022     		movs	r2, #0
 3219 0090 5A63     		str	r2, [r3, #52]
 3220              	.LVL292:
 3221              	.L247:
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 3222              		.loc 1 1837 0
 3223 0092 0023     		movs	r3, #0
 3224 0094 E384     		strh	r3, [r4, #38]	@ movhi
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3225              		.loc 1 1838 0
 3226 0096 E385     		strh	r3, [r4, #46]	@ movhi
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3227              		.loc 1 1841 0
 3228 0098 E363     		str	r3, [r4, #60]
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3229              		.loc 1 1844 0
 3230 009a 2023     		movs	r3, #32
 3231 009c 84F83930 		strb	r3, [r4, #57]
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3232              		.loc 1 1845 0
 3233 00a0 84F83A30 		strb	r3, [r4, #58]
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3234              		.loc 1 1853 0
 3235 00a4 2046     		mov	r0, r4
 3236 00a6 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 3237              	.LVL293:
 3238 00aa 05E0     		b	.L246
ARM GAS  /tmp/ccuVOPer.s 			page 121


 3239              	.LVL294:
 3240              	.L249:
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3241              		.loc 1 1748 0
 3242 00ac 0121     		movs	r1, #1
 3243 00ae DFE7     		b	.L244
 3244              	.L250:
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 3245              		.loc 1 1804 0
 3246 00b0 0021     		movs	r1, #0
 3247 00b2 DDE7     		b	.L244
 3248              	.LVL295:
 3249              	.L245:
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 3250              		.loc 1 1834 0
 3251 00b4 0029     		cmp	r1, #0
 3252 00b6 ECD1     		bne	.L247
 3253              	.LVL296:
 3254              	.L246:
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3255              		.loc 1 1858 0
 3256 00b8 0020     		movs	r0, #0
 3257 00ba 10BD     		pop	{r4, pc}
 3258              	.LVL297:
 3259              	.L253:
 3260              		.align	2
 3261              	.L252:
 3262 00bc 00000000 		.word	UART_DMATxAbortCallback
 3263 00c0 00000000 		.word	UART_DMARxAbortCallback
 3264              		.cfi_endproc
 3265              	.LFE84:
 3267              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 3268              		.align	1
 3269              		.syntax unified
 3270              		.thumb
 3271              		.thumb_func
 3272              		.fpu softvfp
 3274              	UART_DMARxAbortCallback:
 3275              	.LFB113:
2823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3276              		.loc 1 2823 0
 3277              		.cfi_startproc
 3278              		@ args = 0, pretend = 0, frame = 0
 3279              		@ frame_needed = 0, uses_anonymous_args = 0
 3280              	.LVL298:
 3281 0000 08B5     		push	{r3, lr}
 3282              	.LCFI41:
 3283              		.cfi_def_cfa_offset 8
 3284              		.cfi_offset 3, -8
 3285              		.cfi_offset 14, -4
2824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3286              		.loc 1 2824 0
 3287 0002 406A     		ldr	r0, [r0, #36]
 3288              	.LVL299:
2826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3289              		.loc 1 2826 0
 3290 0004 436B     		ldr	r3, [r0, #52]
ARM GAS  /tmp/ccuVOPer.s 			page 122


 3291 0006 0022     		movs	r2, #0
 3292 0008 5A63     		str	r2, [r3, #52]
2829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 3293              		.loc 1 2829 0
 3294 000a 036B     		ldr	r3, [r0, #48]
 3295 000c 13B1     		cbz	r3, .L255
2831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 3296              		.loc 1 2831 0
 3297 000e 5B6B     		ldr	r3, [r3, #52]
 3298 0010 03B1     		cbz	r3, .L255
 3299              	.LVL300:
 3300              	.L254:
2856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3301              		.loc 1 2856 0
 3302 0012 08BD     		pop	{r3, pc}
 3303              	.LVL301:
 3304              	.L255:
2838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 3305              		.loc 1 2838 0
 3306 0014 0023     		movs	r3, #0
 3307 0016 C384     		strh	r3, [r0, #38]	@ movhi
2839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3308              		.loc 1 2839 0
 3309 0018 C385     		strh	r3, [r0, #46]	@ movhi
2842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3310              		.loc 1 2842 0
 3311 001a C363     		str	r3, [r0, #60]
2845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 3312              		.loc 1 2845 0
 3313 001c 2023     		movs	r3, #32
 3314 001e 80F83930 		strb	r3, [r0, #57]
2846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3315              		.loc 1 2846 0
 3316 0022 80F83A30 		strb	r3, [r0, #58]
2854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3317              		.loc 1 2854 0
 3318 0026 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 3319              	.LVL302:
 3320 002a F2E7     		b	.L254
 3321              		.cfi_endproc
 3322              	.LFE113:
 3324              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 3325              		.align	1
 3326              		.syntax unified
 3327              		.thumb
 3328              		.thumb_func
 3329              		.fpu softvfp
 3331              	UART_DMATxAbortCallback:
 3332              	.LFB112:
2778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3333              		.loc 1 2778 0
 3334              		.cfi_startproc
 3335              		@ args = 0, pretend = 0, frame = 0
 3336              		@ frame_needed = 0, uses_anonymous_args = 0
 3337              	.LVL303:
 3338 0000 08B5     		push	{r3, lr}
 3339              	.LCFI42:
ARM GAS  /tmp/ccuVOPer.s 			page 123


 3340              		.cfi_def_cfa_offset 8
 3341              		.cfi_offset 3, -8
 3342              		.cfi_offset 14, -4
2779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3343              		.loc 1 2779 0
 3344 0002 406A     		ldr	r0, [r0, #36]
 3345              	.LVL304:
2781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3346              		.loc 1 2781 0
 3347 0004 036B     		ldr	r3, [r0, #48]
 3348 0006 0022     		movs	r2, #0
 3349 0008 5A63     		str	r2, [r3, #52]
2784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 3350              		.loc 1 2784 0
 3351 000a 436B     		ldr	r3, [r0, #52]
 3352 000c 13B1     		cbz	r3, .L259
2786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 3353              		.loc 1 2786 0
 3354 000e 5B6B     		ldr	r3, [r3, #52]
 3355 0010 03B1     		cbz	r3, .L259
 3356              	.LVL305:
 3357              	.L258:
2811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3358              		.loc 1 2811 0
 3359 0012 08BD     		pop	{r3, pc}
 3360              	.LVL306:
 3361              	.L259:
2793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 3362              		.loc 1 2793 0
 3363 0014 0023     		movs	r3, #0
 3364 0016 C384     		strh	r3, [r0, #38]	@ movhi
2794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3365              		.loc 1 2794 0
 3366 0018 C385     		strh	r3, [r0, #46]	@ movhi
2797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3367              		.loc 1 2797 0
 3368 001a C363     		str	r3, [r0, #60]
2800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 3369              		.loc 1 2800 0
 3370 001c 2023     		movs	r3, #32
 3371 001e 80F83930 		strb	r3, [r0, #57]
2801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3372              		.loc 1 2801 0
 3373 0022 80F83A30 		strb	r3, [r0, #58]
2809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3374              		.loc 1 2809 0
 3375 0026 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 3376              	.LVL307:
 3377 002a F2E7     		b	.L258
 3378              		.cfi_endproc
 3379              	.LFE112:
 3381              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 3382              		.align	1
 3383              		.weak	HAL_UART_AbortTransmitCpltCallback
 3384              		.syntax unified
 3385              		.thumb
 3386              		.thumb_func
ARM GAS  /tmp/ccuVOPer.s 			page 124


 3387              		.fpu softvfp
 3389              	HAL_UART_AbortTransmitCpltCallback:
 3390              	.LFB94:
2257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 3391              		.loc 1 2257 0
 3392              		.cfi_startproc
 3393              		@ args = 0, pretend = 0, frame = 0
 3394              		@ frame_needed = 0, uses_anonymous_args = 0
 3395              		@ link register save eliminated.
 3396              	.LVL308:
2264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3397              		.loc 1 2264 0
 3398 0000 7047     		bx	lr
 3399              		.cfi_endproc
 3400              	.LFE94:
 3402              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 3403              		.align	1
 3404              		.global	HAL_UART_AbortTransmit_IT
 3405              		.syntax unified
 3406              		.thumb
 3407              		.thumb_func
 3408              		.fpu softvfp
 3410              	HAL_UART_AbortTransmit_IT:
 3411              	.LFB85:
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 3412              		.loc 1 1875 0
 3413              		.cfi_startproc
 3414              		@ args = 0, pretend = 0, frame = 0
 3415              		@ frame_needed = 0, uses_anonymous_args = 0
 3416              	.LVL309:
 3417 0000 10B5     		push	{r4, lr}
 3418              	.LCFI43:
 3419              		.cfi_def_cfa_offset 8
 3420              		.cfi_offset 4, -8
 3421              		.cfi_offset 14, -4
 3422 0002 0446     		mov	r4, r0
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3423              		.loc 1 1877 0
 3424 0004 0268     		ldr	r2, [r0]
 3425 0006 D368     		ldr	r3, [r2, #12]
 3426 0008 23F0C003 		bic	r3, r3, #192
 3427 000c D360     		str	r3, [r2, #12]
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 3428              		.loc 1 1880 0
 3429 000e 0368     		ldr	r3, [r0]
 3430 0010 5A69     		ldr	r2, [r3, #20]
 3431 0012 12F0800F 		tst	r2, #128
 3432 0016 18D0     		beq	.L264
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3433              		.loc 1 1882 0
 3434 0018 5A69     		ldr	r2, [r3, #20]
 3435 001a 22F08002 		bic	r2, r2, #128
 3436 001e 5A61     		str	r2, [r3, #20]
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 3437              		.loc 1 1885 0
 3438 0020 036B     		ldr	r3, [r0, #48]
 3439 0022 53B1     		cbz	r3, .L265
ARM GAS  /tmp/ccuVOPer.s 			page 125


1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3440              		.loc 1 1889 0
 3441 0024 0D4A     		ldr	r2, .L268
 3442 0026 5A63     		str	r2, [r3, #52]
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 3443              		.loc 1 1892 0
 3444 0028 006B     		ldr	r0, [r0, #48]
 3445              	.LVL310:
 3446 002a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3447              	.LVL311:
 3448 002e 10B1     		cbz	r0, .L266
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 3449              		.loc 1 1895 0
 3450 0030 206B     		ldr	r0, [r4, #48]
 3451 0032 436B     		ldr	r3, [r0, #52]
 3452 0034 9847     		blx	r3
 3453              	.LVL312:
 3454              	.L266:
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3455              		.loc 1 1935 0
 3456 0036 0020     		movs	r0, #0
 3457 0038 10BD     		pop	{r4, pc}
 3458              	.LVL313:
 3459              	.L265:
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3460              		.loc 1 1901 0
 3461 003a 0023     		movs	r3, #0
 3462 003c C384     		strh	r3, [r0, #38]	@ movhi
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3463              		.loc 1 1904 0
 3464 003e 2023     		movs	r3, #32
 3465 0040 80F83930 		strb	r3, [r0, #57]
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3466              		.loc 1 1912 0
 3467 0044 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3468              	.LVL314:
 3469 0048 F5E7     		b	.L266
 3470              	.LVL315:
 3471              	.L264:
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3472              		.loc 1 1919 0
 3473 004a 0023     		movs	r3, #0
 3474 004c C384     		strh	r3, [r0, #38]	@ movhi
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3475              		.loc 1 1922 0
 3476 004e 2023     		movs	r3, #32
 3477 0050 80F83930 		strb	r3, [r0, #57]
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3478              		.loc 1 1930 0
 3479 0054 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3480              	.LVL316:
 3481 0058 EDE7     		b	.L266
 3482              	.L269:
 3483 005a 00BF     		.align	2
 3484              	.L268:
 3485 005c 00000000 		.word	UART_DMATxOnlyAbortCallback
 3486              		.cfi_endproc
ARM GAS  /tmp/ccuVOPer.s 			page 126


 3487              	.LFE85:
 3489              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 3490              		.align	1
 3491              		.syntax unified
 3492              		.thumb
 3493              		.thumb_func
 3494              		.fpu softvfp
 3496              	UART_DMATxOnlyAbortCallback:
 3497              	.LFB114:
2868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3498              		.loc 1 2868 0
 3499              		.cfi_startproc
 3500              		@ args = 0, pretend = 0, frame = 0
 3501              		@ frame_needed = 0, uses_anonymous_args = 0
 3502              	.LVL317:
 3503 0000 08B5     		push	{r3, lr}
 3504              	.LCFI44:
 3505              		.cfi_def_cfa_offset 8
 3506              		.cfi_offset 3, -8
 3507              		.cfi_offset 14, -4
2869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3508              		.loc 1 2869 0
 3509 0002 406A     		ldr	r0, [r0, #36]
 3510              	.LVL318:
2871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3511              		.loc 1 2871 0
 3512 0004 0023     		movs	r3, #0
 3513 0006 C384     		strh	r3, [r0, #38]	@ movhi
2874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3514              		.loc 1 2874 0
 3515 0008 2023     		movs	r3, #32
 3516 000a 80F83930 		strb	r3, [r0, #57]
2882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3517              		.loc 1 2882 0
 3518 000e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3519              	.LVL319:
2884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3520              		.loc 1 2884 0
 3521 0012 08BD     		pop	{r3, pc}
 3522              		.cfi_endproc
 3523              	.LFE114:
 3525              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 3526              		.align	1
 3527              		.weak	HAL_UART_AbortReceiveCpltCallback
 3528              		.syntax unified
 3529              		.thumb
 3530              		.thumb_func
 3531              		.fpu softvfp
 3533              	HAL_UART_AbortReceiveCpltCallback:
 3534              	.LFB95:
2272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 3535              		.loc 1 2272 0
 3536              		.cfi_startproc
 3537              		@ args = 0, pretend = 0, frame = 0
 3538              		@ frame_needed = 0, uses_anonymous_args = 0
 3539              		@ link register save eliminated.
 3540              	.LVL320:
ARM GAS  /tmp/ccuVOPer.s 			page 127


2279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3541              		.loc 1 2279 0
 3542 0000 7047     		bx	lr
 3543              		.cfi_endproc
 3544              	.LFE95:
 3546              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 3547              		.align	1
 3548              		.global	HAL_UART_AbortReceive_IT
 3549              		.syntax unified
 3550              		.thumb
 3551              		.thumb_func
 3552              		.fpu softvfp
 3554              	HAL_UART_AbortReceive_IT:
 3555              	.LFB86:
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 3556              		.loc 1 1952 0
 3557              		.cfi_startproc
 3558              		@ args = 0, pretend = 0, frame = 0
 3559              		@ frame_needed = 0, uses_anonymous_args = 0
 3560              	.LVL321:
 3561 0000 10B5     		push	{r4, lr}
 3562              	.LCFI45:
 3563              		.cfi_def_cfa_offset 8
 3564              		.cfi_offset 4, -8
 3565              		.cfi_offset 14, -4
 3566 0002 0446     		mov	r4, r0
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3567              		.loc 1 1954 0
 3568 0004 0268     		ldr	r2, [r0]
 3569 0006 D368     		ldr	r3, [r2, #12]
 3570 0008 23F49073 		bic	r3, r3, #288
 3571 000c D360     		str	r3, [r2, #12]
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3572              		.loc 1 1955 0
 3573 000e 0268     		ldr	r2, [r0]
 3574 0010 5369     		ldr	r3, [r2, #20]
 3575 0012 23F00103 		bic	r3, r3, #1
 3576 0016 5361     		str	r3, [r2, #20]
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 3577              		.loc 1 1958 0
 3578 0018 0368     		ldr	r3, [r0]
 3579 001a 5A69     		ldr	r2, [r3, #20]
 3580 001c 12F0400F 		tst	r2, #64
 3581 0020 18D0     		beq	.L274
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3582              		.loc 1 1960 0
 3583 0022 5A69     		ldr	r2, [r3, #20]
 3584 0024 22F04002 		bic	r2, r2, #64
 3585 0028 5A61     		str	r2, [r3, #20]
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 3586              		.loc 1 1963 0
 3587 002a 436B     		ldr	r3, [r0, #52]
 3588 002c 53B1     		cbz	r3, .L275
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3589              		.loc 1 1967 0
 3590 002e 0D4A     		ldr	r2, .L278
 3591 0030 5A63     		str	r2, [r3, #52]
ARM GAS  /tmp/ccuVOPer.s 			page 128


1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
 3592              		.loc 1 1970 0
 3593 0032 406B     		ldr	r0, [r0, #52]
 3594              	.LVL322:
 3595 0034 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3596              	.LVL323:
 3597 0038 10B1     		cbz	r0, .L276
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
 3598              		.loc 1 1973 0
 3599 003a 606B     		ldr	r0, [r4, #52]
 3600 003c 436B     		ldr	r3, [r0, #52]
 3601 003e 9847     		blx	r3
 3602              	.LVL324:
 3603              	.L276:
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3604              		.loc 1 2013 0
 3605 0040 0020     		movs	r0, #0
 3606 0042 10BD     		pop	{r4, pc}
 3607              	.LVL325:
 3608              	.L275:
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3609              		.loc 1 1979 0
 3610 0044 0023     		movs	r3, #0
 3611 0046 C385     		strh	r3, [r0, #46]	@ movhi
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3612              		.loc 1 1982 0
 3613 0048 2023     		movs	r3, #32
 3614 004a 80F83A30 		strb	r3, [r0, #58]
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3615              		.loc 1 1990 0
 3616 004e FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3617              	.LVL326:
 3618 0052 F5E7     		b	.L276
 3619              	.LVL327:
 3620              	.L274:
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3621              		.loc 1 1997 0
 3622 0054 0023     		movs	r3, #0
 3623 0056 C385     		strh	r3, [r0, #46]	@ movhi
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3624              		.loc 1 2000 0
 3625 0058 2023     		movs	r3, #32
 3626 005a 80F83A30 		strb	r3, [r0, #58]
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3627              		.loc 1 2008 0
 3628 005e FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3629              	.LVL328:
 3630 0062 EDE7     		b	.L276
 3631              	.L279:
 3632              		.align	2
 3633              	.L278:
 3634 0064 00000000 		.word	UART_DMARxOnlyAbortCallback
 3635              		.cfi_endproc
 3636              	.LFE86:
 3638              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 3639              		.align	1
 3640              		.syntax unified
ARM GAS  /tmp/ccuVOPer.s 			page 129


 3641              		.thumb
 3642              		.thumb_func
 3643              		.fpu softvfp
 3645              	UART_DMARxOnlyAbortCallback:
 3646              	.LFB115:
2896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3647              		.loc 1 2896 0
 3648              		.cfi_startproc
 3649              		@ args = 0, pretend = 0, frame = 0
 3650              		@ frame_needed = 0, uses_anonymous_args = 0
 3651              	.LVL329:
 3652 0000 08B5     		push	{r3, lr}
 3653              	.LCFI46:
 3654              		.cfi_def_cfa_offset 8
 3655              		.cfi_offset 3, -8
 3656              		.cfi_offset 14, -4
2897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3657              		.loc 1 2897 0
 3658 0002 406A     		ldr	r0, [r0, #36]
 3659              	.LVL330:
2899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3660              		.loc 1 2899 0
 3661 0004 0023     		movs	r3, #0
 3662 0006 C385     		strh	r3, [r0, #46]	@ movhi
2902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3663              		.loc 1 2902 0
 3664 0008 2023     		movs	r3, #32
 3665 000a 80F83A30 		strb	r3, [r0, #58]
2910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3666              		.loc 1 2910 0
 3667 000e FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3668              	.LVL331:
2912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3669              		.loc 1 2912 0
 3670 0012 08BD     		pop	{r3, pc}
 3671              		.cfi_endproc
 3672              	.LFE115:
 3674              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 3675              		.align	1
 3676              		.global	HAL_LIN_SendBreak
 3677              		.syntax unified
 3678              		.thumb
 3679              		.thumb_func
 3680              		.fpu softvfp
 3682              	HAL_LIN_SendBreak:
 3683              	.LFB96:
2311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 3684              		.loc 1 2311 0
 3685              		.cfi_startproc
 3686              		@ args = 0, pretend = 0, frame = 0
 3687              		@ frame_needed = 0, uses_anonymous_args = 0
 3688              		@ link register save eliminated.
 3689              	.LVL332:
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3690              		.loc 1 2316 0
 3691 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 3692 0004 012B     		cmp	r3, #1
ARM GAS  /tmp/ccuVOPer.s 			page 130


 3693 0006 12D0     		beq	.L284
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3694              		.loc 1 2316 0 is_stmt 0 discriminator 2
 3695 0008 0123     		movs	r3, #1
 3696 000a 80F83830 		strb	r3, [r0, #56]
2318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3697              		.loc 1 2318 0 is_stmt 1 discriminator 2
 3698 000e 2423     		movs	r3, #36
 3699 0010 80F83930 		strb	r3, [r0, #57]
2321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3700              		.loc 1 2321 0 discriminator 2
 3701 0014 0268     		ldr	r2, [r0]
 3702 0016 D368     		ldr	r3, [r2, #12]
 3703 0018 43F00103 		orr	r3, r3, #1
 3704 001c D360     		str	r3, [r2, #12]
2323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3705              		.loc 1 2323 0 discriminator 2
 3706 001e 2023     		movs	r3, #32
 3707 0020 80F83930 		strb	r3, [r0, #57]
2326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3708              		.loc 1 2326 0 discriminator 2
 3709 0024 0023     		movs	r3, #0
 3710 0026 80F83830 		strb	r3, [r0, #56]
2328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3711              		.loc 1 2328 0 discriminator 2
 3712 002a 1846     		mov	r0, r3
 3713              	.LVL333:
 3714 002c 7047     		bx	lr
 3715              	.LVL334:
 3716              	.L284:
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3717              		.loc 1 2316 0
 3718 002e 0220     		movs	r0, #2
 3719              	.LVL335:
2329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3720              		.loc 1 2329 0
 3721 0030 7047     		bx	lr
 3722              		.cfi_endproc
 3723              	.LFE96:
 3725              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 3726              		.align	1
 3727              		.global	HAL_MultiProcessor_EnterMuteMode
 3728              		.syntax unified
 3729              		.thumb
 3730              		.thumb_func
 3731              		.fpu softvfp
 3733              	HAL_MultiProcessor_EnterMuteMode:
 3734              	.LFB97:
2338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 3735              		.loc 1 2338 0
 3736              		.cfi_startproc
 3737              		@ args = 0, pretend = 0, frame = 0
 3738              		@ frame_needed = 0, uses_anonymous_args = 0
 3739              		@ link register save eliminated.
 3740              	.LVL336:
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3741              		.loc 1 2343 0
ARM GAS  /tmp/ccuVOPer.s 			page 131


 3742 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 3743 0004 012B     		cmp	r3, #1
 3744 0006 12D0     		beq	.L287
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3745              		.loc 1 2343 0 is_stmt 0 discriminator 2
 3746 0008 0123     		movs	r3, #1
 3747 000a 80F83830 		strb	r3, [r0, #56]
2345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3748              		.loc 1 2345 0 is_stmt 1 discriminator 2
 3749 000e 2423     		movs	r3, #36
 3750 0010 80F83930 		strb	r3, [r0, #57]
2348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3751              		.loc 1 2348 0 discriminator 2
 3752 0014 0268     		ldr	r2, [r0]
 3753 0016 D368     		ldr	r3, [r2, #12]
 3754 0018 43F00203 		orr	r3, r3, #2
 3755 001c D360     		str	r3, [r2, #12]
2350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3756              		.loc 1 2350 0 discriminator 2
 3757 001e 2023     		movs	r3, #32
 3758 0020 80F83930 		strb	r3, [r0, #57]
2353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3759              		.loc 1 2353 0 discriminator 2
 3760 0024 0023     		movs	r3, #0
 3761 0026 80F83830 		strb	r3, [r0, #56]
2355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3762              		.loc 1 2355 0 discriminator 2
 3763 002a 1846     		mov	r0, r3
 3764              	.LVL337:
 3765 002c 7047     		bx	lr
 3766              	.LVL338:
 3767              	.L287:
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3768              		.loc 1 2343 0
 3769 002e 0220     		movs	r0, #2
 3770              	.LVL339:
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3771              		.loc 1 2356 0
 3772 0030 7047     		bx	lr
 3773              		.cfi_endproc
 3774              	.LFE97:
 3776              		.section	.text.HAL_MultiProcessor_ExitMuteMode,"ax",%progbits
 3777              		.align	1
 3778              		.global	HAL_MultiProcessor_ExitMuteMode
 3779              		.syntax unified
 3780              		.thumb
 3781              		.thumb_func
 3782              		.fpu softvfp
 3784              	HAL_MultiProcessor_ExitMuteMode:
 3785              	.LFB98:
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 3786              		.loc 1 2365 0
 3787              		.cfi_startproc
 3788              		@ args = 0, pretend = 0, frame = 0
 3789              		@ frame_needed = 0, uses_anonymous_args = 0
 3790              		@ link register save eliminated.
 3791              	.LVL340:
ARM GAS  /tmp/ccuVOPer.s 			page 132


2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3792              		.loc 1 2370 0
 3793 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 3794 0004 012B     		cmp	r3, #1
 3795 0006 12D0     		beq	.L290
2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3796              		.loc 1 2370 0 is_stmt 0 discriminator 2
 3797 0008 0123     		movs	r3, #1
 3798 000a 80F83830 		strb	r3, [r0, #56]
2372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3799              		.loc 1 2372 0 is_stmt 1 discriminator 2
 3800 000e 2423     		movs	r3, #36
 3801 0010 80F83930 		strb	r3, [r0, #57]
2375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3802              		.loc 1 2375 0 discriminator 2
 3803 0014 0268     		ldr	r2, [r0]
 3804 0016 D368     		ldr	r3, [r2, #12]
 3805 0018 23F00203 		bic	r3, r3, #2
 3806 001c D360     		str	r3, [r2, #12]
2377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3807              		.loc 1 2377 0 discriminator 2
 3808 001e 2023     		movs	r3, #32
 3809 0020 80F83930 		strb	r3, [r0, #57]
2380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3810              		.loc 1 2380 0 discriminator 2
 3811 0024 0023     		movs	r3, #0
 3812 0026 80F83830 		strb	r3, [r0, #56]
2382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3813              		.loc 1 2382 0 discriminator 2
 3814 002a 1846     		mov	r0, r3
 3815              	.LVL341:
 3816 002c 7047     		bx	lr
 3817              	.LVL342:
 3818              	.L290:
2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3819              		.loc 1 2370 0
 3820 002e 0220     		movs	r0, #2
 3821              	.LVL343:
2383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3822              		.loc 1 2383 0
 3823 0030 7047     		bx	lr
 3824              		.cfi_endproc
 3825              	.LFE98:
 3827              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 3828              		.align	1
 3829              		.global	HAL_HalfDuplex_EnableTransmitter
 3830              		.syntax unified
 3831              		.thumb
 3832              		.thumb_func
 3833              		.fpu softvfp
 3835              	HAL_HalfDuplex_EnableTransmitter:
 3836              	.LFB99:
2392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 3837              		.loc 1 2392 0
 3838              		.cfi_startproc
 3839              		@ args = 0, pretend = 0, frame = 0
 3840              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccuVOPer.s 			page 133


 3841              		@ link register save eliminated.
 3842              	.LVL344:
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3843              		.loc 1 2396 0
 3844 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 3845 0004 012B     		cmp	r3, #1
 3846 0006 14D0     		beq	.L293
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3847              		.loc 1 2396 0 is_stmt 0 discriminator 2
 3848 0008 0123     		movs	r3, #1
 3849 000a 80F83830 		strb	r3, [r0, #56]
2398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3850              		.loc 1 2398 0 is_stmt 1 discriminator 2
 3851 000e 2423     		movs	r3, #36
 3852 0010 80F83930 		strb	r3, [r0, #57]
2401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3853              		.loc 1 2401 0 discriminator 2
 3854 0014 0268     		ldr	r2, [r0]
 3855 0016 D368     		ldr	r3, [r2, #12]
 3856              	.LVL345:
2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3857              		.loc 1 2404 0 discriminator 2
 3858 0018 23F00C03 		bic	r3, r3, #12
 3859              	.LVL346:
2407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3860              		.loc 1 2407 0 discriminator 2
 3861 001c 43F00803 		orr	r3, r3, #8
 3862              	.LVL347:
2410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3863              		.loc 1 2410 0 discriminator 2
 3864 0020 D360     		str	r3, [r2, #12]
2412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3865              		.loc 1 2412 0 discriminator 2
 3866 0022 2023     		movs	r3, #32
 3867              	.LVL348:
 3868 0024 80F83930 		strb	r3, [r0, #57]
 3869              	.LVL349:
2415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3870              		.loc 1 2415 0 discriminator 2
 3871 0028 0023     		movs	r3, #0
 3872 002a 80F83830 		strb	r3, [r0, #56]
2417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3873              		.loc 1 2417 0 discriminator 2
 3874 002e 1846     		mov	r0, r3
 3875              	.LVL350:
 3876 0030 7047     		bx	lr
 3877              	.LVL351:
 3878              	.L293:
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3879              		.loc 1 2396 0
 3880 0032 0220     		movs	r0, #2
 3881              	.LVL352:
2418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3882              		.loc 1 2418 0
 3883 0034 7047     		bx	lr
 3884              		.cfi_endproc
 3885              	.LFE99:
ARM GAS  /tmp/ccuVOPer.s 			page 134


 3887              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 3888              		.align	1
 3889              		.global	HAL_HalfDuplex_EnableReceiver
 3890              		.syntax unified
 3891              		.thumb
 3892              		.thumb_func
 3893              		.fpu softvfp
 3895              	HAL_HalfDuplex_EnableReceiver:
 3896              	.LFB100:
2427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 3897              		.loc 1 2427 0
 3898              		.cfi_startproc
 3899              		@ args = 0, pretend = 0, frame = 0
 3900              		@ frame_needed = 0, uses_anonymous_args = 0
 3901              		@ link register save eliminated.
 3902              	.LVL353:
2431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3903              		.loc 1 2431 0
 3904 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 3905 0004 012B     		cmp	r3, #1
 3906 0006 14D0     		beq	.L296
2431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3907              		.loc 1 2431 0 is_stmt 0 discriminator 2
 3908 0008 0123     		movs	r3, #1
 3909 000a 80F83830 		strb	r3, [r0, #56]
2433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3910              		.loc 1 2433 0 is_stmt 1 discriminator 2
 3911 000e 2423     		movs	r3, #36
 3912 0010 80F83930 		strb	r3, [r0, #57]
2436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3913              		.loc 1 2436 0 discriminator 2
 3914 0014 0268     		ldr	r2, [r0]
 3915 0016 D368     		ldr	r3, [r2, #12]
 3916              	.LVL354:
2439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3917              		.loc 1 2439 0 discriminator 2
 3918 0018 23F00C03 		bic	r3, r3, #12
 3919              	.LVL355:
2442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3920              		.loc 1 2442 0 discriminator 2
 3921 001c 43F00403 		orr	r3, r3, #4
 3922              	.LVL356:
2445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3923              		.loc 1 2445 0 discriminator 2
 3924 0020 D360     		str	r3, [r2, #12]
2447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3925              		.loc 1 2447 0 discriminator 2
 3926 0022 2023     		movs	r3, #32
 3927              	.LVL357:
 3928 0024 80F83930 		strb	r3, [r0, #57]
 3929              	.LVL358:
2450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3930              		.loc 1 2450 0 discriminator 2
 3931 0028 0023     		movs	r3, #0
 3932 002a 80F83830 		strb	r3, [r0, #56]
2452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3933              		.loc 1 2452 0 discriminator 2
ARM GAS  /tmp/ccuVOPer.s 			page 135


 3934 002e 1846     		mov	r0, r3
 3935              	.LVL359:
 3936 0030 7047     		bx	lr
 3937              	.LVL360:
 3938              	.L296:
2431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3939              		.loc 1 2431 0
 3940 0032 0220     		movs	r0, #2
 3941              	.LVL361:
2453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3942              		.loc 1 2453 0
 3943 0034 7047     		bx	lr
 3944              		.cfi_endproc
 3945              	.LFE100:
 3947              		.section	.text.HAL_UART_GetState,"ax",%progbits
 3948              		.align	1
 3949              		.global	HAL_UART_GetState
 3950              		.syntax unified
 3951              		.thumb
 3952              		.thumb_func
 3953              		.fpu softvfp
 3955              	HAL_UART_GetState:
 3956              	.LFB101:
2484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 3957              		.loc 1 2484 0
 3958              		.cfi_startproc
 3959              		@ args = 0, pretend = 0, frame = 0
 3960              		@ frame_needed = 0, uses_anonymous_args = 0
 3961              		@ link register save eliminated.
 3962              	.LVL362:
2486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp2 = huart->RxState;
 3963              		.loc 1 2486 0
 3964 0000 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 3965              	.LVL363:
2487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3966              		.loc 1 2487 0
 3967 0004 90F83A00 		ldrb	r0, [r0, #58]	@ zero_extendqisi2
 3968              	.LVL364:
2490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3969              		.loc 1 2490 0
 3970 0008 1843     		orrs	r0, r0, r3
 3971              	.LVL365:
 3972 000a 7047     		bx	lr
 3973              		.cfi_endproc
 3974              	.LFE101:
 3976              		.section	.text.HAL_UART_GetError,"ax",%progbits
 3977              		.align	1
 3978              		.global	HAL_UART_GetError
 3979              		.syntax unified
 3980              		.thumb
 3981              		.thumb_func
 3982              		.fpu softvfp
 3984              	HAL_UART_GetError:
 3985              	.LFB102:
2499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return huart->ErrorCode;
 3986              		.loc 1 2499 0
 3987              		.cfi_startproc
ARM GAS  /tmp/ccuVOPer.s 			page 136


 3988              		@ args = 0, pretend = 0, frame = 0
 3989              		@ frame_needed = 0, uses_anonymous_args = 0
 3990              		@ link register save eliminated.
 3991              	.LVL366:
2500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3992              		.loc 1 2500 0
 3993 0000 C06B     		ldr	r0, [r0, #60]
 3994              	.LVL367:
2501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 3995              		.loc 1 2501 0
 3996 0002 7047     		bx	lr
 3997              		.cfi_endproc
 3998              	.LFE102:
 4000              		.text
 4001              	.Letext0:
 4002              		.file 2 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_
 4003              		.file 3 "/home/ryan/xun/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 4004              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 4005              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 4006              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 4007              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 4008              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 4009              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 4010              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 4011              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 4012              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
ARM GAS  /tmp/ccuVOPer.s 			page 137


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_uart.c
     /tmp/ccuVOPer.s:16     .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/ccuVOPer.s:22     .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/ccuVOPer.s:45     .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/ccuVOPer.s:51     .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/ccuVOPer.s:78     .text.UART_Transmit_IT:0000000000000000 $t
     /tmp/ccuVOPer.s:84     .text.UART_Transmit_IT:0000000000000000 UART_Transmit_IT
     /tmp/ccuVOPer.s:171    .text.UART_SetConfig:0000000000000000 $t
     /tmp/ccuVOPer.s:177    .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/ccuVOPer.s:285    .text.UART_SetConfig:00000000000000c4 $d
     /tmp/ccuVOPer.s:291    .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccuVOPer.s:297    .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccuVOPer.s:372    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccuVOPer.s:379    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccuVOPer.s:393    .text.HAL_UART_Init:0000000000000000 $t
     /tmp/ccuVOPer.s:400    .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/ccuVOPer.s:481    .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/ccuVOPer.s:488    .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/ccuVOPer.s:575    .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/ccuVOPer.s:582    .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/ccuVOPer.s:686    .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/ccuVOPer.s:693    .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/ccuVOPer.s:802    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/ccuVOPer.s:809    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/ccuVOPer.s:823    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/ccuVOPer.s:830    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/ccuVOPer.s:883    .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccuVOPer.s:890    .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccuVOPer.s:1076   .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccuVOPer.s:1083   .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccuVOPer.s:1274   .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/ccuVOPer.s:1281   .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/ccuVOPer.s:1356   .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/ccuVOPer.s:1363   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/ccuVOPer.s:1448   .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/ccuVOPer.s:1455   .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/ccuVOPer.s:1567   .text.HAL_UART_Transmit_DMA:0000000000000080 $d
     /tmp/ccuVOPer.s:2314   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/ccuVOPer.s:2428   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/ccuVOPer.s:2735   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/ccuVOPer.s:1574   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/ccuVOPer.s:1581   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/ccuVOPer.s:1717   .text.HAL_UART_Receive_DMA:000000000000009c $d
     /tmp/ccuVOPer.s:2479   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/ccuVOPer.s:2684   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/ccuVOPer.s:1724   .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/ccuVOPer.s:1731   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/ccuVOPer.s:1818   .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/ccuVOPer.s:1825   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/ccuVOPer.s:1919   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/ccuVOPer.s:1926   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/ccuVOPer.s:2015   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/ccuVOPer.s:2022   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/ccuVOPer.s:2134   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/ccuVOPer.s:2141   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/ccuVOPer.s:2208   .text.HAL_UART_AbortReceive:0000000000000000 $t
ARM GAS  /tmp/ccuVOPer.s 			page 138


     /tmp/ccuVOPer.s:2215   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/ccuVOPer.s:2287   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccuVOPer.s:2294   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccuVOPer.s:2308   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/ccuVOPer.s:2365   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/ccuVOPer.s:2371   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/ccuVOPer.s:2401   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccuVOPer.s:2408   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/ccuVOPer.s:2422   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/ccuVOPer.s:2452   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccuVOPer.s:2459   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccuVOPer.s:2473   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccuVOPer.s:2532   .text.UART_Receive_IT:0000000000000000 $t
     /tmp/ccuVOPer.s:2538   .text.UART_Receive_IT:0000000000000000 UART_Receive_IT
     /tmp/ccuVOPer.s:2657   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccuVOPer.s:2664   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccuVOPer.s:2678   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/ccuVOPer.s:2708   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccuVOPer.s:2715   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccuVOPer.s:2729   .text.UART_DMAError:0000000000000000 $t
     /tmp/ccuVOPer.s:2817   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/ccuVOPer.s:2824   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/ccuVOPer.s:3044   .text.HAL_UART_IRQHandler:000000000000011c $d
     /tmp/ccuVOPer.s:3055   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/ccuVOPer.s:3049   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/ccuVOPer.s:3084   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/ccuVOPer.s:3091   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/ccuVOPer.s:3105   .text.HAL_UART_Abort_IT:0000000000000000 $t
     /tmp/ccuVOPer.s:3112   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/ccuVOPer.s:3262   .text.HAL_UART_Abort_IT:00000000000000bc $d
     /tmp/ccuVOPer.s:3331   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/ccuVOPer.s:3274   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
     /tmp/ccuVOPer.s:3268   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccuVOPer.s:3325   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccuVOPer.s:3382   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccuVOPer.s:3389   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccuVOPer.s:3403   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccuVOPer.s:3410   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/ccuVOPer.s:3485   .text.HAL_UART_AbortTransmit_IT:000000000000005c $d
     /tmp/ccuVOPer.s:3496   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/ccuVOPer.s:3490   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccuVOPer.s:3526   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccuVOPer.s:3533   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccuVOPer.s:3547   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/ccuVOPer.s:3554   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/ccuVOPer.s:3634   .text.HAL_UART_AbortReceive_IT:0000000000000064 $d
     /tmp/ccuVOPer.s:3645   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/ccuVOPer.s:3639   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccuVOPer.s:3675   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/ccuVOPer.s:3682   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/ccuVOPer.s:3726   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/ccuVOPer.s:3733   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/ccuVOPer.s:3777   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 $t
     /tmp/ccuVOPer.s:3784   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 HAL_MultiProcessor_ExitMuteMode
     /tmp/ccuVOPer.s:3828   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/ccuVOPer.s:3835   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/ccuVOPer.s:3888   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
ARM GAS  /tmp/ccuVOPer.s 			page 139


     /tmp/ccuVOPer.s:3895   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/ccuVOPer.s:3948   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/ccuVOPer.s:3955   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/ccuVOPer.s:3977   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/ccuVOPer.s:3984   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError

UNDEFINED SYMBOLS
HAL_RCC_GetPCLK1Freq
HAL_RCC_GetPCLK2Freq
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
