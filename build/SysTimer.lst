ARM GAS  /tmp/ccFrvWrx.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"SysTimer.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.MCUTimerDelayXms,"ax",%progbits
  19              		.align	2
  20              		.global	MCUTimerDelayXms
  21              		.thumb
  22              		.thumb_func
  24              	MCUTimerDelayXms:
  25              	.LFB65:
  26              		.file 1 "VS4210/SysTimer.c"
   1:VS4210/SysTimer.c **** /*****************************************************************************/
   2:VS4210/SysTimer.c **** /*                                                                           										*/
   3:VS4210/SysTimer.c **** /*  TELI ML070I   MCU                    													*/
   4:VS4210/SysTimer.c **** /*                                                                           										*/
   5:VS4210/SysTimer.c **** /*  SysTimer.c                                          											*/
   6:VS4210/SysTimer.c **** /*                                                                           										*/
   7:VS4210/SysTimer.c **** /*****************************************************************************/
   8:VS4210/SysTimer.c **** 
   9:VS4210/SysTimer.c **** 
  10:VS4210/SysTimer.c **** #include "VXIS_Extern_Define.h"
  11:VS4210/SysTimer.c **** 
  12:VS4210/SysTimer.c **** #include "tpinc/Device_Rx.h"
  13:VS4210/SysTimer.c **** #include "tpinc/TP2802.h"
  14:VS4210/SysTimer.c **** #include "stdlib.h"
  15:VS4210/SysTimer.c **** #include "VX_swi2c.h"
  16:VS4210/SysTimer.c **** #include "VS4210.h"
  17:VS4210/SysTimer.c **** #include "VX_OSD_Simple.h"
  18:VS4210/SysTimer.c **** 
  19:VS4210/SysTimer.c **** //#include "config.h"
  20:VS4210/SysTimer.c **** 
  21:VS4210/SysTimer.c **** //#ifdef SERIAL
  22:VS4210/SysTimer.c **** 
  23:VS4210/SysTimer.c **** //#include "typedefs.h"
  24:VS4210/SysTimer.c **** #include "main.h"
  25:VS4210/SysTimer.c **** //#include "i2c.h"
  26:VS4210/SysTimer.c **** //#include "reg.h"
  27:VS4210/SysTimer.c **** #include "printf.h"
  28:VS4210/SysTimer.c **** //#include "etc_eep.h"
  29:VS4210/SysTimer.c **** #include "monitor.h"
  30:VS4210/SysTimer.c **** //#include "cpu.h"
  31:VS4210/SysTimer.c **** //#include "Adc.h"
  32:VS4210/SysTimer.c **** 
ARM GAS  /tmp/ccFrvWrx.s 			page 2


  33:VS4210/SysTimer.c **** #include <math.h>
  34:VS4210/SysTimer.c **** #include <stdio.h>
  35:VS4210/SysTimer.c **** #include "keyremo.h"
  36:VS4210/SysTimer.c **** 
  37:VS4210/SysTimer.c **** /*
  38:VS4210/SysTimer.c **** #include "Config.h"
  39:VS4210/SysTimer.c **** 
  40:VS4210/SysTimer.c **** #include "reg.h"
  41:VS4210/SysTimer.c **** #include "typedefs.h"
  42:VS4210/SysTimer.c **** #include "main.h"
  43:VS4210/SysTimer.c **** //#include "tw88.h"
  44:VS4210/SysTimer.c **** #include "i2c.h"
  45:VS4210/SysTimer.c **** #include "adc.h"
  46:VS4210/SysTimer.c **** //#include "osdbasic.h"
  47:VS4210/SysTimer.c **** //#include "dispinfo.h"
  48:VS4210/SysTimer.c **** //#include "debug.h"
  49:VS4210/SysTimer.c **** #include "etc_eep.h"
  50:VS4210/SysTimer.c **** //#include "measure.h"
  51:VS4210/SysTimer.c **** #include "Printf.h"
  52:VS4210/SysTimer.c **** //#include "audio.h"
  53:VS4210/SysTimer.c **** //#include "osdmenu.h"
  54:VS4210/SysTimer.c **** //#include "pc_eep.h"
  55:VS4210/SysTimer.c **** #include "KeyRemo.h"
  56:VS4210/SysTimer.c **** #include "Monitor.h"
  57:VS4210/SysTimer.c **** #include "CPU.h"
  58:VS4210/SysTimer.c **** //#include "HS_keyremo.h"
  59:VS4210/SysTimer.c **** //#include "HS_DisplayOSD.h"
  60:VS4210/SysTimer.c **** //#include "rgbmix.h"			
  61:VS4210/SysTimer.c **** //#include "panel.h"
  62:VS4210/SysTimer.c **** //#include "HS_IOdef.h"
  63:VS4210/SysTimer.c **** #include "HS_DVRProtocol.h"
  64:VS4210/SysTimer.c **** */
  65:VS4210/SysTimer.c **** 
  66:VS4210/SysTimer.c **** //****************************************************************************
  67:VS4210/SysTimer.c **** // DEFINITIONS / MACROS
  68:VS4210/SysTimer.c **** //****************************************************************************
  69:VS4210/SysTimer.c **** #define GET_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid)
  70:VS4210/SysTimer.c **** #define SET_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid = _TRUE)
  71:VS4210/SysTimer.c **** #define CLR_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid = _FALSE)
  72:VS4210/SysTimer.c **** 
  73:VS4210/SysTimer.c **** #define GET_EVENT_ID(x)                         (g_stTimerEvent[x].b7EventID)
  74:VS4210/SysTimer.c **** #define SET_EVENT_ID(x, y)                      (g_stTimerEvent[x].b7EventID = y)
  75:VS4210/SysTimer.c **** 
  76:VS4210/SysTimer.c **** #define GET_EVENT_TIME(x)                       (g_stTimerEvent[x].usTime)
  77:VS4210/SysTimer.c **** #define SET_EVENT_TIME(x, y)                    (g_stTimerEvent[x].usTime = y)
  78:VS4210/SysTimer.c **** 
  79:VS4210/SysTimer.c **** 
  80:VS4210/SysTimer.c **** //****************************************************************************
  81:VS4210/SysTimer.c **** // VARIABLE DECLARATIONS
  82:VS4210/SysTimer.c **** //****************************************************************************
  83:VS4210/SysTimer.c **** volatile bit g_bNotifyTimer0Int = _FALSE;
  84:VS4210/SysTimer.c **** BYTE tic02=0;
  85:VS4210/SysTimer.c **** WORD tic03=0,tic04=0,tic05=0;
  86:VS4210/SysTimer.c **** 
  87:VS4210/SysTimer.c **** volatile WORD  g_usTimerCounter = 0;
  88:VS4210/SysTimer.c **** StructTimerEventTableType g_stTimerEvent[_TIMER_EVENT_COUNT];
  89:VS4210/SysTimer.c **** WORD BatteryBTH,BatteryVoltage;
ARM GAS  /tmp/ccFrvWrx.s 			page 3


  90:VS4210/SysTimer.c **** BYTE PSW_Flag=0;
  91:VS4210/SysTimer.c **** BYTE WDT_Echo_Count=0;
  92:VS4210/SysTimer.c **** BYTE CameraVolt;
  93:VS4210/SysTimer.c **** BYTE	 year1=0,year2=0,month=0,day=0,hour=0,minute=0,second=0;
  94:VS4210/SysTimer.c **** extern BYTE Monitor_flag;
  95:VS4210/SysTimer.c **** extern tByte DayNightLevel;
  96:VS4210/SysTimer.c **** extern void EQ_Detect();
  97:VS4210/SysTimer.c **** extern tWord LightSensor_ADC;
  98:VS4210/SysTimer.c **** extern ADC_HandleTypeDef hadc1;
  99:VS4210/SysTimer.c **** extern  volatile BYTE Encoder_flag;
 100:VS4210/SysTimer.c **** extern tByte DisplayedOSD;
 101:VS4210/SysTimer.c **** 
 102:VS4210/SysTimer.c **** extern WORD GetItemValue( BYTE id);
 103:VS4210/SysTimer.c **** extern BYTE TimeStep;
 104:VS4210/SysTimer.c **** extern BYTE TriggerFlag;
 105:VS4210/SysTimer.c **** extern BYTE PowerFlag;
 106:VS4210/SysTimer.c **** extern BYTE SEQFlag;
 107:VS4210/SysTimer.c **** extern BYTE PWMLevel;
 108:VS4210/SysTimer.c **** extern BYTE TriggerStatus;
 109:VS4210/SysTimer.c **** extern volatile BYTE  MainSetSelectMode[13];
 110:VS4210/SysTimer.c **** extern BYTE SelectModeType;
 111:VS4210/SysTimer.c **** extern BYTE NowModeState;
 112:VS4210/SysTimer.c **** extern tByte gaHDMI_MapWindowIndex[4];
 113:VS4210/SysTimer.c **** extern BYTE BOOT_ISSUE;
 114:VS4210/SysTimer.c **** extern BYTE CURRENT_CH;
 115:VS4210/SysTimer.c **** extern BYTE TP_ACTION;
 116:VS4210/SysTimer.c **** extern void RS2_tx(BYTE tx_buf);
 117:VS4210/SysTimer.c **** extern tByte	mode[0];
 118:VS4210/SysTimer.c **** extern tByte TP_InputMode;
 119:VS4210/SysTimer.c **** extern tByte SelectInputMode;///0=HDMI , 1=AHD
 120:VS4210/SysTimer.c **** extern tByte Pre_InputMode;
 121:VS4210/SysTimer.c **** extern tByte bVloss_Flag;
 122:VS4210/SysTimer.c **** 
 123:VS4210/SysTimer.c **** //extern StructBatteryInfoType g_stBatteryInfo;
 124:VS4210/SysTimer.c **** /*
 125:VS4210/SysTimer.c **** extern BYTE EncorderCountPN;
 126:VS4210/SysTimer.c **** extern BYTE EncorderLenint;
 127:VS4210/SysTimer.c **** extern short EncorderCount;
 128:VS4210/SysTimer.c **** extern WORD EncorderLenfloaat;
 129:VS4210/SysTimer.c **** */
 130:VS4210/SysTimer.c **** // StructPowerInfoType idata g_stPowerInfo;
 131:VS4210/SysTimer.c ****  StructPowerInfoType  g_stPowerInfo;
 132:VS4210/SysTimer.c **** //--------------------------------------------------
 133:VS4210/SysTimer.c **** // Definitions of Timer2
 134:VS4210/SysTimer.c **** //--------------------------------------------------
 135:VS4210/SysTimer.c **** #define _EVENT_TIME_MAX                         61000	// Please do not modify this value.
 136:VS4210/SysTimer.c **** 
 137:VS4210/SysTimer.c **** //****************************************************************************
 138:VS4210/SysTimer.c **** // CODE TABLES
 139:VS4210/SysTimer.c **** //****************************************************************************
 140:VS4210/SysTimer.c **** 
 141:VS4210/SysTimer.c **** 
 142:VS4210/SysTimer.c **** //****************************************************************************
 143:VS4210/SysTimer.c **** // FUNCTION DECLARATIONS
 144:VS4210/SysTimer.c **** //****************************************************************************
 145:VS4210/SysTimer.c **** void SysTimerHandler(void);
 146:VS4210/SysTimer.c **** void SysTimerEventProc(EnumSystemTimerEventID enumEventID);
ARM GAS  /tmp/ccFrvWrx.s 			page 4


 147:VS4210/SysTimer.c **** void SysTimerIntProc0(void);
 148:VS4210/SysTimer.c **** void SysTimerIntProc1(void);
 149:VS4210/SysTimer.c **** void SysTimerIntProc2(void);
 150:VS4210/SysTimer.c **** void MCUTimerInitialTimerEvent(void);
 151:VS4210/SysTimer.c **** void MCUTimerActiveTimerEvent(WORD usTime, BYTE ucEventID);
 152:VS4210/SysTimer.c **** void MCUTimerCancelTimerEvent(BYTE ucEventID);
 153:VS4210/SysTimer.c **** void MCUTimerDelayXms(WORD usNum);
 154:VS4210/SysTimer.c **** void PowerLED(EnumSystemTimerEventID flag);
 155:VS4210/SysTimer.c **** 
 156:VS4210/SysTimer.c **** extern void ShowWorkingTimer(void);	
 157:VS4210/SysTimer.c **** extern void GraphicsPrint(PRINT_COLOR_e mode, const char *Message, ...);
 158:VS4210/SysTimer.c **** extern void AdjustAutoDayNight(BYTE val);
 159:VS4210/SysTimer.c **** extern BYTE CheckKeyIn(void);
 160:VS4210/SysTimer.c **** extern BYTE GET_PCA9554PW(BYTE reg);
 161:VS4210/SysTimer.c **** extern void AudioMute(bit mute);
 162:VS4210/SysTimer.c **** 
 163:VS4210/SysTimer.c **** extern void COC_test(void);
 164:VS4210/SysTimer.c **** 
 165:VS4210/SysTimer.c **** 
 166:VS4210/SysTimer.c **** /*
 167:VS4210/SysTimer.c **** extern WORD GetBatteryBTH(void);
 168:VS4210/SysTimer.c **** extern WORD GetBatteryVoltage(void);
 169:VS4210/SysTimer.c **** extern void SetAD5110Step(BYTE newv) ;
 170:VS4210/SysTimer.c **** extern void UserInterfacePowerSwitch(EnumPowerAction enumSwitch);
 171:VS4210/SysTimer.c **** */
 172:VS4210/SysTimer.c **** 
 173:VS4210/SysTimer.c **** //****************************************************************************
 174:VS4210/SysTimer.c **** // FUNCTION DEFINITIONS
 175:VS4210/SysTimer.c **** //****************************************************************************
 176:VS4210/SysTimer.c **** //--------------------------------------------------
 177:VS4210/SysTimer.c **** // Description  : Timer Delay
 178:VS4210/SysTimer.c **** // Input Value  : usNum --> Delay in ms
 179:VS4210/SysTimer.c **** // Output Value : None
 180:VS4210/SysTimer.c **** //--------------------------------------------------
 181:VS4210/SysTimer.c **** void MCUTimerDelayXms(WORD usNum)
 182:VS4210/SysTimer.c **** {
  27              		.loc 1 182 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 183:VS4210/SysTimer.c ****     if(usNum)
  33              		.loc 1 183 0
  34 0000 0246     		mov	r2, r0
  35 0002 58B1     		cbz	r0, .L1
 184:VS4210/SysTimer.c ****     {
 185:VS4210/SysTimer.c ****         g_bNotifyTimer0Int = _FALSE;
  36              		.loc 1 185 0
  37 0004 0021     		movs	r1, #0
  38 0006 064B     		ldr	r3, .L5
  39 0008 1960     		str	r1, [r3]
  40              	.LVL1:
  41              	.L3:
 186:VS4210/SysTimer.c **** 
 187:VS4210/SysTimer.c ****         while(_TRUE)
 188:VS4210/SysTimer.c ****         {
ARM GAS  /tmp/ccFrvWrx.s 			page 5


 189:VS4210/SysTimer.c ****             if(g_bNotifyTimer0Int)
  42              		.loc 1 189 0
  43 000a 054B     		ldr	r3, .L5
  44 000c 1B68     		ldr	r3, [r3]
  45 000e 002B     		cmp	r3, #0
  46 0010 FBD0     		beq	.L3
 190:VS4210/SysTimer.c ****             {
 191:VS4210/SysTimer.c ****                 g_bNotifyTimer0Int = _FALSE;
  47              		.loc 1 191 0
  48 0012 0021     		movs	r1, #0
  49 0014 024B     		ldr	r3, .L5
  50 0016 1960     		str	r1, [r3]
  51              	.LVL2:
 192:VS4210/SysTimer.c **** 
 193:VS4210/SysTimer.c ****                 if(--usNum)
  52              		.loc 1 193 0
  53 0018 013A     		subs	r2, r2, #1
  54              	.LVL3:
  55 001a F6D1     		bne	.L3
  56              	.L1:
  57 001c 7047     		bx	lr
  58              	.L6:
  59 001e 00BF     		.align	2
  60              	.L5:
  61 0020 00000000 		.word	.LANCHOR0
  62              		.cfi_endproc
  63              	.LFE65:
  65              		.section	.text.MCUTimerGetEventTime,"ax",%progbits
  66              		.align	2
  67              		.global	MCUTimerGetEventTime
  68              		.thumb
  69              		.thumb_func
  71              	MCUTimerGetEventTime:
  72              	.LFB66:
 194:VS4210/SysTimer.c ****                 {
 195:VS4210/SysTimer.c ****                 }
 196:VS4210/SysTimer.c ****                 else
 197:VS4210/SysTimer.c ****                 {
 198:VS4210/SysTimer.c ****                     return;
 199:VS4210/SysTimer.c ****                 }
 200:VS4210/SysTimer.c ****             }
 201:VS4210/SysTimer.c ****         }
 202:VS4210/SysTimer.c ****     }
 203:VS4210/SysTimer.c **** }
 204:VS4210/SysTimer.c **** 
 205:VS4210/SysTimer.c **** //--------------------------------------------------
 206:VS4210/SysTimer.c **** // Description  : Get Event Time
 207:VS4210/SysTimer.c **** // Input Value  : ucEventIndex --> Event which time is needed
 208:VS4210/SysTimer.c **** // Output Value : Event Time
 209:VS4210/SysTimer.c **** //--------------------------------------------------
 210:VS4210/SysTimer.c **** WORD MCUTimerGetEventTime(BYTE ucEventIndex)
 211:VS4210/SysTimer.c **** {
  73              		.loc 1 211 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
ARM GAS  /tmp/ccFrvWrx.s 			page 6


  78              	.LVL4:
 212:VS4210/SysTimer.c ****     return GET_EVENT_TIME(ucEventIndex);
  79              		.loc 1 212 0
  80 0000 024B     		ldr	r3, .L8
  81 0002 03EBC000 		add	r0, r3, r0, lsl #3
  82              	.LVL5:
 213:VS4210/SysTimer.c **** }
  83              		.loc 1 213 0
  84 0006 4068     		ldr	r0, [r0, #4]
  85 0008 7047     		bx	lr
  86              	.L9:
  87 000a 00BF     		.align	2
  88              	.L8:
  89 000c 00000000 		.word	g_stTimerEvent
  90              		.cfi_endproc
  91              	.LFE66:
  93              		.section	.text.MCUTimerGetEventID,"ax",%progbits
  94              		.align	2
  95              		.global	MCUTimerGetEventID
  96              		.thumb
  97              		.thumb_func
  99              	MCUTimerGetEventID:
 100              	.LFB67:
 214:VS4210/SysTimer.c **** 
 215:VS4210/SysTimer.c **** //--------------------------------------------------
 216:VS4210/SysTimer.c **** // Description  : Get Event ID
 217:VS4210/SysTimer.c **** // Input Value  : Referenced Event Index
 218:VS4210/SysTimer.c **** // Output Value : Stored Event ID
 219:VS4210/SysTimer.c **** //--------------------------------------------------
 220:VS4210/SysTimer.c **** BYTE MCUTimerGetEventID(BYTE ucEventIndex)
 221:VS4210/SysTimer.c **** {
 101              		.loc 1 221 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 106              	.LVL6:
 222:VS4210/SysTimer.c ****     return GET_EVENT_ID(ucEventIndex);
 107              		.loc 1 222 0
 108 0000 024B     		ldr	r3, .L11
 109 0002 13F83000 		ldrb	r0, [r3, r0, lsl #3]	@ zero_extendqisi2
 110              	.LVL7:
 223:VS4210/SysTimer.c **** }
 111              		.loc 1 223 0
 112 0006 4008     		lsrs	r0, r0, #1
 113 0008 7047     		bx	lr
 114              	.L12:
 115 000a 00BF     		.align	2
 116              	.L11:
 117 000c 00000000 		.word	g_stTimerEvent
 118              		.cfi_endproc
 119              	.LFE67:
 121              		.section	.text.MCUTimerClrEventValid,"ax",%progbits
 122              		.align	2
 123              		.global	MCUTimerClrEventValid
 124              		.thumb
 125              		.thumb_func
ARM GAS  /tmp/ccFrvWrx.s 			page 7


 127              	MCUTimerClrEventValid:
 128              	.LFB68:
 224:VS4210/SysTimer.c **** 
 225:VS4210/SysTimer.c **** //--------------------------------------------------
 226:VS4210/SysTimer.c **** // Description  : Clear Event Time
 227:VS4210/SysTimer.c **** // Input Value  : ucEventIndex --> Event which time is needed to be cleared
 228:VS4210/SysTimer.c **** // Output Value : None
 229:VS4210/SysTimer.c **** //--------------------------------------------------
 230:VS4210/SysTimer.c **** 
 231:VS4210/SysTimer.c **** void MCUTimerClrEventValid(BYTE ucEventIndex)
 232:VS4210/SysTimer.c **** {
 129              		.loc 1 232 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134              	.LVL8:
 233:VS4210/SysTimer.c ****     CLR_EVENT_VALID(ucEventIndex);
 135              		.loc 1 233 0
 136 0000 034B     		ldr	r3, .L14
 137 0002 13F83020 		ldrb	r2, [r3, r0, lsl #3]	@ zero_extendqisi2
 138 0006 6FF30002 		bfc	r2, #0, #1
 139 000a 03F83020 		strb	r2, [r3, r0, lsl #3]
 140 000e 7047     		bx	lr
 141              	.L15:
 142              		.align	2
 143              	.L14:
 144 0010 00000000 		.word	g_stTimerEvent
 145              		.cfi_endproc
 146              	.LFE68:
 148              		.section	.text.MCUTimerCheckEventValid,"ax",%progbits
 149              		.align	2
 150              		.global	MCUTimerCheckEventValid
 151              		.thumb
 152              		.thumb_func
 154              	MCUTimerCheckEventValid:
 155              	.LFB69:
 234:VS4210/SysTimer.c **** }
 235:VS4210/SysTimer.c **** 
 236:VS4210/SysTimer.c **** //--------------------------------------------------
 237:VS4210/SysTimer.c **** // Description  : Check if Event is Valid
 238:VS4210/SysTimer.c **** // Input Value  : ucEventIndex --> Event to be checked
 239:VS4210/SysTimer.c **** // Output Value : Validity(_TRUE/_FALSE)
 240:VS4210/SysTimer.c **** //--------------------------------------------------
 241:VS4210/SysTimer.c **** bit MCUTimerCheckEventValid(BYTE ucEventIndex)
 242:VS4210/SysTimer.c **** {
 156              		.loc 1 242 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              		@ link register save eliminated.
 161              	.LVL9:
 243:VS4210/SysTimer.c ****     return GET_EVENT_VALID(ucEventIndex);;
 162              		.loc 1 243 0
 163 0000 024B     		ldr	r3, .L17
 164 0002 13F83000 		ldrb	r0, [r3, r0, lsl #3]	@ zero_extendqisi2
 165              	.LVL10:
ARM GAS  /tmp/ccFrvWrx.s 			page 8


 244:VS4210/SysTimer.c **** }
 166              		.loc 1 244 0
 167 0006 00F00100 		and	r0, r0, #1
 168 000a 7047     		bx	lr
 169              	.L18:
 170              		.align	2
 171              	.L17:
 172 000c 00000000 		.word	g_stTimerEvent
 173              		.cfi_endproc
 174              	.LFE69:
 176              		.section	.text.MCUTimerGetTimerCounter,"ax",%progbits
 177              		.align	2
 178              		.global	MCUTimerGetTimerCounter
 179              		.thumb
 180              		.thumb_func
 182              	MCUTimerGetTimerCounter:
 183              	.LFB70:
 245:VS4210/SysTimer.c **** 
 246:VS4210/SysTimer.c **** //--------------------------------------------------
 247:VS4210/SysTimer.c **** // Description  : Get Timer Counter.
 248:VS4210/SysTimer.c **** // Input Value  : None
 249:VS4210/SysTimer.c **** // Output Value : Timer Counter
 250:VS4210/SysTimer.c **** //--------------------------------------------------
 251:VS4210/SysTimer.c **** WORD MCUTimerGetTimerCounter(void)
 252:VS4210/SysTimer.c **** {
 184              		.loc 1 252 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 253:VS4210/SysTimer.c ****     WORD usPresentTime = g_usTimerCounter;
 189              		.loc 1 253 0
 190 0000 054B     		ldr	r3, .L21
 191 0002 1868     		ldr	r0, [r3]
 192              	.LVL11:
 254:VS4210/SysTimer.c ****    
 255:VS4210/SysTimer.c ****     // When get counter,timer interrupt maybe change counter.
 256:VS4210/SysTimer.c ****     // Get twice to avoid it.
 257:VS4210/SysTimer.c ****     if(abs(g_usTimerCounter - usPresentTime) > 0x7F)
 193              		.loc 1 257 0
 194 0004 1B68     		ldr	r3, [r3]
 195 0006 1B1A     		subs	r3, r3, r0
 196 0008 002B     		cmp	r3, #0
 197 000a B8BF     		it	lt
 198 000c 5B42     		rsblt	r3, r3, #0
 199 000e 7F2B     		cmp	r3, #127
 200 0010 01DD     		ble	.L20
 258:VS4210/SysTimer.c ****     {
 259:VS4210/SysTimer.c ****         usPresentTime = g_usTimerCounter;
 201              		.loc 1 259 0
 202 0012 014B     		ldr	r3, .L21
 203 0014 1868     		ldr	r0, [r3]
 204              	.LVL12:
 205              	.L20:
 260:VS4210/SysTimer.c ****     } 
 261:VS4210/SysTimer.c **** 
 262:VS4210/SysTimer.c ****     return usPresentTime;
ARM GAS  /tmp/ccFrvWrx.s 			page 9


 263:VS4210/SysTimer.c **** }
 206              		.loc 1 263 0
 207 0016 7047     		bx	lr
 208              	.L22:
 209              		.align	2
 210              	.L21:
 211 0018 00000000 		.word	.LANCHOR1
 212              		.cfi_endproc
 213              	.LFE70:
 215              		.section	.text.MCUTimerCheckTimerEvent,"ax",%progbits
 216              		.align	2
 217              		.global	MCUTimerCheckTimerEvent
 218              		.thumb
 219              		.thumb_func
 221              	MCUTimerCheckTimerEvent:
 222              	.LFB71:
 264:VS4210/SysTimer.c **** //--------------------------------------------------
 265:VS4210/SysTimer.c **** // Description  : Check timer and events. We have to run this function when setting up a timer for 
 266:VS4210/SysTimer.c **** // Input Value  : usTime    --> Unit in 1ms, range in 0.001 ~ 61sec
 267:VS4210/SysTimer.c **** // Output Value : Return usPresentTime
 268:VS4210/SysTimer.c **** //--------------------------------------------------
 269:VS4210/SysTimer.c **** WORD MCUTimerCheckTimerEvent(WORD usTime)
 270:VS4210/SysTimer.c **** {
 223              		.loc 1 270 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              	.LVL13:
 228 0000 10B5     		push	{r4, lr}
 229              	.LCFI0:
 230              		.cfi_def_cfa_offset 8
 231              		.cfi_offset 4, -8
 232              		.cfi_offset 14, -4
 233 0002 0446     		mov	r4, r0
 234              	.LVL14:
 271:VS4210/SysTimer.c ****     BYTE ucTimerEventCnt = 0;
 272:VS4210/SysTimer.c ****     WORD usPresentTime = 0;
 273:VS4210/SysTimer.c **** 
 274:VS4210/SysTimer.c ****     usPresentTime = MCUTimerGetTimerCounter();
 235              		.loc 1 274 0
 236 0004 FFF7FEFF 		bl	MCUTimerGetTimerCounter
 237              	.LVL15:
 275:VS4210/SysTimer.c ****     
 276:VS4210/SysTimer.c ****     if(usTime > _EVENT_TIME_MAX) 
 238              		.loc 1 276 0
 239 0008 4EF64863 		movw	r3, #61000
 240 000c 9C42     		cmp	r4, r3
 241 000e 00D9     		bls	.L24
 277:VS4210/SysTimer.c ****     {
 278:VS4210/SysTimer.c ****         usTime = _EVENT_TIME_MAX;
 242              		.loc 1 278 0
 243 0010 1C46     		mov	r4, r3
 244              	.LVL16:
 245              	.L24:
 279:VS4210/SysTimer.c ****     }
 280:VS4210/SysTimer.c ****    
 281:VS4210/SysTimer.c ****     if(((usPresentTime + usTime) > _EVENT_TIME_MAX) || // Size Limit of Timer Counter             
ARM GAS  /tmp/ccFrvWrx.s 			page 10


 246              		.loc 1 281 0
 247 0012 0444     		add	r4, r4, r0
 248              	.LVL17:
 249 0014 4EF64863 		movw	r3, #61000
 250 0018 9C42     		cmp	r4, r3
 251 001a 01D8     		bhi	.L25
 252              		.loc 1 281 0 is_stmt 0 discriminator 1
 253 001c A042     		cmp	r0, r4
 254 001e 1FD9     		bls	.L26
 255              	.L25:
 282:VS4210/SysTimer.c ****        ((usPresentTime + usTime) < usPresentTime)) // Timer Counter Overflow
 283:VS4210/SysTimer.c ****     { 
 284:VS4210/SysTimer.c ****         g_usTimerCounter = 0;
 256              		.loc 1 284 0 is_stmt 1
 257 0020 0023     		movs	r3, #0
 258 0022 104A     		ldr	r2, .L33
 259 0024 1360     		str	r3, [r2]
 285:VS4210/SysTimer.c ****     
 286:VS4210/SysTimer.c ****         // Reset Timer Event Counter
 287:VS4210/SysTimer.c ****         for(ucTimerEventCnt = 0; ucTimerEventCnt < _TIMER_EVENT_COUNT; ucTimerEventCnt++)
 260              		.loc 1 287 0
 261 0026 18E0     		b	.L27
 262              	.LVL18:
 263              	.L30:
 288:VS4210/SysTimer.c ****         {
 289:VS4210/SysTimer.c ****             if(GET_EVENT_VALID(ucTimerEventCnt) == _TRUE)
 264              		.loc 1 289 0
 265 0028 0F4A     		ldr	r2, .L33+4
 266 002a 12F83320 		ldrb	r2, [r2, r3, lsl #3]	@ zero_extendqisi2
 267 002e 12F0010F 		tst	r2, #1
 268 0032 10D0     		beq	.L28
 290:VS4210/SysTimer.c ****             {
 291:VS4210/SysTimer.c ****                 if(GET_EVENT_TIME(ucTimerEventCnt) > usPresentTime)
 269              		.loc 1 291 0
 270 0034 0C4A     		ldr	r2, .L33+4
 271 0036 02EBC302 		add	r2, r2, r3, lsl #3
 272 003a 5268     		ldr	r2, [r2, #4]
 273 003c 8242     		cmp	r2, r0
 274 003e 05D9     		bls	.L29
 292:VS4210/SysTimer.c ****                 {
 293:VS4210/SysTimer.c ****                     SET_EVENT_TIME(ucTimerEventCnt, (GET_EVENT_TIME(ucTimerEventCnt) - usPresentTim
 275              		.loc 1 293 0
 276 0040 121A     		subs	r2, r2, r0
 277 0042 094C     		ldr	r4, .L33+4
 278 0044 04EBC301 		add	r1, r4, r3, lsl #3
 279 0048 4A60     		str	r2, [r1, #4]
 280 004a 04E0     		b	.L28
 281              	.L29:
 294:VS4210/SysTimer.c ****                 }
 295:VS4210/SysTimer.c ****                 else
 296:VS4210/SysTimer.c ****                 {
 297:VS4210/SysTimer.c ****                     SET_EVENT_TIME(ucTimerEventCnt, 0);
 282              		.loc 1 297 0
 283 004c 064A     		ldr	r2, .L33+4
 284 004e 02EBC301 		add	r1, r2, r3, lsl #3
 285 0052 0022     		movs	r2, #0
 286 0054 4A60     		str	r2, [r1, #4]
ARM GAS  /tmp/ccFrvWrx.s 			page 11


 287              	.L28:
 287:VS4210/SysTimer.c ****         {
 288              		.loc 1 287 0 discriminator 2
 289 0056 0133     		adds	r3, r3, #1
 290              	.LVL19:
 291 0058 DBB2     		uxtb	r3, r3
 292              	.LVL20:
 293              	.L27:
 287:VS4210/SysTimer.c ****         {
 294              		.loc 1 287 0 is_stmt 0 discriminator 1
 295 005a 092B     		cmp	r3, #9
 296 005c E4D9     		bls	.L30
 298:VS4210/SysTimer.c ****                 }
 299:VS4210/SysTimer.c ****             }
 300:VS4210/SysTimer.c ****         }
 301:VS4210/SysTimer.c ****         
 302:VS4210/SysTimer.c ****         usPresentTime = 0;
 297              		.loc 1 302 0 is_stmt 1
 298 005e 0020     		movs	r0, #0
 299              	.LVL21:
 300              	.L26:
 303:VS4210/SysTimer.c ****     }    
 304:VS4210/SysTimer.c **** 
 305:VS4210/SysTimer.c ****     return usPresentTime;
 306:VS4210/SysTimer.c **** }
 301              		.loc 1 306 0
 302 0060 10BD     		pop	{r4, pc}
 303              	.L34:
 304 0062 00BF     		.align	2
 305              	.L33:
 306 0064 00000000 		.word	.LANCHOR1
 307 0068 00000000 		.word	g_stTimerEvent
 308              		.cfi_endproc
 309              	.LFE71:
 311              		.section	.text.MCUTimerInitialTimerEvent,"ax",%progbits
 312              		.align	2
 313              		.global	MCUTimerInitialTimerEvent
 314              		.thumb
 315              		.thumb_func
 317              	MCUTimerInitialTimerEvent:
 318              	.LFB72:
 307:VS4210/SysTimer.c **** 
 308:VS4210/SysTimer.c **** //--------------------------------------------------
 309:VS4210/SysTimer.c **** // Description  : Initial timer and events. We have to run this function at firmware startup
 310:VS4210/SysTimer.c **** // Input Value  : None
 311:VS4210/SysTimer.c **** // Output Value : None
 312:VS4210/SysTimer.c **** //--------------------------------------------------
 313:VS4210/SysTimer.c **** void MCUTimerInitialTimerEvent(void)
 314:VS4210/SysTimer.c **** {
 319              		.loc 1 314 0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323              		@ link register save eliminated.
 324              	.LVL22:
 315:VS4210/SysTimer.c ****     BYTE ucTimerEventCnt = 0;
 316:VS4210/SysTimer.c **** 
ARM GAS  /tmp/ccFrvWrx.s 			page 12


 317:VS4210/SysTimer.c ****     for(ucTimerEventCnt = 0; ucTimerEventCnt < _TIMER_EVENT_COUNT; ucTimerEventCnt++)
 325              		.loc 1 317 0
 326 0000 0023     		movs	r3, #0
 327 0002 08E0     		b	.L36
 328              	.LVL23:
 329              	.L37:
 318:VS4210/SysTimer.c ****     {
 319:VS4210/SysTimer.c ****         CLR_EVENT_VALID(ucTimerEventCnt);
 330              		.loc 1 319 0 discriminator 3
 331 0004 054A     		ldr	r2, .L38
 332 0006 12F83310 		ldrb	r1, [r2, r3, lsl #3]	@ zero_extendqisi2
 333 000a 6FF30001 		bfc	r1, #0, #1
 334 000e 02F83310 		strb	r1, [r2, r3, lsl #3]
 317:VS4210/SysTimer.c ****     {
 335              		.loc 1 317 0 discriminator 3
 336 0012 0133     		adds	r3, r3, #1
 337              	.LVL24:
 338 0014 DBB2     		uxtb	r3, r3
 339              	.LVL25:
 340              	.L36:
 317:VS4210/SysTimer.c ****     {
 341              		.loc 1 317 0 is_stmt 0 discriminator 1
 342 0016 092B     		cmp	r3, #9
 343 0018 F4D9     		bls	.L37
 320:VS4210/SysTimer.c ****     }
 321:VS4210/SysTimer.c **** 
 322:VS4210/SysTimer.c ****    // TR2 = 1;
 323:VS4210/SysTimer.c **** }
 344              		.loc 1 323 0 is_stmt 1
 345 001a 7047     		bx	lr
 346              	.L39:
 347              		.align	2
 348              	.L38:
 349 001c 00000000 		.word	g_stTimerEvent
 350              		.cfi_endproc
 351              	.LFE72:
 353              		.section	.text.MCUTimerActiveTimerEvent,"ax",%progbits
 354              		.align	2
 355              		.global	MCUTimerActiveTimerEvent
 356              		.thumb
 357              		.thumb_func
 359              	MCUTimerActiveTimerEvent:
 360              	.LFB73:
 324:VS4210/SysTimer.c **** 
 325:VS4210/SysTimer.c **** //--------------------------------------------------
 326:VS4210/SysTimer.c **** // Description  : Active Timer Event
 327:VS4210/SysTimer.c **** // Input Value  : usTime --> Time to active Timer Event
 328:VS4210/SysTimer.c **** //				  ucEventID --> Event to be actived
 329:VS4210/SysTimer.c **** // Output Value : None
 330:VS4210/SysTimer.c **** //--------------------------------------------------
 331:VS4210/SysTimer.c **** void MCUTimerActiveTimerEvent(WORD usTime, BYTE ucEventID)
 332:VS4210/SysTimer.c **** {
 361              		.loc 1 332 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365              	.LVL26:
ARM GAS  /tmp/ccFrvWrx.s 			page 13


 333:VS4210/SysTimer.c ****     BYTE ucEventIndex = 0;
 334:VS4210/SysTimer.c **** 
 335:VS4210/SysTimer.c ****     // Search for Existing Event with the same Event ID
 336:VS4210/SysTimer.c ****     for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 366              		.loc 1 336 0
 367 0000 0023     		movs	r3, #0
 368 0002 0DE0     		b	.L41
 369              	.LVL27:
 370              	.L44:
 337:VS4210/SysTimer.c ****     {
 338:VS4210/SysTimer.c ****         if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 371              		.loc 1 338 0
 372 0004 194A     		ldr	r2, .L50
 373 0006 12F83320 		ldrb	r2, [r2, r3, lsl #3]	@ zero_extendqisi2
 374 000a 12F0010F 		tst	r2, #1
 375 000e 05D0     		beq	.L42
 339:VS4210/SysTimer.c ****         {
 340:VS4210/SysTimer.c ****             if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 376              		.loc 1 340 0
 377 0010 164A     		ldr	r2, .L50
 378 0012 12F83320 		ldrb	r2, [r2, r3, lsl #3]	@ zero_extendqisi2
 379 0016 B1EB520F 		cmp	r1, r2, lsr #1
 380 001a 25D0     		beq	.L49
 381              	.L42:
 336:VS4210/SysTimer.c ****     {
 382              		.loc 1 336 0 discriminator 2
 383 001c 0133     		adds	r3, r3, #1
 384              	.LVL28:
 385 001e DBB2     		uxtb	r3, r3
 386              	.LVL29:
 387              	.L41:
 336:VS4210/SysTimer.c ****     {
 388              		.loc 1 336 0 is_stmt 0 discriminator 1
 389 0020 092B     		cmp	r3, #9
 390 0022 EFD9     		bls	.L44
 332:VS4210/SysTimer.c ****     BYTE ucEventIndex = 0;
 391              		.loc 1 332 0 is_stmt 1
 392 0024 70B5     		push	{r4, r5, r6, lr}
 393              	.LCFI1:
 394              		.cfi_def_cfa_offset 16
 395              		.cfi_offset 4, -16
 396              		.cfi_offset 5, -12
 397              		.cfi_offset 6, -8
 398              		.cfi_offset 14, -4
 399 0026 0546     		mov	r5, r0
 400 0028 0023     		movs	r3, #0
 401              	.LVL30:
 402 002a 17E0     		b	.L45
 403              	.LVL31:
 404              	.L47:
 341:VS4210/SysTimer.c ****             {
 342:VS4210/SysTimer.c ****                 return;
 343:VS4210/SysTimer.c ****             }
 344:VS4210/SysTimer.c ****         }
 345:VS4210/SysTimer.c ****     }
 346:VS4210/SysTimer.c **** 
 347:VS4210/SysTimer.c ****     // Choose any Vacant Storage for Event
ARM GAS  /tmp/ccFrvWrx.s 			page 14


 348:VS4210/SysTimer.c ****     for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 349:VS4210/SysTimer.c ****     {
 350:VS4210/SysTimer.c ****         if(GET_EVENT_VALID(ucEventIndex) == _FALSE)
 405              		.loc 1 350 0
 406 002c 1C46     		mov	r4, r3
 407 002e 0F4A     		ldr	r2, .L50
 408 0030 12F83320 		ldrb	r2, [r2, r3, lsl #3]	@ zero_extendqisi2
 409 0034 12F0010F 		tst	r2, #1
 410 0038 0ED1     		bne	.L46
 351:VS4210/SysTimer.c ****         {
 352:VS4210/SysTimer.c ****             SET_EVENT_VALID(ucEventIndex);
 411              		.loc 1 352 0
 412 003a 0C4E     		ldr	r6, .L50
 353:VS4210/SysTimer.c ****             SET_EVENT_ID(ucEventIndex, ucEventID);
 413              		.loc 1 353 0
 414 003c 42F00103 		orr	r3, r2, #1
 415              	.LVL32:
 416 0040 61F34703 		bfi	r3, r1, #1, #7
 417 0044 06F83430 		strb	r3, [r6, r4, lsl #3]
 354:VS4210/SysTimer.c ****             SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime))
 418              		.loc 1 354 0
 419 0048 2846     		mov	r0, r5
 420              	.LVL33:
 421 004a FFF7FEFF 		bl	MCUTimerCheckTimerEvent
 422              	.LVL34:
 423 004e 2844     		add	r0, r0, r5
 424 0050 06EBC404 		add	r4, r6, r4, lsl #3
 425 0054 6060     		str	r0, [r4, #4]
 355:VS4210/SysTimer.c ****             return;
 426              		.loc 1 355 0
 427 0056 70BD     		pop	{r4, r5, r6, pc}
 428              	.LVL35:
 429              	.L46:
 348:VS4210/SysTimer.c ****     {
 430              		.loc 1 348 0 discriminator 2
 431 0058 0133     		adds	r3, r3, #1
 432              	.LVL36:
 433 005a DBB2     		uxtb	r3, r3
 434              	.LVL37:
 435              	.L45:
 348:VS4210/SysTimer.c ****     {
 436              		.loc 1 348 0 is_stmt 0 discriminator 1
 437 005c 092B     		cmp	r3, #9
 438 005e E5D9     		bls	.L47
 356:VS4210/SysTimer.c ****         }
 357:VS4210/SysTimer.c ****     }
 358:VS4210/SysTimer.c **** 
 359:VS4210/SysTimer.c ****     Printf("No More Available Storage for Simultaneous Event!!!!!!");
 439              		.loc 1 359 0 is_stmt 1
 440 0060 0348     		ldr	r0, .L50+4
 441              	.LVL38:
 442 0062 FFF7FEFF 		bl	Printf
 443              	.LVL39:
 444 0066 70BD     		pop	{r4, r5, r6, pc}
 445              	.LVL40:
 446              	.L49:
 447              	.LCFI2:
ARM GAS  /tmp/ccFrvWrx.s 			page 15


 448              		.cfi_def_cfa_offset 0
 449              		.cfi_restore 4
 450              		.cfi_restore 5
 451              		.cfi_restore 6
 452              		.cfi_restore 14
 453 0068 7047     		bx	lr
 454              	.L51:
 455 006a 00BF     		.align	2
 456              	.L50:
 457 006c 00000000 		.word	g_stTimerEvent
 458 0070 00000000 		.word	.LC0
 459              		.cfi_endproc
 460              	.LFE73:
 462              		.section	.text.MCUTimerCancelTimerEvent,"ax",%progbits
 463              		.align	2
 464              		.global	MCUTimerCancelTimerEvent
 465              		.thumb
 466              		.thumb_func
 468              	MCUTimerCancelTimerEvent:
 469              	.LFB74:
 360:VS4210/SysTimer.c **** }
 361:VS4210/SysTimer.c **** 
 362:VS4210/SysTimer.c **** //--------------------------------------------------
 363:VS4210/SysTimer.c **** // Description  : Cancel an event
 364:VS4210/SysTimer.c **** // Input Value  : Event     --> Event which we want to cancel
 365:VS4210/SysTimer.c **** // Output Value : None
 366:VS4210/SysTimer.c **** //--------------------------------------------------
 367:VS4210/SysTimer.c **** void MCUTimerCancelTimerEvent(BYTE ucEventID)
 368:VS4210/SysTimer.c **** {
 470              		.loc 1 368 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 475              	.LVL41:
 369:VS4210/SysTimer.c ****     BYTE ucEventIndex = 0;
 370:VS4210/SysTimer.c ****     
 371:VS4210/SysTimer.c ****     // Search for Existing Event with the same Event ID
 372:VS4210/SysTimer.c ****     for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 476              		.loc 1 372 0
 477 0000 0023     		movs	r3, #0
 478 0002 16E0     		b	.L53
 479              	.LVL42:
 480              	.L56:
 373:VS4210/SysTimer.c ****     {
 374:VS4210/SysTimer.c ****         if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 481              		.loc 1 374 0
 482 0004 1946     		mov	r1, r3
 483 0006 0C4A     		ldr	r2, .L57
 484 0008 12F83320 		ldrb	r2, [r2, r3, lsl #3]	@ zero_extendqisi2
 485 000c 12F0010F 		tst	r2, #1
 486 0010 0DD0     		beq	.L54
 375:VS4210/SysTimer.c ****         {
 376:VS4210/SysTimer.c ****             if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 487              		.loc 1 376 0
 488 0012 094A     		ldr	r2, .L57
 489 0014 12F83320 		ldrb	r2, [r2, r3, lsl #3]	@ zero_extendqisi2
ARM GAS  /tmp/ccFrvWrx.s 			page 16


 490 0018 B0EB520F 		cmp	r0, r2, lsr #1
 491 001c 07D1     		bne	.L54
 377:VS4210/SysTimer.c ****             {
 378:VS4210/SysTimer.c ****                 CLR_EVENT_VALID(ucEventIndex);
 492              		.loc 1 378 0
 493 001e 064B     		ldr	r3, .L57
 494              	.LVL43:
 495 0020 13F83120 		ldrb	r2, [r3, r1, lsl #3]	@ zero_extendqisi2
 496 0024 6FF30002 		bfc	r2, #0, #1
 497 0028 03F83120 		strb	r2, [r3, r1, lsl #3]
 379:VS4210/SysTimer.c ****                 return;
 498              		.loc 1 379 0
 499 002c 7047     		bx	lr
 500              	.LVL44:
 501              	.L54:
 372:VS4210/SysTimer.c ****     {
 502              		.loc 1 372 0 discriminator 2
 503 002e 0133     		adds	r3, r3, #1
 504              	.LVL45:
 505 0030 DBB2     		uxtb	r3, r3
 506              	.LVL46:
 507              	.L53:
 372:VS4210/SysTimer.c ****     {
 508              		.loc 1 372 0 is_stmt 0 discriminator 1
 509 0032 092B     		cmp	r3, #9
 510 0034 E6D9     		bls	.L56
 511 0036 7047     		bx	lr
 512              	.L58:
 513              		.align	2
 514              	.L57:
 515 0038 00000000 		.word	g_stTimerEvent
 516              		.cfi_endproc
 517              	.LFE74:
 519              		.section	.text.MCUTimerReactiveTimerEvent,"ax",%progbits
 520              		.align	2
 521              		.global	MCUTimerReactiveTimerEvent
 522              		.thumb
 523              		.thumb_func
 525              	MCUTimerReactiveTimerEvent:
 526              	.LFB75:
 380:VS4210/SysTimer.c ****             }
 381:VS4210/SysTimer.c ****         }
 382:VS4210/SysTimer.c ****     }      
 383:VS4210/SysTimer.c **** }
 384:VS4210/SysTimer.c **** 
 385:VS4210/SysTimer.c **** //--------------------------------------------------
 386:VS4210/SysTimer.c **** // Description  : Reactive a timer for an event. If the event is exist,
 387:VS4210/SysTimer.c **** //                this function will reset the executing time and restart.
 388:VS4210/SysTimer.c **** // Input Value  : usTime    --> Unit in 1ms, range in 0.01 ~ 61 sec
 389:VS4210/SysTimer.c **** //                Event     --> Execute Event while timeup
 390:VS4210/SysTimer.c **** // Output Value : None
 391:VS4210/SysTimer.c **** //--------------------------------------------------
 392:VS4210/SysTimer.c **** void MCUTimerReactiveTimerEvent(WORD usTime, BYTE ucEventID)
 393:VS4210/SysTimer.c **** {
 527              		.loc 1 393 0 is_stmt 1
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccFrvWrx.s 			page 17


 530              		@ frame_needed = 0, uses_anonymous_args = 0
 531              	.LVL47:
 532 0000 70B5     		push	{r4, r5, r6, lr}
 533              	.LCFI3:
 534              		.cfi_def_cfa_offset 16
 535              		.cfi_offset 4, -16
 536              		.cfi_offset 5, -12
 537              		.cfi_offset 6, -8
 538              		.cfi_offset 14, -4
 539 0002 0446     		mov	r4, r0
 540              	.LVL48:
 394:VS4210/SysTimer.c ****     BYTE ucEventIndex = 0;
 395:VS4210/SysTimer.c **** 
 396:VS4210/SysTimer.c ****     // Search for Existing Event with the same Event ID
 397:VS4210/SysTimer.c ****     for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 541              		.loc 1 397 0
 542 0004 0023     		movs	r3, #0
 543 0006 17E0     		b	.L60
 544              	.LVL49:
 545              	.L63:
 398:VS4210/SysTimer.c ****     {
 399:VS4210/SysTimer.c ****         if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 546              		.loc 1 399 0
 547 0008 1D46     		mov	r5, r3
 548 000a 1B4A     		ldr	r2, .L68
 549 000c 12F83320 		ldrb	r2, [r2, r3, lsl #3]	@ zero_extendqisi2
 550 0010 12F0010F 		tst	r2, #1
 551 0014 0ED0     		beq	.L61
 400:VS4210/SysTimer.c ****         {
 401:VS4210/SysTimer.c ****             if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 552              		.loc 1 401 0
 553 0016 184A     		ldr	r2, .L68
 554 0018 12F83320 		ldrb	r2, [r2, r3, lsl #3]	@ zero_extendqisi2
 555 001c B1EB520F 		cmp	r1, r2, lsr #1
 556 0020 08D1     		bne	.L61
 402:VS4210/SysTimer.c ****             {
 403:VS4210/SysTimer.c ****                 SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTi
 557              		.loc 1 403 0
 558 0022 2046     		mov	r0, r4
 559              	.LVL50:
 560 0024 FFF7FEFF 		bl	MCUTimerCheckTimerEvent
 561              	.LVL51:
 562 0028 2044     		add	r0, r0, r4
 563 002a 134B     		ldr	r3, .L68
 564 002c 03EBC505 		add	r5, r3, r5, lsl #3
 565 0030 6860     		str	r0, [r5, #4]
 404:VS4210/SysTimer.c ****                 return;
 566              		.loc 1 404 0
 567 0032 70BD     		pop	{r4, r5, r6, pc}
 568              	.LVL52:
 569              	.L61:
 397:VS4210/SysTimer.c ****     {
 570              		.loc 1 397 0 discriminator 2
 571 0034 0133     		adds	r3, r3, #1
 572              	.LVL53:
 573 0036 DBB2     		uxtb	r3, r3
 574              	.LVL54:
ARM GAS  /tmp/ccFrvWrx.s 			page 18


 575              	.L60:
 397:VS4210/SysTimer.c ****     {
 576              		.loc 1 397 0 is_stmt 0 discriminator 1
 577 0038 092B     		cmp	r3, #9
 578 003a E5D9     		bls	.L63
 579 003c 0023     		movs	r3, #0
 580              	.LVL55:
 581 003e 17E0     		b	.L64
 582              	.LVL56:
 583              	.L66:
 405:VS4210/SysTimer.c ****             }
 406:VS4210/SysTimer.c ****         }
 407:VS4210/SysTimer.c ****     }    
 408:VS4210/SysTimer.c **** 
 409:VS4210/SysTimer.c ****     // Choose any Vacant Storage for Event
 410:VS4210/SysTimer.c ****     for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 411:VS4210/SysTimer.c ****     {
 412:VS4210/SysTimer.c ****         if(GET_EVENT_VALID(ucEventIndex) == _FALSE)
 584              		.loc 1 412 0 is_stmt 1
 585 0040 1D46     		mov	r5, r3
 586 0042 0D4A     		ldr	r2, .L68
 587 0044 12F83320 		ldrb	r2, [r2, r3, lsl #3]	@ zero_extendqisi2
 588 0048 12F0010F 		tst	r2, #1
 589 004c 0ED1     		bne	.L65
 413:VS4210/SysTimer.c ****         {
 414:VS4210/SysTimer.c ****             SET_EVENT_VALID(ucEventIndex);
 590              		.loc 1 414 0
 591 004e 0A4E     		ldr	r6, .L68
 415:VS4210/SysTimer.c ****             SET_EVENT_ID(ucEventIndex, ucEventID);
 592              		.loc 1 415 0
 593 0050 42F00103 		orr	r3, r2, #1
 594              	.LVL57:
 595 0054 61F34703 		bfi	r3, r1, #1, #7
 596 0058 06F83530 		strb	r3, [r6, r5, lsl #3]
 416:VS4210/SysTimer.c ****             SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime))
 597              		.loc 1 416 0
 598 005c 2046     		mov	r0, r4
 599              	.LVL58:
 600 005e FFF7FEFF 		bl	MCUTimerCheckTimerEvent
 601              	.LVL59:
 602 0062 2044     		add	r0, r0, r4
 603 0064 06EBC505 		add	r5, r6, r5, lsl #3
 604 0068 6860     		str	r0, [r5, #4]
 417:VS4210/SysTimer.c ****             return;
 605              		.loc 1 417 0
 606 006a 70BD     		pop	{r4, r5, r6, pc}
 607              	.LVL60:
 608              	.L65:
 410:VS4210/SysTimer.c ****     {
 609              		.loc 1 410 0 discriminator 2
 610 006c 0133     		adds	r3, r3, #1
 611              	.LVL61:
 612 006e DBB2     		uxtb	r3, r3
 613              	.LVL62:
 614              	.L64:
 410:VS4210/SysTimer.c ****     {
 615              		.loc 1 410 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccFrvWrx.s 			page 19


 616 0070 092B     		cmp	r3, #9
 617 0072 E5D9     		bls	.L66
 618 0074 70BD     		pop	{r4, r5, r6, pc}
 619              	.L69:
 620 0076 00BF     		.align	2
 621              	.L68:
 622 0078 00000000 		.word	g_stTimerEvent
 623              		.cfi_endproc
 624              	.LFE75:
 626              		.section	.text.PowerLED,"ax",%progbits
 627              		.align	2
 628              		.global	PowerLED
 629              		.thumb
 630              		.thumb_func
 632              	PowerLED:
 633              	.LFB76:
 418:VS4210/SysTimer.c ****         }
 419:VS4210/SysTimer.c ****     }   
 420:VS4210/SysTimer.c **** }
 421:VS4210/SysTimer.c **** 
 422:VS4210/SysTimer.c **** 
 423:VS4210/SysTimer.c **** //=============================================================================
 424:VS4210/SysTimer.c **** //                            Power LED ON / OFF                                                   
 425:VS4210/SysTimer.c **** //=============================================================================
 426:VS4210/SysTimer.c **** void PowerLED(EnumSystemTimerEventID flag)
 427:VS4210/SysTimer.c **** {
 634              		.loc 1 427 0 is_stmt 1
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 0
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 638              	.LVL63:
 639 0000 10B5     		push	{r4, lr}
 640              	.LCFI4:
 641              		.cfi_def_cfa_offset 8
 642              		.cfi_offset 4, -8
 643              		.cfi_offset 14, -4
 428:VS4210/SysTimer.c **** 
 429:VS4210/SysTimer.c **** //SET_LED_STATUS(flag);
 430:VS4210/SysTimer.c **** 
 431:VS4210/SysTimer.c ****  switch(flag)
 644              		.loc 1 431 0
 645 0002 2C28     		cmp	r0, #44
 646 0004 11D0     		beq	.L72
 647 0006 3228     		cmp	r0, #50
 648 0008 1DD0     		beq	.L73
 649 000a 2A28     		cmp	r0, #42
 650 000c 28D1     		bne	.L70
 432:VS4210/SysTimer.c ****    { 
 433:VS4210/SysTimer.c **** 	 case _SYSTEM_TIMER_EVENT_GRN_ON:
 434:VS4210/SysTimer.c **** 		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin , GPIO_PIN_RESET);
 651              		.loc 1 434 0
 652 000e 154C     		ldr	r4, .L76
 653 0010 2046     		mov	r0, r4
 654              	.LVL64:
 655 0012 4FF40071 		mov	r1, #512
 656 0016 0022     		movs	r2, #0
 657 0018 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccFrvWrx.s 			page 20


 658              	.LVL65:
 435:VS4210/SysTimer.c **** 		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin , GPIO_PIN_SET);	   
 659              		.loc 1 435 0
 660 001c 2046     		mov	r0, r4
 661 001e 4FF48071 		mov	r1, #256
 662 0022 0122     		movs	r2, #1
 663 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 664              	.LVL66:
 436:VS4210/SysTimer.c **** 	 	break;
 665              		.loc 1 436 0
 666 0028 10BD     		pop	{r4, pc}
 667              	.LVL67:
 668              	.L72:
 437:VS4210/SysTimer.c **** 	  case _SYSTEM_TIMER_EVENT_RED_ON:
 438:VS4210/SysTimer.c **** 		 HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin , GPIO_PIN_SET);
 669              		.loc 1 438 0
 670 002a 0E4C     		ldr	r4, .L76
 671 002c 2046     		mov	r0, r4
 672              	.LVL68:
 673 002e 4FF40071 		mov	r1, #512
 674 0032 0122     		movs	r2, #1
 675 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 676              	.LVL69:
 439:VS4210/SysTimer.c **** 		 HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin , GPIO_PIN_RESET);		
 677              		.loc 1 439 0
 678 0038 2046     		mov	r0, r4
 679 003a 4FF48071 		mov	r1, #256
 680 003e 0022     		movs	r2, #0
 681 0040 FFF7FEFF 		bl	HAL_GPIO_WritePin
 682              	.LVL70:
 440:VS4210/SysTimer.c **** 	   	break;
 683              		.loc 1 440 0
 684 0044 10BD     		pop	{r4, pc}
 685              	.LVL71:
 686              	.L73:
 441:VS4210/SysTimer.c **** 	  case _SYSTEM_TIMER_EVENT_GRN_RED_OFF:
 442:VS4210/SysTimer.c **** 		  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin , GPIO_PIN_SET);
 687              		.loc 1 442 0
 688 0046 074C     		ldr	r4, .L76
 689 0048 2046     		mov	r0, r4
 690              	.LVL72:
 691 004a 4FF40071 		mov	r1, #512
 692 004e 0122     		movs	r2, #1
 693 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 694              	.LVL73:
 443:VS4210/SysTimer.c **** 		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin , GPIO_PIN_SET);		 
 695              		.loc 1 443 0
 696 0054 2046     		mov	r0, r4
 697 0056 4FF48071 		mov	r1, #256
 698 005a 0122     		movs	r2, #1
 699 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 700              	.LVL74:
 701              	.L70:
 702 0060 10BD     		pop	{r4, pc}
 703              	.L77:
 704 0062 00BF     		.align	2
 705              	.L76:
ARM GAS  /tmp/ccFrvWrx.s 			page 21


 706 0064 00100140 		.word	1073811456
 707              		.cfi_endproc
 708              	.LFE76:
 710              		.section	.text.UserInterfaceTimerEventProc,"ax",%progbits
 711              		.align	2
 712              		.global	UserInterfaceTimerEventProc
 713              		.thumb
 714              		.thumb_func
 716              	UserInterfaceTimerEventProc:
 717              	.LFB77:
 444:VS4210/SysTimer.c **** 		break;
 445:VS4210/SysTimer.c **** 
 446:VS4210/SysTimer.c **** //    HAL_GPIO_WritePin(GPIOA, TX_RST_Pin|TP2824_RST_Pin|VS_RST_Pin, GPIO_PIN_SET);
 447:VS4210/SysTimer.c ****    /*
 448:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_GRN_ON:
 449:VS4210/SysTimer.c ****    if((P4&0x01))
 450:VS4210/SysTimer.c **** 	 P4=P4&0xFE;	   //GREEN_LED = 0; 	   // ON GREEN
 451:VS4210/SysTimer.c **** 	break;
 452:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_GRN_OFF:
 453:VS4210/SysTimer.c ****    	 if((P4&0x01)==0) 	
 454:VS4210/SysTimer.c **** 	P4=P4|0x01;		//GREEN_LED = 1;		// OFF GREEN
 455:VS4210/SysTimer.c **** 	break;
 456:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_RED_ON:
 457:VS4210/SysTimer.c ****   if((P4&0x02))  	
 458:VS4210/SysTimer.c **** 	P4=P4&0xFD;		//RED_LED = 0;		// ON RED   	
 459:VS4210/SysTimer.c **** 	break;
 460:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_RED_OFF:
 461:VS4210/SysTimer.c ****    if((P4&0x02)==0)	 	
 462:VS4210/SysTimer.c ****    	P4=P4|0x02;		//RED_LED = 1;		// OFF RED
 463:VS4210/SysTimer.c ****    	break;
 464:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_GRN_RED_ON:
 465:VS4210/SysTimer.c **** 	   if((P4&0x01))
 466:VS4210/SysTimer.c **** 		 P4=P4&0xFE;	   //GREEN_LED = 0; 	   // ON GREEN
 467:VS4210/SysTimer.c **** 	   if((P4&0x02))	
 468:VS4210/SysTimer.c **** 		P4=P4&0xFC; 	//RED_LED = 0;		// ON RED	
 469:VS4210/SysTimer.c ****    	break;
 470:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_GRN_BLINK:
 471:VS4210/SysTimer.c ****    	     if((P4&0x01))
 472:VS4210/SysTimer.c ****    		{
 473:VS4210/SysTimer.c **** 		 P4=P4&0xFE;	   //GREEN_LED = 0; 	   // ON GREEN  		
 474:VS4210/SysTimer.c ****    		}
 475:VS4210/SysTimer.c **** 		else
 476:VS4210/SysTimer.c **** 		{
 477:VS4210/SysTimer.c **** 		P4=P4|0x01; 	//GREEN_LED = 1;		// OFF GREEN
 478:VS4210/SysTimer.c **** 		}
 479:VS4210/SysTimer.c ****    	break;
 480:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_RED_BLINK:
 481:VS4210/SysTimer.c ****    	 	 if((P4&0x02))
 482:VS4210/SysTimer.c ****    		{
 483:VS4210/SysTimer.c **** 		 P4=P4&0xFD;		//RED_LED = 0;		// ON RED    		
 484:VS4210/SysTimer.c ****    		}
 485:VS4210/SysTimer.c **** 		else
 486:VS4210/SysTimer.c **** 		{
 487:VS4210/SysTimer.c **** 		P4=P4|0x02;		//RED_LED = 1;		// OFF RED
 488:VS4210/SysTimer.c **** 		}
 489:VS4210/SysTimer.c ****    	break;	
 490:VS4210/SysTimer.c ****   case _SYSTEM_TIMER_EVENT_GRN_RED_BLINK:
ARM GAS  /tmp/ccFrvWrx.s 			page 22


 491:VS4210/SysTimer.c ****   		 if((P4&0x01))
 492:VS4210/SysTimer.c ****    		{
 493:VS4210/SysTimer.c **** 		 P4=P4&0xFC;	   //GREEN_LED = 0; 	   // ON RED& GREEN  
 494:VS4210/SysTimer.c ****    		}
 495:VS4210/SysTimer.c **** 		else
 496:VS4210/SysTimer.c **** 		{
 497:VS4210/SysTimer.c **** 		P4=P4|0x03; 	//GREEN_LED = 1;		// OFF GREEN&RED
 498:VS4210/SysTimer.c **** 		}
 499:VS4210/SysTimer.c **** 	 break;  
 500:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK:
 501:VS4210/SysTimer.c ****   		 if((P4&0x02))
 502:VS4210/SysTimer.c ****    		{
 503:VS4210/SysTimer.c **** 		 P4=P4&0xFC;	   //GREEN_LED = 0; 	   // ON RED
 504:VS4210/SysTimer.c ****    		}
 505:VS4210/SysTimer.c **** 		else
 506:VS4210/SysTimer.c **** 		{
 507:VS4210/SysTimer.c **** 		P4=P4|0x02; 	//GREEN_LED = 1;		// OFF RED
 508:VS4210/SysTimer.c **** 		}
 509:VS4210/SysTimer.c **** 	 break;   
 510:VS4210/SysTimer.c **** 	 */
 511:VS4210/SysTimer.c ****    default:
 512:VS4210/SysTimer.c ****             break;
 513:VS4210/SysTimer.c ****  }	
 514:VS4210/SysTimer.c **** }
 515:VS4210/SysTimer.c **** 
 516:VS4210/SysTimer.c **** void UserInterfaceTimerEventProc(BYTE ucEventID)
 517:VS4210/SysTimer.c **** {
 718              		.loc 1 517 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
 723              	.LVL75:
 724 0000 7047     		bx	lr
 725              		.cfi_endproc
 726              	.LFE77:
 728 0002 00BF     		.section	.text.ShowWorkingTimer,"ax",%progbits
 729              		.align	2
 730              		.global	ShowWorkingTimer
 731              		.thumb
 732              		.thumb_func
 734              	ShowWorkingTimer:
 735              	.LFB78:
 518:VS4210/SysTimer.c **** 
 519:VS4210/SysTimer.c **** switch(ucEventID)
 520:VS4210/SysTimer.c **** {
 521:VS4210/SysTimer.c **** #if 0
 522:VS4210/SysTimer.c **** 	case _USER_TIMER_EVENT_KEY_REPEAT_ENABLE:
 523:VS4210/SysTimer.c **** 		  // SET_KEYREPEATSTART();
 524:VS4210/SysTimer.c **** 		  DEBUG_MESSAGE(">");
 525:VS4210/SysTimer.c **** 		     MCUTimerActiveTimerEvent(SEC(10), _USER_TIMER_EVENT_KEY_REPEAT_ENABLE);
 526:VS4210/SysTimer.c **** 		   	break;
 527:VS4210/SysTimer.c **** 	case _USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_INC:
 528:VS4210/SysTimer.c **** 			if(CameraVolt<100)
 529:VS4210/SysTimer.c **** 			{
 530:VS4210/SysTimer.c **** 			CameraVolt++;
 531:VS4210/SysTimer.c **** 			}
ARM GAS  /tmp/ccFrvWrx.s 			page 23


 532:VS4210/SysTimer.c **** 			else
 533:VS4210/SysTimer.c **** 			{
 534:VS4210/SysTimer.c **** 			CameraVolt=100;
 535:VS4210/SysTimer.c **** 			}
 536:VS4210/SysTimer.c **** 			//SetAD5110Step(CameraVolt);
 537:VS4210/SysTimer.c **** 			//WriteEEP(EEP_CameraVolt, CameraVolt);  
 538:VS4210/SysTimer.c **** 			Printf("(CAM_INC %02x)",(WORD)CameraVolt);	
 539:VS4210/SysTimer.c ****    			break;
 540:VS4210/SysTimer.c **** 	case _USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_DEC:
 541:VS4210/SysTimer.c **** 		
 542:VS4210/SysTimer.c **** 			if(CameraVolt)
 543:VS4210/SysTimer.c **** 			{
 544:VS4210/SysTimer.c **** 			CameraVolt--;
 545:VS4210/SysTimer.c **** 			}
 546:VS4210/SysTimer.c **** 			else
 547:VS4210/SysTimer.c **** 			{
 548:VS4210/SysTimer.c **** 			CameraVolt=0;
 549:VS4210/SysTimer.c **** 			}
 550:VS4210/SysTimer.c **** 			//SetAD5110Step(CameraVolt);	
 551:VS4210/SysTimer.c **** 			//WriteEEP(EEP_CameraVolt, CameraVolt);  
 552:VS4210/SysTimer.c **** 			Printf("(CAM_DEC %02x)",(WORD)CameraVolt);	
 553:VS4210/SysTimer.c **** 			break;
 554:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_OSD_GET_MCU_VERSION:
 555:VS4210/SysTimer.c **** 			//MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REPLY_MCU_FW);	
 556:VS4210/SysTimer.c **** 			Printf("(GET_MCU_VERSION)");	
 557:VS4210/SysTimer.c **** 			break;
 558:VS4210/SysTimer.c ****        case _USER_TIMER_EVENT_OSD_MCU_ENTRY_SLEEP_MODE:
 559:VS4210/SysTimer.c **** 		   	Printf("(MCU_ENTRY_SLEEP_MODE)");    
 560:VS4210/SysTimer.c **** 			PSW_Flag=1;
 561:VS4210/SysTimer.c **** 	   		break;
 562:VS4210/SysTimer.c **** 	case _USER_TIMER_EVENT_OSD_DISTANCE_RESET:
 563:VS4210/SysTimer.c **** 		/*
 564:VS4210/SysTimer.c **** 		EncorderCount=0;
 565:VS4210/SysTimer.c **** 		EncorderLenint=0;
 566:VS4210/SysTimer.c **** 		EncorderLenfloaat=0;
 567:VS4210/SysTimer.c **** 		EncorderCountPN=0;
 568:VS4210/SysTimer.c **** 		*/
 569:VS4210/SysTimer.c **** 		//MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);	
 570:VS4210/SysTimer.c **** 		//param[0]=EncorderLenint;
 571:VS4210/SysTimer.c **** 		//param[1]=EncorderLenfloaat;
 572:VS4210/SysTimer.c **** 		//param[2]=EncorderCountPN;
 573:VS4210/SysTimer.c **** 		//protocol_send_cmd_with_param_num(0x0a, (BYTE *)param, 3);
 574:VS4210/SysTimer.c **** 		Printf("\r\n ClearEncorder ",0);
 575:VS4210/SysTimer.c **** 		
 576:VS4210/SysTimer.c **** 			 //Printf("(DISTANCE_RESET)");	 
 577:VS4210/SysTimer.c **** 			 break;
 578:VS4210/SysTimer.c **** 	 case _USER_TIMER_EVENT_OSD_DVR_REBOOT:
 579:VS4210/SysTimer.c **** 			 Printf("(DVR_REBOOT)");  
 580:VS4210/SysTimer.c **** 			  break;
 581:VS4210/SysTimer.c **** 	  case _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN:
 582:VS4210/SysTimer.c **** 			 Printf("(DVR_SHUTDOWN)");  
 583:VS4210/SysTimer.c **** 			 break;
 584:VS4210/SysTimer.c **** 	case _USER_TIMER_EVENT_OSD_ENCODER_DEVIATION_SETTING:
 585:VS4210/SysTimer.c **** 			Printf("(ENCODER_SET)");  
 586:VS4210/SysTimer.c **** 			break;
 587:VS4210/SysTimer.c **** 	#if (_DEBUG_MESSAGE_Monitor==ON)
 588:VS4210/SysTimer.c **** 	case _USER_TIMER_EVENT_Monitor_ON:
ARM GAS  /tmp/ccFrvWrx.s 			page 24


 589:VS4210/SysTimer.c **** 	 Monitor_flag=_FALSE;
 590:VS4210/SysTimer.c **** 		break;
 591:VS4210/SysTimer.c **** 	#endif
 592:VS4210/SysTimer.c **** 	case _USER_TIMER_EVENT_PANEL_BACKLIGHT_ON:
 593:VS4210/SysTimer.c **** 		 LCDPowerON();
 594:VS4210/SysTimer.c **** 		break;
 595:VS4210/SysTimer.c **** 		
 596:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_OSD_DISABLE:
 597:VS4210/SysTimer.c **** 			CloseOSDMenu();
 598:VS4210/SysTimer.c **** 			break;
 599:VS4210/SysTimer.c **** 	case _USER_TIMER_EVENT_DISPLAY_DISABLE:
 600:VS4210/SysTimer.c **** 
 601:VS4210/SysTimer.c **** 		if((GetItemValue(0xb9)==_FALSE)&&(TriggerStatus==OFF)&&((GetDisplayedOSD() & (MENU|TVVOL))==0))
 602:VS4210/SysTimer.c ****    		CloseOSDINFO();
 603:VS4210/SysTimer.c **** 		
 604:VS4210/SysTimer.c **** 		break;
 605:VS4210/SysTimer.c **** 	case _USER_TIMER_EVENT_Encoder_Loop:
 606:VS4210/SysTimer.c **** 		Encoder_flag=ON;
 607:VS4210/SysTimer.c **** 
 608:VS4210/SysTimer.c **** 		break;
 609:VS4210/SysTimer.c **** 		case _USER_TIMER_EVENT_SEQ_CHECK:
 610:VS4210/SysTimer.c **** 			if((SEQFlag==ON)&&(TriggerFlag==0)&&(PowerFlag==ON)&&((GetDisplayedOSD() & (MENU|TVVOL))==0))
 611:VS4210/SysTimer.c **** 			{
 612:VS4210/SysTimer.c **** 			SEQMode();
 613:VS4210/SysTimer.c **** 		  	 MCUTimerActiveTimerEvent(SEC(TimeStep), _USER_TIMER_EVENT_SEQ_CHECK);
 614:VS4210/SysTimer.c **** 			}
 615:VS4210/SysTimer.c **** 			break;
 616:VS4210/SysTimer.c **** 			#endif
 617:VS4210/SysTimer.c **** 	 default: 	break;
 618:VS4210/SysTimer.c **** 	 
 619:VS4210/SysTimer.c **** 
 620:VS4210/SysTimer.c **** }
 621:VS4210/SysTimer.c **** #if 0
 622:VS4210/SysTimer.c ****     switch(ucEventID)
 623:VS4210/SysTimer.c ****     {
 624:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_KEY_REPEAT_ENABLE:
 625:VS4210/SysTimer.c ****             SET_KEYREPEATSTART();
 626:VS4210/SysTimer.c ****             break;
 627:VS4210/SysTimer.c **** 
 628:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_KEY_SCAN_READY:
 629:VS4210/SysTimer.c ****             SET_KEYSCANREADY();
 630:VS4210/SysTimer.c ****             break;
 631:VS4210/SysTimer.c **** 
 632:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_OSD_DISABLE_OSD_LOGO:
 633:VS4210/SysTimer.c ****             RTDOsdDisplayDisableOsd();
 634:VS4210/SysTimer.c ****             SET_OSD_LOGO_ON(_OFF);
 635:VS4210/SysTimer.c **** 		
 636:VS4210/SysTimer.c **** 			
 637:VS4210/SysTimer.c **** #if(_INSTANT_TIMER_EVENT_0 == _ON)
 638:VS4210/SysTimer.c ****             MCUTimer0SetTimerCount(_TIMER_OFF);
 639:VS4210/SysTimer.c **** #endif
 640:VS4210/SysTimer.c **** 
 641:VS4210/SysTimer.c **** #if(_PANEL_POW_SEQ_FAST_MODE == _ON)
 642:VS4210/SysTimer.c ****             UserInterfacePanelPowerAction(_BACKLIGHT_OFF);
 643:VS4210/SysTimer.c **** #else
 644:VS4210/SysTimer.c ****             UserInterfacePanelPowerAction(_PANEL_OFF);
 645:VS4210/SysTimer.c **** #endif
ARM GAS  /tmp/ccFrvWrx.s 			page 25


 646:VS4210/SysTimer.c ****             ScalerDDomainBackgroundEnable(_ENABLE);
 647:VS4210/SysTimer.c ****             ScalerDDomainPatternGenEnable(_DISABLE);
 648:VS4210/SysTimer.c ****             break;
 649:VS4210/SysTimer.c **** 
 650:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_OSD_SHOW_NO_CABLE:
 651:VS4210/SysTimer.c ****       SET_OSD_EVENT_MESSAGE(_OSDEVENT_SHOW_NOCABLE_MSG);
 652:VS4210/SysTimer.c ****             break;
 653:VS4210/SysTimer.c **** 
 654:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_OSD_SHOW_NO_SIGNAL:
 655:VS4210/SysTimer.c ****        SET_OSD_EVENT_MESSAGE(_OSDEVENT_SHOW_NOSIGNAL_MSG);
 656:VS4210/SysTimer.c ****             break;
 657:VS4210/SysTimer.c **** 
 658:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_OSD_SHOW_POWER_SAVING:
 659:VS4210/SysTimer.c **** 
 660:VS4210/SysTimer.c **** 					#ifdef debug_mode1
 661:VS4210/SysTimer.c **** 					DebugMessageOsd("p6",0);
 662:VS4210/SysTimer.c **** 					#endif
 663:VS4210/SysTimer.c ****        SET_OSD_EVENT_MESSAGE(_OSDEVENT_SHOW_POWER_SAVING_EVENT_MSG);
 664:VS4210/SysTimer.c ****             break;
 665:VS4210/SysTimer.c **** 
 666:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_GO_TO_POWER_SAVING:
 667:VS4210/SysTimer.c ****           SET_OSD_EVENT_MESSAGE(_OSDEVENT_GO_TO_POWER_SAVING_EVENT_MSG);
 668:VS4210/SysTimer.c ****             break;
 669:VS4210/SysTimer.c **** 
 670:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_OSD_DISABLE:
 671:VS4210/SysTimer.c **** 					
 672:VS4210/SysTimer.c ****         	
 673:VS4210/SysTimer.c **** 						RTDOsdDisplayDisableOsd();
 674:VS4210/SysTimer.c **** 				  if(GET_CHANNEL_INFO_STATUS()==_TRUE) MCUTimerReactiveTimerEvent(SEC(3),_USER_TIMER_EVENT_DISP
 675:VS4210/SysTimer.c ****             break;
 676:VS4210/SysTimer.c **** 
 677:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_PANEL_BACKLIGHT_ON:
 678:VS4210/SysTimer.c ****             SET_PANELPOWERSTATUS(_READY_FOR_BACKLIGHT);
 679:VS4210/SysTimer.c ****             break;
 680:VS4210/SysTimer.c **** 		 case _USER_TIMER_EVENT_LIGHT_SENSER_ON	:
 681:VS4210/SysTimer.c **** 		 	if(GET_OSD_LIGHTSENSER()<=0x30) 
 682:VS4210/SysTimer.c **** 		 		{
 683:VS4210/SysTimer.c **** 				 UserInterfacePanelPowerAction(_BACKLIGHT_OFF);
 684:VS4210/SysTimer.c **** 				DebugMessageOsd("LIGHT_SENSER BACKLIGHT_OFF==",1);
 685:VS4210/SysTimer.c **** 		 		}
 686:VS4210/SysTimer.c **** 			  break;
 687:VS4210/SysTimer.c **** 				 case _USER_TIMER_EVENT_SHOW_BURN_IN://ryan@20141230		
 688:VS4210/SysTimer.c **** 				 	SET_OSD_EVENT_MESSAGE(_OSDEVENT_SHOW_BURNIN_MSG);	
 689:VS4210/SysTimer.c **** 				 //SET_OSD_EVENT_MESSAGE(_OSDEVENT_FACTORY_BURNIN_MODE_MSG);
 690:VS4210/SysTimer.c **** 				break;
 691:VS4210/SysTimer.c **** 				
 692:VS4210/SysTimer.c **** 	  case _USER_TIMER_EVENT_BURN_IN_ON://ryan@20141230		
 693:VS4210/SysTimer.c **** 		 		 SET_OSD_EVENT_MESSAGE(_OSDEVENT_FACTORY_BURNIN_MODE_MSG);	
 694:VS4210/SysTimer.c **** 				 //SET_OSD_EVENT_MESSAGE(_OSDEVENT_FACTORY_BURNIN_MODE_MSG);
 695:VS4210/SysTimer.c **** 				break;
 696:VS4210/SysTimer.c **** 	  case _USER_TIMER_EVENT_CHECK://ryan@20141230		
 697:VS4210/SysTimer.c **** 			 SET_OSD_EVENT_MESSAGE(_OSDEVENT_CHECK_MSG);
 698:VS4210/SysTimer.c **** 				break;
 699:VS4210/SysTimer.c **** 	
 700:VS4210/SysTimer.c **** 		 case _USER_TIMER_EVENT_DISPLAY_INFO://ryan@20141230		
 701:VS4210/SysTimer.c **** 			 SET_OSD_EVENT_MESSAGE(_OSDEVENT_DISPLAY_INFO_MSG);
 702:VS4210/SysTimer.c **** 				break;	
ARM GAS  /tmp/ccFrvWrx.s 			page 26


 703:VS4210/SysTimer.c **** 	  case _USER_TIMER_EVENT_STANDBY_MODE:
 704:VS4210/SysTimer.c **** 	 SET_OSD_EVENT_MESSAGE(_OSDEVENT_STANDBY_MODE_MSG);
 705:VS4210/SysTimer.c **** 			break;
 706:VS4210/SysTimer.c **** 		  case _USER_TIMER_EVENT_FACTORY_MODE:
 707:VS4210/SysTimer.c **** 	 SET_OSD_EVENT_MESSAGE(_OSDEVENT_FACTORY_MODE_MSG);
 708:VS4210/SysTimer.c **** 			break;		
 709:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_PANEL_POWER_OFF:
 710:VS4210/SysTimer.c ****             SET_PANELPOWERSTATUS(_PANEL_POWER_OFF_STATE);
 711:VS4210/SysTimer.c ****             break;
 712:VS4210/SysTimer.c **** 
 713:VS4210/SysTimer.c **** 	case _USER_TIMER_EVENT_LED_POWER_SAVING:
 714:VS4210/SysTimer.c **** 		
 715:VS4210/SysTimer.c **** 		PCB_LED_IDLE();
 716:VS4210/SysTimer.c **** 		break;
 717:VS4210/SysTimer.c **** 
 718:VS4210/SysTimer.c **** #if(_VGA_SUPPORT == _ON)
 719:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_DO_AUTO_COLOR:
 720:VS4210/SysTimer.c ****             RTDOsdDisplayAutoBalanceProc();
 721:VS4210/SysTimer.c ****             break;
 722:VS4210/SysTimer.c **** #endif
 723:VS4210/SysTimer.c **** 
 724:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_PANEL_USED_TIMER:
 725:VS4210/SysTimer.c ****             RTDFactoryPanelUsedTimer();
 726:VS4210/SysTimer.c ****             break;
 727:VS4210/SysTimer.c **** 
 728:VS4210/SysTimer.c **** #if(_HIGHLIGHT_WINDOW_SUPPORT == _ON)
 729:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_HLWIN_TYPE5_MOVE:
 730:VS4210/SysTimer.c ****             UserAdjustHLWinType5Move();
 731:VS4210/SysTimer.c ****             break;
 732:VS4210/SysTimer.c **** #endif
 733:VS4210/SysTimer.c **** 
 734:VS4210/SysTimer.c **** #if(_ENERGY_STAR_SUPPORT == _ON)
 735:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_ES_ADJUST:
 736:VS4210/SysTimer.c ****             UserCommonAdjustESDcrAdjustPWM();
 737:VS4210/SysTimer.c ****             break;
 738:VS4210/SysTimer.c **** #endif
 739:VS4210/SysTimer.c **** 
 740:VS4210/SysTimer.c **** #if defined(_UART_ENABLE) // uart [micon.sam.0524.2013]
 741:VS4210/SysTimer.c ****         case _USER_TIMER_EVENT_UART_RESET:          //for uart timeout  //walter.hsiao 20121108
 742:VS4210/SysTimer.c ****             g_bUartCommandStart = _FALSE;
 743:VS4210/SysTimer.c ****             g_ucUartCommandNum = 1;
 744:VS4210/SysTimer.c ****             break;
 745:VS4210/SysTimer.c **** #endif
 746:VS4210/SysTimer.c **** 
 747:VS4210/SysTimer.c ****         default:
 748:VS4210/SysTimer.c ****             break;
 749:VS4210/SysTimer.c ****     }
 750:VS4210/SysTimer.c **** #endif
 751:VS4210/SysTimer.c **** 	
 752:VS4210/SysTimer.c **** }
 753:VS4210/SysTimer.c **** 
 754:VS4210/SysTimer.c **** //=============================================================================//
 755:VS4210/SysTimer.c **** //                     ShowWorkTimer                                                 										//
 756:VS4210/SysTimer.c **** //=============================================================================//
 757:VS4210/SysTimer.c **** void ShowWorkingTimer(void)
 758:VS4210/SysTimer.c **** {
 736              		.loc 1 758 0
ARM GAS  /tmp/ccFrvWrx.s 			page 27


 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
 740              		.loc 1 758 0
 741 0000 00B5     		push	{lr}
 742              	.LCFI5:
 743              		.cfi_def_cfa_offset 4
 744              		.cfi_offset 14, -4
 745 0002 83B0     		sub	sp, sp, #12
 746              	.LCFI6:
 747              		.cfi_def_cfa_offset 16
 759:VS4210/SysTimer.c **** 	if(day)
 748              		.loc 1 759 0
 749 0004 174B     		ldr	r3, .L85
 750 0006 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 751 0008 62B1     		cbz	r2, .L80
 760:VS4210/SysTimer.c **** 	{
 761:VS4210/SysTimer.c **** 	GraphicsPrint(YELLOW,"\r\nSystem has been working for %d days, %d hours, %d minutes and %d seconds
 752              		.loc 1 761 0
 753 000a 174B     		ldr	r3, .L85+4
 754 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 755 000e 1749     		ldr	r1, .L85+8
 756 0010 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 757 0012 0091     		str	r1, [sp]
 758 0014 1649     		ldr	r1, .L85+12
 759 0016 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 760 0018 0191     		str	r1, [sp, #4]
 761 001a 0320     		movs	r0, #3
 762 001c 1549     		ldr	r1, .L85+16
 763 001e FFF7FEFF 		bl	GraphicsPrint
 764              	.LVL76:
 765 0022 1CE0     		b	.L79
 766              	.L80:
 762:VS4210/SysTimer.c **** 	}
 763:VS4210/SysTimer.c **** 	else if(hour)
 767              		.loc 1 763 0
 768 0024 104B     		ldr	r3, .L85+4
 769 0026 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 770 0028 4AB1     		cbz	r2, .L82
 764:VS4210/SysTimer.c **** 	{
 765:VS4210/SysTimer.c **** 	GraphicsPrint(YELLOW,"\r\nSystem has been working for %d hours, %d minutes and %d seconds",(WORD)h
 771              		.loc 1 765 0
 772 002a 104B     		ldr	r3, .L85+8
 773 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 774 002e 1049     		ldr	r1, .L85+12
 775 0030 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 776 0032 0091     		str	r1, [sp]
 777 0034 0320     		movs	r0, #3
 778 0036 1049     		ldr	r1, .L85+20
 779 0038 FFF7FEFF 		bl	GraphicsPrint
 780              	.LVL77:
 781 003c 0FE0     		b	.L79
 782              	.L82:
 766:VS4210/SysTimer.c **** 	}
 767:VS4210/SysTimer.c **** 	else if(minute)
 783              		.loc 1 767 0
 784 003e 0B4B     		ldr	r3, .L85+8
ARM GAS  /tmp/ccFrvWrx.s 			page 28


 785 0040 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 786 0042 32B1     		cbz	r2, .L83
 768:VS4210/SysTimer.c **** 		{
 769:VS4210/SysTimer.c **** 		GraphicsPrint(YELLOW,"\r\nSystem has been working for %d minutes and %d seconds",(WORD)minute,(WO
 787              		.loc 1 769 0
 788 0044 0320     		movs	r0, #3
 789 0046 0D49     		ldr	r1, .L85+24
 790 0048 094B     		ldr	r3, .L85+12
 791 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 792 004c FFF7FEFF 		bl	GraphicsPrint
 793              	.LVL78:
 794 0050 05E0     		b	.L79
 795              	.L83:
 770:VS4210/SysTimer.c **** 		}
 771:VS4210/SysTimer.c **** 	else
 772:VS4210/SysTimer.c **** 		{
 773:VS4210/SysTimer.c **** 		GraphicsPrint(YELLOW,"\r\nSystem has been working for %d seconds",(WORD)second);
 796              		.loc 1 773 0
 797 0052 0320     		movs	r0, #3
 798 0054 0A49     		ldr	r1, .L85+28
 799 0056 064B     		ldr	r3, .L85+12
 800 0058 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 801 005a FFF7FEFF 		bl	GraphicsPrint
 802              	.LVL79:
 803              	.L79:
 774:VS4210/SysTimer.c **** 		}
 775:VS4210/SysTimer.c **** 
 776:VS4210/SysTimer.c **** 	
 777:VS4210/SysTimer.c **** /*
 778:VS4210/SysTimer.c **** 	GraphicsPrint(GREEN,"\r\n(BatteryBTH=%d(%d.%dV))",(WORD)BatteryBTH\
 779:VS4210/SysTimer.c **** 			,(WORD)((BatteryBTH*32)/10000)\
 780:VS4210/SysTimer.c **** 		,(WORD)((BatteryBTH*32)%10000));
 781:VS4210/SysTimer.c **** 
 782:VS4210/SysTimer.c **** 	if(GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)
 783:VS4210/SysTimer.c **** 		GraphicsPrint(GREEN,"(TEMP_NORMAL)");
 784:VS4210/SysTimer.c **** 	else if(GET_BTH_STATE()==_BATT_STATUS_TEMP_HIGH)
 785:VS4210/SysTimer.c **** 		GraphicsPrint(RED,"(TEMP_HIGH)");
 786:VS4210/SysTimer.c **** 	else
 787:VS4210/SysTimer.c **** 		GraphicsPrint(BLUE,"(TEMP_LOW)");
 788:VS4210/SysTimer.c **** 		
 789:VS4210/SysTimer.c **** GraphicsPrint(MAGENTA,"\r\n(BatteryCAP=%d(%d.%dV))",(WORD)GET_BATTERY_CAPACITY()\
 790:VS4210/SysTimer.c **** 		,(WORD)((GET_BATTERY_CAPACITY()*32)/10000)\
 791:VS4210/SysTimer.c **** 		,(WORD)((GET_BATTERY_CAPACITY()*32)%10000));
 792:VS4210/SysTimer.c **** 
 793:VS4210/SysTimer.c **** 	if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_HIGH_CHARGE)
 794:VS4210/SysTimer.c **** 		GraphicsPrint(GREEN,"(HIGH_CHARGE)");	
 795:VS4210/SysTimer.c **** 	else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_LOW_CHARGE)	
 796:VS4210/SysTimer.c **** 		GraphicsPrint(YELLOW,"(LOW_CHARGE)"); 
 797:VS4210/SysTimer.c **** 	else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_STOP_CHARGE)	
 798:VS4210/SysTimer.c **** 		GraphicsPrint(RED,"(STOP_CHARGE)"); 
 799:VS4210/SysTimer.c **** 	else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)	
 800:VS4210/SysTimer.c **** 		GraphicsPrint(RED,"(NO_BATT)"); 
 801:VS4210/SysTimer.c **** 
 802:VS4210/SysTimer.c ****    if(GET_BATTERY_STATE()==4)
 803:VS4210/SysTimer.c **** 	GraphicsPrint(GREEN,"(BATT_STATUS_AC_MODE)");	
 804:VS4210/SysTimer.c **** else if(GET_BATTERY_STATE()==3)
 805:VS4210/SysTimer.c **** 	GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL1)");	
ARM GAS  /tmp/ccFrvWrx.s 			page 29


 806:VS4210/SysTimer.c **** else if(GET_BATTERY_STATE()==2)
 807:VS4210/SysTimer.c **** 	GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL2)");	
 808:VS4210/SysTimer.c **** else if(GET_BATTERY_STATE()==1)
 809:VS4210/SysTimer.c **** 	GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL3)");	
 810:VS4210/SysTimer.c **** else	 if(GET_BATTERY_STATE()==0)	
 811:VS4210/SysTimer.c **** 	GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL4)");	
 812:VS4210/SysTimer.c **** else	 if(GET_BATTERY_STATE()==9)	
 813:VS4210/SysTimer.c **** 	GraphicsPrint(RED,"(_BATT_STATUS_NO_BATT)");	
 814:VS4210/SysTimer.c **** 
 815:VS4210/SysTimer.c **** GraphicsPrint(CYAN,"\r\n(POWER_STATUS=%d)",(WORD)GET_POWER_STATUS());
 816:VS4210/SysTimer.c **** */
 817:VS4210/SysTimer.c **** }
 804              		.loc 1 817 0
 805 005e 03B0     		add	sp, sp, #12
 806              	.LCFI7:
 807              		.cfi_def_cfa_offset 4
 808              		@ sp needed
 809 0060 5DF804FB 		ldr	pc, [sp], #4
 810              	.L86:
 811              		.align	2
 812              	.L85:
 813 0064 00000000 		.word	.LANCHOR2
 814 0068 00000000 		.word	.LANCHOR3
 815 006c 00000000 		.word	.LANCHOR4
 816 0070 00000000 		.word	.LANCHOR5
 817 0074 38000000 		.word	.LC1
 818 0078 84000000 		.word	.LC2
 819 007c C8000000 		.word	.LC3
 820 0080 00010000 		.word	.LC4
 821              		.cfi_endproc
 822              	.LFE78:
 824              		.section	.text.MCUTimerEventProc,"ax",%progbits
 825              		.align	2
 826              		.global	MCUTimerEventProc
 827              		.thumb
 828              		.thumb_func
 830              	MCUTimerEventProc:
 831              	.LFB79:
 818:VS4210/SysTimer.c **** 
 819:VS4210/SysTimer.c **** void MCUTimerEventProc(EnumMCUTimerEventID enumEventID)
 820:VS4210/SysTimer.c **** {
 832              		.loc 1 820 0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 0
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 836              		@ link register save eliminated.
 837              	.LVL80:
 838 0000 7047     		bx	lr
 839              		.cfi_endproc
 840              	.LFE79:
 842 0002 00BF     		.section	.text.SysTimerEventProc,"ax",%progbits
 843              		.align	2
 844              		.global	SysTimerEventProc
 845              		.thumb
 846              		.thumb_func
 848              	SysTimerEventProc:
 849              	.LFB81:
ARM GAS  /tmp/ccFrvWrx.s 			page 30


 821:VS4210/SysTimer.c **** 
 822:VS4210/SysTimer.c **** switch(enumEventID)
 823:VS4210/SysTimer.c ****    {
 824:VS4210/SysTimer.c **** 
 825:VS4210/SysTimer.c **** default: 
 826:VS4210/SysTimer.c **** 		break;
 827:VS4210/SysTimer.c **** }
 828:VS4210/SysTimer.c **** 
 829:VS4210/SysTimer.c **** #if 0
 830:VS4210/SysTimer.c ****     switch(enumEventID)
 831:VS4210/SysTimer.c ****     {
 832:VS4210/SysTimer.c **** #if((_DVI_SUPPORT == _ON) || (_HDMI_SUPPORT == _ON))
 833:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_TMDS_VIDEO_DETECT:
 834:VS4210/SysTimer.c ****         
 835:VS4210/SysTimer.c ****             ScalerSyncTmdsVideoDetectEvent();
 836:VS4210/SysTimer.c ****             break;
 837:VS4210/SysTimer.c **** 
 838:VS4210/SysTimer.c **** #if(_HDMI_SUPPORT == _ON)
 839:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_TMDS_HDMI_PACKET_DETECT:
 840:VS4210/SysTimer.c ****         
 841:VS4210/SysTimer.c ****             ScalerTmdsHdmiPacketDetectEvent();
 842:VS4210/SysTimer.c ****             break;            
 843:VS4210/SysTimer.c **** #endif // End of #if(_HDMI_SUPPORT == _ON) 
 844:VS4210/SysTimer.c **** 
 845:VS4210/SysTimer.c **** #endif // End of #if((_DVI_SUPPORT == _ON) || (_HDMI_SUPPORT == _ON))       
 846:VS4210/SysTimer.c **** 
 847:VS4210/SysTimer.c **** #if(_AUDIO_SUPPORT == _ON)
 848:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_AUDIO_LOAD_STABLE_I_CODE:
 849:VS4210/SysTimer.c **** 
 850:VS4210/SysTimer.c ****             ScalerAudioLoadStableICodeEvent();
 851:VS4210/SysTimer.c ****             break;            
 852:VS4210/SysTimer.c **** #endif // End of #if(_AUDIO_SUPPORT == _ON)
 853:VS4210/SysTimer.c **** 
 854:VS4210/SysTimer.c **** #if(_DP_SUPPORT == _ON)
 855:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_DP_HOTPLUG_ASSERTED:
 856:VS4210/SysTimer.c ****             ScalerDpHotPlugEvent(_DP_HPD_ASSERTED);
 857:VS4210/SysTimer.c ****             break;
 858:VS4210/SysTimer.c **** 
 859:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_DP_HDCP_LONG_HOTPLUG_EVENT:
 860:VS4210/SysTimer.c ****             ScalerDpHotPlugEvent(_DP_HDCP_LONG_HPD_EVENT);
 861:VS4210/SysTimer.c ****             break;
 862:VS4210/SysTimer.c **** 
 863:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_DP_LINK_STATUS_IRQ:
 864:VS4210/SysTimer.c ****             ScalerDpLinkStatusIRQ();
 865:VS4210/SysTimer.c ****             break;            
 866:VS4210/SysTimer.c **** #endif  
 867:VS4210/SysTimer.c **** 
 868:VS4210/SysTimer.c **** #if((_D2_INPUT_PORT_SWITCH_FROM == _SWITCH_FROM_D0) || (_D3_INPUT_PORT_SWITCH_FROM == _SWITCH_FROM_
 869:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_D0_PORT_DIGITAL_SWITCH:
 870:VS4210/SysTimer.c ****             SET_D0_PORT_DIGITAL_SWITCH();
 871:VS4210/SysTimer.c ****             break;    
 872:VS4210/SysTimer.c **** #endif
 873:VS4210/SysTimer.c **** 
 874:VS4210/SysTimer.c **** #if((_D2_INPUT_PORT_SWITCH_FROM == _SWITCH_FROM_D1) || (_D3_INPUT_PORT_SWITCH_FROM == _SWITCH_FROM_
 875:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_D1_PORT_DIGITAL_SWITCH:
 876:VS4210/SysTimer.c ****             SET_D1_PORT_DIGITAL_SWITCH();
 877:VS4210/SysTimer.c ****             break;
ARM GAS  /tmp/ccFrvWrx.s 			page 31


 878:VS4210/SysTimer.c **** #endif   
 879:VS4210/SysTimer.c **** 
 880:VS4210/SysTimer.c **** #if((_VGA_SUPPORT == _ON) && (_ADCNR_BY_HISTOGRAM_SUPPORT == _ON))
 881:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_NR_DETECTION_FINISHED:
 882:VS4210/SysTimer.c ****             ScalerNrTimerEvent();
 883:VS4210/SysTimer.c ****             break;
 884:VS4210/SysTimer.c **** #endif
 885:VS4210/SysTimer.c **** 
 886:VS4210/SysTimer.c **** #if(_SDRAM_PHASE_CALIBRATION == _ON)
 887:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_PHASE_CALIBRATION: 
 888:VS4210/SysTimer.c ****             ScalerSDRAMPhaseOnLineTimer();
 889:VS4210/SysTimer.c ****             break;
 890:VS4210/SysTimer.c **** 
 891:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_PHASE_CNT_CHECK:
 892:VS4210/SysTimer.c **** 
 893:VS4210/SysTimer.c ****             // Check phase count every 60 minute
 894:VS4210/SysTimer.c ****             ScalerSDRAMPhaseCntCheck(60);
 895:VS4210/SysTimer.c ****             break;
 896:VS4210/SysTimer.c **** #endif
 897:VS4210/SysTimer.c **** 
 898:VS4210/SysTimer.c **** #if(_D0_INPUT_PORT_TYPE == _D0_MHL_PORT)
 899:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_MHL_D0_READY_TO_TRANSMIT:
 900:VS4210/SysTimer.c **** 
 901:VS4210/SysTimer.c ****             SET_MHL_READY_TO_TRANSMIT(0, _TRUE);
 902:VS4210/SysTimer.c ****             break;
 903:VS4210/SysTimer.c **** 
 904:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_MHL_D0_READY_TO_RESEND:
 905:VS4210/SysTimer.c **** 
 906:VS4210/SysTimer.c ****             SET_MHL_READY_TO_RESEND(0, _TRUE);
 907:VS4210/SysTimer.c ****             break;
 908:VS4210/SysTimer.c **** 
 909:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_MHL_D0_RECONNECT_1K:
 910:VS4210/SysTimer.c **** 
 911:VS4210/SysTimer.c **** #if(_D0_CBUS_CHANNEL_SEL == _CBUS0)
 912:VS4210/SysTimer.c ****             if(((ScalerGetByte(P28_A7_CBUS0_CTRL_07) & 0x38) >> 3) == 0x02)
 913:VS4210/SysTimer.c ****             {
 914:VS4210/SysTimer.c ****                 ScalerSetBit(P28_A8_CBUS0_CTRL_08, ~_BIT5, 0x00);
 915:VS4210/SysTimer.c ****                 MCUTimerDelayXms(52);
 916:VS4210/SysTimer.c ****                 ScalerSetBit(P28_A8_CBUS0_CTRL_08, ~_BIT5, _BIT5);
 917:VS4210/SysTimer.c ****             }
 918:VS4210/SysTimer.c **** #elif(_D0_CBUS_CHANNEL_SEL == _CBUS1)
 919:VS4210/SysTimer.c ****             if(((ScalerGetByte(P29_A7_CBUS1_CTRL_07) & 0x38) >> 3) == 0x02)
 920:VS4210/SysTimer.c ****             {
 921:VS4210/SysTimer.c ****                 ScalerSetBit(P29_A8_CBUS1_CTRL_08, ~_BIT5, 0x00);
 922:VS4210/SysTimer.c ****                 MCUTimerDelayXms(52);
 923:VS4210/SysTimer.c ****                 ScalerSetBit(P29_A8_CBUS1_CTRL_08, ~_BIT5, _BIT5);
 924:VS4210/SysTimer.c ****             }
 925:VS4210/SysTimer.c **** #endif
 926:VS4210/SysTimer.c **** 
 927:VS4210/SysTimer.c ****             break;
 928:VS4210/SysTimer.c **** 
 929:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_MHL_D0_ACTIVE_VBUS:
 930:VS4210/SysTimer.c **** 
 931:VS4210/SysTimer.c ****             if(GET_D0_TMDS_MODE() == _TMDS_MHL_MODE)
 932:VS4210/SysTimer.c ****             {
 933:VS4210/SysTimer.c ****                 // GPIO Select to Hot Plug
 934:VS4210/SysTimer.c **** #if(_D0_CBUS_CHANNEL_SEL == _CBUS0)
ARM GAS  /tmp/ccFrvWrx.s 			page 32


 935:VS4210/SysTimer.c ****                 ScalerSetBit(P27_A0_CBUS_EN, ~_BIT4, 0x00);
 936:VS4210/SysTimer.c **** #elif(_D0_CBUS_CHANNEL_SEL == _CBUS1)
 937:VS4210/SysTimer.c ****                 ScalerSetBit(P27_A0_CBUS_EN, ~_BIT5, 0x00);
 938:VS4210/SysTimer.c **** #endif
 939:VS4210/SysTimer.c ****                 SET_D0_MHL_VBUS_SWITCH(_MHL_VBUS_ON);
 940:VS4210/SysTimer.c ****             }
 941:VS4210/SysTimer.c ****             
 942:VS4210/SysTimer.c ****             break;
 943:VS4210/SysTimer.c **** #endif // End of #if(_D0_INPUT_PORT_TYPE == _D0_MHL_PORT)
 944:VS4210/SysTimer.c **** 
 945:VS4210/SysTimer.c **** #if(_D1_INPUT_PORT_TYPE == _D1_MHL_PORT)
 946:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_MHL_D1_READY_TO_TRANSMIT:
 947:VS4210/SysTimer.c **** 
 948:VS4210/SysTimer.c **** #if(_D0_INPUT_PORT_TYPE == _D0_MHL_PORT)
 949:VS4210/SysTimer.c ****             SET_MHL_READY_TO_TRANSMIT(1, _TRUE);
 950:VS4210/SysTimer.c **** #else
 951:VS4210/SysTimer.c ****             SET_MHL_READY_TO_TRANSMIT(0, _TRUE);
 952:VS4210/SysTimer.c **** #endif
 953:VS4210/SysTimer.c **** 
 954:VS4210/SysTimer.c ****             break;
 955:VS4210/SysTimer.c **** 
 956:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_MHL_D1_READY_TO_RESEND:
 957:VS4210/SysTimer.c ****             
 958:VS4210/SysTimer.c **** #if(_D0_INPUT_PORT_TYPE == _D0_MHL_PORT)
 959:VS4210/SysTimer.c ****             SET_MHL_READY_TO_RESEND(1, _TRUE);
 960:VS4210/SysTimer.c **** #else
 961:VS4210/SysTimer.c ****             SET_MHL_READY_TO_RESEND(0, _TRUE);
 962:VS4210/SysTimer.c **** #endif
 963:VS4210/SysTimer.c **** 
 964:VS4210/SysTimer.c ****             break;
 965:VS4210/SysTimer.c ****      
 966:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_MHL_D1_RECONNECT_1K:
 967:VS4210/SysTimer.c **** 
 968:VS4210/SysTimer.c **** #if(_D1_CBUS_CHANNEL_SEL == _CBUS0)
 969:VS4210/SysTimer.c ****             if(((ScalerGetByte(P28_A7_CBUS0_CTRL_07) & 0x38) >> 3) == 0x02)
 970:VS4210/SysTimer.c ****             {
 971:VS4210/SysTimer.c ****                 ScalerSetBit(P28_A8_CBUS0_CTRL_08, ~_BIT5, 0x00);
 972:VS4210/SysTimer.c ****                 MCUTimerDelayXms(52);
 973:VS4210/SysTimer.c ****                 ScalerSetBit(P28_A8_CBUS0_CTRL_08, ~_BIT5, _BIT5);
 974:VS4210/SysTimer.c ****             }
 975:VS4210/SysTimer.c **** #elif(_D1_CBUS_CHANNEL_SEL == _CBUS1)
 976:VS4210/SysTimer.c ****             if(((ScalerGetByte(P29_A7_CBUS1_CTRL_07) & 0x38) >> 3) == 0x02)
 977:VS4210/SysTimer.c ****             {
 978:VS4210/SysTimer.c ****                 ScalerSetBit(P29_A8_CBUS1_CTRL_08, ~_BIT5, 0x00);
 979:VS4210/SysTimer.c ****                 MCUTimerDelayXms(52);
 980:VS4210/SysTimer.c ****                 ScalerSetBit(P29_A8_CBUS1_CTRL_08, ~_BIT5, _BIT5);
 981:VS4210/SysTimer.c ****             }
 982:VS4210/SysTimer.c **** #endif
 983:VS4210/SysTimer.c **** 
 984:VS4210/SysTimer.c ****             break;
 985:VS4210/SysTimer.c **** 
 986:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_MHL_D1_ACTIVE_VBUS:
 987:VS4210/SysTimer.c **** 
 988:VS4210/SysTimer.c ****             if(GET_D1_TMDS_MODE() == _TMDS_MHL_MODE)
 989:VS4210/SysTimer.c ****             {
 990:VS4210/SysTimer.c ****                 // GPIO Select to Hot Plug
 991:VS4210/SysTimer.c **** #if(_D1_CBUS_CHANNEL_SEL == _CBUS0)
ARM GAS  /tmp/ccFrvWrx.s 			page 33


 992:VS4210/SysTimer.c ****                 ScalerSetBit(P27_A0_CBUS_EN, ~_BIT4, 0x00);
 993:VS4210/SysTimer.c **** #elif(_D1_CBUS_CHANNEL_SEL == _CBUS1)
 994:VS4210/SysTimer.c ****                 ScalerSetBit(P27_A0_CBUS_EN, ~_BIT5, 0x00);
 995:VS4210/SysTimer.c **** #endif
 996:VS4210/SysTimer.c ****  
 997:VS4210/SysTimer.c ****                 SET_D1_MHL_VBUS_SWITCH(_MHL_VBUS_ON);
 998:VS4210/SysTimer.c ****             }
 999:VS4210/SysTimer.c ****             
1000:VS4210/SysTimer.c ****             break;
1001:VS4210/SysTimer.c **** #endif // End of #if(_D1_INPUT_PORT_TYPE == _D1_MHL_PORT)
1002:VS4210/SysTimer.c **** 
1003:VS4210/SysTimer.c **** #if((_DCC_HISTOGRM_INFO == _ON) && (_DCC_HISTOGRAM_THD_CHANGE == _ON))
1004:VS4210/SysTimer.c ****         case _SCALER_TIMER_EVENT_DCC_HISTOGRAM_THD_CHANGE:
1005:VS4210/SysTimer.c ****             ScalerColorDCCChangeHistogramThd();            
1006:VS4210/SysTimer.c ****             MCUTimerReactiveTimerEvent((WORD)(((DWORD)_PANEL_DH_TOTAL * _PANEL_DV_TOTAL * 2) / GET_
1007:VS4210/SysTimer.c **** 
1008:VS4210/SysTimer.c ****             break;
1009:VS4210/SysTimer.c **** #endif
1010:VS4210/SysTimer.c **** 
1011:VS4210/SysTimer.c ****         default:
1012:VS4210/SysTimer.c ****             break;
1013:VS4210/SysTimer.c ****     }    
1014:VS4210/SysTimer.c **** 	#endif
1015:VS4210/SysTimer.c **** }
1016:VS4210/SysTimer.c **** 
1017:VS4210/SysTimer.c **** 
1018:VS4210/SysTimer.c **** //--------------------------------------------------
1019:VS4210/SysTimer.c **** // Description  : Timer Handler
1020:VS4210/SysTimer.c **** // Input Value  : None
1021:VS4210/SysTimer.c **** // Output Value : None
1022:VS4210/SysTimer.c **** //--------------------------------------------------
1023:VS4210/SysTimer.c **** void SysTimerHandler(void)
1024:VS4210/SysTimer.c **** {
1025:VS4210/SysTimer.c ****     BYTE ucTimerEventIndex = 0;
1026:VS4210/SysTimer.c ****     BYTE ucTimerEventID = 0;    
1027:VS4210/SysTimer.c ****     WORD usPresentTime = 0;
1028:VS4210/SysTimer.c **** 
1029:VS4210/SysTimer.c ****     for(ucTimerEventIndex = 0; ucTimerEventIndex < _TIMER_EVENT_COUNT; ucTimerEventIndex++)
1030:VS4210/SysTimer.c ****     {
1031:VS4210/SysTimer.c ****         usPresentTime = MCUTimerGetTimerCounter();
1032:VS4210/SysTimer.c **** 
1033:VS4210/SysTimer.c ****         if(MCUTimerCheckEventValid(ucTimerEventIndex) == _FALSE)
1034:VS4210/SysTimer.c ****         {
1035:VS4210/SysTimer.c ****             continue;
1036:VS4210/SysTimer.c ****         }         
1037:VS4210/SysTimer.c ****         
1038:VS4210/SysTimer.c ****         if(usPresentTime > MCUTimerGetEventTime(ucTimerEventIndex))
1039:VS4210/SysTimer.c ****         {
1040:VS4210/SysTimer.c ****             MCUTimerClrEventValid(ucTimerEventIndex);
1041:VS4210/SysTimer.c **** 
1042:VS4210/SysTimer.c ****             // Get Event ID From Event Index
1043:VS4210/SysTimer.c ****             ucTimerEventID = MCUTimerGetEventID(ucTimerEventIndex);
1044:VS4210/SysTimer.c ****             
1045:VS4210/SysTimer.c ****             if(ucTimerEventID < _USER_TIMER_EVENT_END)
1046:VS4210/SysTimer.c ****             {
1047:VS4210/SysTimer.c ****                 UserInterfaceTimerEventProc(ucTimerEventID);
1048:VS4210/SysTimer.c ****                 
ARM GAS  /tmp/ccFrvWrx.s 			page 34


1049:VS4210/SysTimer.c ****                 continue;
1050:VS4210/SysTimer.c ****             }
1051:VS4210/SysTimer.c **** 
1052:VS4210/SysTimer.c ****             if(ucTimerEventID < _SYSTEM_TIMER_EVENT_END)
1053:VS4210/SysTimer.c ****             {
1054:VS4210/SysTimer.c ****                 SysTimerEventProc(ucTimerEventID);
1055:VS4210/SysTimer.c ****                 
1056:VS4210/SysTimer.c ****                 continue;
1057:VS4210/SysTimer.c ****             }
1058:VS4210/SysTimer.c ****             
1059:VS4210/SysTimer.c ****          //   MCUTimerEventProc(ucTimerEventID);
1060:VS4210/SysTimer.c ****         }
1061:VS4210/SysTimer.c ****     }
1062:VS4210/SysTimer.c **** 
1063:VS4210/SysTimer.c **** }
1064:VS4210/SysTimer.c **** 
1065:VS4210/SysTimer.c **** //--------------------------------------------------
1066:VS4210/SysTimer.c **** // Description  : Timer Event Process
1067:VS4210/SysTimer.c **** // Input Value  : enumEventID --> Event to be processed
1068:VS4210/SysTimer.c **** // Output Value : None
1069:VS4210/SysTimer.c **** //--------------------------------------------------
1070:VS4210/SysTimer.c **** BYTE led_Flag=0;
1071:VS4210/SysTimer.c **** void SysTimerEventProc(EnumSystemTimerEventID enumEventID)
1072:VS4210/SysTimer.c **** {
 850              		.loc 1 1072 0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 0
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 854              	.LVL81:
 855              		.loc 1 1072 0
 856 0000 08B5     		push	{r3, lr}
 857              	.LCFI8:
 858              		.cfi_def_cfa_offset 8
 859              		.cfi_offset 3, -8
 860              		.cfi_offset 14, -4
1073:VS4210/SysTimer.c **** 
1074:VS4210/SysTimer.c **** switch(enumEventID)
 861              		.loc 1 1074 0
 862 0002 3A38     		subs	r0, r0, #58
 863              	.LVL82:
 864 0004 0828     		cmp	r0, #8
 865 0006 00F2CB80 		bhi	.L88
 866 000a DFE800F0 		tbb	[pc, r0]
 867              	.L91:
 868 000e C6       		.byte	(.L90-.L91)/2
 869 000f C9       		.byte	(.L88-.L91)/2
 870 0010 05       		.byte	(.L92-.L91)/2
 871 0011 C9       		.byte	(.L88-.L91)/2
 872 0012 C9       		.byte	(.L88-.L91)/2
 873 0013 0D       		.byte	(.L93-.L91)/2
 874 0014 3C       		.byte	(.L94-.L91)/2
 875 0015 74       		.byte	(.L95-.L91)/2
 876 0016 BC       		.byte	(.L96-.L91)/2
 877 0017 00       		.p2align 1
 878              	.L92:
1075:VS4210/SysTimer.c ****    { 
1076:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_UART2_CHECK:
ARM GAS  /tmp/ccFrvWrx.s 			page 35


1077:VS4210/SysTimer.c **** 	  // DEBUG_MESSAGE(">");  
1078:VS4210/SysTimer.c **** 	  // RS2_tx(0x55);
1079:VS4210/SysTimer.c **** 	  COC_test();
 879              		.loc 1 1079 0
 880 0018 FFF7FEFF 		bl	COC_test
 881              	.LVL83:
1080:VS4210/SysTimer.c **** 	   MCUTimerActiveTimerEvent(SEC(2), _SYSTEM_TIMER_EVENT_UART2_CHECK);//for test
 882              		.loc 1 1080 0
 883 001c 4FF4FA60 		mov	r0, #2000
 884 0020 3C21     		movs	r1, #60
 885 0022 FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 886              	.LVL84:
1081:VS4210/SysTimer.c **** 	     break;
 887              		.loc 1 1081 0
 888 0026 08BD     		pop	{r3, pc}
 889              	.L93:
1082:VS4210/SysTimer.c **** 		 #if 0
1083:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_GRN_ON:
1084:VS4210/SysTimer.c **** 	 PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON);
1085:VS4210/SysTimer.c **** 	break;
1086:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_GRN_OFF:
1087:VS4210/SysTimer.c **** 	   PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF);
1088:VS4210/SysTimer.c **** 	break;
1089:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_RED_ON:	
1090:VS4210/SysTimer.c ****    	PowerLED(_SYSTEM_TIMER_EVENT_RED_ON);
1091:VS4210/SysTimer.c **** 	break;
1092:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_RED_OFF:
1093:VS4210/SysTimer.c ****    		PowerLED(_SYSTEM_TIMER_EVENT_RED_OFF);
1094:VS4210/SysTimer.c ****    	break;
1095:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_GRN_RED_ON:
1096:VS4210/SysTimer.c ****    		PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_ON);
1097:VS4210/SysTimer.c ****    	break;
1098:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_GRN_BLINK:
1099:VS4210/SysTimer.c **** 	   PowerLED(_SYSTEM_TIMER_EVENT_GRN_BLINK);
1100:VS4210/SysTimer.c ****      MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_BLINK);
1101:VS4210/SysTimer.c **** 
1102:VS4210/SysTimer.c ****    	break;
1103:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_RED_BLINK:
1104:VS4210/SysTimer.c **** 	   PowerLED(_SYSTEM_TIMER_EVENT_RED_BLINK);
1105:VS4210/SysTimer.c ****      MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_RED_BLINK);
1106:VS4210/SysTimer.c **** 
1107:VS4210/SysTimer.c ****    	break;	
1108:VS4210/SysTimer.c ****   case _SYSTEM_TIMER_EVENT_GRN_RED_BLINK:
1109:VS4210/SysTimer.c ****   	 PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_BLINK);
1110:VS4210/SysTimer.c ****      MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_RED_BLINK);
1111:VS4210/SysTimer.c **** 
1112:VS4210/SysTimer.c **** 	 break; 
1113:VS4210/SysTimer.c ****    case _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK:
1114:VS4210/SysTimer.c **** 	  PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK);
1115:VS4210/SysTimer.c **** 	  MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK);
1116:VS4210/SysTimer.c **** 
1117:VS4210/SysTimer.c **** 	  break; 
1118:VS4210/SysTimer.c ****     case _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE:	
1119:VS4210/SysTimer.c **** 		/*
1120:VS4210/SysTimer.c **** 	SET_BATTERY_CAPACITY(GetBatteryVoltage());
1121:VS4210/SysTimer.c **** 	       if(GET_BATTERY_CAPACITY()<10)
1122:VS4210/SysTimer.c **** 		   	SET_BATTERY_STATE(_BATT_STATUS_AC_MODE);
ARM GAS  /tmp/ccFrvWrx.s 			page 36


1123:VS4210/SysTimer.c **** 		else if(GET_BATTERY_CAPACITY()<256)
1124:VS4210/SysTimer.c **** 			SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL1);
1125:VS4210/SysTimer.c **** 		else if((GET_BATTERY_CAPACITY()>256)&&(GET_BATTERY_CAPACITY()<512))
1126:VS4210/SysTimer.c **** 			SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL2);
1127:VS4210/SysTimer.c **** 		else if((GET_BATTERY_CAPACITY()>512)&&(GET_BATTERY_CAPACITY()<768))
1128:VS4210/SysTimer.c **** 			SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL3);	
1129:VS4210/SysTimer.c **** 		else 		
1130:VS4210/SysTimer.c **** 			SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL4);
1131:VS4210/SysTimer.c **** 					
1132:VS4210/SysTimer.c **** 		//BATERY_STAT=GET_BATTERY_STATE();
1133:VS4210/SysTimer.c **** 		MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);
1134:VS4210/SysTimer.c **** 		*/
1135:VS4210/SysTimer.c **** 		MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
1136:VS4210/SysTimer.c **** 		break;
1137:VS4210/SysTimer.c ****     case _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE:
1138:VS4210/SysTimer.c **** 		DEBUG_MESSAGE("\r\nPOWER key pressed");
1139:VS4210/SysTimer.c **** 		  break;
1140:VS4210/SysTimer.c ****     case _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE:
1141:VS4210/SysTimer.c **** 		//Printf("(BTH)");
1142:VS4210/SysTimer.c **** 		/*
1143:VS4210/SysTimer.c **** 		BatteryBTH=GetBatteryBTH();
1144:VS4210/SysTimer.c **** 
1145:VS4210/SysTimer.c **** 			if(BatteryBTH<50) 
1146:VS4210/SysTimer.c **** 			{
1147:VS4210/SysTimer.c **** 			SET_BTH_STATE(_BATT_STATUS_TEMP_HIGH);  
1148:VS4210/SysTimer.c **** 
1149:VS4210/SysTimer.c **** 			if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_STOP_CHARGE)
1150:VS4210/SysTimer.c **** 			MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);	
1151:VS4210/SysTimer.c **** 			
1152:VS4210/SysTimer.c **** 			}
1153:VS4210/SysTimer.c **** 		else if(BatteryBTH>768)
1154:VS4210/SysTimer.c **** 			SET_BTH_STATE(_BATT_STATUS_TEMP_LOW);				
1155:VS4210/SysTimer.c **** 		else
1156:VS4210/SysTimer.c **** 			{
1157:VS4210/SysTimer.c **** 			SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);				
1158:VS4210/SysTimer.c **** 			}
1159:VS4210/SysTimer.c **** 
1160:VS4210/SysTimer.c **** 			if(GET_BTH_STATE()!=_BATT_STATUS_TEMP_NORMAL)
1161:VS4210/SysTimer.c **** 			SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);//for test		
1162:VS4210/SysTimer.c **** 	*/
1163:VS4210/SysTimer.c **** 		MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE);
1164:VS4210/SysTimer.c **** 		break;
1165:VS4210/SysTimer.c ****     case _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO:
1166:VS4210/SysTimer.c **** 		DEBUG_MESSAGE("\r\n(WDT kick over 10Second, Reboot DVR)");	
1167:VS4210/SysTimer.c **** 		MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);	
1168:VS4210/SysTimer.c **** 		break;
1169:VS4210/SysTimer.c ****     case _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE:
1170:VS4210/SysTimer.c **** 			{
1171:VS4210/SysTimer.c **** /*
1172:VS4210/SysTimer.c **** 				DEBUG_MESSAGE("(AC_MODE)");
1173:VS4210/SysTimer.c **** 				if((GET_ADAP_12())&&(GET_AC_PLUG()==0))
1174:VS4210/SysTimer.c **** 			     	{			     	
1175:VS4210/SysTimer.c **** 						SET_AC_PLUG(); 
1176:VS4210/SysTimer.c **** 
1177:VS4210/SysTimer.c **** 						if(GET_POWER_STATUS()==_POWER_STATUS_NORMAL)
1178:VS4210/SysTimer.c **** 						{
1179:VS4210/SysTimer.c **** 							if(GET_BTH_STATE()!=_BATT_STATUS_TEMP_HIGH)
ARM GAS  /tmp/ccFrvWrx.s 			page 37


1180:VS4210/SysTimer.c **** 					   		MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE);	
1181:VS4210/SysTimer.c **** 							else
1182:VS4210/SysTimer.c **** 							MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);		
1183:VS4210/SysTimer.c **** 						}
1184:VS4210/SysTimer.c **** 						else if(GET_POWER_STATUS()==_POWER_STATUS_SAVING)
1185:VS4210/SysTimer.c **** 							{
1186:VS4210/SysTimer.c **** 								if(GET_BTH_STATE()!=_BATT_STATUS_TEMP_HIGH)
1187:VS4210/SysTimer.c **** 								MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_BATT_HIGH_CHARGE);	
1188:VS4210/SysTimer.c **** 								else
1189:VS4210/SysTimer.c **** 								MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);	
1190:VS4210/SysTimer.c **** 							}
1191:VS4210/SysTimer.c **** 				MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);	
1192:VS4210/SysTimer.c **** 			     	}
1193:VS4210/SysTimer.c **** 				else if((GET_ADAP_12()==0)&&(GET_AC_PLUG()))
1194:VS4210/SysTimer.c **** 					{
1195:VS4210/SysTimer.c **** 					CLR_AC_PLUG();			
1196:VS4210/SysTimer.c **** 					MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);	
1197:VS4210/SysTimer.c **** 					MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);
1198:VS4210/SysTimer.c **** 					}
1199:VS4210/SysTimer.c **** 
1200:VS4210/SysTimer.c **** */
1201:VS4210/SysTimer.c **** 				//if(GET_AC_PLUG())
1202:VS4210/SysTimer.c **** 				//DEBUG_MESSAGE("(AON)");
1203:VS4210/SysTimer.c **** 				//else				
1204:VS4210/SysTimer.c **** 				//DEBUG_MESSAGE("(AOFF)");
1205:VS4210/SysTimer.c **** 				
1206:VS4210/SysTimer.c ****     			}
1207:VS4210/SysTimer.c **** 		break;
1208:VS4210/SysTimer.c **** 		case     _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE:
1209:VS4210/SysTimer.c **** 			
1210:VS4210/SysTimer.c **** 			DEBUG_MESSAGE("(BATT_MODE)");
1211:VS4210/SysTimer.c **** 			/*
1212:VS4210/SysTimer.c **** 			if((GET_ADAP_12())&&(GET_AC_PLUG()==0))
1213:VS4210/SysTimer.c **** 			     	{
1214:VS4210/SysTimer.c **** 			     	SET_AC_PLUG(); 
1215:VS4210/SysTimer.c **** 				MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);
1216:VS4210/SysTimer.c **** 				}
1217:VS4210/SysTimer.c **** 				else 
1218:VS4210/SysTimer.c **** 					{
1219:VS4210/SysTimer.c **** 				      MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);
1220:VS4210/SysTimer.c **** 					}
1221:VS4210/SysTimer.c **** 				*/
1222:VS4210/SysTimer.c **** 			break;
1223:VS4210/SysTimer.c **** 			#endif
1224:VS4210/SysTimer.c **** 			/*
1225:VS4210/SysTimer.c ****      	case _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE:	
1226:VS4210/SysTimer.c **** 			//	if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_LOW_CHARGE)
1227:VS4210/SysTimer.c **** 			//	UserInterfacePowerSwitch(_POWER_ACTION_BATT_TO_LOW_CURRENT_CHARGE);
1228:VS4210/SysTimer.c **** 		break;
1229:VS4210/SysTimer.c **** 	case  _SYSTEM_TIMER_EVENT_BATT_HIGH_CHARGE:  	
1230:VS4210/SysTimer.c **** 			//	if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_HIGH_CHARGE)
1231:VS4210/SysTimer.c **** 			//	UserInterfacePowerSwitch(_POWER_ACTION_BATT_TO_HIGH_CURRENT_CHARGE);
1232:VS4210/SysTimer.c **** 		break;
1233:VS4210/SysTimer.c **** 	case  _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE: 	
1234:VS4210/SysTimer.c **** 			//	if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_STOP_CHARGE)
1235:VS4210/SysTimer.c **** 			//	UserInterfacePowerSwitch(_POWER_ACTION_BATT_TO_NO_CHARGE);
1236:VS4210/SysTimer.c **** 			break;
ARM GAS  /tmp/ccFrvWrx.s 			page 38


1237:VS4210/SysTimer.c **** 			*/
1238:VS4210/SysTimer.c **** 			case _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER:
1239:VS4210/SysTimer.c **** 			
1240:VS4210/SysTimer.c **** 				second+=10;
 890              		.loc 1 1240 0
 891 0028 5E4A     		ldr	r2, .L114
 892 002a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 893 002c 0A33     		adds	r3, r3, #10
 894 002e DBB2     		uxtb	r3, r3
 895 0030 1370     		strb	r3, [r2]
1241:VS4210/SysTimer.c **** 			
1242:VS4210/SysTimer.c **** 				if(second==60)
 896              		.loc 1 1242 0
 897 0032 3C2B     		cmp	r3, #60
 898 0034 06D1     		bne	.L97
1243:VS4210/SysTimer.c **** 				{
1244:VS4210/SysTimer.c **** 					second=0;
 899              		.loc 1 1244 0
 900 0036 0022     		movs	r2, #0
 901 0038 5A4B     		ldr	r3, .L114
 902 003a 1A70     		strb	r2, [r3]
1245:VS4210/SysTimer.c **** 					minute++;
 903              		.loc 1 1245 0
 904 003c 5A4A     		ldr	r2, .L114+4
 905 003e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 906 0040 0133     		adds	r3, r3, #1
 907 0042 1370     		strb	r3, [r2]
 908              	.L97:
1246:VS4210/SysTimer.c **** 				}
1247:VS4210/SysTimer.c **** 			
1248:VS4210/SysTimer.c **** 				if(minute==60)
 909              		.loc 1 1248 0
 910 0044 584B     		ldr	r3, .L114+4
 911 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 912 0048 3C2B     		cmp	r3, #60
 913 004a 06D1     		bne	.L98
1249:VS4210/SysTimer.c **** 				{
1250:VS4210/SysTimer.c **** 					minute=0;
 914              		.loc 1 1250 0
 915 004c 0022     		movs	r2, #0
 916 004e 564B     		ldr	r3, .L114+4
 917 0050 1A70     		strb	r2, [r3]
1251:VS4210/SysTimer.c **** 					hour++;
 918              		.loc 1 1251 0
 919 0052 564A     		ldr	r2, .L114+8
 920 0054 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 921 0056 0133     		adds	r3, r3, #1
 922 0058 1370     		strb	r3, [r2]
 923              	.L98:
1252:VS4210/SysTimer.c **** 				}
1253:VS4210/SysTimer.c **** 			
1254:VS4210/SysTimer.c **** 				if(hour==24)
 924              		.loc 1 1254 0
 925 005a 544B     		ldr	r3, .L114+8
 926 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 927 005e 182B     		cmp	r3, #24
 928 0060 06D1     		bne	.L99
ARM GAS  /tmp/ccFrvWrx.s 			page 39


1255:VS4210/SysTimer.c **** 				{
1256:VS4210/SysTimer.c **** 					hour=0;
 929              		.loc 1 1256 0
 930 0062 0022     		movs	r2, #0
 931 0064 514B     		ldr	r3, .L114+8
 932 0066 1A70     		strb	r2, [r3]
1257:VS4210/SysTimer.c **** 					day++;
 933              		.loc 1 1257 0
 934 0068 514A     		ldr	r2, .L114+12
 935 006a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 936 006c 0133     		adds	r3, r3, #1
 937 006e 1370     		strb	r3, [r2]
 938              	.L99:
1258:VS4210/SysTimer.c **** 				}	
1259:VS4210/SysTimer.c **** 			BOOT_ISSUE=0;
 939              		.loc 1 1259 0
 940 0070 0022     		movs	r2, #0
 941 0072 504B     		ldr	r3, .L114+16
 942 0074 1A70     		strb	r2, [r3]
1260:VS4210/SysTimer.c **** 			ShowWorkingTimer();
 943              		.loc 1 1260 0
 944 0076 FFF7FEFF 		bl	ShowWorkingTimer
 945              	.LVL85:
1261:VS4210/SysTimer.c **** 			MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER);
 946              		.loc 1 1261 0
 947 007a 42F21070 		movw	r0, #10000
 948 007e 3F21     		movs	r1, #63
 949 0080 FFF7FEFF 		bl	MCUTimerActiveTimerEvent
 950              	.LVL86:
1262:VS4210/SysTimer.c **** 			 break;
 951              		.loc 1 1262 0
 952 0084 08BD     		pop	{r3, pc}
 953              	.L94:
1263:VS4210/SysTimer.c **** 		case _SYSTEM_TIMER_EVENT_VIDEO_RESET:
1264:VS4210/SysTimer.c **** 			
1265:VS4210/SysTimer.c **** 			#if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
1266:VS4210/SysTimer.c **** 			   	GraphicsPrint(GREEN,"(_TP_RESET)");
 954              		.loc 1 1266 0
 955 0086 0220     		movs	r0, #2
 956 0088 4B49     		ldr	r1, .L114+20
 957 008a FFF7FEFF 		bl	GraphicsPrint
 958              	.LVL87:
1267:VS4210/SysTimer.c **** 					GraphicsPrint(RED,"(mode[0]=%d)",(WORD)mode[0]);
 959              		.loc 1 1267 0
 960 008e 0120     		movs	r0, #1
 961 0090 4A49     		ldr	r1, .L114+24
 962 0092 4B4B     		ldr	r3, .L114+28
 963 0094 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 964 0096 FFF7FEFF 		bl	GraphicsPrint
 965              	.LVL88:
1268:VS4210/SysTimer.c **** 				#endif
1269:VS4210/SysTimer.c **** 
1270:VS4210/SysTimer.c **** 		if(SelectInputMode==1)
 966              		.loc 1 1270 0
 967 009a 4A4B     		ldr	r3, .L114+32
 968 009c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 969 009e 012B     		cmp	r3, #1
ARM GAS  /tmp/ccFrvWrx.s 			page 40


 970 00a0 25D1     		bne	.L100
1271:VS4210/SysTimer.c **** 		{
1272:VS4210/SysTimer.c **** 			if(  mode[0]==7 )
 971              		.loc 1 1272 0
 972 00a2 474B     		ldr	r3, .L114+28
 973 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 974 00a6 072B     		cmp	r3, #7
 975 00a8 04D1     		bne	.L101
1273:VS4210/SysTimer.c **** 				{
1274:VS4210/SysTimer.c **** 				//VXISI2CWrite(0x10,0x01);
1275:VS4210/SysTimer.c **** 				//VXISI2CWrite(0x9c,0x0A);	
1276:VS4210/SysTimer.c **** 				Set_Video_Loss_OSD(1,ON);
 976              		.loc 1 1276 0
 977 00aa 0120     		movs	r0, #1
 978 00ac 0146     		mov	r1, r0
 979 00ae FFF7FEFF 		bl	Set_Video_Loss_OSD
 980              	.LVL89:
 981 00b2 1CE0     		b	.L100
 982              	.L101:
1277:VS4210/SysTimer.c **** 				}
1278:VS4210/SysTimer.c **** 			else
1279:VS4210/SysTimer.c **** 				{
1280:VS4210/SysTimer.c **** 							
1281:VS4210/SysTimer.c **** 								if(TP_InputMode==5)
 983              		.loc 1 1281 0
 984 00b4 444B     		ldr	r3, .L114+36
 985 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 986 00b8 052B     		cmp	r3, #5
 987 00ba 02D1     		bne	.L102
1282:VS4210/SysTimer.c **** 									{
1283:VS4210/SysTimer.c **** 									TP_bt1120_720P_1080P_mode0_w0();
 988              		.loc 1 1283 0
 989 00bc FFF7FEFF 		bl	TP_bt1120_720P_1080P_mode0_w0
 990              	.LVL90:
 991 00c0 11E0     		b	.L103
 992              	.L102:
1284:VS4210/SysTimer.c **** 									}
1285:VS4210/SysTimer.c **** 								else if(TP_InputMode==6)
 993              		.loc 1 1285 0
 994 00c2 062B     		cmp	r3, #6
 995 00c4 02D1     		bne	.L104
1286:VS4210/SysTimer.c **** 									{
1287:VS4210/SysTimer.c **** 									TP_bt1120_1080P_1080P_mode0_w0();
 996              		.loc 1 1287 0
 997 00c6 FFF7FEFF 		bl	TP_bt1120_1080P_1080P_mode0_w0
 998              	.LVL91:
 999 00ca 0CE0     		b	.L103
 1000              	.L104:
1288:VS4210/SysTimer.c **** 									}
1289:VS4210/SysTimer.c **** 								else if(TP_InputMode==0)
 1001              		.loc 1 1289 0
 1002 00cc 13B9     		cbnz	r3, .L105
1290:VS4210/SysTimer.c **** 									{
1291:VS4210/SysTimer.c **** 									TP_bt1120_NTSC_1080P_mode0_w0();
 1003              		.loc 1 1291 0
 1004 00ce FFF7FEFF 		bl	TP_bt1120_NTSC_1080P_mode0_w0
 1005              	.LVL92:
ARM GAS  /tmp/ccFrvWrx.s 			page 41


 1006 00d2 08E0     		b	.L103
 1007              	.L105:
1292:VS4210/SysTimer.c **** 									}
1293:VS4210/SysTimer.c **** 								else if(TP_InputMode==1)
 1008              		.loc 1 1293 0
 1009 00d4 012B     		cmp	r3, #1
 1010 00d6 02D1     		bne	.L106
1294:VS4210/SysTimer.c **** 									{
1295:VS4210/SysTimer.c **** 									TP_bt1120_PAL_1080P_mode0_w0();
 1011              		.loc 1 1295 0
 1012 00d8 FFF7FEFF 		bl	TP_bt1120_PAL_1080P_mode0_w0
 1013              	.LVL93:
 1014 00dc 03E0     		b	.L103
 1015              	.L106:
1296:VS4210/SysTimer.c **** 									}
1297:VS4210/SysTimer.c **** 								else
1298:VS4210/SysTimer.c **** 									VXISI2CWrite(0x10,0x01);
 1016              		.loc 1 1298 0
 1017 00de 1020     		movs	r0, #16
 1018 00e0 0121     		movs	r1, #1
 1019 00e2 FFF7FEFF 		bl	VXISI2CWrite
 1020              	.LVL94:
 1021              	.L103:
1299:VS4210/SysTimer.c **** 
1300:VS4210/SysTimer.c **** 								
1301:VS4210/SysTimer.c **** 								//VXISI2CWrite(0x32,0x80);
1302:VS4210/SysTimer.c **** 
1303:VS4210/SysTimer.c **** 				Set_Video_Loss_OSD(1,OFF);
 1022              		.loc 1 1303 0
 1023 00e6 0120     		movs	r0, #1
 1024 00e8 0021     		movs	r1, #0
 1025 00ea FFF7FEFF 		bl	Set_Video_Loss_OSD
 1026              	.LVL95:
 1027              	.L100:
1304:VS4210/SysTimer.c **** 				#if (_External_Sync==OFF)
1305:VS4210/SysTimer.c **** 				//SET_AHD_SYNC_PARA();	
1306:VS4210/SysTimer.c **** 				#endif
1307:VS4210/SysTimer.c **** 				}
1308:VS4210/SysTimer.c **** 		}	
1309:VS4210/SysTimer.c **** 
1310:VS4210/SysTimer.c **** 			BOOT_ISSUE=0;
 1028              		.loc 1 1310 0
 1029 00ee 0022     		movs	r2, #0
 1030 00f0 304B     		ldr	r3, .L114+16
 1031 00f2 1A70     		strb	r2, [r3]
1311:VS4210/SysTimer.c **** 		
1312:VS4210/SysTimer.c **** 			//MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_VIDEO_RESET);	
1313:VS4210/SysTimer.c **** 			break;
 1032              		.loc 1 1313 0
 1033 00f4 08BD     		pop	{r3, pc}
 1034              	.L95:
1314:VS4210/SysTimer.c **** 		case _SYSTEM_TIMER_EVENT_SET_VIDEO_LOSS:
1315:VS4210/SysTimer.c **** 			//	if((SelectInputMode==_HDMI_Input)&&(gHDMI_Index==0))
1316:VS4210/SysTimer.c **** 			//Set_Video_Loss_OSD(1,OFF);	
1317:VS4210/SysTimer.c **** 			#if 1
1318:VS4210/SysTimer.c **** switch(bVloss_Flag)
 1035              		.loc 1 1318 0
ARM GAS  /tmp/ccFrvWrx.s 			page 42


 1036 00f6 354B     		ldr	r3, .L114+40
 1037 00f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1038 00fa F3B1     		cbz	r3, .L108
 1039 00fc 012B     		cmp	r3, #1
 1040 00fe 3AD1     		bne	.L107
1319:VS4210/SysTimer.c **** {
1320:VS4210/SysTimer.c **** 	case ON:
1321:VS4210/SysTimer.c **** 			if(SelectInputMode==_HDMI_Input)
 1041              		.loc 1 1321 0
 1042 0100 304B     		ldr	r3, .L114+32
 1043 0102 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1044 0104 63B9     		cbnz	r3, .L110
1322:VS4210/SysTimer.c **** 				{
1323:VS4210/SysTimer.c **** 				VXISI2CWrite(0x10,(VXISI2CRead(0x10)&0x7F));
 1045              		.loc 1 1323 0
 1046 0106 1020     		movs	r0, #16
 1047 0108 FFF7FEFF 		bl	VXISI2CRead
 1048              	.LVL96:
 1049 010c 00F07F01 		and	r1, r0, #127
 1050 0110 1020     		movs	r0, #16
 1051 0112 FFF7FEFF 		bl	VXISI2CWrite
 1052              	.LVL97:
1324:VS4210/SysTimer.c **** 				VXISI2CWrite(0x9C,0x0A);	
 1053              		.loc 1 1324 0
 1054 0116 9C20     		movs	r0, #156
 1055 0118 0A21     		movs	r1, #10
 1056 011a FFF7FEFF 		bl	VXISI2CWrite
 1057              	.LVL98:
 1058 011e 2AE0     		b	.L107
 1059              	.L110:
1325:VS4210/SysTimer.c **** 				}		
1326:VS4210/SysTimer.c **** 			else 
1327:VS4210/SysTimer.c **** 				{
1328:VS4210/SysTimer.c **** 				VXISI2CWrite(0x10,(VXISI2CRead(0x10)&0xFE));
 1060              		.loc 1 1328 0
 1061 0120 1020     		movs	r0, #16
 1062 0122 FFF7FEFF 		bl	VXISI2CRead
 1063              	.LVL99:
 1064 0126 00F0FE01 		and	r1, r0, #254
 1065 012a 1020     		movs	r0, #16
 1066 012c FFF7FEFF 		bl	VXISI2CWrite
 1067              	.LVL100:
1329:VS4210/SysTimer.c **** 				VXISI2CWrite(0x9C,0x0A);	
 1068              		.loc 1 1329 0
 1069 0130 9C20     		movs	r0, #156
 1070 0132 0A21     		movs	r1, #10
 1071 0134 FFF7FEFF 		bl	VXISI2CWrite
 1072              	.LVL101:
 1073 0138 1DE0     		b	.L107
 1074              	.L108:
1330:VS4210/SysTimer.c **** 				}
1331:VS4210/SysTimer.c **** 			break;
1332:VS4210/SysTimer.c **** 
1333:VS4210/SysTimer.c **** 	case OFF:
1334:VS4210/SysTimer.c **** 				if(SelectInputMode==_HDMI_Input)
 1075              		.loc 1 1334 0
 1076 013a 224B     		ldr	r3, .L114+32
ARM GAS  /tmp/ccFrvWrx.s 			page 43


 1077 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1078 013e 6BB9     		cbnz	r3, .L111
1335:VS4210/SysTimer.c **** 				{
1336:VS4210/SysTimer.c **** 				VXISI2CWrite(0x10,(VXISI2CRead(0x10)|0x80));
 1079              		.loc 1 1336 0
 1080 0140 1020     		movs	r0, #16
 1081 0142 FFF7FEFF 		bl	VXISI2CRead
 1082              	.LVL102:
 1083 0146 60F07F01 		orn	r1, r0, #127
 1084 014a 1020     		movs	r0, #16
 1085 014c C9B2     		uxtb	r1, r1
 1086 014e FFF7FEFF 		bl	VXISI2CWrite
 1087              	.LVL103:
1337:VS4210/SysTimer.c **** 				VXISI2CWrite(0x9C,0x00);
 1088              		.loc 1 1337 0
 1089 0152 9C20     		movs	r0, #156
 1090 0154 0021     		movs	r1, #0
 1091 0156 FFF7FEFF 		bl	VXISI2CWrite
 1092              	.LVL104:
 1093 015a 0CE0     		b	.L107
 1094              	.L111:
1338:VS4210/SysTimer.c **** 				//SET_HDMI_SYNC_PARA();
1339:VS4210/SysTimer.c **** 				}		
1340:VS4210/SysTimer.c **** 			else
1341:VS4210/SysTimer.c **** 				{
1342:VS4210/SysTimer.c **** 				VXISI2CWrite(0x10,(VXISI2CRead(0x10)|0x81));
 1095              		.loc 1 1342 0
 1096 015c 1020     		movs	r0, #16
 1097 015e FFF7FEFF 		bl	VXISI2CRead
 1098              	.LVL105:
 1099 0162 60F07E01 		orn	r1, r0, #126
 1100 0166 1020     		movs	r0, #16
 1101 0168 C9B2     		uxtb	r1, r1
 1102 016a FFF7FEFF 		bl	VXISI2CWrite
 1103              	.LVL106:
1343:VS4210/SysTimer.c **** 				VXISI2CWrite(0x9C,0x00);
 1104              		.loc 1 1343 0
 1105 016e 9C20     		movs	r0, #156
 1106 0170 0021     		movs	r1, #0
 1107 0172 FFF7FEFF 		bl	VXISI2CWrite
 1108              	.LVL107:
 1109              	.L107:
1344:VS4210/SysTimer.c **** 				}
1345:VS4210/SysTimer.c **** 	
1346:VS4210/SysTimer.c **** 			break;
1347:VS4210/SysTimer.c **** 	
1348:VS4210/SysTimer.c **** 
1349:VS4210/SysTimer.c **** }
1350:VS4210/SysTimer.c **** #endif
1351:VS4210/SysTimer.c **** 
1352:VS4210/SysTimer.c **** 				BOOT_ISSUE=0;
 1110              		.loc 1 1352 0
 1111 0176 0022     		movs	r2, #0
 1112 0178 0E4B     		ldr	r3, .L114+16
 1113 017a 1A70     		strb	r2, [r3]
1353:VS4210/SysTimer.c **** 				VXISI2CWrite(0x32,0x80);
 1114              		.loc 1 1353 0
ARM GAS  /tmp/ccFrvWrx.s 			page 44


 1115 017c 3220     		movs	r0, #50
 1116 017e 8021     		movs	r1, #128
 1117 0180 FFF7FEFF 		bl	VXISI2CWrite
 1118              	.LVL108:
1354:VS4210/SysTimer.c **** 			break;
 1119              		.loc 1 1354 0
 1120 0184 08BD     		pop	{r3, pc}
 1121              	.L96:
1355:VS4210/SysTimer.c **** 		case _SYSTEM_TIMER_EVENT_SET_EMBEDDED_SYNC:
1356:VS4210/SysTimer.c **** 			//HS_Select_Win(1);
1357:VS4210/SysTimer.c **** 			
1358:VS4210/SysTimer.c **** 			if(SelectInputMode==1)
 1122              		.loc 1 1358 0
 1123 0186 0F4B     		ldr	r3, .L114+32
 1124 0188 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1125 018a 012B     		cmp	r3, #1
 1126 018c 02D1     		bne	.L112
1359:VS4210/SysTimer.c **** 				{			
1360:VS4210/SysTimer.c **** 				SET_AHD_SYNC_PARA();
 1127              		.loc 1 1360 0
 1128 018e FFF7FEFF 		bl	SET_AHD_SYNC_PARA
 1129              	.LVL109:
 1130 0192 08BD     		pop	{r3, pc}
 1131              	.L112:
1361:VS4210/SysTimer.c **** 				}
1362:VS4210/SysTimer.c **** 			else{	
1363:VS4210/SysTimer.c **** 				//HS_Select_Win(0);
1364:VS4210/SysTimer.c **** 				SET_HDMI_SYNC_PARA();
 1132              		.loc 1 1364 0
 1133 0194 FFF7FEFF 		bl	SET_HDMI_SYNC_PARA
 1134              	.LVL110:
 1135 0198 08BD     		pop	{r3, pc}
 1136              	.L90:
1365:VS4210/SysTimer.c **** 				}
1366:VS4210/SysTimer.c **** 			//MCUTimerActiveTimerEvent( SEC(2),_SYSTEM_TIMER_EVENT_SET_EMBEDDED_SYNC);	
1367:VS4210/SysTimer.c **** 			break;
1368:VS4210/SysTimer.c **** 			case _SYSTEM_TIMER_EVENT_BOOT_VIDEO_DETECT:
1369:VS4210/SysTimer.c **** 				BOOT_ISSUE=0;			
 1137              		.loc 1 1369 0
 1138 019a 0022     		movs	r2, #0
 1139 019c 054B     		ldr	r3, .L114+16
 1140 019e 1A70     		strb	r2, [r3]
 1141              	.L88:
 1142 01a0 08BD     		pop	{r3, pc}
 1143              	.L115:
 1144 01a2 00BF     		.align	2
 1145              	.L114:
 1146 01a4 00000000 		.word	.LANCHOR5
 1147 01a8 00000000 		.word	.LANCHOR4
 1148 01ac 00000000 		.word	.LANCHOR3
 1149 01b0 00000000 		.word	.LANCHOR2
 1150 01b4 00000000 		.word	BOOT_ISSUE
 1151 01b8 2C010000 		.word	.LC5
 1152 01bc 38010000 		.word	.LC6
 1153 01c0 00000000 		.word	mode
 1154 01c4 00000000 		.word	SelectInputMode
 1155 01c8 00000000 		.word	TP_InputMode
ARM GAS  /tmp/ccFrvWrx.s 			page 45


 1156 01cc 00000000 		.word	bVloss_Flag
 1157              		.cfi_endproc
 1158              	.LFE81:
 1160              		.section	.text.SysTimerHandler,"ax",%progbits
 1161              		.align	2
 1162              		.global	SysTimerHandler
 1163              		.thumb
 1164              		.thumb_func
 1166              	SysTimerHandler:
 1167              	.LFB80:
1024:VS4210/SysTimer.c **** {
 1168              		.loc 1 1024 0
 1169              		.cfi_startproc
 1170              		@ args = 0, pretend = 0, frame = 0
 1171              		@ frame_needed = 0, uses_anonymous_args = 0
 1172 0000 38B5     		push	{r3, r4, r5, lr}
 1173              	.LCFI9:
 1174              		.cfi_def_cfa_offset 16
 1175              		.cfi_offset 3, -16
 1176              		.cfi_offset 4, -12
 1177              		.cfi_offset 5, -8
 1178              		.cfi_offset 14, -4
 1179              	.LVL111:
1029:VS4210/SysTimer.c ****     for(ucTimerEventIndex = 0; ucTimerEventIndex < _TIMER_EVENT_COUNT; ucTimerEventIndex++)
 1180              		.loc 1 1029 0
 1181 0002 0024     		movs	r4, #0
 1182 0004 19E0     		b	.L117
 1183              	.LVL112:
 1184              	.L119:
1031:VS4210/SysTimer.c ****         usPresentTime = MCUTimerGetTimerCounter();
 1185              		.loc 1 1031 0
 1186 0006 FFF7FEFF 		bl	MCUTimerGetTimerCounter
 1187              	.LVL113:
 1188 000a 0546     		mov	r5, r0
 1189              	.LVL114:
1033:VS4210/SysTimer.c ****         if(MCUTimerCheckEventValid(ucTimerEventIndex) == _FALSE)
 1190              		.loc 1 1033 0
 1191 000c 2046     		mov	r0, r4
 1192              	.LVL115:
 1193 000e FFF7FEFF 		bl	MCUTimerCheckEventValid
 1194              	.LVL116:
 1195 0012 80B1     		cbz	r0, .L118
1038:VS4210/SysTimer.c ****         if(usPresentTime > MCUTimerGetEventTime(ucTimerEventIndex))
 1196              		.loc 1 1038 0
 1197 0014 2046     		mov	r0, r4
 1198 0016 FFF7FEFF 		bl	MCUTimerGetEventTime
 1199              	.LVL117:
 1200 001a A842     		cmp	r0, r5
 1201 001c 0BD2     		bcs	.L118
1040:VS4210/SysTimer.c ****             MCUTimerClrEventValid(ucTimerEventIndex);
 1202              		.loc 1 1040 0
 1203 001e 2046     		mov	r0, r4
 1204 0020 FFF7FEFF 		bl	MCUTimerClrEventValid
 1205              	.LVL118:
1043:VS4210/SysTimer.c ****             ucTimerEventID = MCUTimerGetEventID(ucTimerEventIndex);
 1206              		.loc 1 1043 0
 1207 0024 2046     		mov	r0, r4
ARM GAS  /tmp/ccFrvWrx.s 			page 46


 1208 0026 FFF7FEFF 		bl	MCUTimerGetEventID
 1209              	.LVL119:
1045:VS4210/SysTimer.c ****             if(ucTimerEventID < _USER_TIMER_EVENT_END)
 1210              		.loc 1 1045 0
 1211 002a 1F28     		cmp	r0, #31
 1212 002c 03D9     		bls	.L118
1052:VS4210/SysTimer.c ****             if(ucTimerEventID < _SYSTEM_TIMER_EVENT_END)
 1213              		.loc 1 1052 0
 1214 002e 4228     		cmp	r0, #66
 1215 0030 01D8     		bhi	.L118
1054:VS4210/SysTimer.c ****                 SysTimerEventProc(ucTimerEventID);
 1216              		.loc 1 1054 0
 1217 0032 FFF7FEFF 		bl	SysTimerEventProc
 1218              	.LVL120:
 1219              	.L118:
1029:VS4210/SysTimer.c ****     for(ucTimerEventIndex = 0; ucTimerEventIndex < _TIMER_EVENT_COUNT; ucTimerEventIndex++)
 1220              		.loc 1 1029 0 discriminator 2
 1221 0036 0134     		adds	r4, r4, #1
 1222              	.LVL121:
 1223 0038 E4B2     		uxtb	r4, r4
 1224              	.LVL122:
 1225              	.L117:
1029:VS4210/SysTimer.c ****     for(ucTimerEventIndex = 0; ucTimerEventIndex < _TIMER_EVENT_COUNT; ucTimerEventIndex++)
 1226              		.loc 1 1029 0 is_stmt 0 discriminator 1
 1227 003a 092C     		cmp	r4, #9
 1228 003c E3D9     		bls	.L119
1063:VS4210/SysTimer.c **** }
 1229              		.loc 1 1063 0 is_stmt 1
 1230 003e 38BD     		pop	{r3, r4, r5, pc}
 1231              		.cfi_endproc
 1232              	.LFE80:
 1234              		.global	led_Flag
 1235              		.comm	g_stPowerInfo,2,4
 1236              		.global	second
 1237              		.global	minute
 1238              		.global	hour
 1239              		.global	day
 1240              		.global	month
 1241              		.global	year2
 1242              		.global	year1
 1243              		.comm	CameraVolt,1,1
 1244              		.global	WDT_Echo_Count
 1245              		.global	PSW_Flag
 1246              		.comm	BatteryVoltage,4,4
 1247              		.comm	BatteryBTH,4,4
 1248              		.comm	g_stTimerEvent,80,4
 1249              		.global	g_usTimerCounter
 1250              		.global	tic05
 1251              		.global	tic04
 1252              		.global	tic03
 1253              		.global	tic02
 1254              		.global	g_bNotifyTimer0Int
 1255              		.comm	newInRes,4,4
 1256              		.section	.bss.tic03,"aw",%nobits
 1257              		.align	2
 1260              	tic03:
 1261 0000 00000000 		.space	4
ARM GAS  /tmp/ccFrvWrx.s 			page 47


 1262              		.section	.bss.tic02,"aw",%nobits
 1265              	tic02:
 1266 0000 00       		.space	1
 1267              		.section	.bss.led_Flag,"aw",%nobits
 1270              	led_Flag:
 1271 0000 00       		.space	1
 1272              		.section	.bss.tic04,"aw",%nobits
 1273              		.align	2
 1276              	tic04:
 1277 0000 00000000 		.space	4
 1278              		.section	.bss.tic05,"aw",%nobits
 1279              		.align	2
 1282              	tic05:
 1283 0000 00000000 		.space	4
 1284              		.section	.bss.minute,"aw",%nobits
 1285              		.set	.LANCHOR4,. + 0
 1288              	minute:
 1289 0000 00       		.space	1
 1290              		.section	.bss.PSW_Flag,"aw",%nobits
 1293              	PSW_Flag:
 1294 0000 00       		.space	1
 1295              		.section	.bss.WDT_Echo_Count,"aw",%nobits
 1298              	WDT_Echo_Count:
 1299 0000 00       		.space	1
 1300              		.section	.rodata.str1.4,"aMS",%progbits,1
 1301              		.align	2
 1302              	.LC0:
 1303 0000 4E6F204D 		.ascii	"No More Available Storage for Simultaneous Event!!!"
 1303      6F726520 
 1303      41766169 
 1303      6C61626C 
 1303      65205374 
 1304 0033 21212100 		.ascii	"!!!\000"
 1305 0037 00       		.space	1
 1306              	.LC1:
 1307 0038 0D0A5379 		.ascii	"\015\012System has been working for %d days, %d hou"
 1307      7374656D 
 1307      20686173 
 1307      20626565 
 1307      6E20776F 
 1308 0065 72732C20 		.ascii	"rs, %d minutes and %d seconds\000"
 1308      2564206D 
 1308      696E7574 
 1308      65732061 
 1308      6E642025 
 1309 0083 00       		.space	1
 1310              	.LC2:
 1311 0084 0D0A5379 		.ascii	"\015\012System has been working for %d hours, %d mi"
 1311      7374656D 
 1311      20686173 
 1311      20626565 
 1311      6E20776F 
 1312 00b1 6E757465 		.ascii	"nutes and %d seconds\000"
 1312      7320616E 
 1312      64202564 
 1312      20736563 
 1312      6F6E6473 
ARM GAS  /tmp/ccFrvWrx.s 			page 48


 1313 00c6 0000     		.space	2
 1314              	.LC3:
 1315 00c8 0D0A5379 		.ascii	"\015\012System has been working for %d minutes and "
 1315      7374656D 
 1315      20686173 
 1315      20626565 
 1315      6E20776F 
 1316 00f5 25642073 		.ascii	"%d seconds\000"
 1316      65636F6E 
 1316      647300
 1317              	.LC4:
 1318 0100 0D0A5379 		.ascii	"\015\012System has been working for %d seconds\000"
 1318      7374656D 
 1318      20686173 
 1318      20626565 
 1318      6E20776F 
 1319 0129 000000   		.space	3
 1320              	.LC5:
 1321 012c 285F5450 		.ascii	"(_TP_RESET)\000"
 1321      5F524553 
 1321      45542900 
 1322              	.LC6:
 1323 0138 286D6F64 		.ascii	"(mode[0]=%d)\000"
 1323      655B305D 
 1323      3D256429 
 1323      00
 1324              		.section	.bss.g_bNotifyTimer0Int,"aw",%nobits
 1325              		.align	2
 1326              		.set	.LANCHOR0,. + 0
 1329              	g_bNotifyTimer0Int:
 1330 0000 00000000 		.space	4
 1331              		.section	.bss.year1,"aw",%nobits
 1334              	year1:
 1335 0000 00       		.space	1
 1336              		.section	.bss.year2,"aw",%nobits
 1339              	year2:
 1340 0000 00       		.space	1
 1341              		.section	.bss.g_usTimerCounter,"aw",%nobits
 1342              		.align	2
 1343              		.set	.LANCHOR1,. + 0
 1346              	g_usTimerCounter:
 1347 0000 00000000 		.space	4
 1348              		.section	.bss.day,"aw",%nobits
 1349              		.set	.LANCHOR2,. + 0
 1352              	day:
 1353 0000 00       		.space	1
 1354              		.section	.bss.hour,"aw",%nobits
 1355              		.set	.LANCHOR3,. + 0
 1358              	hour:
 1359 0000 00       		.space	1
 1360              		.section	.bss.month,"aw",%nobits
 1363              	month:
 1364 0000 00       		.space	1
 1365              		.section	.bss.second,"aw",%nobits
 1366              		.set	.LANCHOR5,. + 0
 1369              	second:
 1370 0000 00       		.space	1
ARM GAS  /tmp/ccFrvWrx.s 			page 49


 1371              		.text
 1372              	.Letext0:
 1373              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1374              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1375              		.file 4 "VS4210/VXIS_Extern_Define.h"
 1376              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1377              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1378              		.file 7 "VS4210/printf.h"
 1379              		.file 8 "TP2824/tpinc/TP2802.h"
 1380              		.file 9 "Drivers/CMSIS/Include/core_cm3.h"
 1381              		.file 10 "VS4210/VX_OSD_Simple.h"
 1382              		.file 11 "VS4210/monitor.h"
 1383              		.file 12 "Inc/main.h"
 1384              		.file 13 "sw_i2c/VX_swi2c.h"
ARM GAS  /tmp/ccFrvWrx.s 			page 50


DEFINED SYMBOLS
                            *ABS*:0000000000000000 SysTimer.c
     /tmp/ccFrvWrx.s:19     .text.MCUTimerDelayXms:0000000000000000 $t
     /tmp/ccFrvWrx.s:24     .text.MCUTimerDelayXms:0000000000000000 MCUTimerDelayXms
     /tmp/ccFrvWrx.s:61     .text.MCUTimerDelayXms:0000000000000020 $d
     /tmp/ccFrvWrx.s:66     .text.MCUTimerGetEventTime:0000000000000000 $t
     /tmp/ccFrvWrx.s:71     .text.MCUTimerGetEventTime:0000000000000000 MCUTimerGetEventTime
     /tmp/ccFrvWrx.s:89     .text.MCUTimerGetEventTime:000000000000000c $d
                            *COM*:0000000000000050 g_stTimerEvent
     /tmp/ccFrvWrx.s:94     .text.MCUTimerGetEventID:0000000000000000 $t
     /tmp/ccFrvWrx.s:99     .text.MCUTimerGetEventID:0000000000000000 MCUTimerGetEventID
     /tmp/ccFrvWrx.s:117    .text.MCUTimerGetEventID:000000000000000c $d
     /tmp/ccFrvWrx.s:122    .text.MCUTimerClrEventValid:0000000000000000 $t
     /tmp/ccFrvWrx.s:127    .text.MCUTimerClrEventValid:0000000000000000 MCUTimerClrEventValid
     /tmp/ccFrvWrx.s:144    .text.MCUTimerClrEventValid:0000000000000010 $d
     /tmp/ccFrvWrx.s:149    .text.MCUTimerCheckEventValid:0000000000000000 $t
     /tmp/ccFrvWrx.s:154    .text.MCUTimerCheckEventValid:0000000000000000 MCUTimerCheckEventValid
     /tmp/ccFrvWrx.s:172    .text.MCUTimerCheckEventValid:000000000000000c $d
     /tmp/ccFrvWrx.s:177    .text.MCUTimerGetTimerCounter:0000000000000000 $t
     /tmp/ccFrvWrx.s:182    .text.MCUTimerGetTimerCounter:0000000000000000 MCUTimerGetTimerCounter
     /tmp/ccFrvWrx.s:211    .text.MCUTimerGetTimerCounter:0000000000000018 $d
     /tmp/ccFrvWrx.s:216    .text.MCUTimerCheckTimerEvent:0000000000000000 $t
     /tmp/ccFrvWrx.s:221    .text.MCUTimerCheckTimerEvent:0000000000000000 MCUTimerCheckTimerEvent
     /tmp/ccFrvWrx.s:306    .text.MCUTimerCheckTimerEvent:0000000000000064 $d
     /tmp/ccFrvWrx.s:312    .text.MCUTimerInitialTimerEvent:0000000000000000 $t
     /tmp/ccFrvWrx.s:317    .text.MCUTimerInitialTimerEvent:0000000000000000 MCUTimerInitialTimerEvent
     /tmp/ccFrvWrx.s:349    .text.MCUTimerInitialTimerEvent:000000000000001c $d
     /tmp/ccFrvWrx.s:354    .text.MCUTimerActiveTimerEvent:0000000000000000 $t
     /tmp/ccFrvWrx.s:359    .text.MCUTimerActiveTimerEvent:0000000000000000 MCUTimerActiveTimerEvent
     /tmp/ccFrvWrx.s:457    .text.MCUTimerActiveTimerEvent:000000000000006c $d
     /tmp/ccFrvWrx.s:463    .text.MCUTimerCancelTimerEvent:0000000000000000 $t
     /tmp/ccFrvWrx.s:468    .text.MCUTimerCancelTimerEvent:0000000000000000 MCUTimerCancelTimerEvent
     /tmp/ccFrvWrx.s:515    .text.MCUTimerCancelTimerEvent:0000000000000038 $d
     /tmp/ccFrvWrx.s:520    .text.MCUTimerReactiveTimerEvent:0000000000000000 $t
     /tmp/ccFrvWrx.s:525    .text.MCUTimerReactiveTimerEvent:0000000000000000 MCUTimerReactiveTimerEvent
     /tmp/ccFrvWrx.s:622    .text.MCUTimerReactiveTimerEvent:0000000000000078 $d
     /tmp/ccFrvWrx.s:627    .text.PowerLED:0000000000000000 $t
     /tmp/ccFrvWrx.s:632    .text.PowerLED:0000000000000000 PowerLED
     /tmp/ccFrvWrx.s:706    .text.PowerLED:0000000000000064 $d
     /tmp/ccFrvWrx.s:711    .text.UserInterfaceTimerEventProc:0000000000000000 $t
     /tmp/ccFrvWrx.s:716    .text.UserInterfaceTimerEventProc:0000000000000000 UserInterfaceTimerEventProc
     /tmp/ccFrvWrx.s:729    .text.ShowWorkingTimer:0000000000000000 $t
     /tmp/ccFrvWrx.s:734    .text.ShowWorkingTimer:0000000000000000 ShowWorkingTimer
     /tmp/ccFrvWrx.s:813    .text.ShowWorkingTimer:0000000000000064 $d
     /tmp/ccFrvWrx.s:825    .text.MCUTimerEventProc:0000000000000000 $t
     /tmp/ccFrvWrx.s:830    .text.MCUTimerEventProc:0000000000000000 MCUTimerEventProc
     /tmp/ccFrvWrx.s:843    .text.SysTimerEventProc:0000000000000000 $t
     /tmp/ccFrvWrx.s:848    .text.SysTimerEventProc:0000000000000000 SysTimerEventProc
     /tmp/ccFrvWrx.s:868    .text.SysTimerEventProc:000000000000000e $d
     /tmp/ccFrvWrx.s:1146   .text.SysTimerEventProc:00000000000001a4 $d
     /tmp/ccFrvWrx.s:1161   .text.SysTimerHandler:0000000000000000 $t
     /tmp/ccFrvWrx.s:1166   .text.SysTimerHandler:0000000000000000 SysTimerHandler
     /tmp/ccFrvWrx.s:1270   .bss.led_Flag:0000000000000000 led_Flag
                            *COM*:0000000000000002 g_stPowerInfo
     /tmp/ccFrvWrx.s:1369   .bss.second:0000000000000000 second
     /tmp/ccFrvWrx.s:1288   .bss.minute:0000000000000000 minute
     /tmp/ccFrvWrx.s:1358   .bss.hour:0000000000000000 hour
ARM GAS  /tmp/ccFrvWrx.s 			page 51


     /tmp/ccFrvWrx.s:1352   .bss.day:0000000000000000 day
     /tmp/ccFrvWrx.s:1363   .bss.month:0000000000000000 month
     /tmp/ccFrvWrx.s:1339   .bss.year2:0000000000000000 year2
     /tmp/ccFrvWrx.s:1334   .bss.year1:0000000000000000 year1
                            *COM*:0000000000000001 CameraVolt
     /tmp/ccFrvWrx.s:1298   .bss.WDT_Echo_Count:0000000000000000 WDT_Echo_Count
     /tmp/ccFrvWrx.s:1293   .bss.PSW_Flag:0000000000000000 PSW_Flag
                            *COM*:0000000000000004 BatteryVoltage
                            *COM*:0000000000000004 BatteryBTH
     /tmp/ccFrvWrx.s:1346   .bss.g_usTimerCounter:0000000000000000 g_usTimerCounter
     /tmp/ccFrvWrx.s:1282   .bss.tic05:0000000000000000 tic05
     /tmp/ccFrvWrx.s:1276   .bss.tic04:0000000000000000 tic04
     /tmp/ccFrvWrx.s:1260   .bss.tic03:0000000000000000 tic03
     /tmp/ccFrvWrx.s:1265   .bss.tic02:0000000000000000 tic02
     /tmp/ccFrvWrx.s:1329   .bss.g_bNotifyTimer0Int:0000000000000000 g_bNotifyTimer0Int
                            *COM*:0000000000000004 newInRes
     /tmp/ccFrvWrx.s:1257   .bss.tic03:0000000000000000 $d
     /tmp/ccFrvWrx.s:1266   .bss.tic02:0000000000000000 $d
     /tmp/ccFrvWrx.s:1271   .bss.led_Flag:0000000000000000 $d
     /tmp/ccFrvWrx.s:1273   .bss.tic04:0000000000000000 $d
     /tmp/ccFrvWrx.s:1279   .bss.tic05:0000000000000000 $d
     /tmp/ccFrvWrx.s:1289   .bss.minute:0000000000000000 $d
     /tmp/ccFrvWrx.s:1294   .bss.PSW_Flag:0000000000000000 $d
     /tmp/ccFrvWrx.s:1299   .bss.WDT_Echo_Count:0000000000000000 $d
     /tmp/ccFrvWrx.s:1301   .rodata.str1.4:0000000000000000 $d
     /tmp/ccFrvWrx.s:1325   .bss.g_bNotifyTimer0Int:0000000000000000 $d
     /tmp/ccFrvWrx.s:1335   .bss.year1:0000000000000000 $d
     /tmp/ccFrvWrx.s:1340   .bss.year2:0000000000000000 $d
     /tmp/ccFrvWrx.s:1342   .bss.g_usTimerCounter:0000000000000000 $d
     /tmp/ccFrvWrx.s:1353   .bss.day:0000000000000000 $d
     /tmp/ccFrvWrx.s:1359   .bss.hour:0000000000000000 $d
     /tmp/ccFrvWrx.s:1364   .bss.month:0000000000000000 $d
     /tmp/ccFrvWrx.s:1370   .bss.second:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccFrvWrx.s:877    .text.SysTimerEventProc:0000000000000017 $d
     /tmp/ccFrvWrx.s:877    .text.SysTimerEventProc:0000000000000018 $t

UNDEFINED SYMBOLS
Printf
HAL_GPIO_WritePin
GraphicsPrint
COC_test
Set_Video_Loss_OSD
TP_bt1120_720P_1080P_mode0_w0
TP_bt1120_1080P_1080P_mode0_w0
TP_bt1120_NTSC_1080P_mode0_w0
TP_bt1120_PAL_1080P_mode0_w0
VXISI2CWrite
VXISI2CRead
SET_AHD_SYNC_PARA
SET_HDMI_SYNC_PARA
BOOT_ISSUE
mode
SelectInputMode
TP_InputMode
bVloss_Flag
